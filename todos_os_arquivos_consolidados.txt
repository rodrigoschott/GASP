CONSOLIDAÇÃO DE 99 ARQUIVOS CONVERTIDOS



================================================================================
ARQUIVO: GASP DAO V1.44 (Update Overview) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

GASP_DynamicAdditiveOverlay(1.44)

- 1. ABP_Sandbox_DAO: Interpolation, Counter-Root Compensation Disconnected; Offset Root Bone Max Rotation Error set to 89 degrees (Caps Counter Rotation at 89 and then it will stop Counter Rotating to keep him grounded)

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Project Documentation: https://unreal-devop.gitbook.io/gasp-dynamicadditiveoverlay

=== TRANSCRIÇÃO ===

all right guys so you youall have been
riding me for two weeks now we have a
smooth uh very extremely responsive uh
AIM now so the uh downside of this is
that uh we we're we only stay grounded
uh when we're rotating on small angles
uh but if we if we start doing this
number then uh the Fe will start
sliding uh because the way that I did
it if we come over here to the anom
graph and you select this I don't know
why I never even considered doing this
before to be honest with you I already
knew what this did but basically the max
rotation error it tells it um how much
it's allowed to counter rotate the route
to keep him grounded uh if you set a
limit and you exceed that limit then
it'll stop accumulating uh accumulate
means counter rotate um it'll it'll stop
counter rotating to keep them in place
and it'll release it and allow allow his
feet to slide uh so I set it to 89 which
is right below 90 90 is our Max angle
for our aim offset that's the reason why
I set it to
89 if
you if you go into my update Dao data uh
right over here where the AIM offset is
um this is actually going to be uh
disconnected to uh for now uh so you can
reconnect
this if you and set
this back to
ne1 if you want to keep him gr if you
don't like that then you can set it back
I I'm showing you how to do that now uh
so for first off you're going to want to
uh hook this back up because this uh
prevents jerking whenever we reach our
limit and we're waiting on the
animation uh this right here pre
prevents the
wrapping uh from being
instantaneous uh
so that's what that's for and inside of
here this needs to be hooked up because
this is actually
subtracting uh uh the root off set from
this
uh to help prevent that jerking issue so
that's basically the rundown on it now
if you're
if if another player is watching you do
this obviously he's going to see you uh
he's he's going to see your feet sliding
when the user is doing it it's not
really that noticeable most of the time
unless you're deliberately looking down
and watching the feet uh and and you're
doing it at at at just the right rate
then then you may see it sliding but
it's going to be really hard for the
player to actually see that and it adds
a lot of responsiveness it basically
fixes all the problems as you can see
there's no wrap around now uh so that
was one of another complaint that
somebody was making and you see I'm
moving at like 50,000 G's over here and
uh and it's not breaking it so uh that
should tell you something you wanted a
competitive responsiveness and now we
got it
so also I doubt that anybody would even
notice if they are watching you and you
were uh moving and it did that so anyway
that's basically the rundown on it guys
I'm going to keep it like that I showed
you how to reverse it if you wanted to
and I'll see you in the next video

================================================================================
ARQUIVO: How Anatomy Effects Animation Retargeting (English_ASR)
================================================================================

=== DESCRIÇÃO ===

A technical analysis of things that are commonly overlooked or ignored.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

=== TRANSCRIÇÃO ===

all right guys I'm back with another
video so I'm going to discuss uh a
somewhat complicated topic to explain
but I'm going to try my best to explain
it to you guys it is something that a
lot of people struggle to wrap their
heads around I'm going to try to clear
that up in this I'm going to start off
with uh explaining how retargeting works
first of all
so uh whenever you
retarget an animation uh it it's done
based off of its base posos
so and the reason why is because
whenever you create an animation the
animations are stored as angular offsets
in reference to
the default
reference SL base pose of your character
so some people call it the default pose
some people call it the source pose some
people call it the base pose or the
reference pose it's all the same thing
it's the pose that starts in and
whenever you create an animation
uh the offsets of everything is in
relation to that
so
basically it would be like saying from
this right here I'm going to rotate it
45°
up so if his hand was down by his side
45 de would probably put put his arm
around where it is now if you rotated
his upper arm but if his upper arm
starts right here and you rotate at 45°
then it might put him in a t pose you
see what I'm saying
so with that in mind the the reference
pose is very important and that's why
unreal engines ik retargeter it allows
you to
and right now uh I'm already in editing
mode but you start off in run running
retarget and you can press this to go
into editing retarget pose and then you
can go and you can
modify uh the uh start pose of for the
character so yeah
so it's important to note that because
whenever you retarget an animation you
want them if you want to get the most
accurate retarget possible then you want
them to both start in the same pose so
what I normally do is I normally come in
here and I'll I'll normally go to this
an auto align align selected in children
and that aligns the source with the
Target that way
whenever we translate those animations
from the source to the Target the
translation will be more accurate
because of the source is in the exact
pose or exact starting position as the
target if it's not then you'll your
hands will end up in totally different
places with totally different
orientations uh so your arm might be
pointing up here instead of right here
you see what them say saying that's why
you want the poses to match so if the
poses match and everything uh if you did
everything right then you'll end up with
both the of the characters in basically
the same exact
pose now that's where Anatomy comes in
so this is the common misconception the
thing that most people don't think about
consider or
uh appre shate I guess but uh
basically Anatomy matters guys so if
your character has shorter arms then in
hand Precision is important for
you then that's a problem because even
if you get a perfect retarget on your
character your hand Precision is going
to be based off of how similar its
Anatomy is to the
others so if your AR if your arms on
your character are shorter than the arms
on the one you're retargeting from then
your hands are not going to end up in
the same place on the rifle for example
and the reason why is because it has no
uh knowledge of the rifle when you're
retargeting it the only thing it's
concerned about are the bones so it
translates these bone by bone it doesn't
not take into consideration the overall
picture it doesn't consider the offset
of of the left hand from the right hand
it doesn't consider that uh it only
translates the rotation on a per bone
basis and what that ends up coming out
to is it comes it ends up coming out to
both of these characters and basically
the same
pose uh this hand
is um
exactly where the other hand is the only
difference is that this one has shorter
arms so because it has shorter arms and
the rifle is Big the rifle didn't scale
down with it if it scaled down with it
then it wouldn't be a problem but the
rifle doesn't scale down because in
reality you can't shrink a rifle it's
made of metal and it's not going to
shrink
so your hand and ends up being in a
different spot in relation to the weapon
when he's holding the weapon because the
weapon is too big for this
character uh to be in that pose and
still have the hands in the same exact
place what does that mean it doesn't
mean that you can't have him hold the
rifle it means that he needs to hold the
rifle differently with different angles
which means that you're going to have to
modify this animation and you're going
to have to uh reposition his hand
so that he holds it
correctly that's the thing that a lot of
people don't understand a lot of people
think that there's some kind of
one-click solution for solving a problem
like this there is not a one-click
solution for solving a problem like this
how do you solve a problem like this you
modify the
animation that's the thing that people
don't like that's the thing that people
don't want they don't want to modify the
animation they just want to retarget it
and magically a shorter character with
shorter arms just happens to be holding
it perfectly it's not going to work it
doesn't work like that guys Anatomy is
the
enemy it's not going to let you do that
you're going to have to modify the
animation that's basically what this
video was about because a lot of people
they don't understand how retargeting
works and they don't understand that
Anatomy is important if your character
has a shorter forearm and a shorter
upper arm then your hand is going to end
up in a different place in relation to
uh the weapon whenever he's holding it
as you can see here there's probably
about four five maybe six inches of
difference between uh these two arms and
so his hand is nowhere near the same
place uh that the other hand is and yet
both hands are in the same
exact uh or at the same exact rotations
both have been R ated exactly the same
and the H and the weapon is connected to
the same bone with a zero offset on each
and the same rotation on
each that basically covers it guys I
don't know what else uh to tell you in
terms of
that that's just how it is Anatomy is
the enemy you're not going to be able to
get away with it you're going to have to
modify these
animations uh if your characters
anatomies or similar enough then you
could use the ik uh you could use the ik
stuff in
here uh
to force the hands to be exactly where
the other character's hands are but
remember if you have a short character
and you're forcing this character's hand
to be where that character's hand is
then I mean if you can imagine this this
character has short arms
uh it would look really funny in fact
I'll just go ahead
and attempt this real quick let me just
go into local mode this will be easier
on local
so it would be it would be much easier
to do this with an
actual ik re ik
solver but because it just automatically
solves these rotations for you so that
they end up in the same place
the problem is is that even if you do
this it's going to create another
problem even if one hand happens to be
able to
reach the other hand won't be able to
reach and its arm will be locked and and
it'll be reaching like it's trying to
reach that point but it just won't be
able to reach
it so if I hide this let me just hide
that then you end up in
[Applause]
this oops I Did It
Again you end up in this weird
situation where she's holding the weapon
like this
and that's basically what you would get
right here if you Force if you used the
ik solver to force the hands to be where
the other hands were you'd end up with
stuff like
this so I just wanted to show you that
because those are a lot of common
mistakes that people uh make a lot of
people think well I'll just use the ik
solver and I'll force his hands to be
where the other hand
of the other character are and then you
end up with something like this and
you're like oh well that won't work uh
and then a lot of people get confused
because when they translate the
animation from one character to the
other the the current
character his hands aren't in the same
place on the
weapon it's because of anatomy and
because we're We're translating this on
a per bone basis
there's no easy solution for this
there's no oneclick solution and I just
wanted to try to get that across to
people with this video

================================================================================
ARQUIVO: Quixel is Shutting Down (Get MegaScans From FAB) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

Clearing the disinformation in regards to MegaScan Assets

https://support.fab.com/s/article/Fab-Transition-FAQs

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

=== TRANSCRIÇÃO ===

all right guys so I decided to do a
video on this because there's a lot of
disinformation out there some people are
even uh referencing uh this FAQ uh site
I will leave this in the description the
problem is is that nobody's actually
reading through this properly uh so I
want to make it clear right now that
everybody that's downloading this uh
stuff uh spamming the and dsing the uh
quickel Mega skin servers they're doing
it for nothing and I'll explain to you
you using their own uh terminology
inside of this document so uh for one it
says you can now select a free
subscription and access unlimited Mega
scans through
quick.com and Bridge Under The Epic
content license until Fab launches so
that means that after Fab launches
you'll no longer be able to obtain those
through uh quick.com and bridge that
much is true uh
so that's why a lot of people are
scrambling and dosing their servers
right now uh I wouldn't be surprised if
some people ended up getting themselves
banned over it uh or getting their
accounts uh locked out uh
so please note that quick.com and Bridge
will eventually be sunset that means
that're they're going to be shutting
this down they'll more than likely give
us several months in advance letting us
know when they're actually going to shut
it down it's not going to be something
sudden but it could be sometime next
year when they shut it down uh I'm going
to assume that's probably going to be
the case
so uh as far as if you're going to be
able to uh transfer this over to Fab uh
only paid subscription plans so if you
purchased those Mega scans using actual
uh points uh then it will be transferred
over to Fab if you got the if you
acquired the assets for free uh via the
Unreal Engine subscription plan or under
the free trial of a quickle uh plan they
will not automatically transfer over to
Fab uh so in other
words yeah you're wasting your time if
you want these to be if you want these
access to this like permanently have
access to this uh then downloading it
Mass downloading it from here is a waste
of time they will uh shut
down quick.com and Bridge they will be
shutting those down I assumed as much
but a lot of people were uh passing
around a lot of misinformation I hope
this clears this up for you guys and
I'll see you later

================================================================================
ARQUIVO: Synty - ReRigging Char (Correcting Finger Weights) Part 2 (English_ASR)
================================================================================

=== DESCRIÇÃO ===

In this video I will give you a crash course on Weight Painting in Blender, we will be fixing the weights on the ReRigged Synty Character.

Part 3: https://youtu.be/IL3P-WAlROk

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

=== TRANSCRIÇÃO ===

all right guys so I know that I said we
were going to do this in unreal but I
decided not to because unreal's weight
painting tools are just a little janky I
don't like them uh and I'm just
unfamiliar with them and it's in my
opinion a little bit more difficult to
do it on unreal than it is in blender so
this isn't going to be a comprehensive
weight painting guide to blender so if
you want a comprehensive guide then you
can go watch videos dedicated uh by
people that
do primarily modeling and rigging and
stuff uh so anyway just go to file new
general if you haven't already after you
load it up and you select General then
it'll give you this just press uh just
press a to highlight all this and press
delete then we're going to go file
import
fbx and go to the folder where your CTI
character is I'm going to import it with
the UE import settings which means that
forward is y forward up is z up and the
primary axis is X the secondary is y I'm
going to import it like
that you'll have your character here uh
that's fine so what I'm going to do is
I'm going to go uh into pose mode I'm
going to select the skeleton first go
into pose
mode and then I'm going to select these
big bones and press h to hide them
them and now that you see that they're
all
gone now I'm going to go into object
mode I'm going to go to this running man
go to
viewport display and select in front so
that we can actually see
them
now we have a skeleton here and then we
have a mesh and under the mesh you'll
see this icon right here it's called
Data object data properties and under
here you see these these vertex groups
so basically these vertex groups are
just like weight paints um it's just a
collection of uh weighted values on
these
verts and if you go over here to this
icon right here show overlays and you
press this button next to it and you
select wire
frame right here you'll see the wire
frame and so these little where these
lines run together those are called uh
verts and if you select the mesh and go
into edit mode you can actually select
these verts
individually these things that run
between them the lines those are called
edges
and these right here are called
faces so I'm just going to come out of
here this is a a comprehensive guide
people so
anyway so for whatever reason this bone
right
here actually seems to
be I don't know it just the alignment of
it seems weird to me anyway it's not a
big deal
uh so if you select this smesh what you
have is you have these vertex groups and
these vertex groups are linked to these
bones and they tell those bones what
vers are weighted and by how much uh
basically how much they're influenced by
the rotation and location of these
bones uh and that's how weights work so
that's the crash the crash quartz what
we're going to do is we're going to
select the mesh and we're going to come
up here to this menu and select weight
paint and you'll see right now the leg
is selected and so it's showing the
weight weights of the leg uh the blue is
basically no weight and red or maybe
it's white I'm not 100% sure but I think
it's red red means that it's fully 100%
weighted and everything in between is
kind of like a gray scale of values
between zero and one so anyway we have
this draw where we can draw these uh if
we hold down control and and click uh
you'll see it removes it
and then we have this blur tool which
Smooths it out um it kind of averages
the the values between the bones and
that's basically the rundown of it we
only really need to use these two tools
right here to do
this so the first thing we're going to
do is we're going to find this right
hand group under here and you'll see if
you scroll up you'll see a hand R thumb
one R thumb two R so on and so forth
so we're going to select the pinky one R
and you'll see that it's actually only
weighted right here which is stupid I
don't know why so I'm just going to
delete that and you'll see it's
partially weighted up here which is also
stupid because we don't want that either
so I'm just going to delete all of
that you'll see it was also partially
weighted up here but the values were so
weak that you couldn't even see so I'm
just going to come over over here and
I'm just going to make sure that nothing
was left on the
arm and then what I'm going to do is I'm
going to with this draw selected I'm
just going to and I was holding down
control while I was dra clicking and
dragging to delete those by the way so
I'm just going to do this number
here I'm just going to click until it's
red and I'm going to make sure it's red
all along this line
okay and now I'm going to select the the
blur tool and I'm just going to blur
this and you'll see how it Smooths it
out and I'm doing this at the vertex
points because those those are the only
things that actually are
influenced
by the V the colors between those are
just the weights of how it scales across
those
but yeah that's basically it that's
about how you want it to look like for
the
knuckles now this may come out a little
bad because of the fact that there's no
faces there's no division between these
faces here there should be more faces
right here but they're just one big face
you see and because of that there's no
resolution here which which means that
the hand can't bend right here in a
natural way because it's too low poly uh
so that's
problematic the guy who made this he
didn't know what he was doing because if
he did then he wouldn't have the
topology of the hand wouldn't look like
this that's really bad topology probably
the worst topology I've ever seen on any
model
um so it's definitely not proper for
what we're trying to do here so just let
that be known we can go over here to the
Armature and press this eyeball to hide
the skeleton while we're doing this and
I'm going to hold down control and I'm
going to remove all the weights because
we this right here shouldn't be
influenced by the second bone of the
pinky none of that should
be and some of the arm is probably also
influenced it's probably just influenced
so weekly that it doesn't even
show so we're just going to remove all
of
that remove all
that now if we unhide
that you'll see this is the pinky two
bone where that ball is that's where the
actual uh main point of it is and so we
want we want this to be red all the way
across this line
we're just going to follow that
around just like
that and now we're going to blur
it you have to be careful bluring it
don't do it too
much because
this color down here represents the
amount of influence it's going to have
on this part of the
mesh we just want to kind of smooth it
out a little bit so that the transition
between is better you'll see this one
was really bad we're just going to we're
just read we're just going to re
completely redo all these weights
because they're they're horrible
and we're going to
remove that
influence that's probably pretty good
right there
actually and so what we want to do is we
want to blur
this right along here
now this still isn't going to come out
real great guys and I'm going to just be
blunt with you this is really really low
resolution uh I mean this is super low
resolution you're not going to get good
deformation out of a low resolution
model like this it's like insanely low
resolution not only is it low resolution
but the topology is just complete
garbage
so we're going to select this index
finger
here basically we're doing the same
thing this is uh it just did a it just
did a horrible job on
fingers it's hard to create a
procedural algorithm that just Nails it
on stuff like this uh I mean it does a
pretty good job considering but it's
just not good
enough um I wasn't holding down control
that entire
time you'll see them move a little bit
sometimes the weights are there but
they're just so weak that it's that you
can't even tell that they're
there so
anyway so that's this right here1
now this one will do a little bit
different so we want to smooth it right
here because it's going to have
influence on the thumb right here so we
want to blur
this all right
here and it may not be a bad idea to
blur up a little bit on this this side
and on this side as
well something like
that you might even blur it a little
right
there and then of course we're going to
blur it down
here we want even
distribution of these weights
all right so now we're going to do this
finger this is all
wrong let's just hold down
control and just remove
those and now
we'll weit these strongly right here at
this joint
hold down control and remove it right
there and then what we're going to do is
we're going to blur it
uh that one's almost
good our main concern is even
distribution actually this right here is
the end so actually I think this should
be yeah let's
do
that
yeah okay and we'll blur right
here and then
the
thumb actually
yeah so this one's going to be kind of
tricky I'm not sure I even want to mess
with that dumb one
bom because it's in such a bad spot if
you do this wrong right here on this
side then then whenever his thumb bends
outwards it'll cause this to to go in
inwards uh so
it may be best just to leave that like
it is or just completely remove those
weights as far as this though we can
remove its influence on this part of the
mesh let's
see so that's supposed to be this
bomb this this shouldn't be red right
here but we can make it red like right
here and then remove
the influence from this right
here and then we'll blur it
for more even
distribution and then
maybe yeah be careful right here
all
right now this one should definitely
be red down here but I think it should
be red up
here as
well and then let's blur it
I'm going to undo that
one all right now that's pretty much it
now you can mirror this uh these weights
over to the other side
um but I'm unfamiliar with that like I
said this isn't a comence of course I
don't do this inside of blender every
day uh it's not that difficult to do
though uh it's just trying to get the
weights properly waiting can be really
difficult waiting depends on a lot of
things it depends on topology and how
well you structured the topology as you
can see here this is actually a great uh
example of how bad topology can cause a
great deal of uh pain for animators or
riggers
uh but yeah so we can go out of weight
mode by coming up here and selecting
object mode and then we can select the
skeleton and go into pose mode and now
we can try
to rotate these and make sure that you
go from Global to local first up here
otherwise you won't be rotating along
the orientation of the bone oh what did
I just do I don't know I just undid it
though and then we'll select these bones
and rotate
them and considering the low topology
the low quality
uh uh topology that actually does not
look bad this is going to be the one
that we have the most problems with we
won't be able to bend it real
drastically or it'll cause a lot of
problems
but
yeah so that actually doesn't look too
bad considering but it looks like we
have a small problem right around this
vert right here where it's pulling these
in too much and so if we select this
[Music]
bone you'll see it seems like maybe this
bone has too much influence on these and
I believe that's what's causing
it
so let's go back into object mode select
the mesh and go to Weight paint
mode and we'll come over here
to the pinky pinky 01 and I'm thinking
maybe actually pinky1 needs more
influence down here so so what I'm going
to do is I'm going to select the blur
tool and it looks like it's not adding
enough to this to correct the
problem so let's try
this that still doesn't seem to correct
the
problem so we could add it to this like
that
and then go to the second one
here and maybe
remove uh by I just pressed shift and
did that and actually divided it the
weight by
two we could even like maybe just
instead of going up in here go down in
over
here and then we could blur this right
here and you can actually make this
bigger by pressing the bracket keys or
by going over here and if you do that
then uh the mesh inside of here will be
influenced don't make it too big though
obviously
so I'm just going to relax that a little
bit and relax
that and relax
this yeah so I mean that's probably
about as good as we're going to get it
and that's pretty good to be honest with
you so this is clipping inside the other
one that's kind of uh
difficult to
avoid we'll go back into object mode and
we'll
select this one and go into pose
mode and now we'll try rotating
this yeah no that's not too
bad considering
obviously the thumb has a limited range
of motion as is
so be aware of
that but yeah if we do
that you'll see that actually doesn't
look too bad I'm thinking it's a little
too weighted over here on this
um this uh bone right
here this second thumb bone is it has
too much influence right
here and so we're going to go back
into object mode
select that we're going to look for the
thumb two bone and you'll see it's red
right there for the thumb to we're just
going to blur
that to relieve some of the pull on it
and I'm going to blur
that I'm going to select thumb
one and I'm going to try to
increase the amount of
weight it
has right here
that's probably going to be about as
good as we get it something like
that that's probably too much right
there that should be
good all right guys uh that's basically
it you would just have to do the same
thing on the other hand I'll do that
offline but that's the video and next
we'll set this up inside of unreal use
in my uh Dynamic additive offset project
that I've
made all right guys
so I'm done with
line so after you're uh satisfied with
the
weights what you're going to do
is you're going to come back into object
mode and you're going to click
drag well just select the skeleton go to
toose mode and then click drag over all
the bonds and then go to pose clear
transform all and this will reset get it
back into its uh base pose I don't know
what I just did there I want to redo
that because I'm afraid I might have
accidentally clicked on
something so there's the
uh base pose
which it put it it put it in the ue4
pose but now we're not in the ue4 pose
okay so they must have
not maybe they didn't keep or something
on the timeline oh it's keyed okay never
mind so yeah I think that's I think
that's good I think that's
fine yeah so the weird kind of angle
that some of these bones are at on the
thumb I think that has to do with the
way it put it into the ue4 pose
okay so I guess if you drag scrub
through this timeline and go back to
frame one you'll see that at time
Z it has him in the ue4 pose but anyway
we reset that just to make sure so what
we're going to do now is we're going to
export
fbx I want to select my unreal preset
and uncheck select selected
objects because I want to export the
entire thing so you want y forward Z Up
and Under Armature X primary y secondary
geometry we want it to be face
smoothing and then we're going to come
back in here and I'm just going to
export this back
out I'm going to put a B on the end of
it so I know it's from
blender all right so in the next video
we'll set this up in
the um Dynamic additive offset project
that I put together

================================================================================
ARQUIVO: Synty - ReRigging Char (with AccuRig) Part 1 (English_ASR)
================================================================================

=== DESCRIÇÃO ===

Because of the Poor Design of the Synty Character Skeleton I highly recommend Re-Rigging it for use in Unreal Engine.
If you choose not too you will run into a lot of problems.

Part 2: https://youtu.be/hCTfIWACKc8

AccuRig Download: https://actorcore.reallusion.com/auto-rig/accurig

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

=== TRANSCRIÇÃO ===

all right guys so I'm back with another
video so a lot of people keep asking me
over and over again uh to show them how
to set up cinti characters so this is my
suggestion use ACU rig to completely rig
it because the guy that rigged it didn't
really do a real great job the problem
with that is that these fingers are real
weird on here and so ACU rig uh
struggles to actually rig them properly
so all you have to do is and I I
separated this because the sample pack
came with a characters. fbx and it had
multiple characters in it so I uh
separated the Mel by taking it into
blender and deleting the female uh mesh
from it and then you could just drag it
into here like this it'll load them up
and you'll be greeted with this so This
wants you to select the center line now
this is a comprehensive guide do using
acur so I'm not going to go into real
great depth on it but I'll tell you that
if you hover your mouse over these
you'll see what their uh keys are
they're hot Keys uh same with uh these
these right here are for the front side
top left bottom and back bottom does not
have a hotkey right here you can set it
from final render wireframe wireframe on
shaded and you can change the color of
the wireframe I'm going to use black for
now uh actually no I'm just gonna I'm
just going to leave it at gray and the
reason why is because we're going to be
looking through this in wireframe mode
every ever so
often now you have to be real careful
with this uh whenever you're doing the
fingers uh because that's the part that
can get messed up the
easiest you want to when you're in this
viewport and you're adjusting these
right here you want to be in symmetry
mode so that when you move one it moves
the the one on the other side so if I
adjust to this you'll see it's moving
that other one as well midpoint
placement hole mesh is what you want to
be in it'll uh Center it between the
front back and all that so it'll Center
it inside the
mesh the front part will probably place
it on the outside so uh I'm not exactly
sure how that works but it doesn't seem
to be strictly that it will place it on
the outside that that's not necessarily
what it does I think it just moves
it in relation to where it's at from the
perspective you're currently viewing it
from uh so that may be what that means
if you want to move it around on the
outside I think you just disable
midpoint placement and it'll just place
it on the
outside so anyway with midpoint
placement and whole mesh selected we're
going to move the hand back and if
you're not sure you can zoom in with the
mouse will right Mouse is how you pan uh
move around and I'm just going to place
it right here you can go into wireframe
mode and try to place it into the center
of this little circle here it's not it
doesn't look like a circle but that's uh
one of those lines is the back the other
is the front so I'll just place it in
between those
right here I'm just going to place that
in the center of this one which is the
elbow uh that's where the arm bends at
so that's where I want that to be at and
I'll just place that right there and
move this up here and I'm going to move
this up here where the neck
ends and you can go back into this mode
to see where all this is I might
actually move that right down here so
might move that right there
actually and you can look on the on the
right and it it's showing you where it
expects it to be placed at you know
right
here that may be it may be that this is
more appropriate right here
um for this we want to go into wireframe
mode
and place it right in the center of
these two lines right here if you press
s on your keyboard it'll take you into
the side view and you'll see this is
roughly in the center
here so you could press F on the
keyboard go back into front view and
maybe it would work better right here uh
that's centered on the actual kneecap
and it's still centered right here as
well you could probably actually bring
this back a little
bit don't bring it too far back uh you
want it to be kind of centered press F
and you'll see that when you do that it
screws stuff up and moves it off to the
side so press
s and then try doing that it's still
doing it damn it
you could just go like
this and try moving it like that but you
see it snapped
it okay you can't undo this either guys
uh so just be aware of
that and make sure that the one that you
have selected is the left and it's
actually on that side of the
body so for this it may be that we want
to
move it like
this and then mirror left to right and
now you'll
see okay that seems to be a
bug
yep okay
[Music]
oh okay disable midpoint placement for
this then go into the side viewport and
just kind of Center it right
there that actually seems to be what the
problem
is
yeah and then you can reenable it after
you're
done uh I'm going to reenable Symmetry
and I actually want this to be
let me go into g mode no let's go into
side
mode oops I Did It Again guess what
happened
yep disable this go into the side
view and then move
this there we
go and that's basically it I mean that's
about as easy as it's going to get to
rigging guys uh now this is the part
that's going to be a little
difficult I'm actually not sure if it
would be better to have four or five
fingers but he actually only has three
fingers I'm just wondering if maybe the
fingers would turn out better if we
actually uh stuck two finger joints
inside of that one big three finger
joint right here cuz that's actually the
size of three fingers like guy was
basically being lazy I guess and he
didn't want to have to rig this so he
just made it look more like a m than a
hand now you'll see that we have this
transform type selected and hierarchy
selected means you're only going to move
the selected one as you can see
hierarchy means you're going to move
everything that's a child of
it you see so this is a parent this is a
child of the that this is a child of
that this is a child of that that's how
it works so that you know but this right
here is the thumb and this is actually
the last finger so we're going to move
that over there and we need to okay
that's actually in the right spot but
this is
not and I'm going to go back into this
mode and now I'm going to turn actually
to Black because I can't see that gray
very well
and we actually don't want front part on
this we want a whole
mesh actually for the end ones we
probably do want front
part we want selected though if we have
it in hierarchy it'll move everything
and if you go into wireframe you'll see
that this is the bottom of that and
that's the top we can place it somewhere
in between
here and let's kind
of place it just slightly off to this
side here
last time I tried placing it more
centered and I had
problems so I'm going to try
to have this off to one side and I'm
hoping that if I have it over here off
to this side that it'll weight
everything properly this side didn't get
fully weighted last
time so that seems to be a problem with
uh with these cinti character cuz this
finger thing is so freaking
big yeah so what we're going to do
is rotate this guy and you'll see we
have some stragglers over here that is
unfortunate so we're going to go back
into we're going to press G
try to figure out where those stragglers
are right
here oops a damn I can't undo I hate
that okay
selected ah
selected
Jesus and I'm going to place these rough
y okay so I don't know
where the pinky finger one went so I can
select it from over
here oh here it is
I'm just trying to straighten these out
as much as
possible I actually want this to be a
little more forward than what I probably
think it should
be because uh because these are going to
be bending based off of the bottom of
the finger uh not so much the top
so I'm thinking if we place it more
towards the bottom part of the finger
that it'll probably Bend more
correctly we could try putting that one
closer
here so I've got mixed results with this
I've tried doing this several times and
I have uh had problems
each time but I
think if we keep these off to this side
it should waight this properly I'm just
hoping that doing that won't cause
waiting problems on this side if so then
it may actually make more sense to have
uh more I don't know they don't have
they don't give you a whole lot of
control inside of
here I'm going to disable this midpoint
placement because I want these to be on
the
outside and I'm going to select this and
rotate
it so that it's pointing outwards off
the surface
[Music]
normal oops
I think that's probably going to be
about about
good so I'll press G that takes us back
into this
mode and what I'll do is I'll
select index finger one select hierarchy
that selects all of them and then this
is the right hand so I'm going to mirror
from right to left
I'm doing it from here because selecting
it inside of here can cause things to
get screwed up so do not do that just
select it from in here after you've
gotten your placement right right to
left right to left now we can go over to
the left hand and it should be placed
correctly yes it's placed
correctly now hopefully moving this more
off to this side right here will prevent
waiting issues over here without causing
waiting issues over
here if it does no big
deal we'll uh we'll fix whatever waiting
issues are on the fingers inside of
Unreal
Engine I think it'll be easier to just
show you all how to do it from inside of
unreal yeah so it's not perfect there's
uh some of those fingers are weighted
too high up on the hand which is because
the the hand is really really low poly
it's causing uh weighting issues right
here o on uh the top of the hand we can
fix that inside of Unreal Engine it's no
big problem uh we'll use their their
mesh tools I mean their their uh new
skeletal mesh modeling tools to fix that
and yeah it looks like it didn't fully
weight itself over here on this side
around around there right there and
around there that's fine we're going to
fix that inside of
unreal for the most part the fingers
don't look too bad okay that finger is
actually kind of it looks like the
waiting isn't quite right yeah that's
fine okay
so there's not a whole lot we can do
about that this is a procedural thing
and fingers are real
tricky so we're we're going to export
this to
Unreal
export and I'll just
[Music]
say there we go

================================================================================
ARQUIVO: UE 5_ GASP-DAO Breakdown - Part 1 (v1.24) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

Yes, this is a really long video....the more complex this project becomes the more work it will be for me to redo these breakdown videos and the longer they will be. With that said, you can expect these to become less and less frequent as the project progresses....were it the case that sharing this project with people wasn't actually costing me money....say for example....I was actually making money off of it instead of spending money to support it....then perhaps I would be more willing to sit down for 2-4 hours trying to make a video for you guys.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

00:00:00 Intro
00:01:05 Mechanic Explanation
00:16:00 Folder Structure
00:16:35 Fighting Mechanics
00:18:15 Input
00:21:30 Blueprint Intro
00:25:30 Held Object Offset
00:27:27 Action Data (Weapons)
00:31:00 Held Object Offset Adjustment
00:33:16 Action Data (Continued)
00:34:53 Gameplay Tags
00:37:00 Short Replication Intro
00:39:20 Layered Montages
00:41:56 Switching Held Object(Action) States
00:44:47 Setting Live Retarget Settings
00:47:00 Live Retarget Blueprint
00:52:55 IK Retargeter (IMPORTANT)
00:59:10 Live Retarget Aim Adjustment
01:13:30 Loading the IK Retargeter and Aim Adjustments
01:21:30 Action Fire Mechanics
01:27:00 Projectile and AO Debug Tool
01:32:27 Socket Based Offsets
01:39:00 Aimoffset Interpolation
01:42:20 Jittering Issue Explanation

=== TRANSCRIÇÃO ===

all right guys so I'm back with another
video I'm going to be going back over
this entire project and this first part
of the project I'm just going to be
talking about uh the basics I'll go over
the animation system and setup and
another video because it's going to be
uh a fairly long video uh trying to
explain the animation side of
it
so uh getting started I wanted to put
this out there that
this project is only met for educational
purposes but you're free to use it
however you wish uh it's going to be an
MIT license um as you can see if you can
go to the GitHub if uh you're wondering
about that but basically I don't care if
you use it in commercial or whatever you
can build your projects off of this and
I'm going to go over the features and
the input
so let me just go ahead
and get started here so if I press the
one key it puts them back in this right
here which you have here now I have sped
up the uh turn and place system I'll go
over how to uh how to set that back how
it was uh in a later video and how to
adjust adjust
it but if you press the two key you'll
see the piston tool I have a recoil
animation and right now I just have a
placeholder reload animation that I got
from Lyra uh some of these animations
uh come have different sources some of
them I made myself uh I'll go over the
ones I made
myself so the actual pistol aiming and
the the pistol aiming uh stuff and the
rifle aiming stuff I did those my
myself if you see that green line that
green line is pointing from the end of
the barrel where the bullet comes out of
and it's pointing from there to the
center of the screen the blue line is
pointing straight down the barrel of the
rifle that is a debugger uh and you'll
see that it's sprinting out uh some
numbers up here those numbers are
angular offsets uh from the center and
that allows you to judge how offset it
is whenever you're setting up your liary
targeted characters uh I'll go ahead and
put this out there guys uh whenever it
comes to bringing in your own custom
characters there's no way around it
Anatomy differing anatomies will cause
offsets especially when it comes to to
aiming things
precisely the aim will not be in the
same place it will not be aiming in the
same direction as it is on this
character and I have addressed this
issue uh and I'll I'll I'll cover that
here later but right now I'm just going
to go over the
features so again I have a Reload
specifically for this rifle uh well not
for this rifle actually it came from
Lyra so I may uh make my own reload
animations later uh and replace those
Lyra ones but uh Lyra is basically like
you can use liar animations in Unreal
Engine in your own projects they don't
care uh so the sounds came from KD
you'll find him on my Discord this is
the guy right here he
uh provided the
sounds and he set up the initial ual
weapon uh logic replicated weapon
logic
and one of the first versions I've made
a lot of uh changes to it though simply
because I've changed the way things work
in here a lot which is why I'm redoing
this
video so if you press R of course that
reloads if you press in he'll do a
little dance uh right there that's just
an example I actually have
to fix that come to think of it there is
a slight problem whenever he comes out
of it I'll have to uh fix that it looks
weird when he comes out of it uh that
has to do with the layering and how it's
blending out of that layering data into
this other layering data I'm assuming is
probably the reason why I'll look into
it and fix it at a later
date uh but that was just an example of
how you can change the layering settings
on
montages uh it doesn't actually look bad
whenever you do it from the pistol so
it's probably because of the pose that
it's blending into that it could ends up
looking weird also that pose doesn't end
in the idle pose which is another reason
why um and so yeah so you can't make it
blend out into the idle pose uh that's
just a limitation of Animation systems I
may device some way
of maybe trying to work around that a
little bit later but right now foot I
have not been able to achieve foot loing
in here with the root with the offset
root bone node that they're using and
I'll explain that later in the video
probably towards the end uh and and why
that's causing problems for us uh also
you'll see that whenever the turn
happens uh the weapon kind of jitters um
the reason why is because of the offset
uh root bone we don't have any control
over how the offset root bone
interpolates like the speed at which it
interpolates uh and we don't have access
to much information on
the stuff that it's doing like uh so it
makes it a little complicated I'll go
into that in more detail
later but anyway moving on if you press
four on the keyboard uh you'll go into
this mode and uh it may it
may so you've seen the first time that I
changed it did some kind of weird Jitter
I think that's a bug uh it happens in
other circumstances too uh but I'm
pretty sure that's some kind of bug but
anyway you'll see we have a fighting
stance here and right now we only have
one punch I made the punch myself it's
only an in place punch so right now you
can't punch while you're running uh I
will make one later I only just
added I only just made that punch right
there uh Friday so and added it Friday
night I believe but yeah so I'll make
some more
I'll make a left hand a left hand punch
and then I'll make some for when he's
running but anyway moving on that's four
on your keyboard so right now I don't
have anything blocking the reload
whenever you're uh in here I'll have to
fix that that's obviously something we
don't
want I do not have a
holster either
so whenever he mantles he'll mantle with
the
weapon you cannot
shoot you cannot shoot while you're
mantling or
vaulting but just as soon as you're done
it'll start shooting
again now this system is mostly
replicated but there may be some
problems with the uh the replication in
some areas uh I have added some stuff
and I don't I mostly work on this with
an no replication guys and the reason
why is uh because
uh motion matching isn't actually
natively supported for replication and
unreal yet uh and 5.5 they will be
bringing that and right now I've been
using a I've been using a plugin that
somebody made uh but I don't include it
in the project and so I have to add it
to the project before I can test it with
replication uh so there may be some
stuff that just that I might add at some
point and it won't work properly with
replication because I haven't tested it
yet as soon as 5.5 comes out and the
game animation SLE project is properly
replicated I will bring those changes
over to this project and then we won't
have to worry about it anymore so I'm
just letting you guys know ahead of time
so this get repository is costing me
money guys it's probably cost me about
$50 a month
so I mean $ five isn't much and if
somebody wants
to uh donate $5 or whatever you know you
can give me a super thanks here on
YouTube or uh you can go to that buy me
a coffee thing which is preferable
because YouTube takes like something
crazy I think they take like uh over 25%
I think of the money I think it's like
25% or more that they take uh if you do
a super links on YouTube which is why I
do not recommend super links uh it's
ridiculous YouTube takes like a good
portion of it uh anyway so if if you do
want to help with the repo you can get
uh on you can go to buy me a coffee and
I use most of that money and most of the
money that I get from these videos
actually is what I've been using to uh
support that GitHub
so I'm not really making any money on
it anyway so I've basically went over
all the features as far as this right
here but let me go over here and show
you this so if you come over here to the
game animation widget and you walk over
this it'll bring this stuff up right
here now stuff like this one like all
characters uh I have not set up the
sandbox retarget showcase mannequins I
have not set up but all these other ones
are set up and so if you change to
them you'll see that they're uh
they're firing pretty accurately now
just so you know the reason why he's
shooting below and above and then below
it's because I'm actually additively
applying a breathing over the top of
this to make it look more alive
um that way it doesn't look so stiff and
unnatural uh but in doing so it also
causes and it causes it to be slightly
inaccurate because as you can see see
the gun is moving up and
down as you can see it's moving the Burl
is angling up and then angling back
down and that's the reason
why now this one's pretty accurate in
fact you can't even really tell that
he's breathing uh that might be a bad
thing I I guess uh in some cases but he
is he isn't moving and when he's moving
it's a lot more
noticeable now on the pistol I've I'm
kind of I kind of got this uh a little
bit more intense on uh the
pistol
so and you'll notice that the
interpolation on the hand right there is
a little weird that's another bug I'll
have to fix so that whenever he uh goes
to aim it doesn't look weird it doesn't
look like it's floating right now it
does but I'll fix that
later now I had to adjust this for each
of these characters for each of the
poses the relaxed pose oh it looks like
this got broke okay uh I'll have to fix
that again
again so I don't know what's actually
breaking this uh I keep noticing it
breaking and it what may have happened
is I may have went in there and Rec
compil or um I might have missed to this
I think I fixed yeah so I think I I
missed it let's
see if it's fixed on this one then it
was broken on the other one and I didn't
realize it yeah so whenever I was going
through here fixing the hand placement
uh for each of these characters I I must
have missed some of them or being one of
them um I thought I had gotten all of
them let's see if I missed him
too no I got
him
so I'll explain how the live retargeting
works here in a
minute but before I get to live
retargeting I want to explain how all
this works on for the main character
here and so anytime you have any of
these
characters right here and I'm pressing
shift plus F1 to eject from the viewport
so that I can have my mouse back and
click on
these but uh but whenever if you need to
find one of these real quickly uh
there's two ways you can go under here
and go to blueprints retarget It
retargeted characters and you can select
one from here or you can just eject from
The View viewport by pressing shift F1
and then pressing the eject button or
you can just press f8 on your
keyboard so if I press f8 on the
keyboard it just ejects me and then I
can right click and go to
edit and that'll open up the blueprint
for that character since this is the
main character right here this is the
main blueprint
and that blueprint isn't under here it's
actually under the main blueprints
folder and that would be this one right
here all my stuff is under the Dao
[Music]
folders at least under the blueprints
Dao that's where most of the stuff is
and the animations are under ufn
mannequin animations Dao anms that's
where all my animation stuff stuff is
under
here oh I actually didn't show you
something uh so let me just go ahead so
there's two right now I just have him
kind of blending uh back into the idle
uh and then turning but I may replace
that with uh custom turns later here's
a an easy to
replicate uh turn in place uh system and
this actually I'm pressing G on my
keyboard and what it's actually doing is
it's motion warping it's playing an
animation and it's motion warping uh to
face the
camera so that's one and I made these
animations by the way two of them
there's a left one and there's a right
one
one so that was just an ideal I had uh
you don't have to use that one in fact
if you're
like if you're turning in place
rapidly then this probably wouldn't be
ideal because you'd be constantly
hopping and it would look funny but
anyway it's an option
so I do not have that set up to happen
automatically based on angle right now
you have to press G on the keyboard so
before I actually go over the character
blueprint I'm going to go over the input
so this is how you can find out what the
inputs
are if you go under input you have an
input mapping con uh context and that's
what all the input mappings are mapped
uh this is where input actions are
mapped to keys or I guess you could say
keys are mapped to input
actions and under the input actions uh
we
have uh two folders Locomotion and this
is where all the regular Locomotion
stuff is and then I added an actions
folder and I put the aim Crouch interact
pistol reload rifle
so on and so forth under
here and by default uh some of these
they're just given one key so if you
need them to work for a Gamepad you
would need to current currently in its
current state you would need to set this
up yourself uh for your game pad but I I
will likely improve my approach to these
inputs these input actions later so that
they're more appropriate for for a game
pad and it'll be easy to change back and
forth so right now I just
have input actions for specific actions
in the future I probably won't have that
I'll probably have a way to I'll
probably have a way devised so that you
can cycle through them rather than
having each
action uh related to a custom
input uh setup
either
that or I'll just have generic actions
here uh and then I
will I will have input mapping context
loaded for specific things like
weapons but
anyway that's the input system
so in the character
blueprint that's where all
the weapon stuff is handled mostly and
the
replication and I'll go over that so I'm
just going to close all tabs to the
right and I'll open up the event graph
and you'll see I have the original logic
here da logic and kitty Whip and add-on
I've changed this so my much uh that you
would have Rec you wouldn't recognize it
much compared to when he added it but I
I left it in that folder
regardless some of the stuff on here has
changed ever so
slightly due to the fact that I
replicated
it
and I did add a few things so for
example this right here
this updates the held object offset so
you can create data assets that store a
held object offset and the reason why I
use data assets is because there's a
strict that you can do with data assets
where you can change the values of a
data asset uh during runtime and watch
how it offsets
things and the good thing about data
assets is that
although uh you can't
update data assets during runtime in a
compiled build you can in the
editor and it'll reflect that but it
will only reflect that if it's if you're
running it on a tick where you're
updating the data asset stuff uh every
tick
so that's basically what I'm doing
here so the held object system uh before
I actually get into that let me explain
it to you over here and the functions
you'll see all my stuff is under
Dao the stuff that KD added is under
KD and same for over
here for the
variables I did add some macros I did
not put them under a Dao section but
that's because there's very few macros
as is I did set up some uh interfaces
here and I'll go over all
that so the Onre stuff cannot be
categorized as you can see graph is not
editable uh so I cannot put those under
a category
unfortunately it just won't let me as
you can see
but anyway I'm just going to go ahead
and get started with the held object
information so the held object is what
the weapons get set
to it requires a skeletal mesh
asset if you have a static mesh if I can
find one I will give you an example if
you have a static
mesh you can right click on it and you
can convert it to skeletal mesh right
here and normally you want the root bone
placement to be at the
origin but they you can do bottom center
and Center as well depending on your
needs so by default that's
not
possible but in this project I actually
have the skeletal mesh editing tools
enabled uh that's the reason why if you
do it in this project then it'll have
this right
here in a new project you would have to
enable that plug in in order to get this
convert to skeletal
mesh so if you convert it to a skeletal
mesh then you'll be able to load it in
here and it'll treat it as a skeletal
mes I don't think there's much overhead
related to that but in most cases you
actually want weapons to be skeletal
meshes and the reason why is because you
want to be able to create
animations where the character and the
weapon are synchronized and you can play
both of those animations at the same
time so that for example if he's cocking
uh you know the pistol or if he's
pulling the magazine clip out then
you'll actually see it coming out of the
rifle uh but anyway
so right here on begin play I'm actually
caching the relative transform of this H
object and if you select it you'll see
this right here is its relative offset
it's Rel that offset or that location is
its offset from this mesh which it's a
child out of uh so in this case it would
actually be the weapon R bone on the
character
on this update held object offset
function what I'm doing is I'm just
adding the
offset from that primary data
asset getting the socket offset location
from the primary data asset and I'm
adding it to that reference pose and I'm
adding the two rotations by using the
combine Rotator and then I'm setting the
relative transform to be that new
location
and that basically
translates to if I load up one of these
guys
here and yeah I need to fix that
interpolation on there it's it just
looks a little
weird so if I come over here and go
under
Dao
actually I'll show you inside of here so
if we go under the variables we go under
Dao held
object and let's see
see I may not have fixed that back for
him yeah okay I
did
so under the overlay data right here
it holds the pistol and it holds action
data uh later on I'll probably replace
this with an actual like weapon system
where you can pick up the weapons and
it'll grab this action data from the
weapon itself uh from the weapon
blueprint but right now uh it's actually
being stored in the structure this array
of
structures and if you open this up
you'll see that we
have uh well there's multiple different
types of action data assets
here if I browse to that you'll see
there's a weapon one a fight one and
then there's a base one the fight and
the weapon share the variables that are
on the base but they each have variables
of their own uh some of them are similar
some of them are different so for
example this one it only added a a punch
action montage
this one does not
have well actually it has the same stuff
as this other one it's just called
something different but later on uh what
will probably end up happening is this
one right here will actually have a
combo uh system set up for it right now
I just have an array of action
montages and later on it will not be an
array of montages it'll be
uh it'll be set up
differently this one has this one takes
a single animation this one takes an
array and then uh for the punches it
just R right now currently it just
randomly chooses one from this
array so
it seems I was mistaken I have changed a
lot of stuff in here which is why I'm
doing this so I just remembered that I
actually kept the held object stuff uh
separate so it's actually stored in a
separate variable called held object
offset and the reason why I made it
separate from that action data is
because I don't believe it's appropriate
for a weapon to keep track of how a
character is going to hold the weapon
and and so each character will have its
own held object offset uh and that held
that character will be responsible for
setting this held object offset based on
the weapon tag and that's the reason why
I switched over to gameplay tags uh so
that it would be easier to manage stuff
like that
um the thing about gameplay tags is that
you can actually handle
those without having to get a reference
to something so so it'll it doesn't
require you to cast to a a character
blueprint which is why I switched over
to to gameplay
tags and also because the gas gameplay
ability system requires it and a lot of
people are going to want to use uh gas
with this
project so I wanted to make sure I
supported it
so I actually don't have a data asset
set up
for oh yeah I do I just didn't hook it
back
up so ho d h o is actually for held
object
data uh that's kind of a legacy thing
when I originally set this up I was
calling it held object data instead of
offset but then I decided that I wasn't
going to combine
the actual weapon data
with
the weapon itself with the action data
so some things are going to change
but
anyway so with this loaded I should be
able
to with this set here I should be able
to go in
here and eject
and if I go back over to this and I
expand this socket
offset you'll see that I can adjust it
in real
time because it's a data asset that's
being updated on a tick it allows me to
update it in real
time so these rotations don't like you
going backwards they don't like negative
numbers
so you
could just wrap back
around like this and just drag all the
way over to the to the right it will WRA
around toga 180 and then interpolate
down to
zero
so if you try to drag it to the left at
zero it won't do anything
for this character I didn't actually
need an
offset for the
pistol so that's how the held object
offset works so I've briefly discussed
the overlay data for the
weapons uh it's an
array it's well actually it's a map and
the reason why I chose a map dictionary
is because we can look up via gameplay
tag so we can say hey grab me the value
for this gameplay
tag
and that would look something like this
so if I get this and I drag off of here
and I say
find it'll find the value associated
with the provided key in this case the
provided key is a gameplay
tag so this right here would gra would
get me the data it would it would give
give me this structure right here which
holds the mesh and the action data
currently and so if I break this you'll
see I have mesh and action
data and another good thing about having
uh that stuff stored under a primary
data asset is you can can actually Val
uh check if it's valid so you can do an
is valid off of it to see if they've
been assigned action
data so that's how that
works now I'll go over the gameplay tags
so that you understand that
better if we go
under blueprints
Dao and let's see data you'll see this
GT Dao States and if you open it up it's
just a bunch of
information now this Dao right here is
the beginning and any sub tree sub entry
under Dao has to be proceeded with Dao
Dot and any and any subentry under held
objects has to be proceeded with dao.
held object Dot and so on and so
forth and I'll show you how you set that
up so if you open up the project
settings and go to gameplay tags under
the gameplay tag table list you can add
an entry here and you can select uh a
data table if it's the right kind of
data table it has to be a data table of
type gameplay
tags and I'll show you how to create one
but after you've added this right here
you can go to manage gameplay tags and
they will show up under here just as you
entered them into
here and the tool
tips that's the dev
comment so if you actually want to
create one you would right click and go
to miscellaneous and you would go to
data table and expand this and right
here at the top you'll see gameplay tag
table row
you would create that I'm just going to
delete this but I wanted to show you how
that's done and
handled so I'm just going to close out
of some of
this for now
I may change some of this stuff at a
later
date uh for example right here you'll
see that if this action is fired on this
character it calls uh a server RPC
that's what this is called it's called a
server RPC
see
and it's just a a custom
event that has been set
up to
replicate uh or under replicates to run
on
server and this is considered a server
RPC and normally you want it to be set
to Reliable if it's a ones shot you want
it to be set to Reliable if it's
something that's going to be spammed you
probably want it to be unreliable and so
you want to check reliable by default
reliable is not
checked I'm not going to go into do much
depth on this but basically the server
you normally don't want the server to
call a server RPC because it's uh
meaningless if you see two two uh
spheres right here next to one of these
variables it means that it's been set to
replicate
some of these are replicated uh with a
rep notify a rep
notify is associated with these
functions right here which start with
Onre so that basically says that
whenever that variable called deveral
result is replicated whenever the server
updates the traversal result variable
then this function right here gets
fired on all the machines connected to
the network client server dedicated
server they'll all fire
this so that's the crash course on
replication I'm not going to go into any
more detail on that if we go back to the
event graph under Dao logic you'll see
the logic that I set up
here and I just set up a kind of helper
function uh for playing montages and
this is mostly for
uh just to serve as an example uh
primarily
but you can set a layering setting right
here and right now this one is using a
Reload layering setting and I'll go over
this in the animation uh video but if
you open one up and you move your mouse
cursor over it you'll see they have tool
tips that somewhat explain what they're
for
and I tried to name them so that they're
easier to
understand depending on the
situation you you may want some of this
stuff to be done a little bit
differently I'll go over all that in the
animation video I'm not going to go into
that and this one but that's a data
asset and you'll see that
I have one for the emote as
well so this is probably why it looked
funny is because I had it in mesh space
right here but this should probably be
base and then
this should probably be in MCH space
let's
say let's just try 0. five
and then maybe
75 so one would be 100% zero would be uh
0% .5 would be
50% and let's see if this makes it look
a little bit
better yeah I think so now of course it
doesn't end in the right pose but but I
didn't make it I didn't design it to I
just brought it over it looks it still
looks a little weird at the
end it could just be the animation
perhaps I don't know I think it's a
mixture of the animation and blending
back into these settings so I'll look
into that at a later date but
anyway so I'm I'm taking my time with
this guys because is there's a lot going
on in here and I don't want to miss
anything and I want to make sure that I
cover
everything uh people are constantly
complaining about the documentation on
this because it's changing so
much but I think it's in a a fairly
stable State now I don't I know I've
said that multiple times before but I
don't know what how else I could uh
change it any more drastically than I
did that last time when I swapped out
these uh these were
enums but now they're gameplay
tags and so I had to change a lot of
stuff to make that
happen so this is what I was talking
about before as you can see on the
unarmed custom if it's a client it just
fires the server RPC if it's the server
then it doesn't fire a server or PC it
just fires this instead of
this so the difference is is that it's
not the server isn't telling the server
to execute this U which is probably a
little bit faster to do it like this
than to have the server call this on
itself so whenever this gets updated
you'll see it's set with the
notify and that is bound to this right
here and when this executes what it's
doing is it's getting that overlay data
it's getting the act the mesh and the
action data it's uh loading the mesh
right here it's caching the overlay data
right here and then it's getting the
mesh off of it it's updating the ik
retargeter uh that's for the live
retargeted characters I'll get to that
later uh and then right here it's making
sure that there is a valid action data
set for this and if so then it will grab
the linked enem layer class if it's
valid it'll set it to the current linked
enem class and then it'll set it uh if
not for whatever reason then we'll go
ahead and unlink whatever enm class
layer is currently linked uh that way
it's not just sitting there and uh on
the animation grath
this right here is
using well not that inside of here it's
using it's using a blueprint
interface I'll get to that let me just
go ahead and cover the rest of this so
on the on the ik
retargeter what it's doing is it's
getting this Library Target setting
information
and you can find this right here under
variables Dao liary
targeting right
here and this is set on your library
targeted
character and this is a data asset that
allows you to offset the hand position
and angle so that he's aiming towards
the center of the
screen and as you can see here that for
each
stance for this for this weapon for each
stance we may need we may or may not
need to change the way he holds it uh
and the reason why is because if you
remember earlier when I selected this
character I forgot to do it on her and
so when I am in this state you'll see
that her hand
comes off the rifle but if she's aiming
you'll notice that it's on the rifle and
the reason why is because anatomy and
because this is live retargeted if you
were to hard retarget this whatever
Offset you see on here would be the
exact Offset you would get on your live
on your uh on your retargeted
animations so live retargeting what you
see and the live retargeter is basically
what you're going to get if you did a
hard retarget the only difference is is
that on a hard retarget you can actually
modify the animations and bake it like
that and on the liary targeting you just
change that stuff in real time and
that's basically what we're doing here
is we're just offsetting their hands
using ik uh in real time uh so that
they're holding the weapon properly now
it looks like the gun is offsetting hand
and that must have been something else I
overlooked I must have never even
checked her whenever I was doing this
stuff and so I'm just going to go ahead
and show you
guys how that stuff works and then I'll
go back into the character blueprint and
explain this stuff right here uh because
it's going to be hard for you to
understand this stuff if you don't
understand uh what's going on here
so if we go to the uh class defaults
here and we go under Dao live R
targeting and we go under the pistol
State actually no the rifle
state so this is the
rifle
information and these are the data
assets right here and this is her held
object offset data for the M4A1
and so you'll see that's stored under
under each element each element that's
added to this held object state or a map
uh gets its own held object
offset and so if I just open up
that and I open up the
ready uh game stance data asset and I go
back in here and I equip the rifle and I
eject and I come over here to the H
object
data I
can drop
this in her
hand and I don't know what
caused all these offsets because I
thought I fixed all that I was pretty
sure I did uh but obviously I
didn't I probably did fix it but I think
I had to uh lose all that data and I had
to go back in and redo all of it uh like
two or three times I think and somewhere
along the line I lost
it I just forgot to redo it
for but that's okay because you'll get
to see me actually fix this in real
time and so this is the the ready uh
stance but we want the aiming uh so the
live R targeting LR stands for live ret
Target and this is M4 A1 this is the
aiming
State and so you'll see some stuff
here I'm not worried about the aiming
the aiming is spoton but I want to bring
her hand in more and now when we do this
we need don't use the static off
and the reason why is cu if you add a
static offset uh
it it's going
to be different whenever she's aiming up
than if she's aiming down if you bring
her hand straight back using a static
offset and you aim up then it's going to
have her hand come back it's going to
offset her hand back from wherever it
should be and it's going to be in the
wrong place
so even though it's a little Annoying we
have to use the static local offset
which is local to the actual wrist and
how the wrist is
pointing and so up would actually be in
this direction and down would be in this
direction so you can see as I move this
up her hand goes down
and actually that looks fine that seems
to have done it uh so yeah I'm just
going to leave that like that and then I
want to put her in this other
state and obviously I need to fix this
and this is the ready
state so on this one I need to give her
hands an offset and you'll see I didn't
do that in here for some reason but if I
move this down her hand goes this
way and moving it up makes it go
forward something like
that it's
perfect so yeah that's basically it so
you'll see that something her finger
looks a little funky
um so in order to fix that I'm actually
going to have to break it and whenever I
do this it's actually going to break it
guys uh and I'll have to redo all this
stuff all over
again but let me just go ahead and do
that uh because this is a repository and
I can always undo
that but this is
something you need to do ahead of time
when you're bringing in your
character so if you let's see if I
select your mesh right
here and I browse to it under the ua5
mannequin folder rigs live targeting
actually
rigs yeah live ret targeting you'll see
that she has her own ik retargeter here
and if I open it up it looks
like I not swap oh I didn't swap that
out that's why I'm having these
problems let me show you how
to set up the live
targeter
under livey
see yeah under live
retargeting refs you'll see we have an
ik retargeter and that's where it's
being set right here if you browse to it
you'll see it's right here and this is
the actual and it looks like I didn't
actually fix this that's why things are
off on her so you'll see that her hand
is offset and that's not good because we
we were actually off setting her hands
manually from inside of here we do not
want the ik retargeter to offset her
hands so first of all we need to swap
out the mesh for her mesh so
under root set asset asset settings we
need to swap out uh
the Let's
see we actually
need well this will probably work on her
as well
but
yeah we should be able to share the ik
retargeter or the ik rig I
mean we just need to swap out the actual
skeleton so I'm going to swap it out
with the Quin
simple and you'll see there she is now
I'm going to select her left arm and I'm
going to zero this out right here and
I'm going to select your right arm and
I'm going to zero this out as
well and now with those zeroed out in
her and her base pose I'm going to go to
running retarget I'm going to go to
Source I'm going to select the pelvis I
don't do the root because I have seen it
do some problem it's caused some
problems with some characters uh doing
that
but what I'm going to do is I'm going to
match the ufn pose I'm G to match the U
fn's pose to her pose and what that's
going to do is it's going to make sure
that we don't get any funky finger moot
uh bending or limb bending because their
POS will match as Clos as possible and
the reason why just so you guys know I
did do a video on this and I might put a
link down in the description if I
remember but an an is stored as an
offset from this
Bose so when you retarget an animation
it's going to offset it from the pose
that the character from the source that
you're that you're getting that
animation retargeted from it's going to
offset it based off
of uh the angular offset of that bone on
that specific frame from this
character's base
pose and so so if your character is in a
pose like this if it's if it's in a t-
pose then it might actually rotate her
arm up like this if this arm rotates up
like that
so of course since this is um a pretty
sophisticated uh system it's going to
translate it probably okayish but it's
best to have the poses match as close as
possible I just wanted to get that
across to you so you always match the
source pose to the Target pose do not
match the target pose to the source pose
uh the reason why I don't do that is
because if I do a hard retarget on these
animations so I bake them to this other
rig uh now I have to change this rigs
base pose in order for those animations
to play properly on
it so if you do if you just change the
source and match the source to the
Target then you don't have to worry
about that
it's just good
practice so now that we've done this
we'll go back in
here and you'll see that she's suddenly
not aiming properly
anymore but that's okay because it gives
me a chance to show you guys how this
stuff works and you'll see that the
she's actually holding the weapon
sideways but in actuality it's not the
way she's holding it um in her hand it's
the angle her hand is at and the reason
why is because her Anatomy is different
and even though that we matched the
poses as closely as possible there's
still Anatomy differences that are
getting in the way and that's what I
told you guys before is you cannot when
it comes to Precision you cannot
retarget animations
precisely uh guys you cannot retarget
them precisely you're going to have
offsets like that
for regular animations where Precision
is a factor like vating or mantling or
something like that uh it might be okay
uh but whenever they're aiming a weapon
it suddenly becomes a problem because
they hands have to be in a very specific
way in order to hold it uh and if the
anatomy differs too much then there will
be problems so I'm going to go back into
this character here I'm going to stop it
I'm going to save this and I'm going to
close
that and I'll show you
guys if we browse to here if I would
just duplicate these guys and assign
them to your own characters but you can
always create these data assets like
this so if you open this up you'll see
that the parent class is PDA live
retargeting
okay so I'm going to create uh I'm going
to go to miscellaneous data asset and
I'm going to select my primary data
asset for this which would be PDA live
retargeting I'm going to select
that and there you go now you have a new
one you can come into your character go
to class defaults and you can assign
that right
here under the value object right here I
might change the name of that later so
that it's more obvious what that
requires but if you just pull this drop
down down it's not going to let you put
in the wrong data asset it's only going
to put you let you put in a live R
targeted uh primary data asset
type so it's not really that big of a
deal so I've already actually created
those assets for her so I'm just going
to dock this over to the
side and she's already holding the
weapons properly and I showed yall how
to do that so now we're just going to
modify the way she holds the weapon
first and foremost I want to straighten
this gun out so it's not tilted to the
side so what I'm going to go and do now
is I'm going to go into the LR M4 A1
aiming and I'm am going to uh undo that
rotational
offset right
here and now you'll see that it she's
actually holding it accurately the
reason why I had to add that offset
before may have just been because I
wasn't matching the poses uh between
them and now I don't need that because
uh their poses match and she's aiming
straight and some cases you will still
need this uh you'll still need to rotate
the hand like this this so just let that
be
known on one of them I actually ended up
having to rotate at 25° and it made
zeroing in on these values right here a
little bit difficult now this is where
my debugger comes in and I'll cover uh
how that debugger works here in a little
bit but you'll see that the blue is
pointing straight down the barrel of the
rifle whereas the green is pointing
towards the center of the screen and
you'll see these numbers popping up here
so I'm going to pull up this output log
that I've docked over here and if you
want to
uh uh open up a second output log
because normally it's open down here and
it and you can't undock it or move it or
resize it uh much so I like to dock them
off to the
side for this purpose I'm going to clear
my log because it's it's going to load
slowly if I
don't under window
let's
see I guess you check this output log
right here to open up a second output
log I thought there was another way that
you could open up like multiple in here
like you can with the content browsers
but maybe not anyway so that's how you
do that so I'm I'm just going to click
on the
screen and then I'm going to press shift
F1 to release my mouse and you'll see
these values here and so we want
to we want to rotate these in the
opposite direction of what it's showing
here so it's showing that it's off to
you know the left for example
1.55 so I want to
subtract that negative value which will
make it positive it inverts it always
subtract it you can manually do the
opposite of this if you want
um
but like add plus whatever but in order
to not have to hold down shift and press
the plus button on my uh the plus equal
button on my keyboard I just do
minus I'm going to shoot it again and
you'll see we're already a lot more
accurate
now so again I'm going to copy that and
I'm just going to say minus the positive
number
and really this is accurate enough but
I'm just showing you and then minus the
negative
number and it actually made it a little
worse and
so if you want this to be as accurate as
possible down to several uh degrees of
freedom then you may actually need to do
this a few times
and you have to be careful not to move
from where you're aiming at because
where you're aiming at will dictate the
Precision of the aim and that's just
simply because I'm only use I'm only
blending between two poses for the aim
up aim
down but yeah so it looks like that
that's probably about as accurate as I'm
going to get this one but
I'm G to try it one more
time I've gotten this almost completely
perfect before but really it's it's
overk you only want it to
be you only want it to appear to be
aiming round about the center of the
screen so I'm just going to stop there
because that's really accurate enough
you can see the blue is right on the
green it's uh barely off now if you aim
up and shoot you'll see that it is
offset oh you know what uh I forgot to
disable the breathing while I was doing
this okay sorry guys uh so something
that's important for you to know and
I'll go ahead and show you this is if
you go
under blueprints
Dao data layering data no my bad
um actions linked inim layers you'll see
this right rifle length anim layer and
this pistol length anim
layer now in the in the rifle one you're
going to go to the animation graph anom
graph oh my bad no no not that one
you're you're going to want to go into
animation layers expand this and go into
the overlay
State and then open up the overlay State
machine and go into aiming and you're
going to want to disconnect this
breathing additive right here you always
want to do that before you adjust the
aiming Precision you'll see it'll do
this if it's running just switch and
then switch
back that part is unavoidable if the
game is running and you recompile the
link animal layer that's currently
linked it will break the
link and you'll have to reload
it and so now
won't be
chasing these
numbers so I may be able to actually get
this more accurate
Now Yep there we go now you'll see that
we have several degrees of uh Freedom as
far as accuracy don't spam your sh shots
either because the recoil is still
happening as you can see uh but now you
can't even even tell where the green is
and where the blue is or I mean where
the blue is it just looks like a green
line that's because it's really accurate
uh so yeah so just don't forget to
disconnect this right here uh before you
start setting this up now I have to do
this for the pistol as well but before I
do it for the pistol I need to fix the
hand or do
I H it's almost feel
good I guess that'll do but you can fix
the hand too if you need sometimes it
can be a little frustrating getting the
hand so that it's not sticking through
this
part uh but not sticking through this
side
either and actually I guess I'll go
ahead and show you how to do that so in
order to do that you would have to
rotate this uh
let me
see you would have to rotate this
out along the Z
sorry something like
that and I'm actually just going to set
this back to
neg5
here actually maybe even -10 is
better since she has smaller
hands and now that I've uh
got that rotated somewhat I can try to
bring it
back and you'll see that looks a lot
better
already so anyway you can tweak that
until you're content with
it totally up to
you but yeah so after you've done that
go into the ready state by pressing the
right Mouse button to not
aim and then you can adjust this part as
well that's the M4 A1 ready we adjusted
that before but because we changed uh
the way that she was being live
retargeted we have to redo
it that would have happened too if you
needed to uh re retarget an animation
but yeah anyway I'm not going to nitpick
over a little clipping
problems that's basically how that works
guys so that's the technique that I use
uh for live R targeted characters it
basically allows you to uh procedurally
adjust it during runtime while modifying
the game uh or while you modifying the
game while the game's
running man I've covered a lot in this
video I know it's long and I'm kind of
drowning on guys I'm not I haven't been
all here the past weeks the past couple
of
weeks okay so now that you understand
how that stuff
works you should understand that our LR
held object
settings it's a
map on them it's a map that holds an
array of H LR held object
settings from that map on the live R
targeted character based off of the
current uh state that they're in
will grab one of
these so what I mean
is yeah so the LR held object settings
is actually a map with two
entries it holds the weapon
States via gameplay
tag so you'll see held object State
Pistol held object State
Rifle and
then each state has a set of stances and
it has a held object offset data
asset each stance has its own data asset
which stores how the arms should be
procedurally offset on the character as
I'll showing youall before when I was
moving the
arms and what this does is based off the
state
it
grabs based off the
state it's going to either
grab element zero or element one here
it's going to grab this or it's going to
grab that and then it's going to cach it
right
here it's going to get the held object
offset from
that and then
actually I was showing youall
[Music]
wrong it's going to
grab it's going to grab this it's going
to grab that sorry so after it grabs
this based off of the state if it's a
pistol it'll grab this right here it'll
grab the held object offset here it'll
update the held object offset based off
of that held object uh data asset that's
stored on
them and
then uh based off the
state the reason why I do this is
because not all states
actually have stances not all of them
have Library tart uh have linked anim
layers uh like we have here on this one
and so because of
that we can either do this or skip
it so if it's a pistol or a rifle what
we do is we grab the stance
associated with their current
stance and each stance
holds it holds a
data asset
right and that's what we're getting
right here we're getting the live ret
targeting primary data
asset that's stored along with that
stance and again this is another
map so that we can look up the value
quickly and
easily and if this is a live R targeted
character then we
send this LR these LR chain settings to
that live retargeted characters
animation
instance so for you to fully understand
that I'll have to explain it a little
bit
more on our liary targeted character on
begin play we call the parent begin play
so that the parent begin play
functions functionality fires and then
after that what we do is we reparent the
S object object to our new skeleton our
live R targeted one uh we attach it to
the weapon bone or whatever socket or
bone whatever you want to attach it
to and then
we pass in that live retargeted
mesh into this set ik retargeted
function which is on the parent so if we
click this you'll see it takes us back
to the parent and all this is doing is
it's just updating information so it's
storing a reference to that
mesh it's getting the animation instance
from that
mesh and it's setting its ik retargeter
settings or it's setting its ik
retargeter and and then it's updating
its Library targeter settings with the
chain the current chain settings for it
and so if we go back over here to the
live ret targeted character and we
select the skeletal mesh you'll see it
has a generic animation
blueprint which they all share so if we
go under blueprints retargeted
characters you'll see this animation
blueprint right here if we open this up
you'll see this these are the two things
that we're
firing so for this one it's just setting
the ik rate
targeter which gets used on the ANM
graph
right here it's bound to this
variable so if we go to the details
you'll see that we can bind it that's
what we bound it to we bound it to to
this incoming ik retargeter before
previously they were using tags and
grabbing it from a map right here I
don't like that method
personally uh I wanted it to be more
obvious
where things
were which is
why under the class defaults live R
targeting references that's why we're
setting it right
here so if you go here and you'll see
that we're passing in the I retargeter
to this it's not passing in the value of
this ik retargeter on the parent it's
passing in the ik retargeter that we set
under the class defaults on this child
actor so this is the ik retargeter for
this one that would be passed in through
here on this right here this is how we
update the chain
settings and so if chain settings don't
exist it gets those chain settings from
the ik retargeter itself
the ik retargeter is this thing right
here so yes these are the chain settings
that I speak
of uh this stuff right
here so if we go back in
here and we open
up wrong
one we open up a light targeting setting
you'll see that's what we have we have
the FK settings and we have the ik
settings and the speed
plant that's the reason why is because
I'm just storing these as chain setting
variables and then you just we just pass
them in rather than just only including
the stuff that we need because in some
cases who knows somebody might think of
some genius ideal where they can utilize
this stuff right here in a very creative
way
so that's the reason why I left it in
here so it'll get it'll get this stuff
from the actual library targeter right
here
if we do not set one but if this is
valid then we'll get it we'll fetch it
from
that data
asset so
with that
said that's how that
works
and that's also how this works right
here so whenever we update our our
state our held object State whenever our
held object State changes we need to
update those ik retargeting settings and
then we need to fetch the linked enem
layer or the linked anim layer class
from that action data as well and Link
that anim layer
class and so that's what's going on in
here guys it looks complicated but it's
really not that complicated if you think
about
it so that takes us to the KD add-on
stuff which I've changed a little bit
we're setting the held object state only
the server sets that if you're playing
uh Standalone if you don't need
replication don't worry this won't have
a negative effect on
performance the client during a single
player game acts as the server
so right here we have our weapon
fire that gets called on the server only
the server can execute
this it's going to set the wants to aim
which gets handled from the animation
blueprint it lets us know if we should
move into an Aiming state I'm not going
to get into that but I'll I'll cover
that in the next video
right here if we're in a fighting
State meaning that our uh held object
state was set
to unarmed
fight then we will get the action data
this is just a macro a helper macro just
to make it look a little cleaner and
what we're doing is we're just doing the
same thing we're just getting the the
action data off of this and if it's
valid and we pass it in we say yeah hey
this is valid if not we don't do
anything we cast to uh the action data
fight the PDA action data fight which is
a child of the PDA action
database and if this cast does not
fail if it succeeds then we will perform
a melee attack
on the melee attack if they are not
moving if their velocity is less than 3
centers a
second and they can
punch meaning that they're not currently
punching then we will play a montage a
random Montage from the action
data we'll get the action cool down from
that action data and we'll set a timer
by
event well we set can punch to false too
by the
way
so what that means is that until
this timer expires and this right here
fires they will not be able to perform
another punch this will return false
until this fires
the sounds are stored on the montages
themselves so if you go and look at the
montages you'll see that the sounds are
actually embedded in
them
uh that's totally up to you if you do
that do it that way some people uh
asynchronously load sounds and that's
really not a bad ideal either it's
totally up to you but if you need it to
happen at a specific time
then it may be better to embed it into
the animation just know if you embed it
into
the if you embed it into the animation
and you're not async loading a soft
reference of the anim
monage
then the Montage and anything linked to
it will be loaded into
memory so right here we're
firing another blueprint inter function
on our length layer the current length
layer of our
animation uh class which may be this for
example so we're fire we're uh calling
this function off the link atom layer
and it's returning if it's ready to fire
or not the is ready to fire is dictated
by the
states uh uh whenever we're fully
blended into the aiming State we'll set
that to
true as soon as we start blending out
we'll set it to
false and so if it is fully blended into
the aiming pose uh and we're not doing a
traversal animation then we'll set once
to strafe to true meaning that if
they're not in strafe mode camera mode
then we'll leave that camera mode and
enter the strafe camera mode
and then we're basically just doing a
cool down here or a
delay and then a fire I may actually
want to change this right here uh to be
handled the way I'm handling it right
here and the reason why is because this
delay actually
happens when they press fire and so
they'll press fire and they'll have to
wait this amount of time before the
projectile
is uh
released that's actually how
uh I think KD had set it up and I only
recently realized that was a problem
when I started setting this up for the
melee attack um so I may reactor this
here pretty soon so that it uses a timer
much like what I'm using here and I may
just rename this to cool down or generic
cool down or
something but anyway we fired this basic
projectile and right now you'll see
camerab based uh projectile is
disabled if it's
disabled it'll just use the base aim
rotation which is currently
replicated
but it's not reliably
replicated which means that
like you know I don't know maybe every
four frames or so uh it'll
update so it's not something you can
actually use as an aim offset I came to
find out later because I was using it as
an aim offset I replicated aim offset
but I found out this isn't appropriate
for
that but you could just do
this I don't
think let's see if we just use the
camera rotation
it works the same yeah so in
actuality it doesn't matter here
guys but anyway the held object is being
fired from the muzzle socket
location we have a projectile Offset you
can add which says hey uh extend this 5
cmers forward
but since this held object's forward
Direction and relation to the the hand
is actually it's right Vector uh we're
actually using the right Vector instead
of the forward
vector and then we're just spawning the
projectile and that's where the aim
offset debug tool comes in it needs a
location an aim location and aim
rotation uh and that's what we're doing
here this this is the location it starts
at and this is the rotation that we're
taking
on and so if this is enabled then you
can disable it
from right
here so if you disable that it'll stop
drawing those
things you can also turn this
To None the draw debug type duration to
none
but what it's doing is it's sending out
a line Trace from uh for the camera and
it's doing one for the
weapon again because the right Vector is
actually the forward Vector of our held
object for some weird reason uh we're
have having to actually use the right
Vector but think of it as the forward
Vector we're trying to move a point
forward in
space and then right here we have two
options so you can either print out a
solid angle or a 3axis angle and so if
we check this right here and then we
fire the
gun you'll see it says we're a tenth of
a degree off on this one because I
haven't fixed this one yet you'll see
that one's 2.4 degrees
off right here I'm just remapping the
rotator
so that
the rotation matches
our our static rotation offset
order that way people get don't get
confused because 2.45 is actually the
you know the Z or 3.2 is actually the
yah you know stuff whatever anyway I
just didn't want people to get confused
so I remapped it
and that's almost
it then again we're just firing this
it's still called weapon fire Montage
I'll probably rename that later uh
there's still a bunch of stuff that
needs to be like renamed and
like like in some cases I'm I'm using
held I'm still using held object but
actually moved over to the term action
uh
State um well I think I use the term
action data for
the actual data for the
weapon but I'm still using held object
State on these variables and for the
gameplay tags so just so you guys
know in order
to uh make this
universally more like flow better I'll
probably rename it held object State
anything that says held object I'll
probably end up renam it naming it to
action so action state doo. action.
state so on and so forth
predal offset
hook so this will require me to go a
little bit into the animation
blueprint but I'll go ahead and do that
anyway
so what this is is um so there's a naive
approach that
is prevalent throughout YouTube If you
go to uh hand placement or a weapon hand
correction or whatever on YouTube You're
Going to find all kinds of videos where
they're telling you just to pass in the
socket location uh from your weapon and
use that as an affector Target on your
animation uh
blueprint uh for a two- bone ik or a
fabric or uh whatever uh so it'll tell
you just to pass in that and set it
to uh set it to World space don't do
that guys do not do that uh it's the
reason why is because locations and
stuff like that of actors and socket
locations and stuff like that whenever
you're getting that from a blueprint and
passing it over that's going to be
updated on the game thread well
everything on this anom graph is updated
on a different thread uh that may not
make a lot of sense to some of you but
what that means is that if if you think
of two two trains and let's say the the
trains even if the trains are moving at
the same speed but they're probably not
uh let's say you have two trains they're
moving at two different speeds they
start at two different times uh and so
will those trains ever be lined up along
the
track if both tracks run side by side no
they'll never they'll never be side by
side they'll never be in sync and that's
basically the same concept when it comes
to the game thread and the worker thread
which the animation graph runs on so
what that means is that if you pass in a
location here by the time it gets it
it's an old location and it's already
behind so the train is no longer there
anymore it's it's somewhere else now uh
but you're assuming that it's still
there and so based off of latency
uh your hand is going to lag
behind this the lower your FBS the more
your hand will lag behind uh and it's a
bad it looks bad uh whenever you're
aiming you're swinging your weapon from
side to side your hand will visibly come
off of the your left hand will visibly
come off the rifle uh so that's the
reason why I came up with this method I
call it a edual offset hack and there's
actually not much to it but what I'm
doing here on the get off effector
offset is I'm
just getting I'm getting that socket
location but I'm making that socket
location
local to the virtual bone which is where
we Norm we normally use a virtual bone
as an affector
Target and so I'm making this local to
that vertu bone what does that mean so
if this held object is local to this
mesh now I've set at 76 then it's 76
centimeters away from that
hand
so what that means is that we
have an offset which we can apply to the
virtual bone on the animation graph
which will be accurate and not thread
dependent so it won't suffer from that
lag problem because this is actually an
offset this is how far offset it is from
the virtual bone and so when we pass
that in instead then we have then we can
set this to Bone space use that virtual
bone as the actual effector Target use
that effector offset as the actual
effector location and what that does is
it'll offset that virtual
bone by this
much so that's what I'm doing here
and I'm just getting the an instance so
and I'm passing it in through a
blueprint
interface and on the anim uh or on the
event
graph right here I'm just updating
it actually
I'm actually I'm updating it on a tick
right here but
anyway you can do it either way you can
do it as a one shot like I'm doing here
or you can do
it from here and just have it do itself
from a
tick this assumes that this socket is
valid so it would actually probably make
sense uh to do uh is Socket does socket
exist
it probably makes sense to do
this and I'll probably update this so
that it does it this way uh just to make
sure that the socket exists or else it
won't offset
it but anyway that basically sums it up
so it was a long video and I covered a
lot of
stuff but I'm pretty
sure that I covered
everything so known
issues so I am aware of that that this
interpolates pretty fast in some
cases uh that was by Design uh because a
lot of people are always like I want
split hair second like for uh
speed uh I want it to be ex extremely
responsive uh and so that's the reason
why I didn't uh add interpolation to
that I I guess I'll maybe I can go ahead
and go over that if it's oh good I did
it
again
so let's
see it's probably under the blueprint
thread safe
so under the blueprint thread safe the
update aim offset
node you'll see that we have a should
interpolate
and this is the left to right
and basically what you have to
do is you can lower this
angle right now I have it at 115 so it
will not interpolate Beyond 115 if you
want it to always interpolate then you
can set it to zero but maybe you only
want it to rotate if it exceeds
90° and you can increase this uh interp
speed or decrease it to suit your needs
if you need it to be faster then set it
to maybe 300 if you need it to be slower
then you could set it
to
50 and so if I
just AIM
now it should be a little
less fast no it's
still seems to
be doing it let's lower
this
more yeah now now it's it's very
visible yeah so anyway you get the point
and if you want to just refactor this
and just do a straight interpolate
regular
interpolation uh then then you can
you'll see I have
this uh note here but a lot of people
complained about the about this so I
provided an
interpolation
solution but that
basically covers that I'm aware of the
jittering problem like I said uh that's
related to the way that the offset root
bone rotates the offset root bone in
case you didn't know uh it's it actually
allows the root bone which carries the
entire skeleton with it when it moves it
allows that root bone to offset forward
back left right uh and it allows it to
rotate independent of the mesh itself
which
means uh
that this origin right here of this mesh
is not actually the origin of the
character so if you turn on these debug
settings
here right
here then you can
see you can see that green circle how
it's leaving the the blue circle uh that
is how far off we are from where the
mesh actually is in relation to the
blueprint so we're actually leaving the
capsule in some
cases and
yeah uh so actually there was something
that I didn't
cover so oh never mind it's related to
the animation system so I'll cover the
rest of that stuff in the next video
guys this was a really long video I'll
see you in the next one

================================================================================
ARQUIVO: Unreal Engine 5 - ALS vs Motion Matching (Performance Profiling) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

So in my last video a lot of viewers made some great points that would indicate my test wasn't entirely balanced. So I decided to redo it with Live Insights Profiling.

Join our Discord: https://discord.gg/38ceaJ67Eu

=== TRANSCRIÇÃO ===

all right guys so in the last video some
guys did Point some things out that were
some pretty good points so we're going
to try to get to the bottom of this uh
in as Fair of a way as possible so I
matched the
rendering settings for
ALS so that they're using Lumin and all
of
that and virtual Shadow Maps just like
in the sample project that way the
results will be as close as possible I
swapped it out with the ue4 Manu so the
draw calls are
approximately the same as
well and so now what we're going to do
is we're going to run a
profile going to do some profiling here
and I'm going to stop that stop the
game and I'm going to maximize this and
I'm going to choose one right
around
here and I'm just going to zoom in here
so right over
here we have our alss animation
blueprint this is the uh the tick on the
blueprint and now we're going to do the
same over here on this one
and it does seem to be running faster
but uh that can be
misleading so on this
one I'm going to do the same thing let's
see I'm going to choose one right around
right around here
I'm choosing it when they're not spiking
uh on purpose because I want it to be uh
fair and let's
see so it's not that much faster
actually
uh and I don't know it is possible that
I kind of chose a little luckily but
uh if you match things as closely as
possible you'll see that it is uh
slightly faster than uh ALS only by a
couple of uh micro seconds so uh it
actually matches up uh about
evenly uh from what I can tell but I
mean
that if you look at the ALS one I think
the ALS one is probably a bit more
stable uh these ones right here at the
beginning uh this was this was the
initial hitch after I first started it
and I did run the ALS one uh for longer
there's their hit hitch when they first
started on theirs on that one so I'm
actually uh choosing around the same
time after that initial start hitch on
these so I think that's pretty
accurate
so the if you look on
this you'll see
that we have the offset uh root
translation and the is
moving the is moving is
actually bit rough I think uh the offset
get offset route translation half life
and the get offset root rotation mode uh
those have a small
impact but not like a real huge one most
of it is under update essential values
and generate
trajectory those are having the biggest
hit so the performance on this will get
better over time but as you can see it's
not bad

================================================================================
ARQUIVO: Unreal Engine 5 - Advanced Motion Matching Dynamic Overlay Layering (Coming Soon) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

In the coming video I will be explaining a layering system inspired by ALS, I will discuss why we will want to layer things in certain ways and what effect it will have. The way I'm setting this up is such that during testing, we will be able see the changes in real time as we are manipulating the values during run-time. 

Join our Discord: https://discord.gg/38ceaJ67Eu

=== TRANSCRIÇÃO ===

all right guys uh so this is a quick
demo of what I got going on here and uh
the way that I have this set up is we're
using data assets actually uh to set the
values for the different states as you
can see over there on the right and
uh let me just uh give you a
demonstration here so here's the pistol
right here and the way I have it set up
is so that I can adjust that in real
time so this is the running aiming uh
State and let's just say I say local
space now uh you have it in local space
and if I say uh 0.1 now you'll see it
updates in real time as you're changing
the values

================================================================================
ARQUIVO: Unreal Engine 5 - GASP DAO (Update 1.08 Live Retargeting) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

In this video I'll discuss how to handle hand correction on Live Retargeted Characters as well as discussing the changes that I've made in the project.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

0:00 Intro
1:05 Live Retargeting
6:15 Other Changes

=== TRANSCRIÇÃO ===

all right guys so it seems to me that I
was just over uh complicating things
uh I don't actually for re live
retargeting we don't actually need to
use that hack that I made that's only
really necessary
for that's only really necessary
for
say if you are sharing a skeleton with a
character then you might need to do that
um but since we're using live
retargeting that isn't necessary and
I'll show you uh
why
so the live retargeting isn't 100%
consistent so some poses might seem a
little off and then other poses might
seem perfectly fine so for example I
adjusted this for the rifle but for the
pistol it looks almost like he's aiming
a little high uh I don't know what to
tell you about that but I will show you
how to and that just has to do with the
live
retargeting
so if you need to adjust the hands you
can actually do it in real time from the
live R targeter you don't have to use
that hack that I was using for the liary
targeter we we're going to handle it a
little differently
and we're actually going
to uh create the offsets directly on the
live R targeter
settings so on the Chain map you can
just select the left arm and you can
create a static offset right here
on this
[Music]
yeah so as far as the fingers
go as far as the fingers
go I will look into
[Music]
that but that's going to boil down to
retargeting
settings so on the skeleton you can mess
around with the translation retargeting
uh show retargeting options and you can
go to these
fingers and you could
just select all of those actually it's
not going to work like that but what you
could do is you could recursively apply
it to the hands uh and try
that or you can come in here and you can
mess around with uh this maybe try one
to
one or translation mode globally scaled
I don't think that would work well on
the fingers I don't know I haven't
really played around with uh the
retargeter settings like that in a while
but I will show you if you go to the
content drawer and you scroll down to
widgets and you open up this widget here
you can select one of these entries on
here and you can press this browse to
and it'll take you there
but it's under the content blueprints
retargeted characters that's the
animation blueprint that they're using
to retarget all of these guys
um and in case you didn't know
it let's
see yeah so this is how they're handling
the retargeting of the hands if y'all
are interested in looking to see how
that
happens
uh and that's what that's what this is
right
here right here it's the ik retargeter
map and they're just loading these in
here and they're
setting they're setting
these as
tags component tags on the characters so
if we
we search for if we go up here and
select this and we search for
tags it should
be here
somewhere there it is it's on the
body I don't know why I didn't show up
whenever I searched uh globally for it
but under the body they added a tag and
that tag is what the animation blueprint
is using to select from this map right
here the correct
retargeter and so you can find the ret
targeters in here if you are having
trouble finding them but if you browse
to them you'll see under those folders
under the rigs that's where they're
located and this right here
let's
see if you go to the body and I can't do
it while it's running but if I go to the
body and I browse to the skeletal asset
I can right click and go to skeleton and
find skeleton this is a skeleton that
all medy humans in here are
sharing this right here was an
alternative uh Hand hack that I was
going to implement for the live
retargeted characters but it came to
find out I came to find find out that I
didn't need
that so you can just uh offset it right
here on the retargeter and that should
work fine if anybody has any problems
with that let me know uh I'll go ahead
and go over some of the changes that I
made now though
so on
the on the
character I exposed this right here to
this function so that I could over ride
this that gets plugged into here from
the child and I did the same thing with
this logic right here that way I could
override this held object right here and
the projectile Direction and this
projectile direction is just a cheap
Pack right now uh guys so uh I'll
probably refactor that to use some other
method in the future is just so that at
the time like I'm not real familiar with
doing stuff like this based off of
sockets and if you get the socket
rotation the socket World rotation it's
supposed to be World
rotation but it doesn't actually seem to
be World
rotation uh Maybe I'm Wrong um but it
didn't seem to be World rotation to me
but I'm not real strong at Vector math
so that might just be a misunderstanding
on my part
so I exposed those and on this what I'm
doing is on these
functions I'm just plugging in this
one and I'm overriding these from this
override right
here and I did the same thing on the
basic projectile function I'm plugging
this in instead of this but whatever was
being played from the parent gets
plugged back in so that it still plays
it
and that's basically it that's the
rundown on it uh guys and I will see you
in the next video let me know if you
have any questions or if you have any
problems with this particular method
I'll see you later

================================================================================
ARQUIVO: Unreal Engine 5 - GASP DAO (Update 1.10) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

Updates Include: 
Expanded Layering System
Fire Recoil Anim
Lyra Dance Anim
Aim Offset Refactor

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

0:00 Intro
1:30 Aim Offset
8:38 Overlay Slot
10:48 Layering Expansion
11:00 Body Slots
11:23 Arm Layering Explanation
12:23 Data Asset & Layering
18:05 Final Thoughts

=== TRANSCRIÇÃO ===

all right guys so I'm back with another
video and I'm going to discuss the
changes I made in this
update so I'm using a blend space now
which is a little bit smoother it
doesn't jerk as much uh and on the spine
one uh the spine one is still here but
there's this weird hitch that happens
when you're uh trying to break it by
swiveling left to write really
fast uh so this looks a lot better in my
opinion than the
spine uh version so I've made quite a
few changes uh today in this version
before I released
it and so I did bring some animations
over that are being applied additively
during the
fire now what you may not see is that
the left hand is actually kind of moving
on that one a little bit
just ever so
slightly I'll uh I'll fix those
animations
[Music]
later so anyway I'll go over that here
in a minute I'm also also made the per
request I made the layering system a bit
more
complex I'm going to go over the aim
offset for first and then I'll go over
the changes that I made on the layering
and then I'll touch on the slots as well
while I'm going over the
layering so this is a if I go to the
anom graph over here near the end you'll
see
that and I'll go I'll do a full review
of this entire system again uh sometime
over the next week I'll make one it's
going to be quite a long videos so I'll
have to find time for it and I don't
think I going to have time this weekend
I have other stuff that
I'm that I have to do
anyway uh I may revise this part of it
at a later date but for now I'm just
going to leave it like this what I'll
probably do is I'll probably have these
blend spaces set from the data asset
instead of
uh having to make manually set them from
here that's probably what I'm going to
do so they'll just be one there now
inside of this
layer you'll see I have my finger
correction
here and let me just color code
that want to color code this one
too I'm just going to color coat all
mine gray so that that y'all can
identify the ones I did more easily
versus the
original uh sample project
notes but anyway right here you'll see
that if there is no blend space set then
it simply won't apply the blend space
um right here this is a finger
correction uh y'all this was in here
before I just kind of rearranged it and
I'm actually really only doing this for
the right hand right now but I'll
probably have it set up so that you can
switch between right and left hand in
the
future uh especially since you know they
have the ALS animations y'all might want
to bring in for the bow and and the bow
is a left-handed bow
so well it's held with the left
hand I guess you could still say it's
right-handed but
anyway if we're in the unarmed State we
will not apply that because if we do
then the fingers will uh the fingers
will not match it'll look like he's
holding a gun when he's not so there's a
spine based AO so if you go under
variables overlay and AO down at the
bottom you'll see spine based AO and
that's what turns on the spine based
rotation and on the event graph uh
ignore this this was just an experiment
but I'll leave it in there for now
so in here under the update essential
values here's the aim
offset I did away with my old uh manual
calculation it wasn't really adding
anything uh to it it didn't make the
problem better uh as far as the
jittering uh
so I just went back to how they were
calculating it but the spine rotation
only getss updated if spine based AO is
set and for those that were that pointed
out the problem during
the uh during the Orient to movement
mode which is
the mode
where you don't strafe I'll show you I
keep forgetting what they call that so
if you press the middle Mouse button
you'll see he doesn't strafe he just
moves in the
direction so there was a problem where
it was uh wrapping around a little bit
too fast and I still have it wrapping
around fast because I know a lot of
people uh they want extremely fast
reaction times now I will go ahead and
point this out guys if you're trying to
make a competitive firstperson shooter
game or third person shooter game motion
matching probably isn't what you want
I'm just going to go ahead and put that
out there right now because motion
matching is not designed for reaction
time uh there is going to be uh you have
to work around the reaction time of the
animation and so if you need faster
reaction time and the person who made
the animations have to redo the
animations so that the animations are
designed to have faster reaction times
because motion matching
is not going to give you any faster
reaction times than what the animations
provide uh and that's just how it is so
you can't make the animations more
reactive than what they were made to be
it's just that
simple
anyway so I fixed that you can look over
this but
basically if the current uh yah
if the difference between the current
yaw and the last yaw is greater than
some degree then we will
interpolate if not then we won't
interpolate I'm using a constant
interpolation because you don't want it
the interpolation to speed up and slow
down you want it to interpolate at a
constant rate uh and so that's why I
choose the constant
interpolation that's how that works now
if you do decide to use the spine based
aim offset now moving
on I got too many stupid windows open
here let me
see me close some of
them so that's the aim offset logic now
it doesn't really matter that I put it
after the offset root bone I was just
experimenting to see and to me it seemed
like like the hitching problem was a
little less
noticeable uh During certain uh turns uh
while
running uh and so that was the reason
why I put it after that and I decided
just to keep it after it if there's ever
any problems I can always move it back
over here because it's all in this layer
and so it's easily moved and
transported don't remove this uh this
corrects the weapon
it keeps the weapon in placed in the
hand as it is in the overlay State
whenever something is played on the
default
slot so over here you'll see I added an
overlay slot right here so if you want
to Overlay something in such a way that
it matches the current uh overlay
settings for your character at this
current point in time then you can just
play it on the overlay uh slot and it'll
match those settings automatically
uh and in most cases uh like re
animation reloads uh fire fires uh fire
mon montages stuff like that you know
throwing a grenade or something th those
would work fine uh from the overlay
slot now you can uh
play you can play additive animations on
slots and in the background un real
automatically applies that for you so
you don't need one of those apply mesh
space additives or apply local space
additive unless you need to control the
alpha of it in which case you have no
control over the alpha on a
slot so for the most part you can play
anim montages additively on this slot
with no problem it'll work fine in fact
that's exactly what I'm doing inside of
here with these and a
montages see I'm playing it on the
overlay
slot so the enem uh so if you go into
your enem slot manager you'll see I I
created a new group called overlay and I
have all these different slots in
here and if we go into the layering
you'll see we have our locom motion
local space uh slot and that just means
that The Locomotion is being applied in
local space to this slot and on this one
in mesh space to this
slot over here I've actually created a
proper
uh leg layer and I've split the Torso
into pelvis and spine
and then you'll see that we have a
pelvis slot spine slot head
slot left arm slot and right arm slot in
case you actually need uh to play
something over the top of
those now these second ones right here
uh I know a lot of and I I'll go over
this again in that video whenever I do a
full breakdown but a lot of people are
confused about this this only adds some
of the locomotion
motion of those bones so how when he's
running how is how his arms are moving
whenever uh how he's swinging his arms
while he's running unarmed uh it adds
some of that movement this will add some
of that movement back to the left
arm this will add some of that movement
back to the right arm uh basically you
can think of it like that and these
right here make sure that they
accurately represent the
overlays the overlay positions for the
arms so if we go into our data
asset I did
add some slight changes to the tool tips
in
here so that you can uh understand them
a little bit better now you'll notice
that on the spine basically almost on
all of them except for one
uh I have it playing full weight on the
pelvis but not on the spine why well it
goes into this this is uh an order of
operation
thing
so we have the pelvis
here and we're excluding the thigh
that's what negative 1 means it means
exclude the thigh chain and if we look
over here
and if we select everything in here
except for the
thighs uh then that's what's being
that's what this is being played on it's
being played on those bones uh by this
amount so if it's 0.5 then we're playing
50% of this on these bones and the other
50% is coming from here right here
now I said that because I want you to
understand that if we're playing this in
mesh space already at full weight
there's absolutely no reason why we need
to do it again on the
spine same with the head if we wanted
the head to be in mesh Space full weight
there would be no reason why we would
need to be playing it on the head and
therefore these weights should be zero
because if these weights are zero these
do not get evaluated and therefore it
say
performance
so just putting that out there that's
the reason why I did that now I did it
differently though on the running
aiming uh I am not playing it on the
pelvis but I am playing it on the spine
why because if you play it on the pelvis
it will drop the pelvis uh closer to the
ground and to me I thought that looked a
little funny uh for the running rifle
aiming and so I excluded that I set it
to zero so that it would not be
applied now I am going to show you what
it looks like when we were idle aiming
and I play this on the
legs so you'll see what how the legs
look right now they Bend that's because
of the pelvis is dropping clo lower to
the ground and that's because I have
this weight set to to one if I set that
to zero you'll see his pelvis does not
drop I could set this to zero and I
could set this to one and he'll still
lean forward but his pelvis won't drop
but now his legs look a little funky uh
because he's bending over but his legs
are straight they should be bent
so I'm just going to play mesh space on
the pelvis and spine uh by setting this
to
one now if I do this to
legs you'll see that now his legs are
spreading apart and the reason why is
because we're adding we're adding to
this
pose the overlay pose this is the actual
overlay pose we're adding that to this
uh and the reason why it spreads it
apart is because the thing that we're
using as a reference has his has both
legs centered right here in a line and
so it's calculating the distance from
that and it's adding it and that ends
up moving our legs out further you
see so anyway I'll go into that in more
depth in that video that I do later this
week but I was just going to point that
out to you
now
the I'll show you what I changed on the
idle
rest so on the idle rest you'll see I
have arm LMS set to
0.5 and that's just to stiffen it up a
little bit uh and the reason why I
needed it to be a little bit stiffer is
to prevent that jerking of the arm
whenever we stop and it still actually
kind of does it sometimes just a little
bit and so you could actually probably
set it a bit higher maybe something like
7 and you'll see it it really Smooths it
out so I'll probably uh leave it at 7
but y'all can mess with that if you if
you want it does make
it uh well it doesn't really make it
stiff and the reason why is because
we're is because of the
ik it's connected to a virtual bone
that's connected to the right hand and
since the right hand is still moving
freely and this has to follow it that's
the reason why we're actually not uh
that's why it doesn't actually look
stiff by making this stiffer um but yeah
anyway so that's basically the breakdown
on it I think I covered
everything yeah the aim
offset I tried to get uh this as smooth
as possible but it's still not perfect
I'm still looking into if anybody else
has any ideas on how to make this better
then feel free to let me know but I
don't think there's much I can do about
it until they come out with
5.5 because I do believe
that the two things that are causing it
I believe one is offset root bone it's
it it's
one it's one or the other or it's both
but either offset root bone or steering
it could be a mixture of both since
those kind of work together but anyway
I'll see you guys in the next video

================================================================================
ARQUIVO: Unreal Engine 5 - GASP DAO (Update 1.13) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

GASP_DynamicAdditiveOverlay(1.13):
-Fixed Snapping of BlendSpace AimOffset
-Fixed M4A1 Finger Issue Caused by Sequencer Bug
-Re-Aligned Rifle Aim Animations for more Accurate Aiming
-Fixed Shoulder Problem During Turning and Aiming
-Temporary Fix for Head Problem where Head was looking in totally different direction while turning
-Refactored Blendspace (Now being set from the Blueprint Weapon Struct)
-Added Interpolation to Hand IK for smooth blending in/out of Hand IK

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

=== TRANSCRIÇÃO ===

all right guys so I made uh some changes
there's still some problems I still need
those transitions I'll have to make
those at a lat date but I'm about to get
real busy so I'm not going to have a
whole lot of uh time to work on this so
I'm just going to go over all the
updates uh that I've
done and
uh yeah so
first the uh firing mechanic
the left hand is synchronized with the
right hand now so that it moves
properly I fixed the finger issue so the
fingers are
actually in
the
oops so the fingers are actually in the
right locations
uh I don't remember if that was a
problem or not but it seems that for
some reason when I modified these in
sequence
and I saved
them the baker it screwed something up
so there's a lot of bugs when animate
making animations in Unreal Engine right
now a lot of bugs and so uh one of those
bugs was causing all kinds of problems
it was causing the gun to offset it was
causing the fingers to mess up and the
only thing I had to do to fix it is to
open the sequence the level sequence
again and just resave it I it's really
weird uh but it has something to do with
the layers too uh so you
know but let me just show you if I go
into one of these animations for example
you can go to edit in sequence an open
level sequence and it'll open the last
one that I had open
and it's messing up obviously because
I'm playing uh you're not supposed to do
that when you're running the
game so I'll do it
again but yeah so it'll open up the last
one that I
had it actually looks like this is not
properly synchronized oh it it's it's
probably Sy synchronized so that's
another bug uh if you just seen that
that's another bug
it happens sometimes when you first open
up uh these so you have to scrub one
frame and then scrub back and it should
be fixed so that's one thing that I
fixed uh the rifle fire got fixed the
finger issues on the pistol were fixed I
refactored the aim offset Logic
restructured the folder hierarchy I'll
go ahead and show you that
so um yeah these SE are Dao enms now and
under the blueprints it's
Dao and held object stuff is inside of
here uh enums and structs are inside of
data and the layering data right here
obviously and I didn't do anything with
the projectile I just left it there so I
had
to turn some tricks to get this Chooser
table to move to another folder it did
not want to move to another folder uh
seems to be some kind of
bug uh I fixed the aim sweep and the the
way he was holding the gun uh for some
reason whenever I brought it in here it
got
misaligned uh from what it was so I had
to realign it so that's what I did I
realigned it that could partially be too
because in iclone
there is no orthographic camera and
orthographic camera is very important
when you're trying to align things uh it
makes it look like a sheet of like a
drawing on a sheet of paper basically it
makes it 2D uh if you don't have
orthographic then your camera position
is going
to
determine if it looks straight or not
even if it is or isn't so uh that's a
problem when you don't have orthographic
cameras uh
so I disabled the aim offset while
traversing and so that now you can't
turn it in play or you can't aim while
you're traversing so I'll show you
that wait one
second and I did uh make some tweaks to
the blend space so that the blend spaces
would let me see I'll show
you so the blend space has a smoothing
time now just a very short smoothing
time uh and it's linear because I I
don't want it to speed up or slow down
it messes stuff up I want it to be
linear um so yeah I made that lanar
and it prevents it from snapping back
around when it wraps around for example
if I'm over here and I go over here
you'll see it it quickly turns but it
doesn't snap and that's what we want so
I fixed that I adjusted the weight
speeds I set it to
um let's see what else did I change in
here so this is what I changed on on
this right here I set this up on an on a
blend space inside of the character uh
blueprint you'll see I'm using uh a
blueprint interface to pass this on I
removed some stuff that actually wasn't
being used that was left behind from
experimentation on the an animation
graph so some of these uh some of those
ones that were in here that I wasn't
using I removed them
I added interpolation to the hands um so
it'll interpolate slower when when
turning on but it'll interpolate faster
when turning off uh that was just what I
decided to do and I'll show you what
effect that has so if I'm aiming the gun
and I Traverse you'll see his hand
doesn't snap back into place his hand
interpolates into place
uh which makes it look a lot better and
if you don't have a slow interpolation
it'll look funky uh and that's the
reason why I did that so that looks a
bit smoother now
too the aim offset should be more
accurate now than what it was
before
uh there is a problem uh with the
shoulder looking a little funky uh
during really extreme uh angles and
turns and that's because of the way that
I'm having to handle the arms in order
to to keep them accurate and the way
that The Locomotion animation is playing
as I'm overlaying it uh and
so if we go back over to these right
here you'll see that like on the idle
aiming or on the running aiming you'll
see that I'm just playing overlay on the
arms and that's the reason why it's
doing
that
um I have experimented by setting this
to Overlay the spine
U but if I set the spine to Overlay it
ends up it it fixes the problem but it
ends up looking a little funky uh so if
maybe if we just make it really low
it'll help prevent that uh so you see it
looks a little bit better
now but the Torso is going to look a
little bit stiffer
uh and so if I set this to say
1.0 you'll see how stiff he looks it
completely fixes the
problem uh but he ends up looking really
funky like he's trying
to maintain a correct posture the entire
time or something so you could set it to
something low in actual reality I'll
probably just go ahead and do that and
you guys can turn it down if you feel
like it makes it look a little too
funky
but
yeah you can also experiment with that
too so I'll just leave it like that for
you guys and while this video is
compiling I will be updating uh the
download
with the new version of the
project the next thing I'm probably
going to do if people oh as soon as
people stop pointing out bugs that I've
uh uh
overlooked uh and and don't feel bad
about pointing out bugs guys if you see
if you see bugs let me know I'll try to
fix it uh I'll try to make time to fix
it but as soon as I get all that stuff
out of the way then I'll start expanding
this I'll add trans positions uh so that
he puts his gun away whenever he goes to
Traverse I could make it so that the the
gun stays flat against the
surface uh that might be one approach to
it now also there's this thing with the
head too um I I kind of fixed it so that
it's not as bad and I'll show you what I
did to fix that because the head was
turning a little bit too much and what I
basically did as I just set it to
Overlay uh so when he's running and he's
turning real fast his head will be
looking in a in a totally different
direction than where he's aiming his
head will be looking off to the right
but it'll be aiming like in this
direction and it just looks
funky uh so I put it on overlay to try
to reduce that a little
bit it's kind of hard to completely
reduce it without making it look
funny uh now I did try using a look at
function but I had all kinds of problems
with that so just so you guys
know um you could do like on
here you could
do well like on here right here you
could do a lookout
function if you want to work out uh the
logic to I tried but I just didn't want
to mess with it there were there was
some problems and I was going to have to
do some complex calculations uh and I
just didn't feel like it anyway this is
all the time I really have for today and
I'm going to be really busy here over
the coming weeks so I'm not going to
have a whole lot of time to work on this
uh but I'll try to get in updates where
I can just point out the bugs and
whatnot and then as soon as I get all
these bugs out of the way I'll start
expanding the system and I'll see you
guys next video

================================================================================
ARQUIVO: Unreal Engine 5 - GASP DAO (Update 1.14) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

GASP_DynamicAdditiveOverlay(1.14):
-Add DisableIK MetaData Curve now to Disable all IK
-Moved Update Layering Settings to Worker Thread
-Added Ability To Properly Inject Layering Settings from Blueprints for Animation Montages
-Fixed Slow Aiming when coming out of a Traversal while Aiming.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

=== TRANSCRIÇÃO ===

all right guys I'm back with another
video so I was just going to show you
this so I'm playing the Montage on the
overlay slot with custom uh layering
settings now you will notice that uh
because of the pose ends uh in a
different pose than the pose that he's
in right now it is going to snap uh
that's just how it is um I'm going to
look
into uh possibly experimenting with a
procedural foot correction syst setup uh
or system for this at a later date maybe
next weekend I'll uh experiment with
that
idea but right now it's important for
you to know that on that to disable ik
you have to add a metadata curve to your
animation I've already added these to
all the uh traversal animations so we no
longer have to depend on whether the
default slot specifically is currently
active or not uh
if we open this up and I'll just do this
again
so I don't actually want this want that
on here obviously because he's holding a
pistol but if I needed to disable ik I
could add a metadata and in case you
guys don't know the only difference
between a curve and a metadata is that a
curve starts with a value of zero
metadata starts with a value of one it's
a static value you cannot change it and
since this is a disa
uh and we only need this to be present
when we want it to be disabled uh we can
just use a metadata curve and so if you
add a metadata curve of disable ik it'll
be a value of one and that'll
automatically disable the
animations so in the aim offset you'll
see that I'm getting the I'm disabling
this if the disable ik has an Al of one
and on
here I'm doing that to the leg ik as
well because in some
situations uh the leg ik can actually
cause problems when you're playing
montages so I went ahead and did that
and I just inverted the value so I
remapped it from 0er to one to one to
zero so that when this is uh disabled
the leg I will have an alpha of zero
which means it'll be
disabled
um yeah so another thing I did right
here is a performance thing I moved it
from the game thread in case you guys
don't know this right here is updated on
the game thread this and everything
connected to it so inside of here you'll
see I disabled
this and if we go back over here and we
press this hourglass or this magnifier
glass icon you'll see I just moved it
into here I made it thread safe and I'm
getting these uh using property access
uh
nodes so I went ahead and left this in
place I'm not sure how much of a
performance gain you'll get from that
but by default it's important to know
that testing is enabled which means this
will always be true when you disable
this what happens
is if if we
say go
here yeah so so on the update layer
layering settings so you'll see this is
updating the layer settings but if we go
into the update layer values you'll see
it's
interpolating when it's done
interpolating it'll
enable uh or it'll disable should update
layer data when it is interpolating
it'll enable it to prevent it from being
shut off if we don't do that it'll be
shut off
automatically uh so if we're playing an
over overlay slot right now I only have
the set up for an overlay slot so um and
this is is slot active is the only way
to tell if a slot is playing uh if a
montage is playing you can't say is any
Montage playing
because that's not thread safe it's not
a thread safe function which is why I
had to use this uh so we would actually
have to check for each slot that we want
this to bypass the Chooser table for if
we do not bypass the Chooser table uh
then the Chooser table will override
any
injected layering settings that we apply
and I'll talk to you about that here in
a second
so that's basically what I did I moved
it from the uh game thread to a worker
thread to reduce the workload on the
game thread uh that should improve
performance under high stress
situations now as far as injecting I'm
using the blueprint interface that I'm
using for this stuff here and I'm
setting the layering settings and um
enabling should update layer data in
case uh you guys disable testing you
need this to be enabled in order for the
current layer settings to start or the
updated current layer settings to start
interpolating otherwise they'll stay as
they were
um
so over here I'm just getting the anim
instance off the mesh and which is this
right here it's the animation blueprint
and I'm using I'm calling that blueprint
interface function and I'm passing in
the data asset you could technically do
this from a an anim notify on the
animation Montage itself uh and I might
set something up like that for you guys
in the future but it's not difficult you
could do it yourself if you wanted to
and you'll see I have disable I uh set
right here and these are
irrelevant oops let me
see yeah
so in anyway that's that's all I'm doing
and I'm playing it on the overlay slot
oh yeah that's what I forgot so on the
animation graph if we go to the ANM
graph and we go into the layering
settings I'm updating the uh or I'm
playing this slot right here before I
cach the overlay pose and the reason why
I'm doing it right there and not right
here is because if we if they're holding
a weapon and you're playing an animation
on that slot where he's not holding a
weapon then he won't be holding the
weapon properly anymore and the reason
why is because the weapon bone will be
oriented differently than it is in uh
this overlay this current overlay State
and so over here you'll see that I'm
fixing the weapon bone orientation to be
from the overlay state so if we were to
play it right here then it would just
grab it from that Montage that's the
reason why I put the overlay slot inside
of here
so I do have all these other slots here
too you guys might find it
useful uh might find them useful in
certain
situations and they should work just the
same as as I am playing it right here on
this
one
and that's pretty much it that's the
update for this guys and tomorrow I'll
probably be doing a video where I go
over this entire system all over again
from scratch since the last one is in
fact
outdated um and I'll see you guys in the
next video

================================================================================
ARQUIVO: Unreal Engine 5 - GASP DAO (Update 1.15) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

GASP_DynamicAdditiveOverlay(1.15):
-Renamed Data Asset Arms for better Clarity
-Added another Slot for Full Body Overlay 
-Re-named the OverlaySlot to UpperBodyOverlay

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

=== TRANSCRIÇÃO ===

all right guys so I made some changes
I'll go ahead and show
you
so there's a bit of uh foot sliding
there as you can see it it didn't snap
back in place though which is good
that's kind of what we wanted we didn't
want it to snap back in place and I'll
explain that to you here in a second
I'll just go ahead and show you the
rifle
so obviously that animation doesn't work
real well for the rifle but you could
have different data
assets per state and have it select the
data asset based on the state so you
could use a you could potentially use
another Chooser if you wanted to but I
don't really see how that's why that's
necessary it would be just as EAS easy
uh to do a a a bowling check on
that so let me just go ahead and show
you what I did so I changed the names of
the slots to Overlay full body and
overlay upper body I added the full body
one the overlay slot is now called
overlay upper
body and I'll explain to you why so as
you can see here we have the overlay
full body and overlay upper body
the this one is for the pelvis up now
when you play an animation on this it
Blends in and it Blends out but what
does It Blend in and out of it Blends in
in and out of the source it does not
blend in and out of this because this is
not the source uh it's blending out of
the it's blending in and out of the
overlay uh
States so this right here it's blending
in and out of that
so
therefore the anything that's playing on
the legs or whatever on the motion
matching
is it's not going to blend into that
it's going to ignore that and that's the
reason why we needed an overlay full
body I'll investigate uh some way to
handle that I'm not really sure how else
I would be able to handle that but there
may be something I'm overlooking I'll
investigate that further
so for the pelvis up if you need to
place something on the pelvis up arms
and Spine and neck and head and all that
then you want to play it on the overlay
upper body if not then you want to play
it on the overlay full body either way
it doesn't matter you can inject
the you can inject the layer settings
the same way from right
here and like I said if you needed
multiple you could do a
select and then you could plug in a
Boolean Val value right here that
decides which of these get selected um
you can do a Chooser evaluation but let
me just uh undo that you could do a
Chooser evaluation but it seems like
choosers are actually quite performance
heavy so it's up to you if you want to
do a Chooser
evaluation um
so I'm thinking maybe in the next update
they might uh fix that and improve
it so anyway when you're playing it on
the
overlay a full body slot then what
you're doing is you're kind of solving
the problem in
reverse and if it doesn't crash I hope
it doesn't crash okay it didn't crash
cool so if I put the weapon in my hand
and let's say that I set this to
Overlay and
overlay then you'll see that the hands
do not move but if I set this to base
and
base then you'll see that the hands do
move so depending on the situation you
might want to treat the arms differently
also you'll notice that I named this
main pose in secondary motion
um maybe I should have said main motion
and secondary motion
uh but anyway you guys can let me know
if you think of a better term than main
pose but that just means that it's going
to respect the main
pose more accurately based on uh this
most almost every single time you're
going to want this to be overlay uh
during aiming but whenever you're
playing a montage you're going to want
it to be the base because you're playing
that on the base and the overlay is
getting over onto the base and so you
want to say hey uh do not uh modify the
arms let them play as they were intended
to play on the base and you can also
even say 0.5 and 0.5 so that you're
Blended somewhere in
between you
see and
so and so you can update them in real
time
but
yeah 0 five with this set to base would
mean that it would be 0.5 mesh space
since the pelvis is from the pelvis up
everything is being applied in mesh
space
100% you don't have to apply this on the
legs
actually uh so that's that's up to you
in fact that might have been causing a
problem let's see if I put it in
Lo yeah doesn't seem to have any effect
really but
yeah so anyway you guys get it so the
slight foot sliding is still there
obviously and and it's going to be there
and the reason why it's going to be
there is because of the fact that I
don't have a foot locking uh procedural
foot off or procedural foot correction
system in place yet I'm going to
experiment with that next uh weekend and
I'll get back to you guys on the outcome
of that but I just wanted to give you
guys a rundown on how these slots need
to be handled so that people don't get
confused I'll do a full breakdown of
this entire V uh uh series tomorrow it's
going to be quite a long video but I
promised you guys that I would make
another one that was more up to date and
based off the current uh layout and so
I'm going to do that and I'll do that
tomorrow and I'll see you in the next
video

================================================================================
ARQUIVO: Unreal Engine 5 - GASP DAO_ Adding States (Part 1) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

In this video I'll show you guys how to use the control rig to modify One Handed Poses, in the next video I will show you how to set them up on a State. The Next video after that will show you how to modify the Rifle Poses for Custom Weapons.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Part 2: https://youtu.be/UDIY-hd4odY

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

00:00 Exporting ALS Assets
02:10 Retargeting
05:48 Modifying Aim Sweep
14:09 Saving Hand Pose
17:35 Modifying Poses

=== TRANSCRIÇÃO ===

all right guys so I'm back with another
video and today's I'm going to show you
how
to set up a state for
the
torch so open up ALS and go into
meshes and right click on the torch go
to asset actions export
I've already exported
it but I'll export it
again I normally disable a level of
details and collision unless has custom
uh lods or Custom Collision if it
doesn't in which case I doubt these do
then I just export it without them
so I'm not going to actually export that
because I've already exported
it but after that you can go into the
character assets mannequin skeleton
animation examples overlay torch
and you're going to export the torch aim
sweep and the torch
poses same way ASA actions
export and then export them
after that you can open up uh the
project make sure you have
uh version 1.04 or
later because I've uh set up the ue5
mannequin control rig for the ufn
one and so what we're going to do first
is in the UE ue4 medin folder we're
going to go to ALS POS
and we're going to import those poses
onto the ue4 mannequin since they share
the same skeleton as the ALS
Manu let me see here if I can remember
what folder I put them
in yeah this one
then I'm just going to go ahead and
import those
two
poses on to the
ua4 I normally check use default sample
rate for the export time under
Advanced and then you can select both of
these and go to retarget
animations and type in UF in select that
now select these two with the Stars on
them those are the ones unless you saved
them they should have the stars on them
that means they haven't been saved
yet now we're going to
export characters
ufn
animations and I should probably start
read doing this uh folder structure here
but under here I'm going to make a new
folder I'm going to call it
[Music]
torch and Export
those and it may open up the folder for
you in the content
browser if it doesn't just go back to
that same folder and you should see
them now under blueprints weapons we're
going to I mean it's not really a weapon
so maybe we should call that folder held
objects or something but anyway I'm just
going to call it
torch and I'm going to import the torch
mesh everything should be left at
default for
that and there you go you probably won't
have any Collision
currently okay it does have Collision if
you check simple collision and it shows
it then you'll see it does have
Collision I think that's a little bit
too
complex so I'm going to delete
that and you can give it a capsule
collision and that's far simpler and it
still covers it so that should be
good you can also change the default
Collision settings for this object down
here under Collision Collision preset
but we don't actually need to do that
right now I don't guess actually I guess
you could go to
custom
and you could tell it to ignore
pawns it may still block it though uh
because I believe it's also considered a
World Dynamic I'm not sure I'm not an
expert at Collision
stuff I rarely mess with
it but anyway so we got all that in and
now what we can do is we can go back to
the
ufn torch
folder and open up the
Sweep All right so I had to make some
modifications to the control rig so by
default it's going to constrain the ik
hand gun bone to the right weapon bone
and
so I mean we're not really using it so
it's not that big of a deal but anyway
so I'm just going to go to bake to
control
rig and actually I should rename
this so I'm just going to rename this
real quick to CR ufn so by the time you
watch this it'll have already been
renamed to that so go to edit and
sequencer big to control rig and
crfn mannequin body and bake to control
rig and now over here on the scene over
by the unreal logo you should see your
guy with the control rig first thing
you're going to notice as all these
controls don't be alarmed uh this blue
arrow right here is for the weapon the
weapon L bone and this red arrow over
here is for the weapon R bone
so I'll do more videos of like this for
custom characters in the future but for
now we're just going to do this from the
ufn so that you guys understand how this
works at least until they fix the
modular control rig bug that messes up
the shoulders during the backward solver
[Music]
so let's see first thing we're going to
do is scroll all the way up to the top
and collapse this right here and we're
going to right click on it and go to add
section and
additive we're going to expand this one
frame in case you guys don't know what
an additive track is it literally adds
whatever changes you make on top of the
base pose so instead of having to make
your changes across all these keyed
frames that's what these dots are these
are keyed frames instead of having to
make your changes across each and every
single one of these you can do in one on
one frame of your additive track and
it'll propagate across the entire
animation and that's the reason why
we're using an additive track so the
first thing we're going to do is we're
going to go into our weapons folder
torch drop the torch into here and now
with the torch still selected go to add
add to
sequence add torch and then right click
and convert to
spawnable now you're going to press this
plus button attach and attach it to that
animation it's going to ask you what
bone you want to attach it to and you're
going to attach it to the weapon lbone
in this case there will be an offset as
you can see right here there's an offset
so we're going to reset that on both of
them so that there's no rotational or
locational offset
set and now it's perfectly oriented with
this uh weapon bone here by default we
are in World coordinates so if you look
at this Gizmo over here uh World
coordinates says X is this way Y is that
way and Z is up but when we're working
with controls we don't want to sometimes
we want it if we're in ik mode we want
it to be
in World cord Ates most of the time
but sometimes we want it to be in local
coordinates even in ik mode most of the
time though you're going to be using
local
coordinates so inverse kinematics uh
allows you to to get the hand and move
it from here uh over here it allows you
to move it in a straight line whereas in
FK mode you have to you have to manually
rotate everything into position and
so some things are not appropriate for
FK mode obviously and so we have FK and
ik mode and they're all both of them
have different
purposes so for this torch we're just
going to rotate at
180° actually
160° and then we're going to press the
blue arrow and it looks like we're still
in world
coordinates so I'm actually just going
to undo
that let's
see yeah and now in local coordinates so
if you see this Gizmo this is the local
coordinate and now we're going to rotate
at 180 degrees there we go and now we're
going to use this Arrow to just move it
up by default this is set to snap every
10 centimeters we're going to set that
to one
you can turn it off too for if you need
Precision I'm going to set this degrees
down to 2.8125
[Music]
pretty good so looks like our finger
controls are not currently
active uh I don't know if they removed
the finger controls but I know
that the
u5 uh
default template
one had finger controls that allowed you
to U Move the fingers together together
it doesn't look
like this has it
though okay well I might swap this one
out later for the other one since that's
the case what it means is that we're
going to have to rotate each of these
finger joints
individually uh and actually all these
changes that I'm making are pointless
because I have not set this
to auto key and if you don't have it set
to auto key then when you move it and
move it back it'll reset everything so
I'm just going to copy this actually I'm
going to copy this entire transform by
shift right clicking on the top of this
you can also just right click and copy
all properties and
category and then I'm going to show
you okay actually looks like it did key
it so it it may or may not reset in some
cases it depends in this case it did not
reset okay it didn't reset that but it
reset the fingers so let me just rotate
this one
out and I will
rotate and I am in local space I'm going
to rotate this one
out if you're in World space and you do
this with the fingers it's going to do
some funky
stuff it looks like the finger is bent
so I'm just going to try to straighten
it out maybe it's not bent maybe I'm
just looking at it wrong but it looked
bent to me that's not at all
uncommon um for the fingers to bend
funky whenever you retarget the
animations that seems to be a a problem
area I don't know what I was rotating
but I'm going to undo that
and now that we've got all this right
here what I can do is I can come over
here and figure out okay these are the
controls for
that I'm just going to
select all of
these controls right
here for the
fingers then I'm going to shift select
this
and let's see yeah that's it should be
it so with all that selected I'm going
to go into poses and create a pose and
I'm going to call it torch
hold
pose and I'm going to create it and
you'll see there's 20 controls and so it
saved all those 20 control rotations as
a
pose that allows me like if it changes
later on whenever we do the poses after
this then we can just paste uh this hand
pose and they'll all have the same hand
pose uh and the weapon bone will be in
the correct
spot so as far as that goes that's
basically all we have to
do we don't have to do anything
else but we need to make sure that there
aren't going to be any problems I'm
going to
let me see
here I'm going to press this show tabs
button and then I'm going to dock this
if it doesn't crash I'm going to dock
this up in here right next to the
animation
tab I'm going to save that asset in case
it crashes I'm just going to save
all
so let's you can hold down control and
pull back on your mouse will to zoom out
right Mouse button and drag moves you
around
um
and yeah that's basically it so you want
to make sure that you have one extra
frame here at the end if you don't then
when you get over here to the end it'll
do that and it looks like it did that
anyway so you see what's happening there
uh it doesn't look like it was keyed
there oh it oh never mind this this is
fine the animation is fine if we come up
here or down there I guess to the bottom
let me
just you'll see right here the torch is
touching the end but it's
not registering this is the bug I was
telling you about if you don't extend
things one frame then that's basically
what they'll do and if you don't do that
on an additive track then the bone
itself will snap back to where it
originally
was so that's why I say that you have to
extend this one frame so I'm glad it
actually did that because it gave me a
chance to show that to you guys so now
you can save this and if you ever need
to make any slight modifications to this
then you can always come back in here
and do that so I'm just going to close
this one out
now and I'm going to go back back into
the torch folder and open up the
poses and I want to do the same thing
with this
one except this
time I don't actually need to position
the hands I do need to bring the torch
in there though just to see and make
sure that it's going to be in the right
correct position
convert to
spawnable
attach weapon
lbone and I'm going to select this and
reset
those and I'm going to drag this out
just a little bit beyond the the border
of the animation this is the end of the
animation this is the start of the
animation that's what the green one is
the start and the red one is the end in
case anybody doesn't know
and now what I'm going to do is I'm
going to create an additive track before
I change anything I'm going to create an
additive track extend this one frame and
if it doesn't let you extend it it's
because it can't see the frame so zoom
out and then drag until it snaps because
it snaps to the
frame and now I'm going to press select
I'm going to check key and I'm going to
paste
and now you'll see that the hand is
properly grabbing it just like we were
in the last one and so they
match and you'll see since we did that
across all
frames it's propagated itself throughout
every
frame and so if you need to make an
adjustment to something let's say you
want to adjust this Frame right here
don't try to move the stuff into
position and then key it because it'll
interpolate between this Frame right
here this key frame right here and
whatever key frame you put right here
it'll interpolate to that and that'll
affect all these other poses so since
these are poses what you want to
do is I'll just go ahead and paste this
one right here but what you would
normally probably do is select all the
controls that you want and then key them
right here you can also use this to
select it uh you could save just save
these just for separating the body parts
uh or you could just go up to the very
top and you can key the entire thing
right here so if you need to move the
pelvis or the arm or something like that
just key this entire thing one frame
before you want to change it and if
there's a frame after it that you don't
want affected by it then key that frame
too and it'll keep it from changing that
frame as as
well so now that we've done that what we
can do is we can
actually rotate this in and you'll see
automatically ke it because I have this
checked and you could leave that finger
like that or you could move it in just a
little
bit something like
that and you'll see because of
the way his hand was holding it in this
this one it kind of messed things up
just a little and there's
actually there's actually some
uh uh controls back here they're hidden
I don't know why
but I can rotate that this
way to so that that finger isn't like so
close to this one and that's basically
it I save it and guess what I'm
done all right so I'm going to take a
short break cuz it's starting to get hot
in here and when I come back I'm going
to show youall how to set that up on the
on the anom graph

================================================================================
ARQUIVO: Unreal Engine 5 - GASP DAO_ Adding States (Part 2) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

In this video I'll show you guys how to setup the Corrected Animations/Poses in a State Machine. The Next video after that will show you how to modify the Rifle Poses for Custom Weapons.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Part 1: https://youtu.be/tYFypFiuVh8

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

00:00 Setting Up Torch
05:22 Setting Up Input
12:54 Setting Up States
18:40 Hand IK Note
19:50 Inverting ALS AimSweep
22:20 Troubleshooting
24:00 Setting Up Aiming State
25:55 Setting Up Data Assets
30:50 Modifying Layering Settings
31:30 Fixing Input Action
32:00 Modifying Layering Settings
42:25 Clearing Gun

=== TRANSCRIÇÃO ===

all right
so now we're going to set up the
animations so first off we need to set
this up so that we can handle it so
we're going to go into the character
blueprint the
CBP and let's
see I'm just going to find
references I don't
know exactly what
all he
did to this okay he's still using
this so we're going to create another
and I might refactor this too by the way
guys this is just a temporary
uh
setup so we're going to get them the
torch mesh
and we're going
to oh it needs a skeletal mesh
okay
um we could make these skeletal meshes
but I don't have that PL plug in
enabled or we could just easily make
this a skeletal
mesh so I'll tell you what until until I
fix that I'm just going to do it this
way and some of you might not like it
but uh until I refactor the way that I'm
handling these uh being attached here
then what I might end up doing is I
might end up making a uh attachable or
detachable
component that handles this and then
y'all can just remove it so go into
plugins and then enable the skull tool
mesh editing
tools and I'm just going
to okay I don't know what's going on
here
oops
okay so let me just reopen
this because it froze there at the start
not thought it had opened up two windows
but it didn't by the time I realized it
was already too
late and it looks like I opened two of
them
okay so one thing y'all should know is
that if you do accidentally open up two
of them and you go to save something it
won't let you save it because you have
two copies
open so you're going to have to close
one of them
so I don't know why this is taking so
long but it is oh probably because of
that I'm just going to compile and save
that so in case you didn't uh see it I
just typed in scale and I enabled
skeltal mesh editing
tools and now I'm just going to right
click and convert to skeletal mesh
and I'm going to change this to origin
so that the root bone placement is at
the origin of that otherwise it'll
offset
things so now I can go back into the
character
blueprint and I can select this skeletal
mesh right
here
and under overlay logic St overlay data
I'm going to press the back button right
here and now it let me add it so that's
how we're going to handle it for now now
I need to go and I need to modify the
overlay State too so that it has
a state here for our
torch and again I may refactor that at a
later date let's
see layering data
that's the overlay State weapons overlay
State okay I haven't even put that in a
separate folder
so that's
fine I'm going to set that to
torch and if you didn't see I I pressed
the add enumerator
button hope I'm not going too fast for
you guys and then I just change this to
the
torch compile
save always good to do that
so actually we need a button to activate
that so I'm going to open up the event
graph KD weapon
logic and he's set up some enhanced
input actions here so I guess we'll go
ahead and set up some input actions too
go to
input and for now like if you want to do
a weapon uh switching system or whatever
like some games have that's up to you
but I'm just doing a very basic
setup actually I don't need to search
for that it's right here input input
action and it's convention to name it
icore and then whatever so I named it
iore torch we don't have to change
anything in that I don't believe it's
set to digital bull which is completely
fine uh we're just
triggering this and under the IMC this
is our input mapping
context we're going to add an we're
going to add an entry here and we're
going to set this
to the
torch and then I'm just going to press
the three key here and so the three key
will trigger that and if you have a game
pad you can add one for the game pad and
press your Gamepad button and uh or
press this and then press a Gamepad
button and it'll do it so like I might
say you why for
example just giving you an
example
so anyway we're going to type in I torch
and you want this one with the arrow
pointing to the right not this one this
one is a pure
function and for right now I'm just
going to put it right
here and he's doing some replication
stuff I'm not going to go into
replication in this video guys so
um but yeah okay so
he's I guess sending a a
client
yeah so on the inut action
pistol he's uh calling this which
executes on the server it's a client
RPC so we can actually do something like
that that's fine let's go ahead and do
it
so type in custom and we'll add a custom
event and we'll call this uh let's see
what did he name
his pistol held server right so I'll
just call this torch held
server and I will set this to
run on
server and we want it to be
reliable and then this we're going to
call torch held server so this is being
called by the client and it and it's
being executed on the server that's
called a Ser uh a client RPC if you're
doing it the other way server to client
that's called a server RPC
and then this is executed on all uh so
the server will replicate this
automatically to all
clients
which yeah I guess that makes
sense in this case that's how you would
probably want to handle it but I think
there might be a better way to handle it
I don't know so I'm just going to copy
this and and paste it down
here let's see
[Music]
right this is called a multicast by the
way yeah he named his
multi and this will be a multicast as
you can see see and we want it to be
reliable as well and the reason why is
because if it's not reliable that means
it's allowed to
misfire and that's okay if you're if
you're doing something very rapidly uh
then you probably don't want it to be
reliable if it's happening at a fast
pace uh but if it's something that needs
to be 100% reliable then yes it needs to
be set to Reliable
and so the server will then execute the
multicast which will
then uh execute this across all the
uh the
[Music]
clients that should be
good so we've set up our overlay state
we've set up our input action uh it
should be getting switched now we can
actually test that real quick and see if
it'll let me minimize it so I'm just
going to press play and I want to press
three and you'll see it's in the right
hand
uh
so actually it looks like I'm going to
have to rename
this to held object right
and I'm going to duplicate this and I'm
going to call this one left and I'm
going to attach this one to the weapon
elbone and so we want to replace
this by dragging over it so if you drag
over the text it won't do it so drag
over the the edge of it and it'll
replace
it and so this one is attached to the
weapon R this one is attached to the
weapon
L
and I'm not sure why we're doing this
actually to be honest with you I don't
remember
uh so now
yeah that's fine
so the overlay state is
torch and if you do this it'll show you
where this is at across all so it looks
like we're not even using those so I
don't know why they're
there it must have been something he
added
so what we're going to do is whenever we
whenever this overlay State
changes to
uh to this one here on our animation
blueprint we need
to create a new state and we need to
have it switched to that state so if we
look for our overlay States right here
on the Anem graph it's at the very edge
over here if we come inside of here in
our ready State we have pistol armed and
uh and I might rename those to Pistol
ready and rifle
ready so if you want to rename them you
can go ahead and rename them I think it
makes more sense for them to be called
uh R for it to be saying ready not uh
armed I might just go ahead and
rename
those and really we don't need these to
be an animation layers I just did that
to keep it a little
cleaner and this one's going to be
called torch ready I'm just going to
drag it into there but it's not going to
let me I'm going to have to come over
here to the groups and select ready
State and it puts it under
there and now I'm going to create
another one and call it torch
aiming oh you know what I forgot I did
do mine backwards um sorry about that
guys
so we're going
to put this in the aiming State I think
we're going to have to modify that uh
torch
sweep so for
the yeah and this is still showing that
so we need to set it
to Pistol ready and rifle ready and now
it should yeah there we
go then we can right click on here and
select add pin for element torch and now
we have one for the torch and I'm just
going to set this to point2 like I have
the other ones and I'm going to drag
this out here
and I'm going to add it into
here and I'm just going
to copy
this actually I'm changing the pose
right here of uh the
pistol ready based off of yeah I guess
that makes sense we'll do the same thing
I'll just copy and paste that over here
and let me just check these so 0000 0
that's the z00 Z pose with his arm by a
side and I'm kind of blending between
these two based off of
speed so if he well I'm blending between
these when he should or shouldn't move
and this based off of speed so when he
should be moving we'll be playing this
one right here which will be
this and the difference is just a slight
offset on the legs as you can see but
you want the legs to be neutral whenever
we're moving because if not um if not uh
what happens is if the foot is off to
the side right here then when he starts
running his foot will be off to the side
as well and that's uh and that's if
you're layering the legs uh right now I
don't really have a have it set up for
legs because for this the way the motion
matching system is kind of set up it
will cause problems and I'll go into
that in a later video but for now just
trust me it will cause
problems
so this right
here1 is it has his pistol aiming up
like that
and I just thought that looked
more uh
interesting so we're going to get our
torch poses under characters ufn
animations ALS poses and
torch and we're going to drag this out
here I'm going to open it up because I
didn't set this interpolation to linear
if you don't you see what it's doing
it's linearly interpolating between them
you don't want that so set it to step
and we have this and this so we'll do
something I guess we'll do it the
same
and when he's running I guess we'll do1
as well you don't want
07 because the feet are not in a neutral
pose so
use1 so we're basically going to do the
same thing this is the torch ready and I
want to leave that explicit time time as
is I'm just going to uh press this back
button here on all of
these and there we
go and I can actually delete
that
now pistol aiming I handled a little
differently than the rifle aiming I
think but I'm just going to copy this
over to the torch aiming
so on this on this one
uh in case uh you guys didn't know on
this you want to use a constant you want
these keys to be constant on this curve
if they're not constant then uh it'll
interpolate between frames and you don't
actually want that so for the poses
since you have multiple poses in here
and you need different settings for the
hand I on each one of them uh you want
that to be you want these to be
constant so moving
on8 that's this one where he's aiming
and he's doing that when he should be
moving and then I'm additively applying
this aim sweep and you'll see that on my
aim sweep I start from uh looking down
and I go to looking up so what we're
going to have to do is we're going to
have
to and I don't know if we can easily do
this so we're going to have to open up
this aim sweep and let's
see I've never tried doing this in here
I can do it in iclone very easily but I
don't
know how easily you can do it in
here what we need to do is we need to
reverse
it actually
let's see
that actually works
okay it doesn't look like it caused any
problems so just try that hopefully it
doesn't cause you any problems it
doesn't seem to have caused me any
problems that's fine that's what we
want okay so now we can replace
this with the and we should probably
rename this
torch aim sweep that's fine and torch
poses that's fine as well now we don't
need hand ik for this so uh we'll leave
it
disabled but I do need to replace
these and we'll check those poses 14
and8 so that's 18 and this 14 we don't
want that we want 11
and uh
8 so 11 when he shouldn't
move I mean8 08 when he shouldn't move
and 11 when he should move on your torch
aiming and we'll just go ahead and test
that out it'll probably have uh some
problems
okay I don't know what
[Music]
happened okay I'll have to look into
that and it looks like
something
yeah so it doesn't look like it's
working but it actually
is uh the only reason why it doesn't
look like it's working is because we
have not yet set things up
properly so let's just see
here it doesn't look like this is even
executing oh of course
not wait no it should be executing
actually
something is changing it
to something
else
so what we need to do is come back into
the to here and you'll see that we're
actually
in the anom graph overlay State we're in
the ready state right now that's fine
that's that's correct and we're in the
aiming State now and we're still in the
aiming State now let's go in here and
see what's happening when we oh okay so
there you go we did not add that to this
one that would explain it so we're going
to drag out our torch aiming here same
thing on this one so it's to0
2 I'll have to look into why it's
spamming it but whoa what's happening
there
interesting okay that's inter oh okay I
know why it's doing that guys don't be
alarmed so it's our it we did not set
all for one we we didn't set this other
one so we need to set both of these aim
sweeps uh to the torch aim sweep and
also we need to make this a mesh space
additive mesh space additive
frame from this animation is going to be
frame 15 where he's in the
center and the reason why is because we
want the down offset and the up offset
to be based off of uh this Central axis
this is how much we want to offset it
from this right here because whenever
he's aiming uh his hand is going to be
out like this
so so now it's actually working properly
but it's not doing anything and I'll
tell you why that's because we have not
set up our data asset for
it and we need to set that up in the
Chooser so what we need to do is we need
to go back under blueprints weapons and
M9 go to M9 and we're just going
to select all of these and we're just
going to drag them into the torch and
say copy here don't move them copy them
we're going to rename these to torch
idle torch
rest torch running aiming
and torch running
rest now we're going to go back to the
weapons folder and open up the uh the
layering
data and we are going to add an asset
here nope we don't need an asset sorry
uh we need this actually to be a nested
Chooser and we are going to say new
nested Chooser and we're going to name
this
torch we're going to edit this
this actually I'm going to edit this
one I'm going to try to see if I can
copy this by selecting it pressing
control C this is still beta uh or
experimental so it may not actually
work it didn't work
okay so what we need to do is we need to
add four of
these four assets
oops that's
five you can select and press delete on
your keyboard to remove the extra
one we're going to select the idle
rest the idle
aiming the Run
rest and the Run
aiming and now we need
two well we need two I'm gonna
account for gate later so we can add
gate as well but we need the movement
State and wants to
aim so we need an
enum and that's going to be movement
state right
here and we want the bull wants to
aim right
here idle idle moving
moving once the aim is true
[Music]
true and we could leave these at F uh
any if you leave them at any it's not
going to evaluate it I think so it might
actually be a little bit more
performance friendly if you leave these
at any but it's up to you now we're
going to add another enum and it's going
to be gate and we're going to press this
until it says any for
now and that's pretty much it for the
for
this yeah okay I'll left that uh sorry
about that guys I will fix that okay
there we go and
now you'll see when he's running his arm
is way too loose we're going to fix
that but you'll see that is working as
expected
okay so now what we want to do is we
want to open up the running aiming all
right guys so I've almost completely got
it working now properly so this is what
happened is I forgot to tell you guys to
set this to torch it has to be set to
torch and then on this these actually do
need to be set to false otherwise
they'll be evaluated as true before
these get evaluated but you could
actually do
this because order of operation does
matter and you could drag it like
this and do it that way and I do believe
it would
still
work yeah
looks like looks like it's uh still
working yeah okay so that actually would
be more performance friendly uh to do it
that way so I might
redo these to use order of
operation so anyway so we got our
running one fairly
stiff uh let's add a little bit
of a little bit of locomotion back into
it so we we want it to be less stiff
than what it is right now and in order
to do that we need to add some local
space back into it and so we could do
some we could try something like
0.25 and now you'll see his hand is is
moving a little bit more which looks a
bit more natural oh uh also
I forgot to tell you guys that the input
action if you go back to the input
action and you set this to tap then
it'll prevent it from being spammed and
tap What tap does is is it requires you
to press and
release and then you can't activate it
again for a certain period of time in
this case uh 1/5 of a second which is 02
uh so
so yeah I just wanted to cover that and
so now you can see the arm is moving a
little bit more naturally the one on the
left uh the one on the right is using
pure base uh so we're not even uh
playing any overlay on that as you can
see I set those to zero so what we do
need though is to do it for our resting
POS I don't know why somebody's blowing
my phone up right now let me mute it
give me a second
there we go it's
silenced um so we can browse back over
here and we can go to the running
rest and let's
see
yeah that's a lot so the reason why
whenever we're resting and we're doing
this why it's moving so much is because
we have a lot of local space movement in
here and so we might want to put this
down till something like 2 as well and
so now you'll see that his his arm is
moving a little bit uh less
now so we actually should probably have
that in overlay mode uh since we have
the other one in overlay
mode and you could probably create a
different or use a different and I'll
I'll show you how to fix that here in a
second the whole thing with it going
through his head um but we could
actually probably use a different pose
for the torch running
aiming so if we should move we're going
to be doing this that's for the aiming
but we want
to we want the resting I don't know why
that dog is barking let's see so for the
torch
rest when we're moving
and we're resting we blend
0.9 into
B which
is1 that's this pose but we actually
probably want it to be more like
this uh so we actually
want we actually don't need
that1 we we don't need this right here
so actually we could have it something
like that let me just undo that I'll
show you something if it don't crash and
it crashed save often that's all I can
say I hope I didn't uh lose
anything and I think that might have
been a Chooser crash
me one
second so I'm just going
to close these other ones here we have
too much open so under the torch ready
we will actually keep this let me just
make sure this didn't get lost it's
still
there and we still have this too
good and we did lose that though so
we're going to put this back at 02 on
the running
rest and on this we can actually blend
partially into that raised hand one but
what we might do is we might set this
because 0.9 is this this is 90% this
when we're moving over 300 and so what
we might do is
say
0.5 and let's see how that looks so it's
kind of a blend based off of a
speed and I'll have to fix
that but now it's a little bit farther
out it's a it's a blend between the two
and I'll show you what it does so if I
put this down to 0.25
then you'll see what it looks
like so it's like
that and if I say
0.5 then it's it's like
that so it just adds a little bit of
difference to
it but if you just want to disconnect it
that's fine
too and that's what it looks like with
it disconnected
so we have to adjust the local space
blend for that other one in order to get
it to stop doing that thing with the arm
also you'll notice the right arm is
really
stiff during running
rest and
that's because we have this oh it reset
this so I'm just going to put this back
at base actually this needs to be at
1.0 and this can be at
zero there we go
so
the there's one more we need to adjust
and save often guys as You' seen it does
crash often let me just do
this idle
rest for idle rest we want the right arm
to be
base base and we're going to say zero
and now the arm is moving a little bit a
little bit more I
think let's see yeah that's idle rust
right there it was in AIM mode I'm going
to look into that aim thing I don't know
why Suddenly It's it's trying to lock us
into an aim uh it didn't start doing
that until after uh that KD weapon add
and stuff was in
included so this is the idle rest now
the idle aim we need
to and and yeah we do have this in Local
Space full full-blown local space that's
good and for the idle
aim we want that to be8
now the thing about doing this in local
space it does offset
it so I'll show you what it mean that's
what it looks like
without but we do have some breathing
added over the top of it so if we go
back
over actually we're not adding breathing
over the top of this
interesting I thought
we were oh we're adding it on the state
itself okay yeah ignore that so the the
breathing automatically gets layered on
top of
this
so let's
see idle
aiming so the right arm needs to not
be
overlay and I'll set this to
zero and that looks a little bit better
you could do overlay on on this like 0.5
if you
wanted that way it does kind of look
like the pose but it still moves a
lot and you could do something like that
as
well5 and 05 and so the hand kind of
comes out looks a little
different
for this we might say 0. 2
and that's pretty much
it so we do still need to fix the oh
wait okay there's still that problem
right there
it's the idle
rest so we can set that back to point
two the idle rest is causing that and
it's probably oh it's this so we have
that full-blown local space
we want that to
be we don't want that to be in local
space for
that I guess yeah there we
go all
right and that pretty much sums it up so
we just need to figure out how to fix
that I don't know why
it's doing that
so
obviously this is what we're going to do
I guess for
now whatever is in the right hand is
going to be cleared whenever we equip
this and we'll do the same thing for
these as
well just temporarily
yeah so I have not fixed
uh this part yet
but on his
on those other
two input actions I guess I made these
we don't want that to be pressed we want
it to be
tapped I think I did
[Music]
that um
yeah
so you might just have both of them do
that until I I'll refactor this
later the way I'm handling that trigger
because it's not a very cool mechanic
anyway yeah there seems to be some
problems I'll refactor that whole weapon
equip logic but yeah anyway that's
pretty much it guys see you in the next
video

================================================================================
ARQUIVO: Unreal Engine 5 - GASP DAO_ Fixing Animations For Custom Guns (English_ASR)
================================================================================

=== DESCRIÇÃO ===

In this video I'll show you how to modify the Rifle Poses for Custom Weapons.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

00:00:00 Intro
00:05:35 Aim Sweep
00:23:33 Rifle Poses
00:49:58 Rifle Run
00:55:00 Rifle Setup 
00:57:56 Testing

=== TRANSCRIÇÃO ===

all right so in today's video I'm going
to show you guys how to bring a Lyra
weapon
in so under weapons I'm guessing Let's
see we got a rifle
here and a
mesh we're just going to export the
skeletal mesh a lot of people don't know
this but the skeleton in here uh the
skeleton
asset it's
not it's it's not actually part you
don't export that a lot of people think
that you're supposed to export that
that's just for internal Unreal Engine
stuff
so you're not exporting that you're just
exporting the skeletal mesh that's the
thing that you normally import it
creates the skelet uh the skeleton for
you uh based off of the skeleton of the
skeletal mesh and it's more for uh
sharing amongst others skeletal
meshes it's more of a reference for
Unreal Engine behind the scenes than it
is anything it's not a real asset so
export
this and I'm just going to export it
into that same folder from
yesterday I'm not going to export the
Collision or the level of detail you can
do that if you
want actually this might actually have
Custom Collision on it let's
see yeah actually it does have Custom
Collision so I guess in this case I'll
just go ahead and reexport it but
I'll I'll export it with the Collision
this
time that's turned on by default by the
way one
second turn my AC off so it's not
messing up my audio
quality so now that you've gotten
that exported we're going to import this
into here so under
blueprints weapons we're going to create
a new
folder
and I'm just going to call mine Lyra
rifle just for Simplicity you can call
yours
whatever and then
I'm going to import that SK
rifle everything should be
default import
all ignore the no smoothing
groups
uh I guess Unreal Engine doesn't
export uh things with smoothing groups I
don't know maybe they were never
added
and onto this before importing into Lyra
but I don't know anyway so we have this
in here I'm not going to go over uh the
whole texture thing if you want a video
on exporting all that stuff you
can go and watch a dedicated video to
that so we're just going to import this
and I'm just going to leave it as it
is and all we really need to
do is modify by the M4
A1 so I'm just going
to oh looks like I left that asset in
there I'm not even using that so I might
remove that at a later date we're just
going to copy these copy here don't move
just
copy and we're going
to I'm just going to rename this to
rifle and actuality uh unless you
actually need different settings uh for
this then actually you could probably
get away with sharing this in here so in
actuality I'll showed you all how to do
this with the choosers on the last video
so in this video I'm actually just going
to share
the layering settings with the M4 A1
that it should be fine the way it is so
all we actually need to do is go on to
ALS poses under
animations and we're going to create a
new folder actually and we're going to
call it pyra rifle or call it rifle
whatever you want to call it and then
I'm going to go into the M4 A1 and I'm
just going to copy this stuff
over copy
here then we have
these and I am just going to call these
rifle
though for
Simplicity and then all we have to do is
all right so I decided to start over on
that so go to edit and sequence bake to
control rig and see our ufn mannequin
body so once you have this open what
we're going to do first is we're going
to go into the weapon folder and drag
out the skeletal
mesh add to C sequence add add to
sequence and add SK rifle don't if you
have it selected it'll show up right
here at the
Top If it hasn't already been added to
the
sequencer we're going to right click on
it and go to convert to
spawnable then we're going to press this
plus button go to attach and this
attaches it to the animation it's going
to require a a bone we're going to use
the weapon R bone to attach it it will
start off with an Offset you can select
it and press this uh Arrow to reset the
transforms and so that should zero it
out as you can
see
so it almost looks fine it's mostly
oriented it's just things are off
because this weapon is it has a
different uh
Orient it has a different origin uh and
it's a bigger bulkier weapon and so
things are going to be in different
places and because of that we have to
adjust things so in case you guys were
thinking that this project was going to
be a plug-and playay project it's not
going to be a plug-and-play project when
it comes to animation there is literally
no such thing as plug-and playay uh
until AI starts doing this for us then
and you can say AI create me uh a Call
of Duty animation system until that's
possible
uh you're going to have to do stuff
manually and when that is possible
you're probably not going to make any
money off of it so just letting you know
ahead of time whatever it is you're
doing because anybody will be able to go
on there and just say hey AI create my
game for me and now there's no demand
for people making games so uh for now I
think we should be grateful that we do
have to do this manually because when
this becomes automated uh that will be
the end of uh
this so anyway moving on uh what we want
to do is right here on this track you'll
see it stops at the last frame and if
you move it one past it disconnects I'm
just going to extend that and then what
I'm going to do is I'm going to create
an additive track on this animation this
is the animation you can see the key
frames here uh and we do not want to uh
have to make these changes across each
one of these keyed frames and so because
of that we're going to right click and
go to add section additive well this
allows us oh and it's going to make it
wherever your marker is right here on
your timeline it's going to make it from
that time to the end of the animation
this red line is the end of the
animation and so if you want this to
start at the beginning you need to scrub
over here to
000000 and then add the additive track
you can still extend it afterwards but
it's extending it is a little janky so
just extend this end part one frame uh
past the end it doesn't matter it it can
be more than one frame it doesn't matter
as long as it extends beyond the end
that's all that matters because if it
doesn't extend beond on the end I've
said this before in many videos this
last frame this last key frame right
here uh the thing is
is if this only extends to the end then
the animation actually stops at on frame
29 not on frame 30 it needs to stop on
frame 30 not frame 29 if if your
additive track stops on uh frame 29 then
whatever you changed on your additive
track will not be applied to frame 30
that's why we do that so I'm just
letting you know so I'm just going to
call this corrective and pose here and I
I did already kind of make a a hand pose
but I'm going to redo it over again for
you guys so I'm just going to scrub back
here to the very first frame and then on
here and I might change the color of
this Arrow so that it doesn't blend in
so well with this ball right here but
for now this is how we're going to have
to to do it now right now by default
it's in World space and it's probably
snapped to 10 on yours and probably 10
degrees on here too or five degrees so I
always set mind to the division of 3
62.8 CU it's the smallest one I wish
they had a common uh one degree uh snap
but they've never added it and I don't
know if they ever will I really wish
they would but don't anyway so I set
everything down to the lowest when I'm
doing this if I do need precise offsets
then I will actually turn snapping off
right here by pressing those
buttons now when we're adjusting things
like this right here in the character's
hand like the weapon bone uh I normally
adjust that in local space if you adjust
in World space it could be offsetting it
in relation to his hand
because that bone is oriented to the
hand and so I want to adjust it in local
space so don't go too far down it might
seem like a good idea but then you'll
notice that the weapon is cutting into
his hand um what you could do is you
could just leave it like that so it's
not cutting into his hand and there's
some controls hidden behind this little
red ball I don't know why uh they're way
back here but they are has something to
do with the character itself uh and how
like where things are on it but anyway
those are the metacarpal controls right
here so I don't even know if this thing
has metacarpal maybe it does but anyway
you can uh rotate
this and make sure you're in local space
not World space if you do if you rotate
bones like this in World space it can
cause issues you want these fingers and
hand thing controls to be adjusted in
local space this is local space if it
shows a world that's World
space so that's pretty much it I'm not
going to pick on any little details here
you can spend all day uh messing around
with this and trying to get the fingers
perfect if you want I'm just trying to
show you guys the basic rundown of this
so I've got that in
place and I'm just going to key that
just in case um Now set select This
Global control you'll see this arm FK ik
switch check that actually don't check
the one for the armr we don't need it
for the armr we just need it for the rml
so I'm going to switch it on for the rml
I'm going to key that frame just in case
because this thing seems to like not be
keying things I think it's a bug uh
where where sometimes it simply just
does not key
anything
so also make sure this is blue if this
is not blue then it will not
automatically
key and the last one I didn't have it
automatically keying which is why I
restarted it so whenever I'm moving the
hand right here you'll notice that the
hand is oriented in this direction and
we want it to be oriented along the
plane that the weapon is so that we can
move it easier in relation to the weapon
and therefore I'm going to switch it
from local to Global and now you'll see
that the Gizmo is oriented
along round about along the same uh
plane as
the
rifle which makes it a lot easier to and
I'm going to rotate this actually like
this and you can pull back on your mouse
wheel to speed and slow things up
uh by the way a lot of people don't know
that but you
can and you You' seen how the how the
hand is moving from left to uh right
right here that's because this is too
far
away so you'll notice if you move this
too far away the hand will still try to
stay oriented to it but it will not be
able to reach it uh so be aware of that
do not overextend your arm it will look
unnatural and it'll cause all kinds of
problems if you have to overextend your
arm then your arms are too short to hold
that weapon like that just letting you
know uh so you can try other ways of
holding it uh in some games I've seen
where little raccoons are holding
weapons and they actually have the butt
stock of the weapon underneath their
shoulder sticking out the back uh just
so that they can hold it closer to the
body so that the other arm can reach the
barrel uh that's one way you can get
around that but you have to understand
that you can't you know if if you try to
make a little kid holding M M60 you know
like with his hand on the barrel of the
rifle good luck you know the same thing
applies in
here because it follows the same rules
as far as Anatomy if you can't reach it
you just can't reach it a lot of people
think that there's some way that you can
magically make uh make it reach it you
can but I mean you're going to have to
stretch the
arm I think a lot of people just
completely disregard everything uh in
relation to real life whenever it comes
to this stuff but in actuality some real
life rules still apply
[Music]
so now that we've
oriented
that okay it's doing the same thing this
is not
good ah okay so it did not save that
even though I keyed it here this is the
problem I was telling you
about Okay so
I know what it is okay I forgot about
this sorry guys so on this base layer
right here if you need to switch
something uh if you need to change these
switches you have to do it on the base
and you'll notice that every frame here
is keyed so what you have to do is
delete all those extra keyed frames and
then uh change it to what you want it to
be so be aware of that uh basically
everybody falls into that trap I really
wish they would fix that so that these
switches don't get keyed on every frame
they only get keyed on the first frame
if keyed at all uh it would really be
nice if you didn't have to key them uh
on the timeline itself but
whatever
so so now we can scrub through it
and you'll notice
something the hand is coming off the the
weapon that's
normal we're going to select this other
frame
again and what we're going to do is
we're going to
constrain this right
here uh
so what I'm going to
do and I need to make a point of this
what we're going to do is we're going to
create another additive track for this
and this is just so that if we ever have
to redo this we can just delete this
additive track and redo this additive
track for the constraints this is how
constraints work in Unreal Engine guys
it's very confusing and it's not
intuitive so in most 3D applications
when you constrain something it's just
constrained uh you don't have to key uh
those constraints or anything like that
and those constraints persist
whenever you know whenever you bake the
animation and stuff but inside of here
it actually doesn't work like that so
it's an order of operation what I mean
is if I offset if I
constrain uh something and then I offset
the pelvis the constraint is still going
to be where it was constrained
at uh uh where that thing it was
constrained to would have been at before
I offset the pelvis and so it's an order
of operations thing if you need to
constrain something it has to be the
very last thing that you do if if it's
not the last thing that you do and you
change something else you're very likely
going to break those constraints so uh
the I wouldn't even really call these
constraints
because there I I'm not really sure what
you would call them copy copy location
or something something or and keep
offset but it it's I want to consider it
a constraint not the way they have it
working but anyway so we can select this
right here and now we can uh press this
plus button and say
parent now we're just going to select
anywhere on the character and then we're
going
to
uh say hand l no hand R cuz he's is
holding in his right hand so we're going
to constrain it to the right
hand and you can also use the Snapper
tool too that's another way you can do
it but I thought I'd show you how to do
it this way this time so do not press
this plus button I've done that and it
seems to be broken it doesn't do things
right do not press that plus
button um we do want to maintain our
offset and so we're we're going to keep
that
on and now if we do this it looks like
it's not
working uh okay so maybe that maybe this
isn't going to work for this use case uh
I'll show you how to uh do that in
another video we're going to have to use
the Snapper tool that's fine so the
child is going to be this
control um yeah and the parent is going
to be this
control this is the hand RFK
control we're going to keep our
offset and we're going to check these
two so what this is going to do is with
its current positional and rotational
offset across all 30
frames all frames
we want
to
snap uh that so if we press this button
now oh it looks like I didn't extend
that one frame so you see how it stopped
at frame 29 that's what I was talking
about oops
let me just undo that I'm having some
technical difficulties so you'll see it
is working now but when we get to that
last
frame it's not actually constrained in
this case it doesn't seem like it it
caused a
problem but um in most cases it actually
will so what I'm going to do is I'm
going to extend this one frame you see I
extended it now I'm going to snap it
again and now you'll see that there's a
keyed frame on that red line and that's
what we
want all right so that was the hard part
uh the aim Suite because it's an actual
animation
[Music]
so now we're going to do it on this
no yeah
rifle let
me I'm going to go to edit bake to
control
rig I'm just going to leave these uh
this ik as it
is and I'm going to drag out the Lyra
rifle again
again convert to
spawnable and
attach weapon
R remove the offset
now this does have a postprocess volume
guys and I failed to mention that to you
but
um what you can do is you can actually
select the character in the
scene and then go to
details and disable postprocess
blueprint and you can key that we
probably should have been doing this all
along uh and the reason why and I forgot
about this it will cause problems uh and
the reason why is because you're baking
the
postprocess alterations that H that are
supposed to happen during runtime you're
baking those onto the animation and then
during runtime it's adding them
again
so that would obviously cause problems
because it would double whatever the
postprocess actually is doing if you're
using a custom character this isn't
going to be a problem uh they're using
these postprocess uh blueprints but what
they need to do is they need to start
having that disabled on sequencer by
default I don't know why they don't uh
it really should be disabled by default
uh whenever you're modifying
animations maybe one day they'll fix
that so what we're going to do is we're
going to select we're going to actually
do the same thing here
and I'm going to select this and create
an additive
track extend it one
frame and zoom out if you need to so you
can see a frame into the
future and we are going
to go to
poses and this is
the oh I didn't have y'all make a
character holding pose okay let's go
back to this other one
real
quick I'm just going to browse I'm going
to open this one up and that's fine
because I'll show you all how to fix
this anyway so now we can go to open
level sequence and this will open the
other one that we were just modifying
and we can select this guy in here and
go to details and disable the
postprocess volume on this guy and then
we can save it and now it removed that
postprocess stuff from the animation so
that's actually good uh to know and what
we're going to do is I'm just going to
select these controls but just so that
you know what controls I'm adding it's
that um metacarpal control uh bone
control that one and that one and this
one and this one and that's just the
stuff that I changed now actually an ik
control um is going to be in World space
it's it's not going to be in local space
uh
so what you could probably
do is you could probably change this
back to local
space and uh what you could do is yeah
we're not going to do that uh we're just
going to have to offset the hand the
left hand I think in the other
animation I don't think that's going to
work but anyway after you after you
selected your controls go to create pose
and just name your pose and press create
pose and you'll have this right here and
I'm going to delete this one actually so
I can show you it looks like
it
okay so I am having some technical
difficulties here
guys so I'm just going to reselect those
controls and I don't think I'm I don't
think it's going to help to select this
one but I'm going to do it anyway
if nothing else you'll be able to see
what
happens and
save I'm just going to press control
shift s to save
everything I'm going to browse back over
here and I'm going to open level
sequence since we already have this set
up we can pick back up where we left off
now I'm going to select this on with
this attit track and I'm going to
say
[Music]
um whatever you want to call it I'm
going to select make sure this track is
selected and I'm going to press a select
controls button I'm going press the key
button and I'm going to uh actually
before we do that let's try this so
let's go back up to the top and extend
the base one extend the global one and
do the same thing on this one so we need
to delete all these white diamond key
key frames the white diamond ones not
the red ones and then we need to key
this arml fki k switch since we're going
to be needing to adjust that and
constrain it now we're going to collapse
that select the controls again with that
other track selected and then
paste and so yeah that that did exactly
what I thought it would would do it's in
World space uh now you guys know that
that's in World space and so what we can
do is we can undo that we can say select
controls and then I can hold down
control and select that to deselect it
and now I could just paste it onto this
one and I'm going to paste it and you'll
see it did not alter that one this time
it only altered the ones that were
selected and so so it looks
like on these we're going to have to
adjust the fingers uh since these are
all just key poses so we're going to
have to go back and fix this afterwards
since these are poses I don't know what
happened there I wasn't trying to select
I was trying to drag I guess I thought I
was in
cascader all right
so now now the hand should be holding
the rifle properly and most of them and
because we actually altered the finger
pose it actually propagated to that so
maybe it wasn't a good
idea to alter the finger poses what we
can do
though is we
can actually just remove these key
frames and it looks like I must
have had the thumb control selected not
the
metacarpal so maybe next time I'll make
sure to that I'm selecting the right
ones so we're going to have to modify
these fingers uh
per different animation so on the only
on the aiming ones is his finger on the
trigger and so what we need to do
remember I told you guys before that on
an additive track any change that we
make propagates across all keyed frames
so in order to stop it from propagating
any
further um what you can do is you can
just set another keyframe if you set a
key frame there then it's going to stop
wherever you set that key frame
at and
so I'm going
to set key frame
here
actually actually I should set a key
frame
here and I'm going to delete this other
key frame
I'm going to set a key frame
here going to set a key
frame
here and
here and so what this means is that uh
whatever change we make on this on this
Frame will affect this Frame this Frame
and this Frame but not this Frame and
this and the changes on this one will
affect this one and this one but not
this
one and so on and so forth but not that
one not that one but
those and actually we can delete that
last key
frame that way whatever change we make
on this last one will affect all the
other ones as well so
I just extended the SK rifle
track once once you guys I know this has
taking a while but once you guys
actually know what you're doing in here
uh it's going to only take you about 10
minutes uh to go in here and fix this
stuff uh for me it's taking longer
because I'm teaching you guys and I'm
trying to cover all the bases so
normally I could get this done in like 5
10 minutes it doesn't take very
long so so what we're going to do on
this one is we are actually just going
to straighten the finger
out like
that now what we can do is Select
these three controls and we can just
say finger
rest I'm going to save
this now you'll
notice that on this
Frame it's relaxed on this one it's not
on that one it's
not and that's because and the reason
why is because what's happening is it's
actually
interpolating between the finger being
straight and the finger being on the
trigger across all these frames so on
frame three we're going to select the
controls and paste and now it'll stop
doing that and the finger in the same
place on all of them and now we're going
to make a slight correction on this one
I guess we could do something like
that and I'm going to select these
controls and I'm going to create a new
post
and then the same thing on this one I'm
just going to select and
paste and then on this one I'm going to
paste then I'm going to select this
one and paste it
here and here
here
wait there we go seems to be that seemed
to been been some kind of kind of bug
I'm going to do that again so on those
the fingers are
out on these two fingers are on the
trigger and then on this one the finger
will be out now this one doesn't have an
end one changing it and so we don't have
to set that on the last one because it's
not interpolating uh towards a different
finger pose so that's basically it for
that now what we need to do is create
another additive track to correct the
hand
[Music]
positioning and it looks like I offset
that so I'm just going to drag this to
the first frame and uh and do that
so now on this one I'm going to key that
first frame but on this one I'm going to
correct that hand
positioning so I'm going to change over
into in some cases neither local space
or World space
is really going to be very appropriate
for this and it's going to make it a
little bit more
difficult
um oh I don't have the right one
selected there we
go what I am thinking of doing though
is selecting this with that right there
selected and paste the pose and it is
going to paste it down
there but now I
can move it into position
here and rotate
it yeah that doesn't look like it really
helped much
but now that's kind of a bad pose in in
actuality you don't want a pose like
that because people don't bend their
wrist at Angles like this in real life
and so I would actually recommend
holding it in a different way
H this will be appli this aim sweep will
be applied in mesh
space so the way he's holding the weapon
actually isn't going to affect have a
have an effect on
this so I'm just actually going to
adjust it like
this place it right here like that
I'm going to select this control right
here this is the metacarpal for the
thumb or it's the first joint for the
thumb I mean I'm just going to get it
out of the weapon like I said I'm not
going to try to make these perfect
here these are key frames and now we're
going to set this as the
child and we're going to set this as the
parent just like before all frames keep
offset snap
rotation we're going to change this to
frame one
though
00001 and now we're going to snap it and
if you extended this one frame like I
said then it should show up on the road
line as
well and so you'll
see right away there are
some problems with holding it like that
across some of these
animations in this one it doesn't seem
to be that big of a
problem
but what I do
want I want it to have
different poses I
guess
yeah okay so this is what we're going to
have to do
because that's going to be problematic
we're just going
to have it like that on this one I guess
but on this one we'll have them holding
it in a different
way so I'm going to go back here and I'm
just going to paste the pose
and yeah I'm not going to try to get
that perfect but you can select that
control right there and rotate it out a
little
bit if you
want and now I'm going to let's
see yeah we're going to have to
constrain
this from frame Z
to to frame
to frame five
what we could do is we can uh hold down
shift and right click on
this and we can
actually so this to eight
and then
shift uh left click on it to place it
back for this
frame unless you just want to use that
same pose across all of them but then
you know you're going to have that
problem with
that as far as this right here goes uh
you can grab this effect or this pole
arm here and you can move it in or try
to move it out like
this but if you do that it's going to
propagate across all of them so we need
to set a key frame
before and
after and then that way we're only
correcting it for this one
frame we have the don't select that
yellow arrow
that's your
root and so we could do something like
that
I'm just going to adjust
this now for this we're actually going
to delete those key frames right there
yeah there we
go and that's pretty much
it honestly what I would probably
recommend you guys do is uh just
separate these into separate animations
don't try to compile them into one big
animation like uh what I have here here
currently so in a later uh video what
I'll probably do is I'll probably split
these up into separate animations um
well in a later update I
mean so that we don't have to worry
about
that so what I'm going to do now is
we're going to find a pose that's
similar
to uh this pose right
here this
animation cuz I am applying this during
running and I think this would probably
be what I'm going to do
actually is I'm going to come up
here and and set this
to
ik you you will notice that this does
change uh the
arm by the way I'm going to select all
of these
controls the shoulder controls or the
clavicle controls the hand ik controls
and their pole arms
I'm going to create a pose
here and here it is right here it looks
like there was one with that name
already and I'm going to save
this exit
open this
one uh bit to control
rig drag the skeletal control out or the
skeleton uh this gun out add
it attach it
create an addtive
track uh we need to figure out where
that gun went let's see let's just uh
reset this you can select it here and
reset it over here and now it's in his
hands
and we actually need
to do the same thing expand to the
global
control delete all those extra white
diamond key
frames and just change these to ik
controls and
go back to the additive
track and paste
it and you could you could do that or
you could just do it this way so it
might actually be better to do it this
way I want to go to local mode
rotate
it I don't like having the wrist bent
like that
but yeah
maybe do it this
way
[Music]
instead what we could do too is well
let's just do it this way because
everything's Global and global
coordinates here so
it's a bit more difficult to do this
stuff like this and unreal if I'm to be
honest than it is some other
softwares
so just so you know but I
mean it's easier to understand how to do
this stuff in here
and I mean you
can you can bend the fingers
now the hand does move a bit also we
didn't extend this one frame so I'm
going to extend it one
frame and I'm going to
select this ik control
and I'm going to select this ik control
make it
apparent same concept I'm going to snap
frames and if we sight to this one we
should see keyed frames across all the
the entire
timeline and now it's not
moving and so now we can save that
[Music]
so on this one I've already kind of went
over how to set up uh the stuff on the
other one so on this one I'm not going
to do that because it's already a really
long video so what I'm going to have you
all do is go into the overlay logic if
you just want to test it we're going to
replace that rifle uh with this one
and on the animation graph I am not
going to create a
separate uh logical thing for it
instead I'm just going
to replace those animations on the rifle
with this one I don't know why what I
was doing with
that
so press the back
button back
button and now on the rifle aiming
back
button back button and for the aim
sweep back button back
button wait a
second I don't know why I disconnected
that huh interesting but this would
actually be changed over to
this oh this needs to be um an
additive by the way a mesh space
additive it needs to be applied as
a mesh space
additive actually a local space additive
sorry
we don't want accuracy for this we just
want it to uh move the arms left to
right and we'll test that too here in a
second so what we need to do is open
this up and set the interpolation to
step on the poses not the other ones
so if you see that choppiness I'll I'll
look into that I think it has something
to do with this stuff I'm printing out
over here and the fact that I'm
recording at 4K
uh 120 uh frames per
second that's what I'm recording at now
and so it has a toll on uh frame
rate but I'll uh test this whenever I'm
not
recording but I don't think that it does
this when I'm not
recording but yeah
and there you
go anyway I know that was a long uh
setup uh two-handed weapons it it's a
little bit more entailed but
basically the reason why the hands come
off is because when you retarget
animations
the uh the depending on the the gun if
you switch the gun then well things are
in different places on that gun uh if
you switch characters and the hands are
off it's because of anatomy
so I've explained this in other videos
but it's just Anatomy guys if if his
hand is shorter you have to remember
that that these animations are stored as
as rotation bone
rotations so the same bone rotations on
a character with uh shorter or longer
arms is going to place his hand in a
different location I've actually proven
this by manually doing this uh just
using blocks uh in another video but
anyway uh so once you get the hang of
this workflow it doesn't take as long as
it took me to show you how to do it uh I
promise you that
it's it's I don't normally do this in
unreal because things are a little bit
janky and unreal right now uh
but uh yeah once you get uh used to the
unreal uh workflow it's not going to be
that bad it's not going to take that
long uh you just need
practice also it looks like uh that bow
should have been brought in and I didn't
bring it in on this animation uh so I
can actually show you how to do that
right now so if we open up these this
pose here and open the level
sequence we can find the one where he's
holding it in a rest
pose let's see which pose was
it I thought it was this
one so yeah if he's holding it like that
then his hand should probably his elbow
should probably be tucked in and if I
just save that that might actually fix
it yeah
so that looks quite a bit better
now and that's it guys I'll see you in
the next video

================================================================================
ARQUIVO: Unreal Engine 5 - GASP Dynamic Additive Overlay (1.04) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

Update on some refactoring changes.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

=== TRANSCRIÇÃO ===

all right guys back with another video
so I refactored a few things here and
I'm going to go over it with you
so first off I decided to move the hand
i k over to Curves on the animations
themselves and so if we go over to this
one for example I just have this curve
value and it's set right
here I actually should probably
add that and I could add it from the
skeleton itself but I'm just going to do
this because it's a little
faster but anyway moving on so this is
how we're going to handle uh hand I from
now on since we don't need that on any
of the motion matching animations I did
add an extra note up here letting y'all
know that I actually don't recommend
using this but I left it in there just
uh for people who want a quick hack
until I Implement something better than
this and I briefly explain I think that
a better approach to this would probably
be a procedural foot correction system
similar to what they have in
ALS uh but I'll investigate that further
at a later date so I did uh set this up
on an animation layer the layerings so
uh
itself and so it looks a lot better now
a lot more organized and I think
everything's a lot easier to understand
as
well
so that's what I changed on
that so let's
see I made a change on this too I
reduced the amount of logic that was
sitting right here I added a little note
and I added some extra logic to this
that
prevents these from setting it to well
because these are chained together if
how I had it before if the last one set
it to false then it just wouldn't
interpolate anymore doing it this way
allows it to continuously interpolate if
any of these in this
chain uh are still trying to interpolate
so that's the reason why I did it like
that as far as how I'm updating uh
updating
this uh right here by default this
testing will be set to True which means
this will always
evaluate but if you turn testing off
then it'll rely on this right
here and I am setting these in the
update State using a macro right here if
the last gate is not equal to the first
gate then it'll update the layering
data and same with the last overlay
State and then if the want to aim or the
is moving changes it does the same
thing and in order to prevent us from
having to evaluate these uh right here
twice because there is an overhead to
evaluating these I'm just passing that
current value back out so that we don't
have to evaluate it twice it only gets
evaluated once
uh just in case you guys didn't know if
you connected this to two different uh
nodes you might think that it's only
getting evaluated once but it actually
does get evaluated for each thing that
it's connected to uh a lot of people
don't know that so I'm pointing it out
now that's the reason why I did it this
way with the current out so this is just
a simple
macro and
last but not least I did Port the
ue5 mannequin control rig over to the
ufn and I'll go ahead and show you that
and so you can open it up and just in
case you guys didn't know you can
duplicate these control Rigs and you can
come in here and right click on refresh
uh right click and go to refresh and
select mesh and select the mesh that you
want and it'll convert this over to the
character that you want but the skeleton
has to be the same so if you have a
skeleton with three spine bones it is
not going to work with this because this
requires five spine bones to work
um if you have at least five spine bones
you can probably fix all the other stuff
but you probably won't be able to fix
the spine
problems
anyway just wanted to point that out
later today I am going to do a video
where I show you guys how to
modify these poses for your own weapons
and I'm going to show you how to add
your own poses and states to the
animation system as well so because I'll
be doing a video on how to add it I
actually won't include that in
the project for now because I want you
guys to actually have to make your own
so that you know how to do it and I will
see you guys later

================================================================================
ARQUIVO: Unreal Engine 5 - GASP Dynamic Additive Overlay (Overview v1.16) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

A thorough breakdown of the Entire GASP - DAO System

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

0:00:00 Intro
0:09:30 Character Blueprint
0:16:15 Animation BPI
0:19:45 Procedural Offset Hack
0:24:25 Animation Blueprint
0:29:10 DisableIK Curve
0:30:52 Anim BP (Continued)
0:32:15 Animation Layering
0:45:45 Layering Data Assets
0:56:26 Updating Layering Data
1:04:15 Overlay States
1:15:30 Overlay AimSweep (Up/Down AO)
1:21:00 Montage Slot Layering
1:29:10 Weapon Bone Correction
1:29:55 Aimoffset
1:32:55 Aimoffset - Known Issue
1:35:30 HandIK
1:39:41 Pose Overlay (Experimental)

=== TRANSCRIÇÃO ===

all right guys
so I am using the Nvidia broadcast which
has AI noise removal because as you can
see over there it's 98 degrees outside
so hopefully uh it doesn't distort my
voice too much but it does have a
tendency of distorting your voice when
there's a lot of white noise in the
background anyway I told you guys I was
going to uh redo that overview video
this time I completely laid all this
stuff out over here for to help me keep
track of everything and make sure that I
cover everything so as you can see
there's a lot to cover this is going to
be a long video uh so uh let's get
started uh first off this is a project
that is evolving and it will evolve over
time so you should expect it to it'll
change a lot I may have to uh uh do
other videos on this but I'm going to be
reluctant to continuously do update uh
overview videos like this
so I think for the most part the
structure of it is pretty stable I know
I've said that before but uh uh it's
more of a a final stable State I think
as far as the structure I don't see it
changing drastically from here on out uh
but anyway a lot of the stuff still
works the same way it's just things have
changed a bit I'm going to go ahead and
get started on uh folder structure and I
did not expect that to ding when I
pressed it but um this first time I've
used this by the way so anyway folder
structure we have Blueprints and we have
character that's where our stuff is
under so it'll be labeled Dao the
folders will so under the character I do
have some remnants of ALS poses that I
have used as you can see these are the
ones that I actually imported and
retargeted and then I modified them
inside of here using ik
uh U re or
using the control rig
but anyway I digress
so over here in the ufn mannequin folder
you'll see animations and you'll see Dao
anoms this is where the animations that
I imported made and modified uh reside
so some of these are ALS uh animations
this one's an AOS animation I did not
correct to this one this is how it was
when it came in I may have offset the
the pelvis so it was actually touching
the ground um on the breathing
one I had to modify it so the hands are
in sync because the hands are not in
sync
uh so on and so forth the aim sweeps I
actually did make these Believe It or
Not uh those aim sweeps are not from ALS
so and if you look at the ALS ones
you'll notice that mine are actually
backwards I didn't intend for them to be
backwards I just made them and then
realized they were backwards afterwards
that's all right they still work the
same so mine starts looking down and
then goes to looking up uh the als1
start from looking up and go to looking
down
uh so we're not covering that right now
we're talking about the folder structure
over here in the Dao uh folder structure
you'll see some Chooser tables uh this
is what I'm I'm actually not using this
one I'll probably delete it um I don't
even know why it's it's there actually
I'll delete it now so anyway uh when you
get this it'll still be there in the
next update it'll be
gone but the Chooser table is how we uh
choose which
uh layering data settings get loaded I'm
not going to go into that yet I have
that planned for later but that's the
Chooser table uh so that you'll know
that's where your layering data is and
I'll go over that again
later uh your layering data settings are
inside of
here and then your held objects are
inside of here and they're in their own
folders they have their own data assets
that store their layering settings and
and that gets loaded based off of a
Chooser table I'm not actually using
this one either this is a remnant of an
older version I'm not using that uh all
the data assets they're all using this
one Chooser table so if you see some
inside of here these aren't even being
used and if you want to know you can say
reference and you'll see there's nothing
over here connected to it to the left
that would be things that uh it's uh
that are referencing it
the ones on the left are the ones that
it's referencing the ones on the uh I
mean the ones on the right are the ones
it's referencing and the ones on the
left are the ones that are referencing
it uh the meshes are under
here same with the M9 you'll see it
didn't have a Chooser table in
there
and then the projectile the projectile
is the thing that you
shoot
so this looks like it my screen froze if
your screen ever freezes it's a
longstanding 5.0 bug it's been in there
ever since I released on real five they
have not fixed it they may never fix it
I don't know at this point I doubt
they'll ever fix it but it's still there
and it's been there for years I wish
they would one day fix it
but uh anyway sorry it's just it's
aggravating that they haven't took the
time to fix
that
so I will have uh some better transition
animations in the future I'll have
reload animations I'll have animations
where he actually puts his gun away
before he uh gets up here uh so that'll
be in a later uh version I'll actually I
on adding foot locking but don't hold
your breath I'm going to try my best but
foot locking is a pretty complex system
and I can't do it the way that most
people do it uh in here because of the
way that they handle the root uh bone uh
so yeah that's going to complicate
things um so
anyway I am studying it and mapping it
out and working out the logic and
looking over it and deciding what I need
to do differently in here for ocean
matching uh because of the root bone
problem the root bone moves independent
of the mesh
itself um therefore you can't just use
the the mesh to calculate things like
basically everybody does in every game
ever uh so it kind of breaks all
traditional like uh methods or
approaches to calculating things uh for
the the mesh um it's it's causing all
kinds of problems I'll go over some of
those problems later in the
video so that's the folder structure now
we're going to talk about the character
blueprint so that's in the root of the
blueprint
folder the animation blueprint and the
character blueprint are both under here
you'll see I have a a blueprint
interface
uh and that blueprint interface is
actually being used by the animation
blueprint so that I can C uh pass values
over to it without having to cast to it
which is something they probably should
have done I may go back and I may
refactor their own code but I don't want
to do it just yet because of the fact
that um well when 5.5 is released
they're going to change a lot of things
in the sample uh project and so I'm
going to wait until then to refactor
their code if they haven't already done
it I'm assuming that they will have
refactored it themselves by that point
they were in a rush when they uh
released it so a lot is probably going
to
change with that being said I should
actually also mention
um
that
um crap I lost I lost my train of
thought
sorry uh okay so anyway let's just move
move on so here's the character
blueprint right
here and you'll see that I collapsed
everything into these two graphs and
colorcoded them uh this is the original
logic uh some things may have been
slightly modified on here but for the
most part it's still
original let me see if I can find
anything that's been modified on here I
don't
think maybe I haven't okay I have not
actually modified anything in here so I
thought maybe I'm might have modified
something but I have not so that's all
original logic untouched unaltered over
here is the KD weapon add-on uh so I set
up a a basic just and guys uh I will
refract refactor this in a later date uh
I just threw this together I didn't plan
it out this is just for holding objects
I needed to test it to make sure
everything worked I've not gotten around
to refactoring this but basically it's
just a state I mean a structure and it
just holds uh an enum of type overlay
State and that overlay State holds your
uh pis uh pistol information so you can
easily select it from here and we can
easily identify inside of the animation
blueprint or whatever and then it holds
a skeletal mesh and it holds an aim
offset for
that and you'll see the rifle has the
same thing so
if we go over into our Dao folder and we
go into data and en nums this is the
overlay state right here and it holds
the uh information for the
weapons so I'm going to go ahead and
close out of that and close out of this
I'm gonna close out of that for
now and yeah I'll close out of that too
I don't know I had that open but um
anyway so
back on the character blueprint you'll
see that KD he's the one that replicated
this uh part of the code I'll replicate
the rest later but he replicated the
pistol and the rifle firing action and
he uh brought in the projectile from the
third person uh project um so he brought
over the projectile from that and
he is playing a sound for as well so if
you go in here you'll see what he's
doing I I modified this so that you can
have two different methods so his
method
uh is that it always shoots towards uh
the center of the
screen and then the method that I added
uh to it actually make sure that it's
shooting in the dire direction that the
gun is
facing so by default you'll see this is
false so by default it's actually
shooting in the direction that the gun
is facing so if for examp that also
means and because I haven't uh added any
logic for this
that that if uh if I'm like in this
relaxed state right here and I fire it
you see it it fired it before he was
aiming it uh but actually in a later
version I'll probably have it set up so
that it won't fire until he's in an
Aiming State uh fully blended into the
aiming state right now that's not the
case and so it'll fire and I don't know
why all hell is breaking loose over here
my phone's blowing up I got
notifications popping up over here it's
crazy I don't know what's going on um I
might have to mute my phone if I can
find
it I don't even know where it's at
oh wait one second let me let me mute
that because it's distracting me I know
y'all probably can't hear
it okay so yeah that's the basic rundown
on that it's firing the sound right here
spawning the projectile the projectiles
uh using uh the projectile movement
component to give it velocity and the
given Direction and then whenever it
hits uh it adds an Impulse at the
location if it's a physics object so if
the object is simulating physics it'll
add an impulse and then it'll destroy
itself that's basically the rundown on
that I know I didn't have to go over
that but I decided to do it
anyway so that's basically the rundown
on that if we go into this right here
you'll see that it's storing the current
overlay state
uh that we are in and that's right here
that will be under the overlay logic uh
category I categorized everything so
that you didn't just have five billion
variables floating around over here I
hate that I don't know why people in the
marketplace do it I wish they would
organize stuff but um teach his own I
guess uh
anyway we're setting the skeletal mesh
to the skeletal mesh that is stored
inside of
here and then we are setting the aim
offset on the animation to the aim
offset that's stored in here uh and that
aim offset is actually a blend space uh
and honestly right now uh I just kind of
I was using this to begin with I was
using only this to begin with but I set
up the aim sweep and I decided to use
the up down for aim sweep and I decided
to do the spine from left to right later
on I realized that it seemed to me that
the blend space had less issues than the
spine uh so I decided to just use the
the X AIS off of this one uh the the
left uh the left to right off of this
one for the aim
offset I will probably refactor that
later so that this isn't a 2d blend
space instead in a later version it'll
be
a a legacy 1D blend
space so that's the rundown on that for
this I have the weight speed set to 25
if you set it too high um if you set it
higher than this it'll start looking
Jitter really really jittery uh it
already is a little jittery uh and I'll
go into that when I cover aim offset so
I'm not going to cover that right now
actually I'm I am but I shouldn't be so
I'm just going to move on so anyway it's
going to pass this into the animation
blueprint so that's the rundown on the
character
blueprint this is using that blueprint
that blueprint interface that I told you
about so now we can start going over the
animation graph there's some stuff that
you need to know
the blueprint interface these are the
blueprint interface functions and it's
just setting these values right here and
I'll go over this one and uh here
later there's only two places really
where you have to worry about things on
this event uh graph if in 5.5 they don't
move this stuff over to a blueprint
thread safe event graph then I'll move
whatever I can inside of here over to a
blueprint uh thread safe uh and
event graph but for now it's in here and
it is fairly heavy on
performance so in here I just have my
aim offset stuff for both the spine and
the blend space like I said the blend
space I'm only doing it from left to
right I'm not using the up and down of
the blend space but I did make those
poses for the blend space myself
over
here we have the update additive overlay
now I was updating this right inside of
here but I moved this over to because
this um anything that's playing on this
event graph right here this event graph
anything that's uh running on here is
running on the game thread uh the game
thread is what everything else gets
updated on uh and
so the the more you have on it the
longer it's going to take
to process the game thread and so in
order to reduce the
overhead of updating our layering
settings I moved it over to the worker
thread the worker thread is basically
anything that runs on the anom
graph as long
as you have used multi-threaded
animation update checked
so I don't know if it still does that if
you disable that maybe it does I don't
know so that's the shooting mechanic oh
I didn't cover procedural uh the
procedural hack okay I'll go ahead and
cover the procedural hack so right here
you have this booing it's called enable
procedural hack it only actually works
for this uh character mesh and the
animations that are playing on it I
tried to get it to work with the live
retargeter I had a lot of problems and I
decided not to to do it the problem
mostly is with
um the virtual bones I'm not going to go
into too much depth about that but
basically live retargeted characters
their virtual bones don't get updated uh
in relation to how the how things are
executing on the animation graph because
they're not running this animation graph
they're just copying the pose of this
mesh right here which is playing this
animation graph but is
invisible
so I'll go ahead and cover this anyway
if you enable this it'll enable the
procedural uh offset hack and this is
basically like telling your hand to go
to where the socket location is on a
weapon but it's a more proper way to
approach it a lot of people just have
you they just uh let me see if we go to
the anom graph and we go over here a lot
of people will set the affector uh
location itself directly to the socket
location and they'll set this to to be
in World space right here uh so that the
Target location for the hand is a world
space location but as I told you before
uh this anom graph right here is ran on
the worker thread and everything else is
ran on the game thread and so because of
that there's a latency issue if you do
it that
way uh and what happens is
the uh the location that it gets to tell
the hand to go to uh is always one frame
behind where the hand actually needs to
be and so the hand will come off the
weapon the lower your frame rate the
further off the weapon it'll it'll come
uh so in order to get around that the
proper way to actually uh do this would
be well right here you'll
see I don't know why let me
see this macro right here is the
procedural offset hacking
itself and so whenever you enable this
and I don't think I even have this
hooked up anywhere but whenever you
enable this it gets the affector
location the get effector
offset and what it's doing is it's
getting the socket location off that
held object and it's
it's inverse it's using an inverse
transform location with the transform of
the virtual bone to
basically and this has to be in World
space since this is in World space and
what happens is the what you get
returned off of here is the offset of
that socket in relation to that virtual
bone and what that means and also you
can do it like this too transform to
Bone space uh that will return the
position and rotation which may not be
necessary but what that does is it
allows us to have the hand go to the
affector Target location of the virtual
bone where the virtual bone should be uh
in relation uh to that animation so that
he's holding the weapon but then this
affector location this affector location
is the offset
the socket from that virtual bone and so
that affector location offsets the
target from the virtual bone by that
amount and basically what it does is it
allows us to in real time apply an
offset to the hand and since this isn't
relation to the hand uh or to the
virtual bone which is on the
skeleton it's not affected by the fact
that this is on a worker thread and the
socket is updating on a game
thread that's basically the rundown of
it I know that sounds complicated but um
just trust me if you make if you uh get
the offset in relation to the to a bone
in particular then you will not suffer
from that
problem okay so that's out of the
way so I'm working on the animation uh
system right now
I'm covering all the stuff here so I
covered all the stuff on uh the event
graph uh briefly and I'm just
overviewing the overviewing that stuff
but then I'll cover it with these other
sections that I'm coming up
on I'm just going to close out all this
stuff right
here and so over here on uh the anom
graph you'll see we have the motion
matching and I've cached the motion
matching so that I can use it in
multiple places over here uh this is
experimental I'll go over this later as
you can see I do not recommend using
this this is basic basically a temporary
workaround for those who do not want me
want to wait for me to find a better
solution uh which is what I'm working on
right now a better
solution
uh and yeah I'll go over that later over
here we have our uh the main part of
this entire system is the layering
system so the layering system allows us
to layer things over the
body uh it it allows us to layer poses
and animations over the body in
different
ways and then we have our overlay state
right here this these are the things
that we're
overlaying the we're actually overlaying
The Locomotion onto these poses rather
than overlaying these poses onto The
Locomotion and the reason why we do
that well basically it's because
the we can predict the overlay State
stuff but we can't predict The
Locomotion even on a state machine we
can't predict local motion and so we
need to overlay The Locomotion onto the
overlay State since it is predictable
and controllable that's where a neutral
pose comes in but I'll I'll cover that
here in a second I'm just going to cover
the rest of this so this is the uh
default uh setup right here the default
aim offset I'm only applying it when
we're in an unarmed State and in
actuality it looks like I may have
accidentally disconnected that I don't
know how that happened but I did do that
on
accident that was not
[Music]
intentional let's actually set that to a
bull yeah and in actuality I could get
the state weight of the overlay state
and use
that but I think that'll work
fine so I'm doing the same thing right
here I may uh replace the uh this right
here with the state weight as I was
talking about just a second ago this
right here is the default slot this is
basically the full body slot without any
uh additive stuff uh so the additive
layering will not effect
it and this is what the traversal
animations play on in some cases you may
want to play other animations on this as
well uh this is the weapon uh bone
correction and that corrects the the
weapon bone that I'm using to attach the
weapons to it it corrects it to be how
it is on the overlay state where he's
holding the weapon uh and I'm doing that
after the traversal that way when he's
traversing uh the traversal animations
have the weapon bone in their default
slot which is not oriented properly for
him to hold the gun and so the gun will
rotate in his hand if we don't do
this this is the offset root bone which
causes all kinds of problems I don't
like
it uh hopefully they can improve it and
5.5 aim offset logic this is what's
controlling the aim offset as you can
see here I have this uh bound to a blend
space aim
offset which as I said before gets
passed in from the
character
blueprint right
here so it gets passed in there and then
that is what gets
played inside of here I'll go over that
in more detail later here's the leg I I
have to disable the leg ik in certain
situations so I have a curve value that
you can add to your
animations I'll go over that later I
didn't put that on here actually so I
may as well go ahead and cover it before
I forget it but let's see
so if I go into the actions okay here's
uh an action animation this is an
animation montage and you'll see I
created a a metadata curve and in case
you don't know a curve has a default
value of zero but a metadata curve has a
default value of one and you cannot
modify that
so it's easy to just add a metadata
curve if you need something to be one
and you only need it to be one
uh then you can just use a metadata
curve that's its
purpose and you can just add that
disable ik metadata curve right here and
it'll be one and that'll just mean that
it gets disabled the leg I and inside of
here the hand
I the reason why this works uh by
modifying the curve right here is
because right here is because any
animation that might be
setting
the those hand I curves to one over
here right here after those set it to
one it'll set it back to zero that's why
that works so it's an order of operation
thing that stuff comes from over here
and it comes through here and then this
modifies it from one to
zero and then we have our uh two bone ik
that's our hand ik and it dictates where
the hands will
go and as you can see here we're using
um a curve value call it enable hand l i
and enable hand r i and you can do those
on the animations just like I did this
one uh for
those if you just want them to be one
you can add them as metadata curves if
you want them if you want to turn them
on smoothly and then turn them off
smoothly then you can add a regular
curve and set key frames on
[Music]
it and that's the
rundown now we're going to talk about
the layer
intro yeah so on the layering we have
our motion matching overlay and that's
basically this if you ignore this stuff
right here by the way I will be removing
this in a later update
uh so uh you can look at look over it
it's not a a good method it's a hack uh
and that's why I say I don't recommend
this I just put it there for people who
want a quick fix until I find a better
solution so this is the motion matching
layer this is The
Locomotion this is the overlay State
it's mostly just poses you can have
animations in here in fact I
do but I'll go over that here in a
minute over here I just have a neutral
pose I chose the ALS neutral pose
because it's just it's a good neutral
pose
and uh if I were to make a neutral pose
I'd probably make it like they did in
ALS and so I just used I repurposed the
ALS in POS
just so you guys know I did not
reference uh ALS while I was making this
I made this from scratch without
referencing anything or looking over
anything the only time I ever referenced
uh actually referenced
ALS was whenever I was uh setting trying
to figure out like exactly what his
approach was for handling the layering
settings for the two-ended weapons that
was the only time I referenced it I will
admit that I referenced it for
that so over here you'll see here that
I'm just caching the
pose and this is the base pose this is
the overlay pose and then this is just
the neutral
pose
so down here you have your uh Dynamic
additive set up
so this basically is kind of like how uh
they did it in ALS but I think it's
easier to understand with them separated
like
this uh also it's probably a little bit
more performance
friendly
so what you're doing is you're getting
the difference between the neutral pose
and the base pose and you're adding that
difference to the overlay
pose and you're doing that every
frame and you're doing that in local
space over here you're doing the same
thing except you're doing it in mesh
space how do you know if it's mesh space
this make Dynamic additive if you select
it you'll see there's only one setting
it's called mesh space additive by
default it's disabled so by default it
is local
space if you make something in mesh
space you have to apply it in mesh space
you do not apply something that was in
mesh space in local space you will get
funky stuff your guy will blow up like a
balloon uh he may shrink disappear I
don't know he'll do all kinds of crazy
stuff but just make sure if you apply if
you make it in mesh space it has to be
applied in mesh space that's just how it
is
this part of it is very
repetitious and I'm basically doing the
same thing for every single one of these
and these layer uh layered blend per
bone you could use a a blend mask but
then you're going to have if you come
over here and you to your skeleton and
if you don't see that you're going to go
to window and you can say skeletal tree
and it'll show your skeletal tree right
inside of here otherwise you can press
your skelet to uh skeleton button up
here and it'll take you to the skeleton
so if you press this gear icon you go to
blend uh or yeah go to blend
profiles you could add a blend mask here
and you can give these weights and if
this is
one and you recursively apply it now now
everything on the pelvis is going to be
blend did onto by
100% so I'm just going to delete
that and I'm going to come back over
here and so this basically achieves the
same thing without bloating uh that
without bloating this with 50,000
different uh blend
masks it does the same
thing so right here on on the legs
I'm on the leg
layer I'm blending anything that comes
off of comes out of this anything that
comes out of this is being applied to
the legs and the virtual bones why the
virtual
bones well I don't use ik bones because
they're not
scalable uh so if your character's feed
are if your character's legs are
longer uh or your character's feet are
bigger or if your character's feet are
more spaced apart in his pose because
he's bigger then the ik bones on this
will be in the wrong
place uh that's just how it is uh ik
bones do not skill with Anatomy virtual
bones
do
so that's the reason why I use Virtual
bones so I just recreated that
uh ik root tree I recreated it right
here using virtual bones and so I'm uh
applying whatever is coming off of here
I'm applying it to that virtual bone
that means that the animation on that
virtual bone those virtual bones will be
in the position that animation was on
this what that means is that whenever
you apply uh a leg layer when you layer
things on the onto the legs the leg I
will ensure that the legs are where
they're supposed to be on that animation
that's coming out of here and not where
they are supposed to be on The
Locomotion now you could remove that if
you want and if you do that then the
legs will be forced to go to where
they're supposed to be on The
Locomotion that's up to you
so you'll see that I have the mesh space
if you want to apply it in mesh space
local space if you want to apply in
local space overlay pose if you only
want the overlay pose to be uh layered
onto it and base pose if you only want
the base pose to be layered onto it the
base is The Locomotion the overlay is
like the the poses of him holding the
weapons stuff like
that and these are the blend times right
here and it's just a linear blend I'm
not applying any fancy
Blends you could experiment with that I
think in um ALS he likes to
use um I think the senu soidal or the
quadratic one no he uses the cubic one a
lot uh but anyway it's up to you also
you can add a blend profile here so that
you can change the timing
uh and say Hey I want the feet to blend
in faster than the arms uh for example
or the arms to blend in faster than the
feet and that's just totally up to you I
might experiment with that too maybe I
can
uh improve the aim offset issue with
that by doing
that
so anyway that's we're doing this on the
pelvis and you'll see that this this one
has a blend depth of negative one so I'm
going to go ahead and explain to you
what the blend depth means because a lot
of people are going to get confused by
it so say my blend depth is
two and uh and let's say it's the pelvis
so let's say I have a pelvis right here
and the blend depth is two that means
the pelvis is Blended 50% and spine one
is Blended
100% everything under spine one is also
Blended
100% everything down the chain
100% if it's set to
four that means pelvis is 25% spine one
is 50% spine two is 75% spine three is
uh 100% four five everything else is
100% if I have it set to
ne1 that means
that we are excluding that so let's say
we say
th11 th uh I mean th L negative 1 th R
negative 1 that means that the pelvis
and Spine o1 and everything under the
spin1 will be
100% but th L and th R will be 0%
Blended so the mesh space rotation blend
you'll see that on some of the these
it's checked and on some of them it's
not checked why well mespace rotation
blend just means that uh whatever is
being applied here on the blend pose
zero will be applied in mesh space
basically how it looks in the animation
so if we look at this
animation uh the way it looks in here in
relation to that access so if I go to
the top down here and I close this out
you'll see we have this access this this
is basically kind of like our mesh space
uh axis uh
well whatever is layered onto there will
be applied just like it is showing here
that's what mesh space rotation uh blend
means if this is
disabled
uh then that means that it'll be applied
in local space and that only really
matters I
believe uh if you have
blend depth that isn't
zero um I'm not 100% sure on that that's
kind of that's I don't know a whole
whole lot of in-depth information on
that mespace rotation blend uh but I do
know that if you want things to be
applied uh in local space such
that actually I'm going to uh go back on
that
so uh the MB rotation blend like I said
said it is going to be in mesh space but
if it's not checked then that's that
means it will be applied in local space
so for example over here on the arms
you'll see that we have a we have it
unchecked on this one but we have it
checked on this one what that means is
that whatever is playing right here
whatever is playing right here is going
to be this is going to be applied to
that in local space which means that
you'll get some of that movement back in
from The
Locomotion this is also affected by the
layer settings of everything that comes
before it too though so let that be
known this is a local uh this is a local
space blend but it's local to whatever
already was before
so
okay so how are we uh setting these we
we're setting them using these variables
right here and these are just structs uh
that I'm using to store uh these this
data and it stores a base overlay mesh
space or local space and I'm blending
the poses by that enum so I can say
blend uh poses and I can say the
enum that I want you see so let's say I
want overlay State now I can right click
on here and choose an overlay
State that's how that
works and then you have to plug in that
that enum right here to choose which of
these get
chosen so that leads me to the data
asset layering
data so the data asset layering data is
actually inside of here so if we go into
Dao and we go into layering data
and I didn't actually
uh uh list choosers over here but I'm
going to list that anyway I mean I'm
going I'm going to have to cover it
obviously but if we open up this PDA
overlay
laying you'll see that we have they're
all using the same structure they just
have different labels so we can identify
them and so you have your legs pelvis
spine head your arm l Main pose rml
secondary motion RR main pose RR
secondary motion so I renamed these so
that uh they would be more easy to
understand and each of
these have a description that gives you
some kind of a hint as to what their
purpose
is if you want to
create uh
I'll just go over that here so if we go
under held objects and we go to M9 you
will see we have these data assets
they're of the type PDA overlay layering
so if we go into right click and go into
miscellaneous and select data asset we
can uh find or search for the PDA
overlay layering and select it I
normally proceed mine with dacore for
data asset and then the name
now you can give it the layering data
settings for
each now this may seem uh difficult it
is very flexible but it's not actually
that hard to understand because there
are some rules that uh persist
across basically every single one of
these they might differ
slightly uh given the situation but for
the most
part it's pretty
consistent so if you're idle and you're
aiming with a weapon you want the pelvis
to be in mesh space the spine to be in
mesh space the head you can make that
mesh space if you want or if the head is
moving around too much you might put it
into overlay space and say 0.5 you have
to remember that the overlay
is just a pose in most cases it might
have a breathing animation layer over
the top of it and I'll I'll talk about
that here in a minute but it's going to
be somewhat
rigid uh so you might want to only apply
a certain percent of it to the head if
you do that and that will make the head
uh more stable so that it doesn't move
around quite as much it reduces the
amount of movement on the head
100% would mean almost no movement on
the head 0% will mean full movement on
the head 0.5 will mean that it's 50%
static on the arms uh for the main pose
on both arms you want that overlay and
you want it
100% in order to introduce Locomotion
back in into it by a certain amount or
certain margin you can leave it an
overlay and you can say
0.1% that's in the case that the that
that hand is holding the weapon in this
case for the M9 Idol aiming he is
actually holding the weapon with both
hands and if this doesn't crash and I
hope it doesn't it doesn't Okay cool so
if I pull this out and I aim you'll see
he aims with both hands when he's idle
and aiming when he moves he's only
aiming with one hand so how do I get his
left hand to move like it does whenever
he's aiming with the rif with the pistol
with one hand without making it stiff
like it was in the other one so I'll go
ahead and show you now so on the M9
running
aiming you'll see
that for the secondary motion of the arm
L I do have the uh main pose still
overlay in 1.0 that stabilizes it but on
the secondary motion I'm setting it to
base
100% And that stabilizes it and so you
can modify these in real time and I'll
go ahead and show you that now so if I
set this to base and I aim you're not
going to really see much of a difference
here uh mostly because I'm assigning it
to base so actually on this one you can
actually set that to
zero and you're not really going to see
any
difference that's because I want the
base to be in local space but if I set
it to base m space you'll see how it
looks so that's how the arm is actually
moving on the
base
so if I say zero right there you have to
remember that the arm
every like I said before everything that
precedes these this is uh working from
uh top to bottom these are being applied
from top to bottom so the pelvis is in
mesh space point2 uh but the spine
that's what matters the spine
overrides the spine and arms on this one
that were applied a
mes2 it's it's overriding that with Mish
1.0
over here you're not overriding it with
anything because this weight is
zero but over here you're overriding the
arm that is in mesh space
1.0 you're overriding that with a local
space blend of 1.0 so it would kind of
be like it would be like having this in
mesh space 1.0 and then applying this in
base and that's the second secondary
motion and so you'll see we get the same
effect out of it and if I say zero you
won't see a change because it's it's
still being applied in mesh space so
it's important to note that if you're
applying it to the arm already in mesh
space and you want it to be applied in
mesh space uh for the main pose then you
don't have to do it again on the main
pose but if you want it to be overlay
uh you have to apply the weight or it
won't be
applied then it goes back just a little
further I
think nah not much of a difference
really yeah you're not going to see much
of a difference on that one in some
cases you're not going to see much of a
difference between overlay and mesh
space not when you're applying secondary
motion back to it at 100 100% if you if
you apply this only 0.5% though you will
uh see a difference so I'm only applying
the base 50% but I'm applying the
overlay 100% And so you'll see how much
stiffer it
is but if I set this to
1.0 then it basically ignores that
stiffness that was applied before so if
you only want this to be partially uh to
add a little bit of of locomotion into
it then you can do that and you see it
moves a little bit not
much if I
say
overlay then you'll see it almost moves
not not at all it Almost Doesn't move at
all but if I say overlay
100% you'll see it moves back and it's
moving a little bit more now
if I say
base4 you'll see it's still pretty stiff
but it's respecting the way the arm is
in that animation pose a lot more
now but for the most part you probably
just want it to swing like that so it
depends on the situation if he's holding
a gun with that hand then you then you
don't want it to
swing you don't want it you don't want
the secondary motion to be high if any
at all and so you'll see on this one I'm
applying it in mesh space 100% but I'm
only applying it just
barely in local uh as I'm only applying
the secondary motion to it just by
10% and that allows the gun to move
around if you don't it'll still move
around a little bit just because the
body is bobbing up and down uh and so is
the spine but it'll be a lot stiffer
now and so it's hard to tell the
difference but there is a difference
there I should note though that if you
apply the secondary motion to it it does
slightly offset the the aim so you
should take that in into account when
you're doing that that's why I would not
recommend putting this any higher than 0
2 if he's holding the weapon uh if this
is the the hand that he's aiming the
weapon with I would not apply secondary
Mo motion any more than uh maybe
20% uh 20% or
[Music]
0.2
so that's the
rundown on that now how is this getting
updated as I said before I was updating
it right now but now I'm updating it
on uh the overlay state
on this function right here on update
I'm updating it right here and this gets
ran and executed on the worker thread
which uh reduces the load on the game
thread that should increase performance
under heavy
[Music]
loads
so by default I have this variable it's
called testing it is set to true so that
this will always
execute that allows us to update this in
real time and watch it reflect inside of
there if not if this isn't the case then
uh if you have this set to false then
it'll only update if this is set to
true and if it's set to true then it'll
it'll update it and it'll interpolate
the
values inside of here so it'll
interpolate that value so that it
doesn't snap to a new position it'll
interpolate it and then afterwards it'll
turn itself back off so I'll explain to
you exactly how this is
working so it gets set to True from the
event graph actually whenever we
update any value so if we want to aim
then it then I use this macro and this
macro if this uh
if the wants to aim if the new wants to
aim is a different value than the
current wants to aim uh I mean if the
current wants to aim is a different
value than the wants to aim then it'll
set this value to true and it does this
on other stuff too if we start
moving and there's a few other places I
use it as well you can actually right
click on that macro and find references
and you'll see where all
uh doing it from so whenever I update
the gate State or the layering State I
set it to true and that allows us that
allows this to execute and so it'll
execute this it'll come in here and if
we are not playing uh something on the
overlay full body slot or the upper body
slot then it'll evaluate the choos
and it'll it'll update the current
layering settings then I have this
helper function which I just pass in the
values to and it it'll set it'll update
uh this uh local variable uh it's all
it's Global to the animation
system
uh it'll set it by
reference inside of here and it'll
interpolate the layering the layering
weight value
and then it'll turn itself back
off and it does this for each and every
one of
those that's basically the rundown on
that oh I did not cover the Chooser I
said I was going to cover the Chooser I
need to cover the Chooser uh so you have
your Chooser table in here and these are
nested choosers I'll show you how to
create a nested Chooser you can go to
add row nested Chooser you can press
this and say new Nest to Chooser and now
you have to name your nest to chooser
user you can also go over here and
select from a an already created nested
Chooser and then you can highlight this
right here and press delete on your
keyboard to delete
it so I have these so if you go to your
layer your table
settings I have the context data coming
from the animation blueprint sendbox
character that's the one that we're
using for the uh character on this mesh
right here that's the one assigned to it
so it's getting that and and once we get
that we can add a column we can add one
of these and we can go over here and we
can choose our overlay
State uh or we can make this a boan and
we can bind to one of these one stain
for example that's what I'm
doing and then I'm setting this and can
say equal not equal or any uh but I want
this to be equal so if this is if this
current overlay state is set to a pistol
then it'll evaluate this
one inside of this
one it'll choose one of those data
assets that we created and modified
it'll choose one of those based off the
movement State and the want to aim now I
do have gate in here because we will
probably need to consider that later
right now we're not actually considering
it but it's in here anyway for when we
do uh and I'll probably have to consider
that once we go into sprinting once
sprinting and uh crouching uh gets added
we'll have to take that into
consideration as
well so that's basically it if we're
idle and we're not aiming we choose the
idle rest if we're idle but aiming we're
we choose the idle aiming if we're
moving but we're not aiming then we
choose the running rest and if we're
moving and we're aiming then we choose
the running aiming we do the same thing
on the
rifle and that's basically the rundown
on the Chooser table
so it chooses one of those based off of
those settings and it sets it right
here now we're going to talk about the
overlay state
also I am going to go ahead and tell you
that uh doing this is actually more
expensive than uh in multiple places
doing this in multiple places is
actually more expensive than just
grabbing it from a Boolean
value that's why
I'm uh caching
these because I'd rather take up eight
more bytes of memory then have to
reprocess this multiple times within a
given
frame that's a lot of stuff to process
every
frame also I should tell you too that
doing this uh getting these things
thread safe uh from a a character that's
external to this is actually more
expensive than cashing it that's also
true it may be thread safe but it is
more
expensive
so let's go ahead and cover our overlay
States so if you're in the overlay State
I just have a state machine and right
now I only have two states ready in
aiming I don't have a relax state yet I
may add that later
I know uh that's what they do in AOS and
it does add uh another layer of uh
movement to it to make it seem more uh
fluid and realistic so I may add that in
a later
update but right here I'm just saying
once to aim and the reason why I'm doing
the state
weight
is because in some cases if I don't do
the state weight
uh we might exit aiming uh whenever
we're doing a hard turn we might exit
aiming come back into ready and then go
back into aiming multiple times within a
single
frame uh and
so in order to prevent that I'm telling
it hey don't reenter the aiming State
until the ready state has Blended in at
least
90% if you're not at least 90% Blended
in then you have to wait before
aiming exit the aiming we have uh an
Aiming threshold aiming offset
threshold and basically what the aiming
off what this does is it allows us to uh
stop aiming uh when we look too far
behind us if we're looking too far
behind us outside of the range of our
aim offset then we want to go back into
ready and that just makes it look a
little cleaner I think whenever he
whenever he drops his rifle as he's
looking around and turning around uh and
then he'll aim it again and that's
basically I'll actually show you that
now so that's the effect
now it is a little Snappy and that's
because I have the uh that's because uh
some people want this to be really
uh
uh what's the word I'm looking for they
want it to be really responsive and
that's the reason why I did that uh
so uh I may go into how you can actually
reduce that yeah actually I will I'll go
into how you can reduce that so that
it's not that
Snappy but it'll be less responsive if
you do just letting you
know so inside of these uh
States we're doing the blend pose using
the enum overlay state so over here if
you move over here and you look under
the functions I didn't cover this but I
should have you'll see my additive
overlay stuff right here that's where
everything is under and under the
variables it's under
overlay and I have everything
categorized in
here there's a few floaters down here
but I'll probably categorize them
later but if we look at our current
overlay
State that's just uh what weapon we're
holding and so if we're holding the
rifle then we choose the rifle anim
layer and that's just an animation layer
right here and you'll see I have these
grouped and I'll probably rename these
and restructure this later I've already
done it in another project
but so we're choosing that based off of
the current overlay State I have it
bound right here and then we're applying
an additive which is breathing I told
you about that
before and I'm only applying 50% of that
breathing
additive and what that does is it allows
us to reduce the amount of movement that
breathing additive adds over the top of
this and so for a ready State you're
probably not going to want a whole lot
you don't want it to look like he's uh
hyperventilating uh and that's the
reason why I set it to 0 five you might
even set it to 0.25 to make it a little
uh more subtle it's completely up to
you so on the pistol
armed I'm just saying you you can open
these up and I'm going to go into the P
perspective
mode at zero at
0.04 right here this is the pose that
we're choosing for true if should move
we want this
pose and what that and the reason why is
because it's a neutral pose so we need
this to be a neutral pose for the lower
body or else it won't look very natural
whenever he's running and that's why
we're applying that when we should be
[Music]
moving so the pose that you play should
be
neutral and what neutral means is that
his hands are basically by his side and
his feet are right underneath them and
they're in a relaxed state where they're
not real spread apart and they're facing
forward generally facing
forward and he's looking
forward so it's a neutral
pose and so
if it's not a neutral pose it can cause
problems whenever he's
running whenever is Idle you don't have
to have it in a neutral pose you can put
it in whatever but it needs to respect
whatever posture his lower body
currently
has otherwise it he may be twisted off
to the side and it'll look
funny so he needs to be like if his left
foot is forward here then his left foot
should probably be forward in that
animation as
well so when he shouldn't be moving I'm
just uh playing this one and so you'll
see there's not much of a difference but
this leg is slightly
back and his pelvis is slightly Twisted
to the side on this
one so just there's just a subtle
difference there not a real big
difference almost not even enough to
even bother but anyway so right here
based on the speed we're going to blend
between this and this so if the speed is
300 then will be 90% Blended in
to this and 25% blended into
this if the speed is zero we'll be
25% blended into this and 75% blended
into this and so why so if we go over
here and we scrub to
11 this is the pose also these poses
need to be set to step if it's a post
compilation or else it'll interpolate
between these uh frame markers and we
don't want
that it causes problems
so here it has him with his hand in the
air and this is for when he's not
aiming and the reason why I'm doing it
like this is because I'm blending it
halfway between this and
this or a percent I'm I'm blending it a
percent between this and this and what
that and the reason why is because I
don't want his hand to be completely
straight up like this because when he
stops it causes his hand to swing back
so I kind of Blended it to around right
here and that's why it's set to uh 90%
and not 100% when he's
running that way whenever he
stops his hand doesn't come back into
his
shoulder or it keeps his hand from
clipping into his
shoulder on that this I'm not doing
anything as fancy I I thought I deleted
that but apparently
not right here on this one I'm just uh
saying uh uh
this
or
this and I'm blending
it only 25% into
this which is where he's holding holding
it like this
and I'm doing
that when
he's
running and I'm not sure I even need
that now I think that's how I was doing
it before and I just never went back and
looked let's see what kind of
problem we have
here yeah that's not even needed anymore
guys so if you leave it there his his
hand will probably actually come off the
rifle yeah
so that's actually not even needed I
might just be removing that that was
before I worked out all the problems
that was a a fix that I
had so I'm not really doing anything
fancy on this one
I might later on but for now I'm
not so
aiming not much to it I'm only applying
the breathing 25% during aiming because
I don't want his arms to be moving a lot
while he's
aiming and then I'm applying the aim
sweep additively in mesh space to this
pose which is this one right here on the
pistol and this is the aim
sweep and that aim sweep is being driven
by this right here which is being set
and we went over this before but I'll
show you again it's being set by the get
AIM offset value which is what they use
for their aim offset as well
for the left to right that's for the up
and down for the left to
right we're actually doing it a little
differently so I'm clamping it between
90 and 90 because the left to right only
goes from uh 90 in one direction to 90
in the other
direction and actually I currently do
not have interpolation set up I thought
I did that might have been why it was
snapping earlier I must have
disconnected that for some reason let's
see yeah so the reason why I was
snapping is because I must have uh
disconnected it you'll see it's not
snapping anymore so that prevents uh
that snapping
but like I said it makes it a little a
little less
responsive so if you want to bypass I
mean if if you want to use it just
connect this back up if you don't want
to use it bypass all of this stuff right
here so it's up to you I'll have it
disconnected by default but that's how
you can add it back and I have this as a
constant because I don't want it slowing
down or speeding up I want it to
interpolate at a constant rate
also uh if you enable spine based AO
it'll enable the spine based one and so
you can switch between the blint based
left or right and the spine based left
or right to see what the difference is I
think the spine based left to right is
slight it hitches just a slight bit more
in my
opinion uh but maybe it doesn't I don't
know it could be an optical illusion on
my part at one point it looked like it
did I went back later it looked like it
was hitching just as much as the other
one
so I don't
know yeah I kind of went off on a
tangent there guys sorry about that
I completely got sidetracked and stopped
looking at that
altogether uh but yeah that's because uh
this part of that is right
here yeah and if we should
move then we do 18 whereas feet are side
by side in in a relaxed neutral pose and
if not then we do this one
where his hand is down by his
side and so actually because this is a
pistol aiming that's actually not even
necessary I don't know why I even have
that
connected should still work the same
yeah I changed a lot of stuff and I and
I felt to uh to go back and look yeah so
you'll see it still works the same
and the reason why is because we're
actually leaving the aiming State and
therefore we don't actually need this
anymore that's just extra
bloat that's
[Music]
unnecessary same with this one we don't
need that
anymore that was before I worked out all
the problems
all those
problems so this will be disconnected uh
in a later
update if you're watching this a week
from now then it's already been uh
removed uh it'll still be sitting here
but it won't be dis it won't be
connected I'll leave it sitting there in
case I end up figuring out that we do
need it for some reason but yeah so
that's the overlay State
guys and the overlay State um it gets
layered onto
the uh motion matching state right here
using different weight using different
weight
values and you and different spaces
depending on whatever you set inside of
those data
assets so Montage slot
layering
so I need to go back over that
[Music]
so you'll see that on the update
layering
data I'm bypassing the EV uh the the
Chooser evaluation right here which will
set the current layer settings based on
the Chooser whenever we're playing
something on this slot on one of these
slots and the reason why is because if
we don't and we choose to pass in a data
layering setting along with the Montage
that we're playing on one of these slots
then this will overwrite whatever we
passed in therefore we need to make sure
that it's
bypassed whenever we're playing
something on one of these
slots and these slots are on the
layering and so you'll see that I have
all kinds of slots on here most of for
the most part you won't be using these
slots these are special use case uh
scenarios where you might use one of
these uh but for the most part you're
just going to be using one of these so
for the upper body one for now uh this
one is only for the pelvis up if you try
to if you try to layer something onto
the legs with it it's going to it's not
going to blend smoothly and I'll go
ahead and explain why so when you blend
in and out of this overlay upper body it
Blends in and out of the source and
that's it since the overlay po pose
that we're using on here is coming from
the overlay state that means only the
overlay state will be Blended in and out
the motion matching will not be Blended
in and out for that we need the overlay
full
body
so if you play on play it on the overlay
full body you might want
to and let me see I have an example here
that I set up for you guys
there is under
animations Dao anims actions you have
this laying slot and so on this one I'm
actually setting the layering settings
that I want for the overlay State while
I'm playing this
uh
montage and what that does is if you
didn't do that if you weren't and I'll
actually show you so let me just go over
to the event graph and I have this
example right here so I'm playing this
animation Montage right here on the
overlay full body and I got disable ik
set right
[Music]
here but before I play that montage I'm
using this uh blueprint interface
function which I told you about before
this one right here
which gets passed
in right
here it will enable update layering
data in
case
you let me just find it
here in case you disable this you need
this to be set properly so this will be
enabled so that this will execute when
we're not
testing and like I said before after it
finishes
interpolating it'll set that back to
false so we pass in that data asset
right
here and it overrides the layering
settings for the overlay State while
we're playing the animation and I'll
show you what that looks like
so if I'm in an overlay and this only
works when I'm in an overlay State oh no
it doesn't it it works yeah it only
works if you're in an overlay state
right now because when it when we're in
an unarmed state right here when we're
in this unarmed State uh and I I messed
up the pistol uh settings earlier I'll
have to fix that uh you'll see how stiff
it is because I was playing around with
it showing you guys but when we're in an
unarmed state we're not layering at
all but when we are in an overlay State
the
overlay let me just show
you so nothing in here gets executed
nothing in here is assessible when we're
in an unarmed state right here
when we are in an overlay State this
slot will be accessible when we're not
this slot doesn't even exist as far as
the animation system is
concerned so nothing that plays on this
will play if we're not in an overlay
state but if we are I can play
that and you'll see it looks pretty
smooth there is a a little bit of foot
sliding but I'm going to experiment with
a foot Locking System to fix
that but if I bypass this I'll have to
stop it to bypass it if I bypass it so
that we don't over so that we don't
override
that and I play and enter
it and I play it you'll see that the
hands never come off the rifle
and the reason why is because on the
rifle one we have this set to Overlay
and on this one we're saying hey we want
to play the base uh Locomotion on this
one and since the base and since before
the base before the overlay is layered
onto the base Locomotion we are playing
this overlay full body slot this overlay
full body slot will override anything on
this and so you're actually
layering you're actually layering the
overlay State onto that animation that's
playing on this the anim monage that's
playing on this
slot and this allows you to override the
settings on it whenever you play it but
you have to set it beforehand
and that's basically it for
that
oh sorry I'm having technical
difficulties over
here yeah there we go all
right so now Jesus Christ we're almost
done so much to
cover yeah don't be expecting me to do
this after every update guys
um
yeah as I said before this is like the
post layering full body it'll override
anything that comes that that's plugged
into the source it'll override anything
on on
it and so the traversal animations play
on this the problem is is like I said
before the traversal animations have
their own position for the weapon bone
and so after
that we get the weapon bones and we say
hey we want the weapon bones to be where
they were on the overlay state so that
he's holding the
weapon in approximately the same
manner when we're in an unarmed State we
don't even have to worry about that
aim offset I've partially covered this
already but if we're not in an unarmed
State then we can aim offset and if
we're not flying meaning that we're
traversing if we're traversing we go
into fly mode uh and that's because they
use motion warping and so they need it
to be in flying mode in order for motion
warping to motion Warp uh through the
air otherwise it'll just motion warp
across the
ground and so I kind of took advantage
of that fact to say okay don't aim
offset if we're
traversing if we are
though you'll see if we are
and and
right so if we are aim off setting and
by
default then we're going to be using the
blend space right
here after the blend space we do a
weapon uh finger correction the reason
why I do the weapon finger correction on
on all the fingers for each hand right
here is because the blend
space does have their own finger
positions I did not match the finger
positions and so depending on the gun to
uh the fingers might be in different
locations and this is applied in mesh
space so it can negatively affect the
fingers make them B
funny since it's being applied as a mesh
uh as an mesh space
additive and so I just place the fingers
back where they were on the overlay
State I should I don't have to worry
about that for the spine so if we are
using the spine as I said before you can
check this and it'll convert over to the
spine
based not sure what I was doing with
this I think it was an
experiment and if this is disabled it
just doesn't do anything other than
maybe disable ik if the disable ik curve
is set to one it'll disable it for the
uh
hens
right aim offset update I basically went
over that I
guess aim offset issues okay
so you may notice that when you're when
you're rotating the the gun doesn't stay
perfectly aiming at where he supposed to
be aiming it kind of uh jerks back and
forth as you're rotating uh that is
actually not my fault and there's not
anything I I can do about it right now
um
that is being caused I
believe and I'm not 100% sure
but I am under the
impression that is also being caused by
the offset root
bone the offset root bone node offsets
the root bone in relation to the actual
mesh on the
character and
so if you see the the transform of this
right here this is the transform for
this mesh component this mesh component
does not get off offset but the root
bone of the character and everything
connected to the root bone will get
offset way over here somewhere uh not
that far away I'm ere exaggerating to
get the point across but it'll be offset
over
here in order to prevent foot
sliding and it does that by analyzing
the the root bone animation or root bone
motion on the animations
themselves and offsetting the
root based off of uh the
velocity and direction of the root bone
in the
animation
versus the velocity and direction of the
character and World
space so it'll offset it off over here
somewhere which that that also
means that you can't you have
to calculate your aim offset based off
of the root bone and not the
mesh normally you do it based off the
mesh but you can't do that if you're
using this offset root bone because it
won't be accurate he'll be aiming in the
wrong
place and because of that it causes
jittering that jittering is caused
whenever this offset root bone rotates
the M uh the root on the character that
we're calculating that aim offset from
That's What Causes That
jittering and I I'm applying this as a
curve I decided to do this as a curve so
if we go over to these
poses for example the pistol idle aim
you'll see hand enable hand Li is set to
one I could have made that a meta curve
a metadata curve I didn't for whatever
reason I probably should have but it
it's not that big of a
deal um so anyway if that's
enabled then his hand will be placed at
this affector location which is
controlled by the these will by the
virtual
bones that are attached to the weapon
bones so I ATT I made these virtual
Bones based off of the weapon bones
because this character uses weapon bones
and in some animations you need the
weapon to rotate in the hand uh during
the animation and so you can animate
those weapon bones to rotate the weapon
in the
hand uh whenever you're making the
animations
if you don't want that uh in some cases
that's necessary in order to keep from
having to bend the wrist at a 90 degree
angle which looks really funny and
causes a lot of uh pretzel twisting or
balloon twisting problems uh with the
the weights where your wrist will just
completely lose volume and it'll look
like it's twisted like a pretzel
uh and that's the reason why weapon
bones are important some kind of bone
you could use the ik hand gun bone but
you need you would need to position it
and constrain it and all
that um if you didn't have any
animations that were that needed that
then you could actually just create the
virtual bones off the hands and use
those as the targets uh the affector
targets take rotation from affector
space means that it'll rotate the hand
to be oriented to that virtual bone the
rotation of that virtual
bone The Joint
Target it's like a pole arm if you're
familiar with a blender or Maya you have
those pole arms and that just keeps your
that keeps this right here the it keeps
this oriented and in a specific position
to keep it from bending backwards and
doing funky
stuff and obviously we're doing this to
the
hand
so that's basically it on that I'm not
going to go into too much depth on that
uh the reason why I'm doing that is
because whenever we apply additives over
the top of things the additives are
sometimes applied in local space which
can
say if this is pointing this way and I
apply something that moves it in this
direction uh then it'll move in that
direction but if it's pointing if the
top of
the forearm is pointing in that
direction instead and I apply something
that moves it in that in or that moves
it in the direction of the top of the
hand then it'll move in that direction
instead of this direction but those
virtual bones will still maintain their
offset on those
hands and so we can tell it to place
those hands back to where they need to
be and that's basically
it oh yeah
so we have this experimental one
you can check this to enable it and
you'll see that it offsets the
pose completely using a a layered
additive
technique and I'm just placing the hands
back to how they were right there that's
all I'm doing on that one right
there and then this is just doing a
two-way blend back back with the base
based off of the speed to blend back out
of it whenever we start
moving so this is
experimental there are some problems
like if you're running forward to the
left uh sometimes the legs will
clip or the legs will do funny yeah so
see in some cases is the legs will clip
they'll cross each other whenever they
blend back into that pose You' seen that
so that's the reason why I said it's
experimental it's not great uh it does
somewhat work so some people might like
it so for now I'll leave it in there uh
but I am working on a better solution
and
so yeah I'll see you guys in the next
video

================================================================================
ARQUIVO: Unreal Engine 5 - GASP Dynamic Additive Overlay (Overview v1.18) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

In this update I corrected the Aimoffsets, this required reworking the way I had started handling it in order to reduce jittering caused by I believe is the Offset Root Bone they use to prevent foot sliding in the project.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

=== TRANSCRIÇÃO ===

all right guys so
after a lot of trial and error I finally
got this and it's pretty accurate
uh in most cases in almost all cases
it's less than it's well under a degree
off so that right there is uh
uh almost as low as a tenth of a
degree closer to a fifth of of a degre
degree I
guess um so right there
36 right there
67 that's
77 and then it drops when you start
getting closer to the
top so if you're aiming up and over to
the right and some cases it might be as
high as like8 Maybe worst case
scenario .9 okay so that's pretty
accurate right here this one's a little
less
accurate it goes up to about 1.25
but that's still pretty
accurate and then
uh the the one-handed pistol is pretty
accurate I might revisit the rifle and
try to get it more accurate uh I don't
know why it's less accurate than uh the
pistol maybe it was because of the way
that I did it the engine kept crashing
while I was trying to make them uh those
poses so uh I might have overlooked
something due to all the crashing it was
some weird uh tick event bug I don't
know real weird but it kept crashing
so obviously when you're turning and
he's pulling his hand back like that or
you know like you're going to be pretty
off uh whenever you're doing stuff like
that obviously
um also uh something you should know is
that the lean does make it slightly less
accurate and so I have that disconnected
right now
I might look into that if it's too bad
uh last time I haven't checked it so
let's
see it's yeah okay when you're looking
down yeah there's a problem right
there that's caused by the
lean and I can prove it uh I'm pretty
sure that's the cause by the lane Maybe
I'm
Wrong I think I narrowed it down to
being the lane the last time
yeah stupid teleport things I'm over
here trying to show you guys this yeah
so so as you can see that's caused by
the
lane because it's it's very accurate
when that's
disconnected so I'll have to look into
this it probably has something to do
with the way they did their lanes and I
may need need to redo
them yeah so it
looks it looks like the arms might
actually be moving
slightly um now the reason why this
don't look right is because we don't
have a preview pose and let me just say
idle um
let's
see yeah so it does look like like the
hand the arms are moving in that so what
I'm going to do is in the next update
what I'm probably going to have to do is
I'm going to have to go back and I'm
going to have to remove that those
rotational offsets on the arms so that
it doesn't rotate the arms because if it
rotates the arms
that's what's going to cause that
problem uh whenever you're
aiming as you can
see it does some funky stuff to the arms
so uh yeah another alternative would
be to actually move
that pre this but I don't know what kind
of effect I think I tried that and I
don't think it worked I think it caused
more
problems let's try
it yeah actually I kind of fixed
it so I'm going to leave it there
then okay well that fixed that problem
what I'm actually going to
do is let's just try moving it up
here and and let's make sure it's still
going to work fine from
there yeah so it's still working um so
that's where I'm going to leave it
guys yeah so I'm going to
actually I don't know what to do about
this comment so um I don't know I'll do
something with with that comment later
but there you go that's
fixed uh let's see I can move that
so moving on our aim offset is actually
right here and there's a reason I put it
right here and the reason why is because
Midway the hands come off the rifle if
he's holding a two-handed rifle and I
want the hands to stay where they are in
this pose relative to the uh the other
hand uh and that's and so over in this
one
I'm still layering uh well that's for
the fingers the fingers will get placed
where they are in this pose uh e that
helps it probably won't happen but it it
does help prevent like the fingers from
being additively applied during the aim
offset uh this right
here uh is actually what's correcting
the
ik and it's taking it directly from the
overlay state uh and that's the reason
why I put this right here rather than
right here or inside of here so that's
where it was
at uh this stuff right
here is
deprecated I'll probably remove that in
a later one but I'll leave it there for
now and I'll have to remove that other
stuff too so the BL space thing uh I I
couldn't I couldn't do it accurately
from the blend space so that's
deprecated guys uh My Method requires
spine rotation to be done from here and
the reason why is because it's just very
accurate uh the way that it does it is
is just very accurate so that's the way
we're going to have to do it if we want
it to be very accurate I tried doing
doing it using this method for the up
and down uh I tried to do the left to
right uh using uh using uh this method
right here and I got mixed results it I
may revisit that later but this is the
uh right here this is uh an anom layer
called pitch AO and this is where the
pitch happens so that's why I have this
should move here for for the uh pist
because a pistol has he's holding it
with two hands whenever he's not moving
and he's holding it with one hand when
he is moving which is why I have this
here and two for the
pistol and so I'll just bring this down
here and I'll just comment this pistol
and this is M4
A1 and then right here based off of that
if he wants to aim that's only we're
only applying this when we want to
aim so as far
as um the other stuff I should mention
if you do add if he's holding it with
his right arm and you add secondary
motion if even if it's 10% secondary
motion if you add secondary motion it's
going to offset your aim offset
uh there's nothing I can do about that
that's just uh how the secondary motion
works whenever you apply it onto there
things are going to get
offset um based on the Lo underlying
Locomotion uh animations so on all of
those I turned that off I I just I have
no secondary motion on those arms
holding the
weapon um you can add it to the other
arm if you
want now breathing has an effect too so
I'll go ahead
and hook that back up if I can figure
out where it is um it looks like I
forgot to remove that stuff I'll just
remove that now
and of course this is
deprecated I could remove it now but
I'll just leave it there I'll probably
remove it in the next
update so over here on their overlay
States I have this breathing
disconnected this
will a little bit it'll offset the aim
but that's only because the hand is
moving up and down but I think that's
more realistic so I mean you don't want
it to be perfectly accurate see you can
you can see the hands moving up and down
now so adding that will make it a little
offset it does look like it may be
affecting it uh in a negative way but
that's just because of the way that the
uh breathing makes his hands
move see right there it was almost
accurate yeah see so it is pretty
accurate it's just his hands are moving
around yeah
so and as you can see it doesn't make it
that much more
inaccurate and it makes it more
realistic if you wanted it to make it
more
inaccurate then you can just crank it up
now he's his hands are moving a lot look
at
that yeah see
so I'm I'm going to put that back at
0.25 and that pretty much sums up the
video guys uh I didn't get to the other
problems I'll have to deal with them
next weekend uh I spent all my time
actually trying to fix those aim
offsets uh actually I guess I'll go
ahead and I I'll make another video on
the aim offset stuff I'm I'm not going
to cover that in this video maybe
tomorrow I'll do a video but I will be
doing a video on how I achieved that
that way you guys can replicate it in
your own projects and I'll see you in
the next video all right so sorry guys
so I did forget to mention that I added
that debugger tool and I I need to
explain that so you guys know how to uh
turn it on and off so it's in a function
in here and that function is being run
on the basic projectile function which
is so if you go to the event
graph and you go to the KD weapon add-on
logic and you look for this you'll see
the basic projectile you can go in there
and that's where I'm using it at right
there so
I kind of covered this in another video
uh this part right here will differ
from oh it depends on your your weapons
really um
so yeah I'm just doing a camera trace
and a weapon trace and then I offer the
actual angle degree between that's just
a straight angle um and then there's the
three AIS uh angle so I'm actually going
to I call that three AIS
angle oh I already uploaded it oh well
uh so in the next update it'll be called
three axis angle anyway uh no big deal
so if you go down
here you'll only see that okay
well it looks like I don't I forgot to
add the ability to turn it on and off I
thought thought I had added
that okay so I did not add that if you
want to turn it off you're just going to
have to bypass this here for now or you
can go in there and add a add a a branch
right here and set up a bull so that you
can turn it on and off I thought I'd uh
set that up already but I already pushed
it so I'll fix that in the next update
anyway so if you just uncheck this then
it'll give it to you in the three AIS
angle if you check this it'll be a
single
angle so anyway just thought I'd give
you the rundown on that before I uh
posted the video and I'll see you guys

================================================================================
ARQUIVO: Unreal Engine 5 - GASP Dynamic Additive Overlay (Overview v1.20) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

In this update I fixed some bugs, sped up the Turn In Place, and added a Custom Idle Animation.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

0:00 Intro
5:10 Character BP Changes
9:00 Anim Graph Changes
11:15 Chooser Changes (Custom Idle)
15:15 Alternative TIP Method

=== TRANSCRIÇÃO ===

all right guys welcome back to another
update so
uh
yeah so I'm going to go over a few
things that I did for one I sped up the
turn and place so that it happens faster
as you can see um and more
continuously uh that way whenever we're
aiming uh we
can just aim like this and it'll keep
going yeah
so also you'll notice that I set it to
so that it toggles on and off now and
I'll go into
that
and if you press four on the keyboard
then he'll go into the fighting stance
and if you change back then he'll he'll
play transition animation I might redo
that transition animation uh it kind of
looks funny because you're moving from a
dynamic animation into a non Dynamic
animation and that their Idols are kind
of stiff as you can see uh and the only
reason why looks less like it doesn't
look completely stiff is because I'm
actually layering breathing over the top
of it that's how stiff their uh their
Idols are they're so they're so stiff I
had to additively apply a breathing to
it just to make it seem a little less
stiff
uh uh but
anyway so there's that and then you can
move into
that and I may redo that transition to
later I just kind of threw that together
today also uh if
I move into
this then you you'll notice that you can
no longer uh shoot before you're aiming
if you try to shoot and you're not
aiming then he'll aim but he won't shoot
and then you can press it again and
he'll shoot uh you may not like that
mechanic but uh that's just the way I
decided to fix it
um so I'll go over that in a minute you
can no longer shoot while uh traversing
and if you try to shoot while you're uh
before and leading into a Traverse then
it'll just stop shooting uh whatever
montage is playing when you try to
Traverse now it will automatically
cancel any cancel and stop any Montage
that's
playing before it plays the traversal
animation uh yeah so that's important to
note that also means that if we're
reloading and we try to Traverse it'll
stop the
reload so I did find earlier where and I
don't know if this is a bug in their own
system
but earlier whenever I tried to daverse
he kind of went yeah You' seen that that
camera thing I think that might be a bug
in their system but I'll look into it
and try to see if I can figure it out um
so anyway let me just go over the uh
updates and stuff like that what I
changed and how this stuff works I'm not
going to get into how
this system right here Works uh you know
what I forgot to show you
something so let me just press
four and now that we're in four I
pressed the middle Mouse button uh to go
into the this mode so that he doesn't
uh so that he doesn't turn in place
whenever I'm looking
around um now I'm pressing G on my
keyboard uh and this is a and you'll
notice that this this one looks a little
bit better uh than the other
one and you can swap those out if you
want uh
but it it it would take a little bit of
work uh because you'd have to kind of
strip their turn and place system or at
least disable
it uh so right now if I just press G on
my keyboard it'll just do it in place
and he won't rotate
obviously uh so this works best at 45
degrees from between 45 degrees and 180
degrees and the reason why it works is
because he's jumping and turning he's
not picking up one foot at a
time uh that's the reason why this
method works that's a secondary method
that I put in there for you guys and I
made those animations myself uh so
anyway moving on
um I did make those animations today too
by the way
so if we let's just start in the
character
blueprint so you'll notice under Dao aim
offset you'll notice that I have enable
AO debugging under here you can uncheck
that now to disable that I did change
the way that the
debugger uh stuff works now by default
it just stays for a second and then goes
away uh the Trac is
due but you can turn that off by
disabling
this now this is the input action for
the unarmed custom State and I did add
another state called custom idle under
the overlay states which as you can
remember is under the blueprints Dao
data
enums the
input mapping uh context is still under
the input
folder the input action is under the
input action folder under the input uh
folder and the button to press as for to
enter that
I added
a to the blueprint interface on the
animation
instance the interface that we're using
in here to that I added a function
called get is aim ready uh and this is
what I'm using to see if it's ready to
aim I mean ready to fire uh that's why
the booing is called ready to
fire uh I probably could have said uh
get is ready to fire as the function
name but whatever you can change it if
you
want so that's basically that you'll
notice that I am just having the server
call uh set the custom idle instead of
uh calling this now that's only on this
one I'm not going to go through and
refactor the entire system of
replication but basically from my my
understanding it's pointless to have a
server call a server RPC and so I am not
having the server call a server
RPC uh instead I'm just having them set
the state
directly uh also on the event graph
you'll notice that all that crap that
was down here I put it under the Dao
logic uh that's where that stuff is at
now so
that tidies things up a little
bit if we go into the original logic
which isn't so original anymore since
I've replicated it uh added the
replication to it um this is what I
changed right here stop anim Montage
before it plays the anim Montage an anim
montage I'm telling it to
stop and that's basically all I did with
that that prevents anything from
interfering with it
also organize this a little bit
better right here I'm saying uh is aim
ready and we're not doing a traversal
okay go ahead and fire the weapon that's
basically all I'm doing
here now we're going to move on to to
the an uh
animation
graph you'll notice that I'm doing a an
unarmed or custom idle here uh because
right I'll move this over to where it us
it to where they all go through the
states and we don't have to have this
extra crap here later on uh but for
right now this is this is just how I'm
going to do it so I added an extra pen
here it's doing the same thing
and right here I'm saying
nor if we're not equal
to
it if if uh we're equal to if we're not
equal to unarmed or custom idle
basically uh then we do that same here
this will be true if we're not in the
custom idle State or the unarmed state
if you try to do a not equal to or not
equal to then it'll fire true if either
one of them are not equal to if the
current state is not equal to one of
them and it always will not be equal to
one of them even when you're in the
unarmed State then it'll fire true which
is why I did nor um right here I
adjusted these interpolation values uh
for the alphas of these right here on
both of them just made some slight
adjustments
and inside of here on the ready State on
become relevant we're setting we're
calling this function which just sets is
ready to fire to
false and on the aiming State whenever
we're fully blended into the aiming
State we set it to
true if we ever exit this state for
whatever reason and it's not related to
moving from from aiming to ready then we
just go ahead and set this back to
false
so if we go to our characters ufn
mannequin motion matching data and you
just open up this post search datab base
d uh you'll be graded with this you you
can go into this uh nested Chooser
called Stand
idols and you'll see this is now also a
nested Chooser called idle it still gets
chosen based off the same
parameters and if we edit it it'll take
us into that and you'll see that if we
are in the the custom idle State then we
will choose Idols custom if not we will
choose the idols uh so if we're not
equal to custom Idols will always choose
the stand idols and this is just a fall
back uh if we browse to that and open
that you'll see I have a transition from
inside of
here
and in the other one let me see if I can
find it in the other one I just have the
custom idle and the transition to that
custom idle inside of here and I made
these
myself inside of a
cascader you'll notice that I added some
buffer frames on the beginning of it
that's for blending uh it's just a
safeguard I'd rather have two mini
frames at the beginning than not enough
so I just added eight extra frame eight
I added like 10 10 more frame or nine
more frames actually then uh
because it starts at frame 10 in that
pose and then it goes into the other
pose so I'm excluding this from the
database these first seven frames and I
do the same thing on the other one if
you add a notify State exclude from
database that's what you're seeing
here on this one uh this is blocking it
from entering the uh from the motion
matching entering at sayfe frame 11 12
or 10 11 12 13 all the way through 37 it
cannot enter at any of those frames it
has to enter uh between frames seven and
10 it has to enter somewhere right
here this uh post search override
continuing post cost bias if you go over
here you'll see this this is the one I
added to the track two I did not change
the default uh modifier value it's
netive -1 it reduces the cost of
continuing this
by1 uh by one point it reduces it by one
point and that allows it to continue on
and finish the animation before it moves
on to uh another
animation if you go to Windows and you
make sure this is checked animation data
modifier and then you find that window
over here you can add the foot L foot R
and move data speed to this and then
just apply it and it'll add these curves
right here these curves are used
somewhere else so I I may go into that
in another video but I'm not going to go
into that in this
video uh but it's probably just a good
idea to add those uh to any animations
you bring in here that you're going to
pose match against or motion match
against so that's this method
here and I showed that to you right
here now there's also another
method and that's this
one and this allows you to just
uh stay in that pose but if you don't
then you'll have to move over into this
pose like
this and it may look a little funny
so you may not like it but I decided to
uh leave both of these here
transitioning uh to that idle state was
problematic I may revisit that later uh
that's why I don't have a transition
also if I added a transition it would
also add a delay so that kind of makes
it undesirable to have a transition uh
to play for a turn and place to go from
the idle to a turn in
place um I kind of think this method
right here is probably more preferable I
will discuss that now so if we go back
into the
blueprint and we go to our event graph
and go to the Dao
logic down here you'll see I'm pressing
the G key that's this right here and
what I'm doing is I'm getting the
difference between the root
rotation uh from the root transform
rotation which is taken from the offset
root bone uh I'm getting the difference
between that rotation and the aim
rotation which is the camera
rotation and if the Z the yaw of that
left to right uh is greater than zero
then it's a left turn animation
otherwise it's a right turn animation
I am motion warping here and if we open
these
up you'll see this motion warping
here and I have translation disabled
because we don't need translation we're
not moving through space we're only
warping the
rotation so everything is default here I
just unchecked warp translation and I
set my target
name and I start the warp when the root
bone starts rotating
so you you can see over
here you can see over here where it
starts
rotating and I end it where it stops
rotating so yeah that's basically uh
that method right there uh I will go
into this stuff later I might do a
full-blown video um where I'm I make the
animations I bring them in set them up
and
uh all of that
so anyway those are the two methods uh I
may add some logic that just replaces
their turn and place
system with the with something like this
this is just for testing or this is just
a prototype just to proof of concept to
show how it works uh this isn't how you
would actually want to do it you
wouldn't want the player to have to
press G to rotate obviously uh
so anyway I
will I'll
consider how I might actually integrate
this into the
system without having to actually
completely strip out their turn and play
system so that we can still have their
turn and place system but when we're in
this custom idle State we're using this
turn and place system I will look into
that I'm not going to look into it this
weekend but that's uh potentially going
to be something that's added uh to it in
the
future and I will see you guys in next
video

================================================================================
ARQUIVO: Unreal Engine 5 - GASP Dynamic Additive Overlay (Overview) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

A Breakdown of the Setup as well as a quick breakdown of some other things as well

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

0:00:00 Intro
0:02:30 IK Hack Problems
0:07:45 Virtual Bones
0:11:34 How The Hack Works
0:16:55 Weapon Setup
0:18:15 Chooser & Data Asset
0:24:06 DataAsset Layering Settings
0:37:45 Animation Layering
0:47:35 Overlay States
0:59:00 Aiming Offset

=== TRANSCRIÇÃO ===

all right guys so we're back with
another video and in today's video I'm
going to be discussing a few things I'm
not going to go into a whole lot of
depth in this video but I'm going to try
to cover the layering system as
thoroughly as possible I want you guys
to at least have a general ideal of what
I'm doing and how I accomplish things
while I made certain decisions so on and
so forth
so you'll see that
I have the pistol aiming and I have the
rifle
aiming
and you'll notice that the pistol aiming
when we're idle and we have the pistol
aiming you'll notice he holds it with
two hands this was actually a choice
that I made uh based off
of based off of a number of things one
of those one of the reasons why I did
that is because of the idle
animation and so you'll notice that the
idle animation has the left leg forward
and the right leg is
back uh
so that's important to note because
whenever if he's holding the pistol out
in front of him it may look a little
weird if he's holding because normally
whenever you're holding a pistol
one-handed uh
one-handed if you're holding it in your
right hand and you're pointing out in
front with one hand your right leg is
probably going to be forward not your
left leg and so it looks
weird whenever you see that because it
seems unnatural it doesn't seem normal
so I decided
[Music]
to to have them holding it with both
hands it's in his right hand but his
left hand is CED over it to stabilize it
while he's aiming an idle whenever you
start moving it comes off the weapon and
that's when he's holding it with one
hand so that was a design choice I made
you can change it and in fact I
encourage you guys to change
this however you want and I'm going to
give you all the information you need in
order to do that so
let's just go ahead and get started on H
covering this so I discussed in my last
video that I mentioned that I might have
a kind of hack that you guys can use to
get around that uh hand placement issue
now there is a slight problem with that
the way that they have this setup right
here is they're live R targeting these
now my hand placement system the way I
currently have it set up and I could
change it so that it wasn't dependent on
the weapon bone but that was a choice
that I made
because a lot of the times whenever
you're making extreme poses with the
weapons sometimes you need that weapon
bone in order to rotate the weapon or
displace it in the hand during
animation
so that's not really possible without
some kind of BMP B that the weapon gets
attached to and if you're going to
displace the a bone that the weapon is
attached to that follows the
hand then you need the virtual bone to
be based off of that weapon bone that
the weapon is attached to and not off of
the
handbone so technically you could just
attach it to a socket on the hand you
could get around it that way
you could attach it to a socket on the
hand and I'll probably show that uh to
you guys in another video and then just
make the the virtual bones point from
one hand to the other hand instead of
from the weapon bone to the other hand
and that would be a solution but like I
said if you decide that you need to
rotate the weapon in the in the
character's hand during animation for
whatever reason for example if you're
doing a butt stroke to the Head series
the wrist isn't going to bend like that
it's going to do funny things uh and so
you need to be able to to rotate a bone
that the weapon is connected to in order
to properly follow through with such an
extreme
animation so you wouldn't be able to do
stuff like that you won't need you won't
be able to have
animations like that if you did that but
anyway I'll show you guys that probably
in in another video so moving
on uh I'm going to
briefly show you this so I did uh do a
test setup and it does seem to work but
it's really not
working uh and this was as close as I
could get it with the
live with uh the
yeah so this was as close as I could get
it with the the live
retargeting and you'll see that there
are some problems for example right here
on the
pistol his hand actually comes
off uh his other hand and when he's
Aiming High it almost completely comes
off when he's aiming centered it it it
kind of looks
okay but it's not completely on
it I am using that Hack That retargeting
hack one second let me show you the
rifle
now so I do believe I have that hack
enabled but even with that hack enabled
you'll notice that the hand completely
comes off of the
rifle and the reason why is because that
hack method that that I use it requires
virtual bones and I cannot get a
location off of this body right
here that the hands are
on because when you're livey
targeting the virtual bones don't get
live
retargeted it ignores virtual
bones and I need virtual bones I need a
proper virtual bone location in order to
make this
work so I'll I'll look into this some
more there might be a way to get around
that but for now it doesn't seem like
there
is but yeah there there might there
might be a way around it I we'll see so
anyway I'll get back to you uh about
that guys I have one
ideal but moving on I just wanted to
explain to you uh why
why uh right now at
least you can't do it from live
retargeted characters but I do have one
idea that I just came up with while
talking to you guys actually about it so
I'll try that later so anyway moving on
now we're going to talk about ik bones
and virtual bones I want to introduce
you to them and explain to
you
something so you'll notice under the
hand L we have these weapon bones like I
said during more sophisticated
animations you actually do need those
weapon bones now
ALS used the ik handgun bone and they
used it just like those weapon bones are
uh on this
one
so used to before virtual bone came
along it was more common place and it's
still a little common place for these ik
bones to exist on the skeleton and what
happens is they get constrained during
during animation they are constrained to
the
animation and what it does is it gives
us a reference to where the hands should
be so that if we additively apply
something to the arm and the arm is
offset from its current
position uh for example we apply a
breathing animation let's just say that
breathing animation displaces the the
hand uh we can exclude these ik bones
from that
displacement and then use ik to tell the
hand to go to where that ik bone
is virtual bones work the same way so
the virtual bones will be at the
locations that the hands are on that end
animation and if you get their location
after you've applied an additive to the
arms on your anom graph then those
virtual bones will still be in the same
location they were for that for that
animation and the
only reason this works is because of the
the way that we handle things on the
animation graph otherwise we would just
be getting the post additive layering
position
so if we go over here to the animation
graph let's say
that let's say that he's holding it with
his right arm okay and we apply an
additive mesh space overlay onto this
let's just say it displaces his hand his
right arm okay now over
here right here the the overlay pose
itself the original unaltered overlay
pose that has not had a mesh space
additive applied to that arm it'll have
that virtual bone in the same exact
place it was before we applied
that so what that allows us to
do
is it allows us to apply breathing and
stuff like that like right now I'm
applying breathing over this
uh but their hands don't get displaced
even with that breathing because of that
method that I'm using for the ik and
right here you'll see this right
here now that effector location is only
relevant for my hack but my hack does is
it gets the socket
location uh it gets the socket location
on the
weapon and
it and also I should mention that if you
want to enable that it's this booing
right here just check this booing enable
a procedural offset hack if you enable
that then on the animation graph it'll
start updating this affector offset
location so when this uh is being
called what it'll do is it'll get the
character mesh it'll look at the virtual
bone and L of this character
and it'll get the socket location of the
held object and it'll make that sock
what it'll do
is it'll find the
offset of this world
location from this virtual bone so what
what we're returning right here is
actually the offset how many centimeters
to the left right up down is this socket
from this virtual bone so it's an offset
that's what we're getting we're getting
an offset and then we're adding that
offset to the affector to the virtual
Bone's current location which
effectively offsets the virtual bone
inside of the anom graph uh to be
wherever it should be based off of that
socket and so this can update it in
sync with the animation instance that's
a work around that I
found
so the reason why this doesn't work with
the liary targeting right
now is because I'm
getting this location from this mesh not
the live retargeted mesh because the
live retargeted mesh is
actually it's actually on a body down
here so they're using the copy pose and
I don't have it open right now here I'll
show
you if I can find it not here if we go
to widgets and we go to game game
animation widget and we open this up and
we select this we double click on this
to open it
up you'll see this character right
here is actually a child of this mesh
right
here and and uh this held object is
attached to the weapon or bone of this
mesh now we could create another
skeletal mesh under
here and what I did on my other one is I
actually had uh I actually modified
it if we we go back over to the main
character blueprint I turned this into a
function and I made
this
and and
this a parameter that you have to uh
pass into that
function and then since this is the
parent of this one I went over here and
I overrode that function here and
instead of passing in this held object
object I passed in the held object under
the body for this character and that one
was attached to a weapon R socket an oap
and R bone on this
character
so that's how I got around
that
[Music]
now now as far as adding the weapon or
bone to it
there is a
plugin skeletal mesh editing tools and
it allows you to add bones to your
skeleton if you add bones to your
skeleton then you need to you need to
create go to skeleton and create
skeleton uh off of this because right
now it's sharing a skeleton with all the
other metahumans and if you add a bone
to this
even if you don't change any bones if
you add a bone to this it'll screw up
the weights it's a bug and the skeltal
mesh editing
tools so you have to unshare you have to
make this so that it's not sharing a
skeleton with anything before you change
or before you add a weapon R bone to
it that's the breakdown on that so I've
got that out of the
way and I've
explained ik Inver viral
bones if you want to know more about it
I have dedicated videos to
[Music]
that now we're going to move
on okay let me just open up that so if
we go into under blueprints you'll see
that CBP sandbox character that's the
main
blueprint uh all those other ones are a
child of this you'll see inside of here
I'm just storing the weapons right
now inside of a data asset or inside of
a
structure with the overlay State
assigned to it and a
mesh
so this is just setting this mesh the
skeletal mesh to
use a specific mesh out of here based
off of this um
index that's how I'm doing it currently
that will likely change in the future uh
this is a community project guys so if
you want to add to this if you want to
make like a transition animation uh for
putting the weapon away so on and so
forth and present it to me if I think
it's uh appropriate then I I will add it
to this and I will uh give you I'll I'll
put you in the credits for for it as
well
so now we're going to talk about
choosers and data data assets this is
what drives the values for our layering
system I'll explain the layering system
to you after
this so first we have our
choosers that's under blueprints weapons
and you'll see a Chooser right here and
if you open it up you'll see that we
have
a a pistol and a rifle and if you say
edit oh also uh this is being updated
from the current overlay State and how
is that being updated well we're storing
the current overlay state right here and
that's being updated on the event
graph inside
of
here and it's getting that
from it's getting that from the
character that's being set right
here
so once it's determined which one we're
going into you'll see inside of here we
have these data assets and you'll notice
that the context data is referencing the
animation blueprint and its output type
is a PDA overlay layering which is the
primary data asset that all these data
assets are based off of if you go in
here you'll see the primary data asset
right here I'll go I'll do a video later
on how to uh set up a
custom overlay State and how to do all
this for it for now I'll just go ahead
and show you if we go into miscellaneous
and we go to data
asset we can choose the PDA overlay
layering which is this one right here
and we can select it and now we have a
new data asset
and then you can come in here and you
can uh start setting these
up after you've set that up you can go
to your
Chooser let's say that this is a
completely new state you would add a row
and do a nested
Chooser and then you can
uh select new nested Chooser off of this
and name
it and then you can press edit and it'll
take you in here now you can uh add a
row asset and now you're just going to
select that asset and you're going to
press this back button and now that data
asset has been loaded in
here you can uh add your booing and
enums and you can reference them
directly from the character
here that's how that
works so where is this uh Chooser being
evaluated at I'll show you that now so
if we come back over here to the
animation
blueprint on the event
graph under the update additive overlay
which I misspelled I'll fix that
later if we
go under here you'll see that the first
thing we do is we evaluate the the
Chooser and we store that into a
variable and then we store some other
things into some variables that we're
going to be using often and the reason
why is because I don't want to have to
do all this every single time that I
need to call
these I just want to be able to call a
Boolean and not have to do any
processing that's the reason why I did
that over here I'm doing a validation to
make sure that the current L layer
settings has been assigned and that it's
not
invalid and then over here I am updating
the layering values for these using this
function which will
interpolate uh the target layering
weight automatically for us so if it
change if the targ if we change our if
the Chooser
updates our layerings
settings then the new layering weight
for say the legs might go from one to
zero this will make sure that it doesn't
snap from one to zero causing a a
snapping of the animation on the in the
game and so it'll interpolate it
automatically for us I have it set to a
moderate value of 10 which is kind of
like a mid-range value it's not too fast
not too slow
you can adjust that if you want and I'm
just doing that for all of this and I am
doing this on a tick right now I'm doing
this on a tick for
testing uh in a later video I might show
youall how to set this up so that it
only does it as
needed but for testing you're definitely
going to want this on a tick the reason
why is because it allows you to because
we're using data assets and we and we're
updating this uh from the
Chooser on this
tick what happens is it allows us
to it it allows us to uh change these
values in real time while the game is
running and I'll just go ahead
and show you
that and then we'll discuss that
some so you'll see right here I have a
pistol ready
State it's a it's a pistol idle ready
State this is the M9 and this is the M9
idle rest uh data asset with all the
settings for
that and if I check hand Li ik you'll
see nothing really seems to uh change on
there
oops I don't know what I pressed
so it doesn't seem to change and that's
and the reason why is because the hand
just isn't displac so you're not going
to see anything but if I set this for
the legs and also you can ignore the
layering weight for the legs you'll
understand why here in a minute but the
overlay space is what you're concerned
about with the
legs but the layering weight only
doesn't apply to the legs for everything
else it
matters if you don't
need for example I'll give you an
example don't set this to mesh space as
this is going to be
uh
zero it just doesn't make any sense
that's not going to be evaluated
anyway
also don't set this to base and then set
it to 1.0 because that means that your
your uh evalu ating that layer for no
reason because the base is The
Locomotion and without that being
weighted it's just going to play The
Locomotion on that layer
anyway because it's not being layered if
the value is
zero but it is it is being evaluated if
the value is
one so if you move your cursor
over you'll see I left some tool tips to
kind of semi explain
how this all works so we have uh the
legs it controls the stance mostly you
you're you're only going to really want
to do this during idles or slow walks if
you do a fast run or a Sprint or even a
jog probably what happens is say that
the leg comes all the way back here uh
or comes back here and uh off like that
whenever you're in a Sprint
if you apply a wide stance to this where
the leg is back here then what ends up
happening is when the leg get is
supposed to be back here on the locom
motion it ends up being up here instead
and so you'll get this Looney Tune
effect where the legs are coming way up
here maybe even a maybe even all the way
up here so you don't want to you don't
want to do that it's just going to look
stupid so so uh yeah just you have to be
careful if you do this you only want to
do it during
idle now some of these animations might
be offsetting the character from the
ground whenever you do this I'll have to
fix that later um that was something
iclone iclone did
that
and I would like to make these poses
inside of Unreal Engine but I need them
to fix the modular control rank right
now if you bake an animation or a pose
using the modular control rig it screws
up the entire animation so as soon as
they fix that I won't have to worry
about iclone offsetting this anymore
because I won't have to use iclone uh
but iclone keeps screwing up the the
pelvis it keeps offsetting it so uh I'll
have to go back and and and try to fix
that I don't know why why clone keeps
doing that but anyway so you'll see how
the stance changed whenever I set Chang
this from base uh to uh local space or
even mesh
space and if you do overlay that's
actually the pose of the
overlay uh that's playing right
[Music]
now that's that lower body was meant to
be a neutral pose so if that was applied
during running then it wouldn't cause
any problems in actuality for the idle
State uh we don't have to worry about we
don't have to worry if it's a neutral
pose or not
uh so
anyway moving on we have torso torso
controls uh you know the posture of the
of the pelvis and the spine it also
lowers the pelvis lower to the ground so
if I do mesh space and I do 1.0 in this
case it raised it because he was
actually standing higher and also
because of what I well not because he
was standing higher but because I told
you
that iclone keeps offsetting the pelvis
remember I told you that I think that's
the reason why I'm GNA have to go back
and fix those I uh didn't realize it was
doing that uh and some of these you're
going to want mesh
space so for
example on this one right here
this is a mesh space now I did fix these
so these won't these shouldn't do it
whenever you're in mesh space so if I go
to
the M4 A1 idle rest and I open this up
you'll see that well the Torso is set to
mesh space but it's set okay yeah I'll
have to go back and fix that guys uh
I'll have to fix that it's offsetting
them that's why that's what I hate about
I clone iclone keeps it always offsets
the pelvis it's really
annoying like I like I said before if
you're
uh you can I guess you can have the
overlay space set to whatever it doesn't
matter as long as the layering weight is
zero when you're not using it
but yeah so that's somewhat of a problem
I'll have to fix
that I'm not going to get to today guys
I'll I'll go back and fix it later for
the most part though uh you're going to
want to you're going to want the legs
torso and head you're going to want
those to be in
base and then you're mostly just
layering the
[Music]
arms
but during
uh during some situations you actually
do want the body to be applied in mesh
space but I I'll have to fix those
animations before we can do that it'll
look better once we do that I
think but
anyway so the rml mesh space and the
armr mesh space it controls AC accuracy
accurate placement and that's why I have
these set to Overlay with
1.0 and you can set the uh local space
one
uh under a different space and local LS
mostly just means that I'm not applying
the the I'm not
blending and mesh the the rotations in
mesh space on the layered blend per bone
that's basically what that
means but the MS controls accurate
placement needs to be 100% during fast
movements especially
not necessarily all the time but during
fast movements you
do for the left arm because we're using
ik you're not going to really see a
difference there so you could actually
in most cases uh turn this off actually
let me make sure so in most
cases you actually can turn that off but
I think in this one case I think
it yeah I don't think it this case it's
imported
so you can just turn that
off and you can probably okay the this
one actually adds more subtle movement
from The Locomotion back on to it so
this one is important if you want it to
be more
uh if you want it to be more like The
Locomotion so the higher the value of
this the closer it's going to be to The
Locomotion now you have mesh space and
you have local space it's not really
important you don't need to apply mesh
space on the arms uh unless you need
accuracy uh m space on the arms is only
really used during aim
offsets for any other purpose at least
for the arms you should probably just
apply it in local
space and you'll see I can uh have the
left
arm
in overlay
mode and you'll see the arm is still
moving and that's because I'm applying a
breathing over it right after the uh
this arm pose plays a breathing additive
is applied over
it but it's probably better
if you do put it in overlay mode that
you have it low around 05 and you'll see
that the hand the fingers and the hand
is moving a bit more naturally and so do
so does the arm but for this I like to
keep it in local space you'll see it
moves around more naturally because it's
it's
respecting the uh movement of the local
motion more whenever we have it in local
space when you put it in mesh space it
it doesn't respect
the movements of the underlying
Locomotion as much and so it may come
out looking stiffer which is why on the
arms most of the time you want to
applied in local
space so the lower this value the closer
to the actual pose uh the overlay pose
it'll
look so this is how it looks in the
actual overlay
pose with the breathing added over the
top of
it and this is closer to where it would
be at on The
Locomotion because I'm applying that one
at
100% same thing applies to the other
arm now the hand right now I'm only
doing a a
h uh no I'm correcting both of the H
so I'm not using this one
though right here right now I think on
the graph I'm only using uh the handar
one so if I change this to
let's
see yeah I think the effect of this is
going to be pretty
subtle let's check it on this
one you're I think I I might not have
that one hooked up right there this
actually might only be affecting this
one
oh no I don't have that hooked up right
now okay just ignore that guys I don't
actually have the this stuff hooked up
my
bad but yeah you'd probably want it to
be overlay at 100% on both of them uh
well on on the one holding the gun if
it's if it's holding the gun if it's a
two-handed then you want it on both if
it's a onehanded you only need it on the
one hand I'll I'll fix that later so
that we can uh change that from here as
well that basically covers this though
um let me just go ahead and check that
off now it's time to
discuss the layering
system so I'm just going to go ahead and
stop that we're going to go over to the
animation
blueprint so I've already discussed how
the uh layer settings are being stored
uh grabbed and stored now we're going to
talk about the layering system
[Music]
itself so over here you'll see I'm
caching the motion
matching uh because we're going to be
using that in multiple
places and each one of these is is
pretty much uh the same over here on the
left hand side what I'm doing is I'm
grabbing that uh that data asset
information that I
stored and I'm selecting based off of
that en num I'm selecting which we're
going to
apply to this
input and this is why for the legs the
layering weight is not needed because
for the base of a layering blend per
bone it's not actually affected by the
blend weight uh the second one and how
much the second one
is Blended will
determine will determine that
so over here you'll see that I have the
I'm using a branch filter it's easier to
use a branch filter it's more
convenient and it doesn't bloat this
right here with a bunch of different
masks because uh we don't really really
need those masks and it's just as easy
to use Branch
filters so in some cases masks can be uh
very important because they're a lot
more flexible than uh Branch
filters but for the most part it's not
that important now the thigh L and the
thigh R I have that set to negative one
I've went I've went over blend depth uh
before in another video but I'll briefly
Discover it I mean uh go over it soga1
means that we're going to ignore it zero
and one means that the first bone in
this uh Branch will be Blended
100% And the reason why zero and one
both do the same thing is because of the
math that's behind it if we enter two
that means for example if this is the
pelv
that means the pelvis will be Blended
50% and and spine 01 will be 100% and
everything under spin1 will be
100% if it
were let's say
four then we have these four bones right
here uh pelvis would be 33% spinal one
would be
66% spin2
would
be oh my bad uh yeah so it would be
pelvis would be
25% spino one would be uh 50% spino 2
would be 75% and spino 3 would be 100%
and everything under spino 3 would be
100% that's how that
works so the the mesh space rotation
blend if you read the tool tip it
basically says it all whether to blend
bone rotations in mesh space or in local
space so that that determines how like
what space will they
blend these
together so in most cases you're going
to want this to be in mesh
space and I'm basically doing the same
thing on all of these I got the neck the
clavicle the clavicle L the clavicle R
and the
clav so the the arms you'll notice that
one of these is in uh is using a mesh
space rotation blend and the other is
not so the mesh the mesh space ation
blend is going to be more locationally
accurate the local uh the local space
blend is going to be less
locationally accurate
so if you use
the if you use it without the mesh space
rotation blend checked then it can
offset things
[Music]
that brings me back to this
actually so on here you'll see that I
said controls accurate
placement if you if you do not do this
first in mesh space before you apply uh
some of the subtle motions of The
Locomotion back onto the arms if you
don't do this first then the placement
of the arms will be
offset and I can show you that
actually so this is the M9 idle aiming
I'm just going to uh show you this is
where it is right
now so if I aim and I pause I play and
then I eject then it goes back into
playing but it doesn't change the state
and I can come over here to the side and
I can change this and watch and see how
how it affects it so I'll set that to
zero and you see how it got offset
that's because it's only being applied
in local space over here none of it is
being applied in mesh space so mesh
space first places it properly
locationally uh and then the mesh space
reintroduces some of the subtle motions
back in but uh it also offsets it
somewhat too you'll see if I turn that
off then it's way over here to the right
if I say 04 it does bring It closer if I
say one it doesn't quite bring it back
to where it's supposed to be right in
front of the
face but the arms are moving a lot more
now as you can see
uh and so you can apply the local space
to it but you want but you definitely
want while aiming at least while aiming
you want it to be 100% in mesh space and
then you can apply just a little bit of
local space to it so you'll see I I had
that set up to 04 but it actually
offsets it quite a
bit so it's something to keep in mind
you can also apply that in local space
or in mesh space
and you can tell see the difference
between the way it holds holds it
there so anyway if you do apply some of
this back onto the arms it's important
that you only apply a little bit I think
on this one I apply just a little bit
too
much and actually it looks a little
little bit more accurate right here
now for
the for the uh run aiming let's see what
I did on that one yeah see I didn't set
that to 04 on that one I set it to
02 and I have the left arm uh in uh
playing base but
but on this one it actually was
important I believe to set that to one
because I'm also applying a mesh space
on
this okay maybe
not yeah so remember what I said if if
you don't need it don't set it to one
because it adds to the performance hit
so oh I wasn't aiming okay so I did need
it okay yeah so for this one like I said
because I'm applying it in mesh space
first I do need to apply the base back
to
it so now you'll
see it adds that Locomotion movement
back into
it well still respecting the way the arm
was positioned and posed on that
animation or that
pose yeah so anyway this is really great
to have it this way because now you guys
can come in here and experiment and
become
familiar a hell of a lot easier than
what you would have been able to do in
ALS
so that basically covers the layering
system system I'll try to break that
down in more detail in a later video I'm
just briefly covering things in this
video it's already going to be fairly
long
so over here we have our overlay State
and that's where the overlay pose is
coming in right here on
these and that's a pretty simple
one so right here you'll notice I'm
getting the state weight of the ready
and that's the state weight of this so
so if we actually uh play it you'll see
whenever he's in the ready State we have
a a state weight of
100% that actually equals out to be
1.0 uh so that's why if the gr if the
state weight is greater than
0.9 then we can blend out of that ready
State into the aiming State and if we
don't do that then it might come out of
the aiming State and then go immediately
back into the uh aiming state
and it can jump back and forth and get
caught in a loop if you don't do that so
if he wants to aim and we're and we're
mostly blended into the ready State then
we can
aim over here I'm uh making sure that he
is not
within uh the aim offset
threshold and he's not equal to
idle and if that's true then that means
we're doing the hard
pivot and we should come out of the
aiming
State and I discussed this in the last
video If you go under the variables
overlay AO this AO Max angle threshold
is what uh controls the angle at which
this is
triggered and so that's 115 right now so
whenever he ex exceeds
115 uh degrees while running and aiming
then he will come out of the aiming
State
otherwise if he decides not to aim
anymore then he'll also come
out that brings me inside of here you'll
see right here I'm applying 50% of the
secondary Motion in here and it's just a
breathing animation
so during Idols during the uh or during
the rest
state I'm applying uh 50% of
that and that's and that's why his arms
are going up and
down now right here based off the
current overlay
state I'm choosing one of
these and so if you want to add a new
one you can right click on here and you
can say pistol and it'll add a slot for
the
pistol and that overlay State I don't
even know where that is
anymore let's
see it's under
weapons it's in the root folder it's the
E overlay state if you open that up you
can add more into
it inside of each of these I'm doing
some logic here I'm doing a two-way
blend based off of the speed I'm mapping
the speed uh
here
and that the reason why I'm doing
that let's see
[Music]
right so we have this zero this
08 and we have this
point oh wait no let me see we're using
04 and zero right here so if he should
move then we're playing we're overlaying
The Locomotion onto point 04 this one
right here you'll see that his legs his
feet are pointing forward if his foot is
pointing to the side and you overlay The
Locomotion onto it then it'll rotate his
foot off to the side while he's running
that's why we need the feet uh pointing
forward and we need them in a natural
stance underneath his pelvis not off to
the side if we had a wide stance it
could cause problems during locomotion
I've explained this in my Advanced
animation series where I go over nuances
of additives and yeah so you can go and
watch that if you're more
interested so if he should move then
we're in that
stance then we're then we're in this
stance but if he shouldn't move then we
move over into this other stance and I
guess there's not really much of a
point in that I'm not real sure why I
even did that now come to think of it I
don't know uh there might have been a
reason
um oh yeah okay so whenever he's not
moving I just wanted the I just wanted
it to look a little bit more natural and
that right leg is just a little bit back
whereas the other one is they're pretty
much even so I wanted it to look just a
little bit more offset whenever he was
an
idol this is more pronounced on the
rifle than it is on this
one so if he is not
moving
actually yeah so if he's not moving
we're actually in this state but
whenever he starts
moving we're doing
this I
believe okay yeah so the reason why I
actually did this did it this way is to
is to offset the way that his his hand
is I might have to go into to that in
another
video but I'm blending between these
because if we just disconnect this
you'll see his hand is right by his side
so if you like that that's the original
pose I'm actually blending between those
two poses where his hand is up like this
and where his oh yeah okay I remember
why I did that now so the reason why I
did
that is
because uh when he's running with his
with his arm being bent that much it it
just kinds it kind of comes out looking
funny so what I'm doing is whenever he's
not running I don't want his hand
completely down by his side like that so
I blend partially in with this one which
uh makes it uh look more natural to me
but it also allows me whenever he starts
moving fast it Blends more into this one
but not completely so his arm ends up
like this rather than like this and
that's basically what the 0.9 and the
0.25 mean and mean means that I'm not
completely blending into this one when
I'm not moving but I'm not completely
blending into this one when I'm moving
fast so if I'm moving 300 centimeters a
second or faster then I'm blending into
this
1.9 yeah sorry about that that was uh
something I did and completely forgot
about I wasn't real sure so in here it
looks like I left some testing that I
put in there
but this one's using something similar
it's using a similar method whenever
he's between 100 and 500 cm will
blend uh
zero uh zero means this one's completely
Blended and
25% means that this one is Blended
75% and this one is Blended
25% and if you go in here
you'll see that's him uh holding the
rifle like
this
and this
one it has them in a different stance so
right here he's in a wider stance right
here he's in a and also remember
whenever we blend that torso and mesh
space uh this affects it like I said I
have to go back and fix those
I
believe they're all messed up let me
see yeah so they're it's they're offset
from the ground and if we open up the
animation
actually it may not be obvious at first
but if you come down here you'll notice
that they're actually floating I clone
did that I am not responsible for that
iclone is offsetting the pelvis of
everything that you bring in there I
don't know why it's doing it uh I'll
have to go back and offset the pelvis
back so that the feet are touching the
ground I thought I'd fixed it I might
have fixed it on some of them and forgot
to fix it on others but that's something
I'll have to cover uh later and I'll
probably update it like I might fix that
today and then and then go back and uh
either today or tomorrow I'll fix those
and
uh I'll if also if you want to keep up
with the updates on this project you can
uh join the Discord and you can come
down here to server follow updates and
I'll post the updates right
[Music]
here all right so I covered overlay
States and now the aiming
oh yeah yeah so let me uh go over the
aiming I did not cover that I only
covered the armed which should be called
resting actually
but whatever um so let's just go back to
the animation graph go back in here and
under the aiming
state I'm I'm applying 25% of the
breathing and the aiming State because
we don't want it to destabilize the
hands we want the hands to be more
stable whenever he's trying to
aim and inside of here you'll see that
we have this aim sweep right
here and again if he's aiming and he but
he shouldn't move and I might turn this
into a a state machine rather than using
a blend poses by bull I might uh turn
this into a state machine inside of here
but anyway the point is is that whenever
he's
idle we're going
to play this one and when he's not idle
we're going to play this one and we're
going to apply in mesh space an additive
which is an aim sweep and I made these
myself actually from scratch and I made
them based off of the the idle pose the
first frame of the idle uh loop that
came from this
project and
basically I just made three key frames
one key frame on zero where he's
pointing down uh one key frame on 15
where he's pointing straight ahead and
one key frame
on the last frame which should actually
be frame
30 I don't know why
that I'll have to fix that that's
another iclone problem it keeps doing
stuff like that I don't know why but
anyway uh and then one frame on 30 where
he's pointing up and then I just
linearly interpolated between them you
want to linearly interpolate between
these frames uh because if you don't
then it'll slow down and it'll speed up
as it's moving away from them and slow
down as it's reaching the next one and
you don't want that you want it to be a
constant rate and you want these to be
30 frames long which is 1 second at 30
frames per second that's 1
second and then inside of
here I'll show you how I'm calculating
the I'm I'm manually driving this
animation and I'm driving it right here
based off of the aim offset value and
I'm clamping it between 90 and 90 since
this only points 90 degrees down and 90
degrees up when he's point when it
starts he's pointing down uh which is
negative 90 and when he's pointing up
that's 90 so we're mapping that from
zero to one uh to reflect the
animation and that's why we have
to if we make these we need to start at
frame zero and we need to end at frame
30 and he needs to go from pointing down
to pointing up I think ALS did theirs
backwards uh from how I did it they
started from pointing up and then they
went to pointing down but anyway you
know it's whatever you can also just
reverse uh you can also just like maybe
set the play rate as negative one or
something uh on here but I'm not sure
that's going to work for this method
so it could cause
problems so that's that part out of the
way that's how I'm pointing from up to
down now how am I pointing left to
right so I'll go over that
now you'll see also
that when we're unarmed we're we're just
playing it from the base otherwise we're
going to use the layered blend uh method
so add Dynamic additive overlay layering
method again if it's if he's
unarmed if
oops if he's unarmed we're going to uh
use the original aim offset
logic but if he's armed we're going to
manually rotate the
spine and right here this is the weapon
finger correction I did have this say
hand R but I decided to just do it like
this so I'm applying it only to the
fingers right here and then right here
I'm applying the weapons after the
default slot so if you play a montage
the weapon won't come out of the end
that's the reason why I did uh the
weapon or and weapon elbone after the
default
slot so let me go over
this over here this is a mess okay I
thought
I'd fix that oh that's just remines I
was doing a lot of testing uh so anyway
right here you'll see I'm getting the
spine
rotation uh I'm dividing it I'm I'm
clamping it between 90 and 90 uh because
this value will go from like - 180 to
180 and I'm dividing it by six which is
the number of bones I'm applying it to
pelvis spine one 2 3 four five so that's
a total of six bones that's why I'm
dividing it by six I only need the Z
yaah
rotation and I'm interpolating
it that's what's happening right there
so on the aim offset value this is what
I had to do for the uh
look uh left to
right for the for the look left to right
I had to do it like this and what I'm
doing is I'm getting the root transform
rotation I'm making it relative to the
character's World transform
location and then I'm inverting that by
multiplying it by ne1 the Y the Y it and
I'm using that as the left to
right the reason why I did that is
because the one that they were using it
it was causing
jittering uh and well
also whenever he starts
rotating it won't let him rotate the
full 90
degrees
it's um I'd have to show you for you to
really understand but there was a
specific reason I had to do it like this
just uh trust me on
that so that basically covers it guys uh
if you have any questions uh feel free
to ask like I said this is a community
project uh I I welcome anybody to uh you
know pitch me ideals or if they want to
contribute feel free to contribute I
don't mind and I'll be doing more videos
on this uh at a later date I'll see you
guys later

================================================================================
ARQUIVO: Unreal Engine 5 - GASP Dynamic Additive Overlay (Release 1.0) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

This project is still under development, I will be going over it in more detail tomorrow and will do videos on how to expand it as well at a later date. I will also be doing updates and looking for solutions to problems that still remain. The Weapon Mantling Problem will be dealt with at a later date.

WARNING! There are a number of problems I am still investigating, one of them is the TurnInPlace. The Slow Rate of Rotation makes the Aiming when Idle look rather bad, the only way I can think of to fix that at the moment would be to gut the current system out and replace it with an ALS style one.

Project Files: https://ko-fi.com/unrealdevop

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

=== TRANSCRIÇÃO ===

all right guys I'm back with another
video so I just tried to record this and
it didn't record I thought it was
recording that whole time but uh it was
being blocked by an application so
anyway so this is uh what we have so far
I'll be updating this it may look a
little uh jittery uh there's not much I
can do about that right now I'm still
investigating it uh what is causing it
if you look at that red arrow you'll see
it's turning uh
well that turning is the offset root
bone the offset root bone is
procedurally rotating the character uh
to face the direction of travel and that
is what's causing the jittering so I
don't really know uh how to approach
fixing that yet and I'm not sure if
that's
even I'm not 100% sure if that's
actually what's responsible but it seems
to be um I have not added transitions to
this yet so you'll see that the weapon
does go uh through
the obstacle when we're traversing it
um so when we're standing still and
turning in place we're limited by the
turn rate of the turn and place system
the only way we're probably going to be
able to fix this is to actually gut the
turn and place system and replace it
with an ALS style one uh I do believe
that's probably going to be the only way
to fix this because of the motion
matching and the and the way that it
works they kind of had to hack their way
uh around this to make the turn and
place animations actually work
um and so it requires the entire
animation to play and there's a delay
between uh starting the animation uh
probably because it starts in an idle uh
and so uh it it's just really slow I'll
investigate ways of possibly uh speeding
up that uh turn in place to make it more
responsive but as it is right now it's
uh somewhat slow for those of you who
don't like uh the angle at which the
character stops uh aiming the rifle or
whenever he lowers the the rifle and
then puts it back up if that bothers you
I'll go ahead and show you where you can
go to fix that so on the animation
blueprint if you'll scroll down and find
the overlay section and go into the aim
offset the first variable inside of here
is called a Max uh AO Max angle
threshold it's set to 115 you can set
that higher even to 180 if you want to
completely disable it um so that's
completely up to to you so I'm using a
similar method to that Dynamic additive
laying technique that I showed in the
other videos
uh and I'll go into this in more depth
uh tomorrow right here on each of these
I'm uh choosing based off of
uh the overlay uh state that we want or
I mean the overlay space that we want to
uh want applied and then it chooses one
of these based off of
that enum value over here it's uh
setting the weight based off of uh the
layering weight that we set inside of
our data asset if you change this so
this is the M9 idle aiming if I change
this to say local space it's probably uh
you can ignore the layering weight on
that one because this one is connected
to the base uh so it doesn't have a
layering with weight uh so you can
ignore that layering weight right there
um but whenever I aim you'll see uh
his let me see let me put it in mesh
space okay that oh I'm not I don't have
the M9 okay there we go I thought I had
the M9 out for some reason okay so
you'll see I have it in mesh space and
that's what it does to the legs so it
does respect the underlying pose
um but because our idle pose doesn't
match that you're going to get foot
sliding I might try to uh add some kind
of logic later uh to where if you do
that right there then maybe he'll pick
his feet up and readjust his footing uh
kind of like what they do in ALS I might
try to add something like that later uh
but for now I don't have anything like
that set up so for the most part on the
legs you're just going to use base now
on this uh on these data assets I added
uh details on these so you can move your
cursor over and uh you'll get a tool tip
that kind of gives you an ideal as to
what uh each of these do and you can
play around with these values in real
time to see what effect they have on
them now we need an a data asset for
each uh gate and for each uh state so
right now we only have a uh ready state
which is what he's in now and an Aiming
State um later on we might add a third
one kind of like what they got in ALS
but for now we're just going to stick
with two um I will upgrade this and add
to this and fix stuff on it later uh let
me know if you find any problems that I
may have overlooked um but yeah
so uh because of the way I set this up
it's probably not the most per
performance friendly uh but it's really
good for testing and you can always go
back and make this uh do this
differently ideally you would only want
this these values uh from the data asset
to be updated when the state changes or
the gate changes uh for now I have it
updating on a tick and that's just so
that we can uh uh modify those values
during
runtime uh so this this is what I'm
doing here I'm also having to manually
interpolate inside of this uh helper
function that I made and it's going to
interpolate uh the the value it's going
to interpolate between the current one
and and the uh the last one uh or the
target
so if we don't do that then when we do
this right here it just snaps and it
doesn't interpolate that's how I'm
that's how it's interpolating right here
uh so just so you know
so uh that's on the event graph like I
said it's on the update additive overlay
right here the data
assets uh I'm not actually using the
hand R ik right now in fact I I took
that off because currently we don't need
hand R uh hand R ik so I just took it
off
um I might add it back later but we have
a Chooser right
here and inside of this right here
you'll see that we're evaluating that
Chooser and that
Chooser uh is choosing the pistol or the
rifle based on the current overlay State
and then inside of here based off the
movement State and wants to aim it's
choosing one of these data assets and
it's passing it back out
uh right here and then that and then I'm
caching some of these uh variables from
these
functions uh and I'm replacing where
they're using these functions with these
variables because it is more performance
heavy when you're doing this multiple
times every tick so that's why I did
that um right here I'm doing a
validation check and then I'm uh getting
I'm setting those
values so that's basically uh The
Rundown guys uh there is some problems
with this like I said you'll find
uh you'll find the stuff down in the
description I'll go over this in more
detail uh tomorrow and explain like how
I had to do the
animations and uh how this stuff works
and why it works and
and what I'm doing over here and what
I'm doing on the states over here the
overlay
States so on and so forth so I'll cover
all that uh stuff tomorrow and I'll see
you later

================================================================================
ARQUIVO: Unreal Engine 5 - GASP Dynamic Additive Overlay (Release 1.03) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

An Update on the Project

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

=== TRANSCRIÇÃO ===

all right guys I am back with another
video so uh don't be alarmed by that
frame rate it does that whenever I do a
split screen here uh that's just part of
it
so before I get started and forget about
this this is one of the major updates I
made so I did discover that evaluating
the Chooser on a tick is five times
heavier and so
the best way I could overcome that is to
use this method and I profiled that
against not using it and it was five
times more expensive whenever I did it
uh just with the
evaluation so that's why I'm checking
all the states within this to see if
they have changed and if they have
changed then I will evaluate it and if
it's currently interpolating then we'll
current we'll continue
interpolating I might actually make that
so that the
interpolation is a separate
check
but anyway that way it just bypasses all
of this during
interpolation but anyway the point is is
that it's a hell of a lot more
performance heavy to just run this
evaluation uh every frame hopefully they
will
make this more performance friendly in
the
future now I have this right here and by
default it is enabled and that allows
you to come in here and if we go to I'm
just going to exit out of this
because I have too many windows open
here if I go to the
M9 idle
rest and I go to the legs I can now put
this in mesh space and you'll see it
doesn't offset them from the ground like
it was before because I fixed that and
so now you now you can experiment and
see what happens whenever you put it in
local space mesh space you know overlay
base
whatever uh without offsetting them also
I can strained to the ik bones as as
well for uh to Future proof it I
guess so other than that I did add an
experimental thing some of you might
like
and use it with caution because it's
it's an extremely experimental uh method
and it may require
that that your poses be designed
around the stance that you want your
character to be
in and I will give you an example of
that right here so I put a warning here
with some information on it and I did a
lot of experimenting until I got it to a
state where it
was uh
usable and this is a very extreme
pose and normally this would cause
serious
issues but
the feet only move
slightly and it's really more of a
rotation
there so it may look a little funny
because I'm having to blend back into it
very rapidly uh but you can experiment
with those settings
also if you'll notice whenever he's
moving this way and he stops the the
legs kind of cross that's mostly
uh because
of the way he runs forward into the left
his legs are really close together on
those
animations so sometimes if you stop just
right then his legs may cross so that's
something to keep in
mind if you decide you want to use
that now I'll briefly explain how this
works right here I have it set to 150 so
whenever he reaches 150 we're going to
be completely Blended out of that and
into the regular motion matching
animations and 200 might actually be
more appropriate because I think 150
doesn't give enough of a window uh to uh
close that Gap but you'll see now the
legs are are more likely to cross
whenever you do that so uh I don't know
what to tell you it's it was just an
[Music]
experiment and you could probably get
around this by leaving it at 150 and
just saying 0 five and that means only
50% of this pose will get Blended in now
I have this right here because I want
the hands to not be I don't want the
fingers to be messed with whenever we're
in a unarmed state but really if you're
in anything but an unarmed State then
you actually don't need this right here
so I might set up a bull that decides if
this gets Blended or not because it's
not needed if you're not in an unarmed
State and the reason why is because I'm
overriding the hands for the pistol hold
holding and the rifle holding
States and you'll see this actually
looks a little bit better because we're
only blending into it about
50% uh so the stops look less jolting
and a little bit more
natural uh there is there was a little
bit of leg crossing right there but
there may be a way to fix that I'll have
to look into it like I said this is
experimental
so I may leave the settings like that
and you can decrease that if you
want but it's up to
you just an experiment I may end up
removing this later I don't know we'll
see I might try to find a better way to
do that which may cause Less Problems
so yeah that's pretty much
it we have uh a weapon firing thing oh
yeah there's one more thing that I have
to show
you okay so on
KD's portion of this where he added the
firing mechanism and the
sounds right now it's camera uh right
now it's based off of
the the road rotation of it is based off
of this scene actor right here I tried
using the socket rotation but my Vector
math is fairly weak and I couldn't seem
to get it to align
properly uh the bone is rotated the
wrong direction so it goes in the
opposite direction and if I rotate it if
I rotate the Rotator by 90 Dees to get
it to face
forward then
it does something weird where it it only
shoots straight out in front it won't
shoot up or down so if I'm aiming down
it'll still Shoot Straight uh for
whatever reason I don't know so this was
my solution for it I just got the scene
actor and I just used its
rotation and so by default it's going to
shoot out of the straight out of the
barrel of the gun if you check this
though it's it'll be camera based and
it'll always shoot towards the center of
the
screen and that's basically it that's
the rundown I'll see you guys in the
next video oh uh before I go guys I did
fix that swimming problem with the hand
where the hand was uh swimming around uh
what was the problem is it was the
breathing animation the hands were not
synchronized within the breathing
animation and so I had to resynchronize
them but yeah that's basically it I'll
see you guys in the next video

================================================================================
ARQUIVO: Unreal Engine 5 GASP DAO (V1.30 Overview) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

Changes in this release include Aim Offset Wrapping Fix, Additional Overlay Layering Layer for Entire Upperbody, Linked Anim Layer Child Classes.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

=== TRANSCRIÇÃO ===

all right guys welcome back so I've
replaced the aim offset with the
universal aim offset uh there
are some drawbacks to using a universal
aim offset for example uh this right
here so I don't have a custom aim offs
set so when he's looking down he may be
uh sticking his gun inside of his leg so
that is one drawback
uh I have fixed the wrapping issue as
you can see so that problem is fixed
[Music]
now even though I'm using a universal
aim offset you'll notice that the
accuracy is still uh about the same it
may even be better because I added a 45
degree to the aim offset pitch uh so the
aim offset uh aim up and the aim offset
aim down has a 45 degree pose in there
now uh to fill in that gap between the
zero and
90 so it may be slightly better more
accurate now as before it it would get
somewhat inaccurate when aiming around
45° or slightly up uh now I do have the
recoil and the breathing added over the
top of it as you can see his hands are
moving up and down so another thing that
I I did also as well is I added a an
upper body layering overlay so to the
overlay the dynamic additive overlay one
so this is the Dao right here there may
be some issues uh still remaining in the
copy motion but I did bring whatever I
did over here on the dynamic additive
overlay one I brought it over to the
copy motion the copy motion isn't I I
would consider experimental because um I
just haven't put a lot of time into that
one and it's still fairly new
so but you'll see that even with two
hands or with one hand uh you'll see his
hand does go uh back a little when he's
or maybe it goes forward a little when
he's aiming down and back a little when
he's aiming up uh and that's just cuz
I'm applying this to both
arms so you can
uh exclude that other arm during certain
circumstances like single-handed aiming
like this for example but I'm not going
to build anything like that into the
system you can watch my videos to
understand how this stuff
works as you can see I'm doing that
Dynamic additive overlay over the entire
body and that allows me to add more
motion back into it so it looks less
stiff now as you guys can see
uh so I did end up making it stiffer to
fix the desynchronization between the
Torso and the arms uh and this allowed
me to make it less stiff kind of like
what we had it before so the downside uh
to this is that you can only apply this
at a very low percent so if you go
into the layering and that'll be under
the linked anim layer so this will give
me a chance to show you guys where that
is now so I moved it out of the
blueprints uh action
data uh data
folder those folders that were under
here I moved those over here and I put
these under separate folders and then
under this overlay folder you'll you'll
find this stuff and if you open this now
you'll see a an extra one down here and
by default the default value of it will
be space and 0.1 10% that's what I found
to be the best value if you turn this up
too high uh you'll see let's see which
one is
this uh let me do it to one of the
moving ones so let's see the rifle
overlay aiming running aiming so I'll
increase this to 0.5% so that you can
see what happens
so if you apply this too much you'll see
that his hands start moving a lot that's
kind of
unavoidable uh because of the way that
we're overlaying
this so I would recommend keeping it low
if you do want it higher uh you could
create uh you you wouldn't easily be
able to fix this for this guy uh but for
the live retargeted characters you could
offset their arms their aim in down so
that they're aiming uh so that they're
holding the gun further down so that it
doesn't rise above the shoulders and
then it'll just rise and fall like this
uh so you could do that with the live R
targeting settings but in order to do
that right here I would have to build in
a system uh that uses two bone ik on
both arms at all times and right now I
kind of got it set up so that so that we
only apply it
as so that we only apply
the two bone ik on the H that needs it
in this case because it's a two-handed
weapon we actually only need that on the
left hand so there's no point in doing
two two bone I when you only actually
need
one you could though add an affector
offset right here that lowers it like
what I was talking about how you can do
on the live retargeted
characters but
you
know I think it looks fine if we just
keep that value low it adds plenty of
motion back into it without causing too
many
problems as you can
see and you can experiment with the
different modes as well that's why I
added this in here rather than just uh
having it static you'll see it moves a
little bit differently whenever we have
an in
local it's moving more towards the face
rather than up and down uh if you turn
that up too high you'll probably get a
similar result except it'll be going
inside the
[Applause]
face yeah
see so that's why I suggest keeping it
low 10% seems to be fine you might be
able to get away with 15% but I wouldn't
advise turning it up too high just like
whenever you're doing copy motion stuff
you don't want to turn it up too high uh
also yeah whenever you're in uh non
strafing mode uh and you're looking at
the character and you're turning the gun
does Jitter that's the aim offset
because the calculation I'm doing is
mostly designed for like uh this
perspective you can fix that though you
would just have to
uh uh maybe handle the aim offset
calculation differently
so that
covers the changes let me just go ahead
and show you how this works in
here so nothing much has really changed
in
here that still works the same
way I I still have the yacht aim offset
right here but in order to fix that
wrapping problem I had to move the pitch
back over
here uh so applying the pitch right
before the yaw or right after the yaw in
both cases that caused problems I had to
do it post layering
unfortunately which also means that your
layering settings will determine
like how the character bends so
right now I have this in base but then I
have this partially in overlay which
stiffens it I'll show you on the guns I
think I handled it a little
differently so it's mesh space and
overlay
75% so the spine has to be in overlay
about
75% in order to
uh make it look like he's bending over
over if you don't if you reduce that
overlay anymore than it is on the spine
then he will not bend over as much and
it could cause more problems where like
when he's aiming down with the pistol
then uh it may look funny so just keep
that in mind
so yeah so this is the the new
pitch and like I said I included 45
degrees in here as
[Music]
well and it looks like it's for the
rifle but it's really not that's just
the preview that I have set
up if
I if you look at these you'll
see how it works so uh yeah all I'm
doing
is I'm rotating the pelvis each spine
bone and then I'm just
rotating uh the head and the Arms by a
specific
angle so for the 90 I can tell you that
both for up and down I
did uh 20 20
30 uh on this on the chest control I did
30 and then on the arms I did
40 so that's a total of
90 anyway if youall guys want me to do a
video on how I made those I may I may do
a video on it just let me
know so in the aim
offset for the pitch I have no smoothing
because pitch doesn't need smoothing it
doesn't have that wrapping so you're
either your camera normally stops when
you're looking straight up uh so which
prevents or when you're looking straight
down you can't look like back here uh
you can't like cycle back like this make
a full 360 it's normally clamped
180° so that prevents you from needing
to wrap back around uh as far as the yaw
though you can cycle all the way around
and so for that I had to handle it
um well I didn't actually have to handle
it any differently I just had to add a
smooth a smoothness to it
so you'll see here I do have a version
of this blend space appro roach for the
yaw but it does introduce jittering back
in and so I just stuck with the spine it
would probably be more performance
friendly uh rather than doing all these
transforms uh
but it introduced jittering so if you
don't mind the jittering then go for it
you can swap this out with the other one
but the performance gain will be
negligible so just so you know it'll be
negligible if any actually I could be
wrong it might actually be more
performance
heavy it depends on how these evaluate
things they may just only evaluate the
single bone that you are modifying in
which case if that's so then it may be
more performance friendly of course I am
doing this right here for the fingers
which may not even be necessary you
could probably bypass
that uh but
yeah so that pretty much covers
it let's see what else did I do
um oh yeah so linked uh anim
layers so if you come in here now you'll
see that I have the base and then I have
the default if you open this up I've set
all the variables except these to
private so that only these show up in
here and these are the poses and so if
you need to you can duplicate this and
replace those poses with your own pose
or maybe just only replace one like uh
the the aim
poses you know or whatever maybe the
move moving ready
pose as far as the rifle there's fewer
poses for the
rifle so you'll see there's only three
poses for the rifle Logic for this one
you would only have to replace the
aiming
pose and that's because I swapped these
out right here so the way I did this is
we're no longer these are by
frame uh I just set it to by
frame but yeah
so you could use explicit Tim or by
frame I just chose to do by frame that's
just my own personal preference uh these
are step animations anyway they're just
single poses you won't be able to use
pose compilations anymore you'll have to
extract the
poses
and that's actually not difficult if I
just go in here I can go to create asset
create animation and current post that's
how you extract
it so
I I'm getting away from those pose
compilations because they're kind of
redundant we don't actually need them in
this project I was only using them
because I was kind of like borrowing
some of als's poses

================================================================================
ARQUIVO: Unreal Engine 5 GASP DAO (V1.31 Overview) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

Changes in 1.31:
- 1. Choosers on the Animation Blueprint are no longer used for selecting and applying Layering Settings, Linked Anim Layers are now Storing and Loading Those. This removed the need for the Animation System to Track the Current HeldObjectState.

- 2. Currently Held Weapon Meshes are now Stored in their Data Assets for centralized Weapon Data.

- 3. Live Retargeting Assets are no longer stored inside a Map, they are now handled on the character Blueprint using Choosers. This requires the HeldObjectState Gameplay Tag to be added into a Gameplay Tag Container, since Choosers can only test against Containers, it also allows us to load multiple Gameplay Tags into it and test for various tags within the Chooser.

- 4. A median was met for handling bad finger retargeting issues, this requires you to retarget the poses to that character using their IK Retargeter and modify the fingers and pose and then retarget them back using the same IK Retargeter. You then create Data Actions for those characters and overwrite the default ones in the Class Settings. After that you create a child of that weapon linked anim layer and assign those animations to it and then reference that in the Data Actions Asset which stores all the information for those weapons. This ensures that those poses will look right for all of those characters as long as they were all rigged the same way.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

=== TRANSCRIÇÃO ===

all right guys I'm back with another
video so yeah I had a long weekend I
spent basically the entire weekend uh
just working on this
project for the last uh two days
Non-Stop and so I'm going to go over
some of the things that I changed in
here for one uh the auto unequip was
refactored and it's replicated now so
he'll automatically unequip and then
re-equip whenever you get back up onto
something
uh later on I'll probably add a
transition animation where he like puts
it away you know uh for right now it's
you're going to have that kind of weird
blending uh whenever it comes back in
and starts blending back in uh and
that's because
the the weapon R is blending in uh and
that's what the weapon is attached to uh
for a live retargeted character you
probably want and see that uh yeah you
want to see that because it's on a
socket and you'll see that we
can uh go over as many things as we want
and when we're done he'll just
automatically re-equip it uh so that was
a little tricky to get working properly
uh which is why I had to refactor it
like twice uh because I noticed that
there was a problem whenever we were
doing that across multiple ones
but
yeah and this is a dedicated server by
the
way and
I right now I have it so that you can
trigger on and off in mine but in yours
it won't be like that
uh uh you'll just have to aim in order
to shoot I took that mechanic off and
the reason why is because in order to
get that to work with the repo version
without uploading the entire thing I
would in fact have to make a slight
modification to the base code and I
didn't want to do that um I'm trying
to keep the setup for the repo uh
version as minimal as possible which is
why I'm avoiding messing with any of the
base uh
stuff uh so and this is a child of the
base uh class uh that comes in the uh
motion matching
project so that all all that stuff is
untouched it's unaltered except for this
trigger mechanic that I set up on mine
uh but I was only doing that for
debugging
purposes so yeah that's basically it for
the
replication and now I'll just go ahead
and uh
well I'll just go ahead
and show you
this so I'm handling the way that this
data is being stored and loaded now now
we're using
choosers and also I found a solution for
uh the hand plate or the finger problem
for
the uh characters so you'll you'll that
when you live retarget these
uh animations or hard retarget
animations it's common in fact uh of
it's almost unheard of uh for the
fingers when they get retargeted they
come out looking funny they'll be all
twisted at an angle uh like this rather
than going straight and they just do
some really weird stuff uh and so I came
up with a solution that fig is that and
it's it works every single time I'll
briefly go over it
uh
so let me just start with this so a lot
of people they approach uh these
animation systems especially the motion
matching and even mine uh they approach
it with this mentality we don't want
livey targeting livey targeting creates
overhead uh we want to do a hard
retarget that's that's a naive
approach and it's a and it's based off
of a fallacy that if you do a hard rate
target you'll get better
results and you won't have to modify the
animations you'll still have to modify
the
animations and you won't just have to
modify them for one character for
example I won't only have to modify it
for this body type I'll have to modify
it for the other 17 metahuman body types
too and I have to retarget it to each
and every single one of those and I
would have to modify all these poses for
each and every one of those uh so you
can do it that way it's going to be a
lot of work my Approach is kind of a
middle ground it allows you
to basically just retarget the
animations that you're having uh
problems with the fingers
on and then modify
them for that character and then
retarget them
back and then inside of
the inside of the character blueprint
you go to the class defaults and you go
to held
objects and I'll just show
you and you create uh a
new primary data asset
uh action
data based off the action data weapon
one and then
you create your another child of the
pistol
layer and you assign those retargeted
animations
here and you set that
here and then inside of here
under the Dao
category you just set that right
here so the held objects are still
stored like this now uh but you'll
notice
that the mesh the weapon mesh is
actually stored in these now and we also
have a gameplay tag and a display name
just in case anybody needs that needs
access to that uh so that's
there so whenever it fetches it it just
grabs all that information from the data
asset
now you'll notice too that there's
something missing inside of this livey
targeting
thing and that's because we're no longer
uh setting the liary targeting ass data
assets from
here instead on the character blueprint
you'll now notice a function in
here actually there's two functions in
here uh and I haven't uh set them in
into a category I'll said that I'll
categorize them later but this one right
here it's just an empty function and
it's meant to be overridden by children
of this class so this Dao bodies it's a
child of that
class and if we look here you can
override those functions here and I've
overridden this one right
here and I'm actually just assigning uh
I'm having a Chooser return the held
object
settings and so inside of here now
you'll
see that for each of these metahumans we
have their ik
settings uh right inside of
here and those are actually choosers too
those are nested
choosers so inside of here and this is
what you'll see on the other characters
because those other characters only the
metahumans did I uh Nest them inside of
this uh Chooser on the other ones you'll
just see these and it'll hold the
pistols and it'll hold the
rifles for that
character so that's how that
works all you have to do is create a new
asset create you a new one of
these and then assign
it and and tell it what kind of rifle it
is
now that brings me to the gameplay
tags the reason why I tell people not to
override my config settings is because
if we go into the project
settings
uh you'll see that under the gameplay
tags we have these gameplay tag tables
and I and I put my gameplay tags inside
of these tables so that they were
portable so if you do override the
config settings that's actually fine
just go into your project settings
gameplay tags and you just have to load
these data uh tables uh back
in
So this one holds all the states and
stances and then the other
one let
me find it yeah I didn't name them
consistently I'll probably
uh re oops yeah I'll go ahead and rename
this
[Music]
one yeah it may break the reference when
you rename
these let's see here we
go yeah so it broke the reference so now
I have to uh
reset
it but yeah these are the metahuman tags
these are just to help me identify the
body types uh from inside of the uh Dao
bodies uh because I
actually I actually just have a
uh an array of gameplay tags that I'm
actually just cycling through right here
uh for the males and the females so I
Chang I changed that up from the way
they were handling it I I felt like this
was a better
approach so this is actually called held
object States but whenever you guys see
it it's going to not be called held
object
States it's going to be
called uh GT
container and if you find the references
in
here you'll see whenever we update the
ik retargeter I I add this held object
state to
it I call this and then I remove
it and that's the thing that we're
overriding in our children
classes so this will uh return a
reference to the correct uh data asset
it'll set it and save a reference to it
and then it'll just clear that tag and
then it'll start loading all of
that just as before we're just handling
it in a different method uh manner
now I liked the ideal of using
choosers for this purpose
because it dramat it makes it
dramatically
cleaner uh whenever you're dealing with
a lot of assets as you can see here but
if you see this I actually broke a
reference to it because I I renamed it
but that's
fine I'll go back and fix all of that
later before I push this uh change and
re renaming of this
[Music]
so yeah that basically covers all the
all the changes that I
made and I'll be making a video on
bringing in your own
character and setting them up with all
this stuff
uh here pretty soon I was going to do
that this weekend but I I kind of ran
out of time I I need some time to relax
and it's already 5:33 so I don't have
much time left in the day uh so yeah I'm
not going to do that video today but I
wanted to get this video out to you guys
uh so you knew what changes I had made I
did make a lot of changes I it I had to
overhaul a lot of stuff in order to pull
that off also if you haven't noticed as
well if we go back into the main
character here
and we come in
here you'll notice that I added
a a cycling uh
system so instead of pressing one two
and three now uh we're
actually we're actually just pressing uh
q and
E Yeah so it's not choosing it because I
uh broke the reference to that uh
container so it's not able to choose it
I'll have to fix that the Q and E on the
keyboard is how you change that and if
you want to know if you go to the event
graph oh actually if you go under the
input you'll see I'm overwriting their
input the base input uh F setup input
function and here I'm adding my own and
so in here I'm just adding a few to what
they already
have and you can see the keys inside of
here for
those and these are the cycle uh weapon
keys so I kept the emote example but I
removed that fighting stance uh example
uh May introduce something similar to
that uh reintroduce something similar to
that in the future
uh so if you already have an older
version of that and you like it then uh
you
could uh ped it over if you want I
believe I documented it pretty well but
uh I also have videos cover in that so
you can always go back and watch those
if you're
interested but
yeah also
the setting of The held object
state is uh Universal now so anytime you
just want to update the held object
State you just call this event right
here update held object State um this is
a little debugger if you're having
problems for whatever reason uh this
will print out the game uh the game
states to help you
identify uh what state you're in and uh
why something's messing
up and that's pretty much
it I've documented things pretty well in
here and I'll see you in the next video

================================================================================
ARQUIVO: Unreal Engine 5 GASP DAO - Fluid AimOffset (V1.28 Overview) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

In this video, I go over how I overcame the Aim Offset Latency/Jittering Problem and other updates introduced.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

00:00 Intro
01:10 Copy Motion Explanation
02:25 Offset Root Bone Misunderstanding
12:20 Sacrificing Stability/Accuracy for Dynamic Motion
18:10 Dynamic Overlay Layering Changes
22:54 Aimoffset Calculation
26:35 Hand IK Pole Vector Fix
27:09 New Layering Settings Approach

=== TRANSCRIÇÃO ===

all right guys
so I'm back with another video I'm going
to go over 1 Point uh 28 with you guys
I'm going to explain a few things uh why
I had to make certain decisions so on
and so forth and the latest update there
were there were a lot of changes that
fixed some longstanding issues um but
we'll we'll go over the those there's
still one problem here I'm not 100% sure
why I need different different settings
doesn't make a lot of sense to me I've
never had to do that before I'm going to
be looking into that problem and find
out the cause of it uh but this is
basically the pole Vector that controls
the orientation of the
elbow uh to it keeps it from bending
this way from bending like that uh and
it seems for some reason I need a
different I need the X to be positive
for the pistol whenever he's holding the
pistol and I'm not sure why I've never
had like I said I've never had to do
that before so anyway uh and the copy
Motion in case you guys don't remember
the Post history has to come before the
copy motion because the the Post
history when you're using it with when
you're using the copy motion with motion
matching and you want want it to draw uh
from the postt so that the delay Works
um by the way the the delay seems to be
an onoff switch still I haven't
completely nailed down why uh increasing
the delay doesn't actually make it delay
more uh I'm not really familiar with why
but I do know that inside the code
because I have gone through the actual
source code U just briefly and from what
I've seen it was actually getting the
collected bones array off of there and
it was searching
uh for the uh for the source bone so in
this case we don't need the bone to
modifi to be in that list but the copy
space and the source bone uh more than
likely will need to be in
that I'm not going to go back over how
copy motion Works
guys but I'm going to explain to you why
I did things this way and why it works
the way it does now I made some wild
claims as far as the offset root bone I
thought I'd uh I thought I was seeing a
serious flaw with it but it turns
out that it actually wasn't the offset
root bone it was the order of operation
of things I'll go over that here in a
little bit but the reason for the
confusion is because I started trying to
transfer uh a fix that I had to apply
for on this over to the Dao layering
system uh in
here so when I went to do
that I realized it wasn't working quite
the
same and it never dawned on me that
inside of here the layering happens
before the offset root bone uh in the
Post history
because because this doesn't use copy
motion and so copy motion has to happen
after the pose
history not necessarily after the offset
root bone but if you place the offset
root bone after the Post history like
down here for example it can cause uh uh
it can cause problems whenever you're
turning so there are still some problems
uh whenever you're turning but that has
to do with the offset root bone and how
it interpolates things I'm sure they'll
fix that uh
eventually but or come up with some kind
of solution for it but the point is is
that we can't place the offset reot bone
down here on the end it needs to come up
here and it needs to happen before the
Post
history so the problem is is whenever
you place all your layering data after
the post uh the offset root bone
then something odd
happens and I will demonstrate that to
you
inside of this
pistol uh layer here so I'm going to
come over
here and I'm going to draw out my pistol
right
so you'll see something odd
here and just focus on the lower body so
on the lower body the legs are going
from this direction to this direction
it's going cross like this but on that
uh on that overlay State those poses are
aligned 90° so they are rotating with
the capsule as the capsule rotates uh to
face the direction that I'm
looking as you can see
here so that creates a
problem because whenever we go to layer
this and and we want it to be in mesh
space a space rotation blend for
example
then
um it's going to apply these
rotations relative
to how they are right
here
and what that means is it means if we
look behind us real fast and and the
character's torso is still facing this
direction then the character will be
aiming over here I hope you understand
how that how serious of a problem that
is so in order to fix that so that a
mesh space rotation blend can still be
applied as it was before in a
traditional uh
setup what we actually need to do is we
need to actually get that pose
and we need to align it to the root bone
of the motion matching
pose and that's what we do right
here so even though I'm looking over
here now his legs and his feet are
aligned with this lower body
animation and and in this case we can
accurately uh get the mesh space
rotation of this
as we would expect it to
be and that brings me to this the G
actor transform the why am I using the
get actor transform so if you're
watching the capsule you'll see the
character is not the character is not
rotating right here uh until he turns in
place whenever the animation plays he
turns but you'll see that the capsule is
rotating with
me uh and it it's it's always facing the
camera so the offset root bone it
counter rotates the root
bone of the character it counter rotates
it to keep it from turning in place
after it exceeds a certain threshold
it'll play a turn and place
animation and whenever it plays the turn
and place animation the offset root
bone right here it'll release the
translation and the rotation
and it will
rotate the root bone based off of the
rotation and
translation of that root bone in the
animation that's
playing in the case of a turn and place
animation that means that he's only
rotating he's not moving in in space
he's only rotating in place uh so that's
how that works
so I explain that so that you could
understand what I'm doing here so when I
get the inverse transform rotation what
it's doing is it's actually getting that
root transform of the motion matching
pose which uh gets updated after this
executes and since this executes before
this then we know that this is the
latest update
in
that and that it's pre-output
pose and so this is the very latest one
this will be the this will be the root
transform we
get after we've
done all of all of this and we've output
our
pose so the pose hasn't been output
yet so we get that root transform
rotation and we make that relative to
the actors's
transform and then we rotate the root
bone of this overlay pose by that
rotation which Al which aligns it with
The
Locomotion and that's what we want and
so this actually is is not needed for
the ALS inose and I'll explain to you
why so when we're doing a layered blend
per bone this is the only thing that's
actually affected by this problem right
here um and that's when we we apply this
as a mesh space rotation
[Music]
blend so right here when we're making
this Dynamic additive between the mm
pose and the N
pose it's actually not important um even
though we're making we're we're getting
the difference between these two and
then we're applying it to this overlay
State
um and the reason why is because it kind
of does it kind of does this right here
for us uh whenever we do that not all
because this hasn't had this applied to
it also we're not actually applying this
as a mespace rotation blend right here
on this layered blend for
bone now on this pistol pose this is the
only thing that's different than
the uh copy motion rifle link anim layer
as you'll see in here we don't have that
one and this is basically just applying
the motion
matching arm
swing animation to the upper arm L and
down to the hand not including the
clavicle so we're excluding the shoulder
from this we're only applying this to
the arm
itself and whenever he's not aiming we
apply this
100% but when we are aiming we only
apply it
50% um and the reason why is because
well I'll just go ahead and show you if
we apply this
zero% uh then we have this weird uh
stiffness
here if we just keep this at
100% it just looks weird you see
whenever we first start it you see how
how it looks it just looks weird now I
might end up coming back in here this is
just look so so weird I don't know how
to fix that uh yet but I'm GNA have to
do something whenever he's accelerating
uh or whenever a start animation is
playing in the motion matching database
then I might have to add logic that says
hey if uh we're playing an animation
from the start database uh then you know
the start jogging database then maybe
you know do this differently
so I'll look into
that uh I might have to add some extra
logic to handle that and that's why I
didn't do it
0% but I didn't do it 100% either I did
it 05% so it's kind of a temporary work
around until I can find a better
solution so that's the breakdown on that
we don't really need this up here it's
just hanging
out over
here the the problem is guys
is I had to do this because
or the blend depth the reason why I have
such a high blend depth is because
that's as high as I could go without
losing
accuracy the thing is is whenever you
have an Aiming uh pose that aiming pose
needs to be aiming straight down the Y
AIS it needs to be pointing straight
down that axis if he has a gun in his
hand his gun needs to be perfectly
aligned with that y AIS and if it isn't
then your aim offset is going to have
offsets and that's the reason why and
so inside of here your aim is not going
to be accurate it's going to be very
inaccurate uh if you don't
layer the
overlay pose onto The
Locomotion as a mespace rotation
blend if you don't do this
then then you get
this so you see how that you see how
that arm is pointing down and it's
swinging left to right it's swinging
left to right because it's following the
shoulder you see uh and the shoulder is
following the spine and so if
we it's it's a tradeoff if we want him
to be aiming
properly in the correct
direction
uh then we have to sacrifice
something we can't H have them aiming
properly in the right direction using
this specific
setup and have that Dynamic movement on
the body as
well and the thing is is if the shoulder
is moving back and forth that much we
actually uh not have the arm swinging
because if the arm isn't
swinging uh
then the shoulder is going to be is
going to continuously continuously be
dislocated from the shoulder socket it's
going to look weird it's going to look
nasty uh that's the problem I was having
in my previous setup uh with the Dao
layering system uh that was one of the
the uh main complaints people had about
it and that's the reason why I changed
my entire approach to all this
so it's a tradeoff for now I'll look
into you know I've tried doing a dynamic
uh layering and it just it just
doesn't you know it's it's it causes
more problems uh then it it it
fixes but I'll keep looking
I
may I'm I may I just haven't had time to
look over it this past well I haven't
had much time to work on this at all
over the past three weeks guys to be
honest with you I've had a lot going on
so I'll look into that uh this weekend
I'll look over it whenever I have time I
have work that I have to do for somebody
so uh I don't really get a day off this
weekend uh even though I I probably need
it but
but yeah so now you understand that's
the reason why we're using this I set
that blend depth as high as I could get
it in order to maintain as much Dynamic
movement in the body uh whenever we're
moving as possible uh without it
affecting the
accuracy uh of the arms so that's the
reason why that blend depth is so
high and that was the only other change
I made uh in this
setup and so that brings us
to
the Dao additive
[Music]
layering all right
so that's basically what I did on this
one I had to move everything over uh
beyond the offset root bone in the Post
history and the reason why this works
guys uh the reason why we can do this uh
safely after the offset root bone is
because we're only doing applying this
stuff on the upper body if you try to
apply this stuff on the lower body
you're going to have problems you can
apply it on the pelvis as long as you're
not affecting the leg
positions or the root you can't affect
the root or the
legs but you can affect everything else
and it won't affect the offset root bone
it won't cause foot
sliding so I do have this whole thing
for the legs here I highly do not
recommend using that in fact you could
probably just take this out if you
wanted uh and it wouldn't hurt anything
you could probably take this out right
here as well and it probably won't hurt
anything
um
so inside of here I did make uh some
changes you'll see that I'm not starting
these at the clavicles anymore
um so I wanted more Dynamic movement in
the shoulders but I didn't want that
Dynamic movement in the shoulders to
actually affect uh how the arms
themselves were opposed whenever I
applied it in mesh space as a mesh space
rotation blend I wanted them to be
pointing straight ahead but I didn't
want to affect I didn't want it to
affect the way that the
uh that the shoulders were moving
from the underlying uh
layer the other change that I made is
right here on the pelvis layer so on the
pelvis layer now I am only This only
affects the pelvis now no other bone is
included in this only the pelvis gets
offset and that allows us to drop the
pelvis uh and maybe reorient it a little
bit based off of the overlay pose that
way we can safely uh drop uh or blend
between the pelvis uh position and
rotation of the overlay pose and the
current motion matching
pose so that was the changes I made in
the layering system right here you'll
see
that uh I actually
did end up needing to apply this to uh
both of these right here
and this one
I I think I needed to I'm not sure if I
tested it without doing it on the ALS in
pose I think I do need it
because uh the thing to understand is
because we have these layered blend per
bones chained together the previous one
actually directly affects the outcome of
the of this one right here that wasn't
the case in our copy motion setup
because in our copy uh motion setup uh
this right
here is actually the base pose and then
this actually is being layered on top of
that and so it's not we're not actually
now if this if it was something like
that then it would be a problem but
we're doing it like
this however over here in our Dao one uh
that's not exactly always the case
so if you look
here uh this is a mesh space rotation
blend but we can apply a mesh space
additive a local space additive an
overlay pose or the base pose onto this
upper arm L which is a mesh space
rotation blend that's the reason why
I think we need
this I don't remember if I tested out it
could be irrelevant I don't know if it
is I'll remove it later but I think that
it is relevant in this
case again in this one we're doing this
right here we're doing it right
here on the upper body but we're not
doing it with a mesh space rotation
blend so that could make a difference
then right here we're doing all that
stuff just like
before I did do this a little bit
differently uh
actually I skipped over something I'm
sorry guys I will go back and I'll cover
it now so if you go to the yaah AO
you'll see we have this F right here
which stands for
function if you go over into your my
blueprint you'll see
that I actually made this right here and
I haven't actually even categorized it
yet but this is a pure threads say
function which actually
interpolates the value before feeding it
out and the reason why we had to do it
like that is because we need this to be
done on
demand why does it need to be done on on
demand I will
explain so it's an order of operation
thing right right here we're getting the
the root transform
rotation but this root transform
rotation needs to be
the post offset root bone root transform
[Music]
rotation if we were
to cach that value from the blueprint
thread safe
update uh it this gets updated just
prior to graph
update so the value that we would get
would be the pre- offset root bone
rotation not the post offset root bone
rotation and that's the reason why
inside of here I had to make this a pure
function so that I could
interpolate uh the
value so I hope that explains it to you
that's the reason why I did that the way
I
did so moving back over here I believe I
did the same thing in here no I didn't
have to do it in here okay so that
wasn't necessary in here so I didn't do
that in here
but yeah at least I don't think it was
I'll go back and check uh if it is uh if
there are problems with that then I will
do it but I don't
believe I was having the same problem
the problem I was having if I didn't do
that whenever whenever he rotates around
like that instead of rotating to uh the
left and then back to the right let's
see um yeah instead of
rotating yeah instead of rotating the
correct direction he would rotate behind
he would twist around behind
him I'll try to uh show you
here so instead
of instead of rotating this this
direction this direction here he would
rotate uh he would be looking this way
but he would rotate this direction he
would go behind him Twist Pretzel he
would pretzel and come back
around uh and that's the reason why in
this one I had to use this method
here it was an interpolation problem
am I
done yeah I think so guys Jesus Christ
as you can see right here I didn't have
to uh do the same thing with this one it
only seem it seems to be a problem which
is more than likely caused by the leg ik
uh or something or the copy motion
itself maybe it's distorting something
and causing me to have to flip those
values uh right here
on the X uh like I said I'll look into
it and try to figure out exactly what's
causing that problem but I didn't have
to do that in the Lings uh
system now over here this is the uh new
method the new approach that I have so I
want if he's kind of
like if he's if his pelvis is sitting
lower so that his legs are kind of bent
a little bit then I I do want that to be
transferred over to the pelvis that's
why I have an mesh space
100% however on the
spine uh I am now applying this
partially and
overlay now remember this stuff
propagates downwards
so the legs and the
pelvis do not affect the spine at all
the spine is excluded from the pelvis
and the legs
layer which means that whenever you
apply the spine
now in
overlay 50% that means the other 50% is
motion
matching so that gives us a blend
between the overlay and the motion
matching so that's how I fixed the
problem where the arms were
desynchronizing with the
spine so that's also the reason why now
in the Dao it looks a little stiffer
than it did before it was a tradeoff
that I had to make in order to fix that
problem but I think the the the end
result right there I think that looks so
much better than what it did
before not only that but now we ALS
we've also fixed the problem with
the uh aim
offset and yeah I think that pretty much
covers it guys
uh so I mean we did have to make the
pose just a little bit stiffer but like
I said there wasn't really any way
around it if we wanted to fix uh those
desynchronization
problems and I'll see you in the next
video

================================================================================
ARQUIVO: Unreal Engine 5 Player Take Down Part 2 (Preview) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

Intro to the Setup Video and Preview of the End Results as well as a short explanation.

Part 1 Intro: https://youtu.be/YibNuD69wxw
Part 2 Setup: https://youtu.be/7wpHzo5axmc

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

=== TRANSCRIÇÃO ===

all right guys so and the video you're
going to be watching after this one uh
and I'll go ahead and show you this this
is the results but the video you're
going to be watching after uh this will
the animations will be slightly out of
sync yours should not be in sync uh this
is this was done after I made that video
I realized that the uh animations were
out of sync because when I brought them
into unreal
um I
fixed the starting pose uh for both of
them and so it caused some un unwanted
undesired offsets on things and so I I
went back and I fixed it so so now
you'll see that the fingers look good I
fixed a lot of things uh on here and uh
so there will be some clipping right
here but that's like almost unavoidable
because of how short his arms are and
how tight he has to hold
him but yeah you'll see that uh it stays
perfectly in sync now and uh the leg
doesn't clip either I fixed that
uh and I fixed the arms as much as I
could right around this area if you see
jittering when I play it back that's
just uh how things work in the
uh uh rewind debugger also the noise as
well it looks like I could probably have
gotten that one a little bit better
right there on that frame but I don't
think it's that big of a
deal also that I probably could have
smoothed it out a little bit but it
happened that part happened so fast that
you won't even really uh tell I'll go
ahead and play it back from uh right
here
see so it happens so fast that it
actually kind of looks natural how
jolting it is uh because he's supposed
to be snapping his neck so anyway yeah
so these are the results you'll get
these are the animations you're going to
get not the ones that I show in my video
uh so yours should be perfectly in sync

================================================================================
ARQUIVO: Unreal Engine 5.4 - Motion Matching Dynamic Additive Layering (Part 4) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

In this video we will setup a pistol and discuss animation requirements and why we choose them.
WARNING! I forgot to warn you about the Poses being set back to Linear and it will make it look funny, set it back to 'Step'

Fixed Pistol Animations: https://drive.google.com/file/d/1cm0YR7ZwmV7nOx-PwU7EK4FTpHlc9Yol/view?usp=sharing

Part 1: https://youtu.be/d_p1WhfPw5A
Part 1.5 (Explains why this part is Optional): https://youtu.be/NS-FpjzEb9M
Part 2 (Optional): https://youtu.be/9UrMdkXZrMc
Part 3 (Aim Offset): https://youtu.be/fRw2YcyHzoM
Part 4.1 (Slight Oversight): https://youtu.be/-73QaRYXpGg

Join our Discord: https://discord.gg/38ceaJ67Eu

0:00 Intro
1:30 Exporting
3:40 Importing
5:15 Animations
7:47 Positioning Weapon_R Bone
12:45 Why I'm Using Weapon_R Bone
14:57 Attaching Pistol to Mesh

=== TRANSCRIÇÃO ===

all right guys back with another V video
uh
so uh first off disclaimer uh I don't
know everything I do make mistakes uh
just like everybody else and it's part
of the learning process so uh we may
make mistakes along the way but I'll try
not to uh so anyway I'm doing this in a
very particular way and I'm going to go
over it with you guys and uh then in the
next video uh we'll uh St start setting
up for two-handed weapons all right so
I'll just go ahead and show you what
this looks
like so this pistol is actually attached
to the weapon R bone and I modified that
and there's a very specific reason
future reason why I want to use the
weapon or bone uh that's attached to the
hand
and if your character doesn't have a
weapon or a bone
uh H I don't know what to tell you uh
it's preferable that they have a weapon
R
bone but I
mean it's it's better than ik bones uh I
think it's a better approach than the
old ik bone method and I'll I'll go into
that uh later uh whenever we do
two-handed weapons I'll I'll discuss
that with you and why I went with that
so anyway just to get started for you
guys who don't know how to do it open up
the ALS and it's ALS some people are
telling me uh asking me what it
is
Advanced Locomotion system this right
here uh Calvin Longmire uh made this so
you can look for longm Lo Locomotion on
here it's Advanced Locomotion system V4
you can search for it right inside of
here and the same guy that made this uh
some years ago was actually is actually
one of the like tech technical animators
or whatever the you want to call the
title uh for creating this uh motion
matching system inside of
here and so yeah we don't actually need
to change any of this stuff uh but there
is a dis
claimer uh actually also by the way I'm
backing this stuff up now uh so
that uh next time if I experiment in
here I don't have to just explain what I
did I can walk y'all guys through it so
I did take that precaution this time uh
also uh yeah so you right click and you
go to asset actions inside of this ALS
project and you go to export and just
export them into a uh
folder it'll uh don't change any of that
just leave it like it is and say export
save export you're going to export the
M9 and the M4 A1 under the advanced
Locomotion V4 props and meshes because
we're going to be setting the setting up
the M4 A1 uh with the animation system
in the next video so you may as well go
ahead and bring that one over as well
well
so anyway
uh yeah so let me go ahead and explain
to you uh so down in the description I'm
just going to go ahead and include all
of these uh
animations and I thought I duplicated
that damn okay well I didn't duplicate
that but that's okay I guess uh so
I'll I'll explain it to you anyway so
I'll include all these animations uh and
actually I'll just go ahead and Export
all
these animations do I already have
a I deleted that folder yeah that's
right so I'll create a new folder you
don't have to export these animations
um I'm just going to show you guys how
to how to import them in case some of
you don't
know so I'm exporting these right now
that way and they'll be in the
description and so what you would do is
you would go to the animation and you
would right click it and go to reim uh
repport with new
source and then what you would do is you
would find the animation with that same
name in this uh AO aim offset folder and
just double click it and it'll reimport
it and then you can save it and the
reason why is because I had to go in
here and I had to uh I had to position
the weapon R bone uh for this process so
we're going to be using the weapon R
bone
and for especially for the two-handed
weapons and so we want all of our
weapons to use the weapon or bone so I
may as well prep the uh singlehanded
ones for it as well that way they're all
using the same bone and we can just drag
and drop our guns onto the weapon R bone
and it'll just automatically be where it
needs to be for those
animations so uh also if we come back
over here the reason why I just went ah
and did the entire hand rather than just
the fingers like they did in ALS is
because the weapon R bone is attached to
the hand R so if you look under the hand
R you'll see that there's an unweighted
bone called weapon R now technically you
could just say okay not the hand but
thumb uh o1 R ring o1 R pinky o1r middle
o1r and index o1 R and weapon R and you
could have each of those bones listed
under here but not the hand you could do
that uh but I just decided to do the
hand if there's any problems in the
future we may have to go back and do
that so like I said I'm not perfect I do
make mistakes there's log going on here
this is pretty advanced stuff so uh
anyway I just want to explain that to
you and now for these I will just go
ahead and Export these uh to and I'll
export this one into the main folder I
did strip the uh curves off of it
because I had it imported mine with the
curves on it we don't need the curves
they do have a performance hit uh so
just a backstory on how I figured that
out at one point I was messing around
with ALS and I had retargeted some
animations for some CC characters and
they have a lot of Curves and when I
baked the animation it added like 100
200 curves to the animation and for some
reason I kept getting uh uh performance
hits where all of a sudden out of
nowhere my frame rate would drop down to
like five 10 frames per second I had no
idea what it was I started doing some
profiling come to find out it was all
those curves I deleted them the problem
went away so uh curves do have uh
performance hits so I just take that uh
to note anyway I'm going to go over here
and I'm going to go to edit and
sequencer and I've already created one
but you don't have to you could edit
with FK control rig and it'll create a
new one but it'll unlink this one it'll
unlink this one whenever you create a
new one so I'm just going to open this
one and this is why I like using
additive layers because like I said on
an additive layer you can go back and
fix stuff uh because you're not having
to key it frame by frame you can just go
change one single keyy frame and that's
it and so what I did
and I'll just go ahead and do it again
even though I already have one in here
but I did this I drug this out in here
and I want to act to sequencer add M10
that's the one I have selected Here and
Now by Def a lot of people will just
stop here and they'll go and they'll
attach it don't do that always convert
to
spawnable uh that's something that I
always do you can tell if it has a
little lightning bolt right here that
means it's a spawn
if you don't do this if you save and
close this and you decide okay I want to
open this level sequencer in a different
level uh because I no longer want to
mess with it inside of this level well
you can't do that because everything is
linked uh is referencing things inside
of this level so that's why I make them
spawnable also if you do render
sequences it can cause problems there
too if it's not spawnable they might end
up in the wrong location when you're
rendering your your uh your movie so I'm
just pointing that out so press this
plus sign right here and go to attach
and select that animation and it'll ask
you what bone you want to attach it to
and you're going to say weapon R and
then it'll probably be offset like this
you can press this reset button to reset
the transforms of it and that's where it
ends up now yours is probably going to
be more
like like this and so you'll have to
come over here and uh right click and do
this create additive
track and then on that ad additive track
select that bone and then you're going
to move it into position and rotate it
and obviously mine is all offset because
I offset the weapon but you get the
point so uh I'll go into this again
later on in another video but you see
how I screwed this up right here so I
can just actually delete this and it
puts it back how it was unaltered that's
why I like additive tracks real easy to
undo what you did uh so it's like having
a history that you can go back and uh
you know it's like having an undo button
on stuff that you've changed so anyway
that's how that works uh after you've
done after you've positioned it where
you want to position it you can uh you
can come over here this is what you'll
see uh and you'll whenever you're in
animation mode right here animation mode
you can say poses and then create pose
and you can name your pose and say
create asset I've already created mine
right here and then what you can do is
is you can come out of here and
let's say for whatever reason um I
wanted that weapon or bone to be in that
spec oh you know I'm not going to do
that because it's going to mess mine up
but I'll show you how you can do it I'll
open up this one and I'll just open up
the one I already have just for
demonstration purposes but I would uh
select
uh I would make sure that
my that my additive track right here and
honestly it's better to uh to call this
uh to rename these after you create them
uh that way you can identify which one
is which and you don't have to guess uh
but you can move your cursor over here
and you'll see it says additive on it
when you move your cursor over it so
make sure you have your additive track
selected press the select button uh
select controls button it'll
automatically select uh that bone
control for you and then you can uh
check that key button and paste to the
pose and it'll automatically paste it in
here and key it for you all you have to
do then is save it and close it and
that's it that's all you have to do so
put that out of the way uh the reason
why I am doing this is because in some
cases during animations uh like for
example if the if if you're holding a
rifle if you're holding a rifle this way
uh
then yeah you're you're going to turn
twist the wrist but you're not going to
want to twist the wrist to make the gun
completely look like this you're
actually going to want to also spin that
weapon R bone as well uh and if you
don't then it's going to look unnatural
and you're going to have to bend your
wrists on your character in an unnatural
way so if you go and you look at Lyra
animations you'll realize that in some
of a lot of the Lyra animations uh uh
like where they're doing the uh the the
uh rifle butt stroke uh animation where
they're hitting the enemy with the the
butt of the rifle during that animation
they're actually turn animating this
weapon R bone and spinning it uh so
there's a specific reason why they
started using these weapon R bones
they're very useful they kind of serve
the same purpose as the old Iken gun
bone did so uh it's just more
convenient uh because what you can do is
you can
create a virtual bone off of the weapon
R bone pointing to the hand L and what
that does is if you do spin that weapon
then your virtual bone will will be in
relation to the orientation of this and
it'll be offset with that spin on your
weapon R bone if you don't then you're
weapon r i mean then your weapon will
come out of out of the left hand and
it'll go this way as this is spinning
this way if he's holding the uh the
rifle the barrel of the rifle and uh
that's the reason why uh so you'll
understand that whenever we set up the
the rifle uh later so just uh letting
you know on
that so before I go obviously I have to
show youall how to set this up on
here so all you have to do is get this
skeletal mesh and just drag it in
here and uh make it a child of this
mesh and then press this parent socket
button and search for weapon and select
the weapon
R and then just zero that out and now
it's perfectly where it needs to
be so that's all you have to
do and that pretty much sums it up guys
I'll see you in the next video where we
will set up the M4
A1 animations
and I'll explain more about that ik
stuff

================================================================================
ARQUIVO: Unreal Engine 5.4 - Motion Matching Dynamic Additive Layering (Part 4.1) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

Just a Small Oversight I had to make sure no one missed

Part 1: https://youtu.be/d_p1WhfPw5A
Part 1.5 (Explains why this part is Optional): https://youtu.be/NS-FpjzEb9M
Part 2 (Optional): https://youtu.be/9UrMdkXZrMc
Part 3 (Aim Offset): https://youtu.be/fRw2YcyHzoM
Part 4 (Pistol Setup): https://youtu.be/zDZ8eatD6Wg

Join our Discord: https://discord.gg/38ceaJ67Eu

=== TRANSCRIÇÃO ===

all right guys so I thought I'd warn you
about this so if if when you aim your
character drops real low like he's
trying to uh take a
crap it's because I forgot to warn you
about this so if you go into your where
your Al poses are for the pistol uh you
need to open it up and it'll be set to
linear I don't know why it's setting it
to linear but it needs to be set back to
step and that'll fix it so
there we
go anyway sorry about that

================================================================================
ARQUIVO: Unreal Engine 5.4 - Motion Matching_ Dynamic Additive Layering (Part 1) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

In this video we'll overlay a single pose onto the Motion Matching system in a natural way using an advanced Dynamic Additive Layering Technique.

This setup was just something I threw together without much thought. It was meant to be fairly simple. I fixed problems as they came up without any foresight. I will likely re-analyze my approach at a later date to see how I might better approach a setup like this.

Note: I overlooked a few things which we will fix in this video - https://youtu.be/9UrMdkXZrMc

Part 1.5 (Explains why this part is Optional): https://youtu.be/NS-FpjzEb9M
Part 2 (Optional): https://youtu.be/9UrMdkXZrMc
Part 3 (Aim Offset): https://youtu.be/fRw2YcyHzoM
Part 4 (Pistol Setup): https://youtu.be/zDZ8eatD6Wg
Part 4.1 (Slight Oversight): https://youtu.be/-73QaRYXpGg

Join our Discord: https://discord.gg/38ceaJ67Eu

0:00 Intro
0:55 Quick Breakdown
3:17 Setting Up
8:48 Dynamic Additive Setup
13:30 Overlay Layering
17:57 Additive Overlay Strength
22:15 Hand Layering
25:48 Additive Overlay Weight
45:05 Overlay State Setup

=== TRANSCRIÇÃO ===

all right guys I'm back with another
video so I'm going to go over uh how to
set this up we're going to do it step by
step I will have to
uh you'll notice that whenever the angle
is real high he pulls his hand back and
then re aims I'm holding down the aim
button by the way right now uh if you
don't like this mechanic then uh feel
free to modify this uh logic however you
wish some of you might want to but
you'll see uh it respects the animation
even whenever he's
jumping and Landing so and he he keeps
his grip on the
weapon while he's uh mantling and
vaulting and if I land while
aiming you'll see it still looks fine so
anyway let's go ahead and get started
I'm going to leave this project open
because I'm most likely going to have to
refer back to it I don't have uh
photographic memory so and I have a lot
of values that I'm using here for uh
weights for the interpolation of this
value so we have to interpolate it at
different rates uh and apply a different
perc of
it uh at different times based on
different sort circumstances so mostly
for the overlay strength weight uh and
I'll get into
that so what we're going to do is we're
going to set up a dynamic additive
laring
system so you'll see I cached to this
motion matching and right here I'm uh
setting it up in local space I'm using a
neutral pose a a neutral pose is very
important uh whenever you're applying
things uh when you're applying
Locomotion additively over the top of a
pose uh you need a good neutral pose and
since the poses that I'm using are for
from ALS this pose is the pose that
those animations will uh
respect uh
properly so mesh space is best for lower
body in most cases and some situations
you'll want to apply mesh space to the
arms uh especially for precision but for
the most part uh you don't really need
it that
often uh on the upper
body uh this stuff right here like uh
additive
Lans
and aim offsets they get applied in mesh
space so I've I've gone over all this in
my Advanced animation uh Series so if
you guys want to know more about it then
you can uh go and watch that series I'll
have a link up here at this point of the
uh video so feel free to check that out
and so let's get
started so this is quite a setup here
the first thing you're going to want to
do is you're going to want to open up an
ALS uh
project and you're going to want to
export some of the
animations and I'll go over that with
you so I don't think I'm actually going
to be uh using the curves on on there so
and curves do have a performance cost so
I'll just have you guys export the no
curve versions
so let me just browse so I'm going to
use the ALS props pistol one-handed pose
I advise you do the same I'll have to go
we'll have to do we'll have to handle
two-handed weapons differently that's
the reason
why uh mostly especially for mantling
whenever you're mantling if you don't
want the pistol I mean the rifle to go
through
the the object that you're mantling then
you're going to want a mod you're going
to want a custom pose to add over it
while they're manling so I'll go over
that maybe in another video but we're
just going to go with the pistol
one-handed
one because it'll be the easiest to deal
with for now and so you're just going to
export uh the no curves one it has all
these different poses in
it and you can use use all these in
yours if you want I'm only going to use
a couple of them and you're going to
want to and that's under the additive
Locomotion V4 character assets mannequin
skeleton animation examples overlays and
Pistol
so you want to go into the Bas folder as
well and go into base poses and you're
going to want to export this ALS inose
to I've already done that actually
I believe it's still
there so what you're going to want to do
first is you're going to want to import
it onto the ue4
Manakin so I'm just going to create a
new folder here and call
ALS POS
this uh you can name yours whatever you
can think of some kind of structural
hierarchy if you want but actually I'm
not going to make a
subfolder in mine I'm going to import
now now and go to the folder where
you exported them and just highlight
both of them and say open and then
you're going to come through
here and you're going to import it onto
the ue4
mannequin and under Advanced I always
check use default sample rate since
these are 30 frame per second animations
and I'm just going to go ahead and save
that now we're going to retarget these
so you can select both of them and go to
retarget
animations you're going to look for the
U UE
FN mannequin the orange
one and you're going to select both of
these and select export animations if
you select this it's just going to
create ik ret targeters and all that ik
Rigs and stuff I think so just export
the animations we don't need that other
stuff and under
ufn
animations or wherever you want to put
[Music]
it I'm just going to put it in an LS
poses folder and Export and there you go
you have that now I'm going to open up
both of these and I'm going to do
something here because I think it's best
practice these aren't actual animations
they're just poses and so if you see
right here you see what it's doing right
there it's interpolating between frames
uh we actually want to just put this to
step uh this will make sure that it
doesn't try to interpolate it if you
don't do that you're going to get mixed
results because you're going to get uh
blends of multiple poses in some
situations so just don't do that uh set
it to
step and just for oops that's not what I
wanted to
do let me go back over here and just uh
for brevity sake I'm going to set this
one to step as well probably could have
done that right after importing but I
will so now we have our poses
and I am going
to go into the let's see the blueprints
folder and just open up the animation
blueprint and the first thing we're
going to do is just move this up here
you can put it wherever and drag off of
this and we're going to C cash it just
type in cach cached pose new save cached
pose I'm just going to call it motion
matching
pose and I'm going to say mm pose over
here and I'm not going to go into a
whole lot of detail on this I know most
of yall don't care anyway you just want
the animation system
so I'm just going to drag both of these
out here and right click and convert
them to single frame
animations and now you're going
[Music]
to uh make Dynam DC
additive and the thing to know about
this make Dynamic additive is over here
in the details you have one setting here
and it's mesh space additive if you
check that it'll be in it'll apply it
it'll make it in mesh space if not then
it's in local space we're just going to
click uh select this this is going to be
our additive right here and so this is
going to be our neutral pose and what
it's going to do is it's going to get
the difference between this base and
this additive and then it's going to add
it to whatever whatever we apply it to
and so we're going to apply additive and
actually this needs to be the additive
right
here and so since I'm actually going to
make this into a state I may as well
just uh go ahead and do that now what
we're going to do is we're going to
create a state machine
and we're going to call
this
overlay overlay State I guess and then
we're going to Cache
this this is going to
be
the overlay of
and then over here we're going to get
the overlay
pose now we've applied
it we're not going to do the mesh space
one we don't really need that I'm not
going to get into I'm not going to
create a real sophisticated uh layering
system uh we're just going to keep it
simple in this video
now we're going to cach to this and in
case you don't know what caching is it's
like saving something to a variable
except instead of a value we're saving a
pose into a variable we're storing it to
use it
later it keeps us from having to mult
multiply all this stuff and have it in
multiple
places and so we're going to call this
uh additive overlay local space for lack
of a better term I don't know what I
used in mind I probably had a I probably
used a better term for
that we're just going to call
this I'm just going to comment this uh
[Music]
[Music]
there we
go we'll set this up here in a
minute
so now we need to get our
additive overlay local
space and we need to get a copy of this
as
well and we're going to do a layered
blend per
bone and we could use a filter but I'm
going to use a blend mask
instead so go over to your skeletal
tree and press this gear
icon and go to blend profiles and add
blend mask and I'm just going to call it
upper upper
body and I'm going to
say let's see point 75 on spine
five
645 and
35.25 yeah something like that should
probably be fine you could probably
actually get away with
04 make it look a little more even
there and then on this clavical one
we're going to say one and we're going
to recursively set blend scale to
one and the same with this other
one and then we're going to say 75 on
this too and that's just because they
have that aim offset that turns the head
and if you don't it can it
can make it look like he's look like
he's turning his head around backwards
like something from The Exorcist and it
just doesn't it doesn't look very good
so we're going
to expand that and we're going to choose
upper body we want this to be in mesh
space rotation
blend uh for this local space right
here it just basically means that the
rotation blend it's self will be in mesh
space and like I said you can go over uh
some of my other videos to understand
that a little bit
better now we're going to make a second
one right here so right here what we're
doing is we're just L layering this over
the top of that now if we stop there
actually I guess we can go ahead and I
can go ahead and show you guys what it
looks like
so before I do that I need to plug this
up and you can double click this
to open it up and just stop that right
there and so you'll see this one he has
his hip hips Twisted we don't want that
one for because when he's running we
don't want his hips to be twisted also
uh in ALS the right foot was forward and
the back the left foot was back but in
this one the left foot leads and the
right foot is back on their animations
so you kind of don't want to use this
anyway because when you additively apply
that over the top of
it it's going to cancel they're going to
cancel each other out basically so I
mean we're not actually applying this to
the lower body anyway so but we'll go
ahead and use uh five and I always like
to go a little ways into five just so we
don't accidentally end up on the
previous
pose
so8 should
suffice and you'll
see
that he's holding the gun and now we can
go ahead and try this and see what it
looks like
and so you'll see how his hands swinging
a lot that's because in The Locomotion
animation that we're additively applying
over this uh that's how his AR that's
how much his arm is swinging uh and also
if you watch his fingers uh his fingers
are doing some funky stuff so we have to
uh take that into consideration too so
you'll see uh there's all kinds of
problems here but we'll adust those as
we
go so let me close out some of those I
don't know what all this stuff
is or why I
have okay this is the ALS so I can close
out of that one all right so anyway
moving on so now you know what that
looks like so what we're going to do is
we're going to
dampen that motion right there with a
second
layer right here and then we're going to
fix the
fingers so all we need to do
is we need to get this overlay pose so
right here this overlay pose this cached
one right here we're going to duplicate
that and we're going to set that right
here we're not going to use the blend
mask this time we're just going to use a
branch
filter and this is also going to be in
mesh space
rotation and we're going to
say clavicle
R that's our uh the first bone in the
chain of our right
arm so this one right
here so for now we'll just do it like
that
and now you'll see he's he's pointing
more straight
forward but there's a problem it's
completely stiff as you can
see and you see how his arm lags behind
we're going to fix
that and
also sometimes uh it looks funny
whenever he's jumping it just doesn't
doesn't look very
natural uh and also whenever we land you
see how hard hard that was his head went
way down but his arm stayed perfectly
out in front so we're going to fix that
as
well so for
one how this works
is one means that we're
100% uh playing this and we're ignoring
all of this
75% means we're 75% playing this 25% of
this gets
played so on and so forth 50 means 50
and
50 so I'll just show you if I do
75 now you'll see his arm is not so
stiff and it's moving a little bit
it still looks a little funny right
there how it drags behind uh it just
doesn't look very
natural also there's uh a problem
sometimes you'll see that his uh hand
respects the montages right there but
we're going to fix that uh sometimes
whenever he lands real
hard uh see his head still kind of bobs
down so we're going to uh we're going to
fix that and what we have to do is we
have to set these we have to make these
blend weights
dyamic and based off of certain
conditions we need different blend
weights in order to overcome those
problems but first let's go ahead and
fix the
fingers so I'm just going to duplicate
this one and we're not actually going to
put this one right here and there's a
reason
why it's because when we're playing
those montages they're played on this
slot so we actually want this to be
after that but we want it to be before
this just in case we ever do layer
something on this that affects uh
something that this could fix if we put
it after that then this wouldn't fix it
so we're going to keep it right
there so I'm just going to select all of
this and move it
over and I'm going to copy
this on the overlay
pose and we're going to use a branch
filter on this one as
well and we could just do it only for
the fingers but for now I'm just going
to do it for the hand
uh otherwise you have to you you have to
go in here and you have to put in every
single one of these fingers into there
and in actuality you probably want these
not the
metacarpal uh but
anyway
so I'm just going to say hand
right we don't need blend deps for these
the uh the blend depth in case you
didn't know uh the blend depth is how
many bones you want this to be faded
across uh
so uh oops I didn't mean to do that so
if you had this one right here it's one
uh which means 100% of uh this right
here uh gets applied on this layer right
here on this blend
mask but
um let's say I have this one right here
the branch filter this will make it
easier to
understand so if I set this to three or
let's just say I set it to
two then that would mean uh one
two so the clavicle R if this was if
this was one the clavicle R would be 50%
and then this one would be 100% And then
every bone after that would be 100%
if if uh I set the blend depth to
three then this one would be like
33% this one would be 33% and then this
one would be like 100% I mean uh this
one would be 66% and then this one would
be 100% And then every one after that
would be two so that's how that works so
anyway we
don't need the hand uh rotation to be in
uh
to be in mesh space I don't think it's
probably best that it is I think yeah we
may revisit that if it causes any
problems I don't think in mine I don't
think I I set that to mesh
space all right so now we start getting
into the more complex part of it
[Music]
so this is going to be the
overlay the additive
additive
overlay
weight this is going to be the
[Music]
additive over delay
strength and I'm just going to delete
these
actually and I'm going to actually no
I'm not going to delete those my
bad so I'll just set a default value of0
75 right there it should be if you did
it the way I did it those values should
have been retained in the variable that
we
created so let's
see now there's something here that I
need is pivoting no it's
uh so we need to account for just landed
heavy otherwise in some cases it causes
some some bugs oh the aim offset so over
here and enable aim offset we're going
to reuse this uh and for these uh
weights down here we're going to account
for that uh this will allow us to
prevent that lag of the hand whenever
we're Ro uh pivoting real hard if um
yeah so that's what we're going to do
I'm going to collapse this to a function
and let me see
actually aim offset threshold is what
we're going to call
it or
AO thres
hold and we're going to make it a pure
function and I'm just going to make it
thread safe it's already set to thread
safe so actually I don't need to do that
and it does need to be a return value
this right here it looks like it already
did did that for us that's cool we're
going to put this under the aim
offset now on the anim well not on the
anim graph on the event graph
uh we're going to handle these this
overlay
weight and this overlay strength
we're going going to do interp twos
float interp Twos for both of them
reason why is because if we change these
values uh it's just going to snap on and
off and we don't want that uh and
the uh on here the blend weights they
don't have anything that lets you add
interpolation from here so you have to
handle interpolation yourself that's
what the f inter 2 is going to be so the
current is going to be the same variable
that we're applying this
to so we're going from where the weight
currently is to whatever our Target
weight is and so we
need to uh store this Delta time
variable so just click out here and
promote it to a
variable and I'm selecting these and
pressing Q on the keyboard to align them
and in case some of you don't
know and now I'm just going to do
this and now I'm going to promote this
to varable and this is going to be the
additive
overlay interp
speed and we're going to use that for
both of them
I am going to refer back to my other one
here in a minute because it was trial
and error for me to get these values
just right and to figure out all of this
so it's not something I can easily do on
the
Fly and to be honest I don't actually
I'm not good under uh pressure like this
if you uh want me to be perfectly honest
with
you all right
[Music]
so yeah I know I'm nitpicking at uh
these little details right here it
drives me crazy I'm a little OCD I guess
all right so now it's uh time for me to
look back because uh like I said this
was trial and air all right so
right here you can see that I got that
uh can overlay aim
uh that's
actually oh okay yeah that's where okay
I forgot about that yeah so if he wants
to aim and he's on the ground and he
hasn't just landed heavy uh we don't
care about light lands we just care
about the heavy ones because the heavy
ones can cause that effect where the
head goes beneath the arm
uh if all those conditions are met then
we're going to this uh Target additive
overlay weight value is going to be one
otherwise
35 uh which allows a a lot of
Swing uh in the uh
well it makes the animation match less
of the overlay pose and More Of The
Locomotion pose while still maintaining
some of the overlay
pose and I go into more detail here I
say we are interpolating the weight
shift for the overlay if he is in the
air we want him to still be able to aim
but we need to reduce it because the ads
posee
clashes with the in air jump looping
pose this may not be needed later when I
create a hip fire pose that aims at a
lower position which should prevent that
problem while in the air and the reason
why is because he's aiming out dead
straight in front of them at a 90 degree
angle to his torso so any uplift on the
arm is going to make it do funny
things so that one's pretty uh
self-explanatory so we're going to go
ahead and create a function
here
um and that's can overlay aim right can
overlay aim it's going to be a pure
function and I'm just going to make it
thread safe just to be uh safe and we're
going to
add a output variable here leave it as
booing and rename this to return
value and maybe that at some later date
we want to use this in a Chooser and if
you want to use this in a Chooser these
are the requirements it has to be named
return value thread safe and
pure so we're going to do a property
access because this is thread safe I
can't access uh this reference right
here uh directly from inside of here I
have to do it from a property access so
we're going to scroll down and we're
going to look for
um
is let's see aiming
wants to aim sorry I forgot the name of
it I forgot about that so uh actually if
you go over into your blueprint and your
CBP sandbox character and you come down
here you'll see they already have the
enhanced input uh stuff set up for it
and they have this being triggered on
and off uh
so we don't have to worry about that we
don't have to set that up so if he wants
to aim
and uh he's on the ground so if we go
into our
states
and we get our movement
mode and we say it's equal to on
Grounded or on ground I mean
and is
pting uh just landed heavy and we're not
just Landing heavy
right okay so just landed heavy right
here under your movement
analysis we're going to do a knot off of
this
we're going to press that add pin to add
another pen and there we go we got that
now that's done out of the
way and so we can say select float off
of
this and drag this
out and this will be one and this will
be35 that's all we have to do for that
one let's see what was
my
default value for that on this
one seven okay sounds about
right so five is real slow 10 is faster
30 is really fast 60 is almost instant
uh so you you don't want it to be too
fast seven isn't too slow but it's not
too fast either 10 is in my opinion uh
just a little bit too fast but you can
experiment with those values if you
want and so that's already automatically
applied over here but this one we're
actually going to make Dynamic based off
of some some
values
so let me go
back so the
actual blend the actual amount of
blend during hard pivots which a hard
pivot will
be
when when we're
pivoting and we're not within the aim
offset
threshold and the aim offset threshold
right here I set it to 90 uh it is 135
by default but I set it to uh
90 and that seems to be okay
so
actually oh it's 115 by
default so you can leave it at 115 if
you want but I thought 90 was uh more
appropriate for our use
cases and so we're gonna get this and we
want
to reduce it
if yeah let me rename this to what I
named it over
[Music]
there is within AO threshold because
that makes more
sense oops don't just type in not and
press
ENT so if we're not within our threshold
and we're
pivoting so is pivoting right
here we're going to have the value 0.25
which is really low that means that the
strength is going to be he's still going
to be aiming in the general
direction but his hand is going to be
moving around a
lot you can make it stiffer if you want
but I found that a quarter of the
strength during hard pivots was uh
better it looked more natural to me
right and then we can do a can overlay
Aim so I did almost full
strength if we can overlay the aim uh
and the reason why is because I didn't
want a lot of bobbing bobbing around of
the hand during the uh jogs and you can
do it based off of State too if you want
um
maybe uh when you're idle you want more
of that idle Motion in there but when
you're jogging and maybe when you're
walking you want more of it in there but
maybe when you're
jogging you want less of it in there it
depends on how how stable you want the
character's hand to be during all those
different
interactions so that part is out of the
way this is this is the hardest part I
think so we've almost got this part out
of the
way so on this one I told you man my
mind is all over the place today okay so
if they are pivoting and they are within
the ambient I mean ambient occlusion the
aim offset
threshold then we want the interpolation
speed to be slightly faster fter than
seven you don't really need to do this
part honestly but I thought it was
better this
way and if it's not then we
want so I'll say
10 this is a little just needs a little
bit more space there
so and I'm kind of doing this one a
little opposite you could do it like
this one except plug this into a and
then have B10 but it's up to
you and so that's out of the
way I'm not going to comment mine but
I'll come back over here and let you
guys read this
stuff uh so we greatly reduced the blend
of the overlay strength and increase the
speed at which it Blends during pivots
so that it doesn't feel like something's
pulling at his arm you know from the
other direction and then right here we
reduce the and if you move your curse
over here and then click on that bubble
it'll do that and you can press this
button to make it go
away so we reduce the blend so it looks
more natural during hard pivots and we
increase the speed at which it Blends
into that reduced blend
so if you don't change the speed it'll
and it's a very fast
movement then it'll take a long time for
it to blend into this and by the time it
Blends into this that fast movement is
already done and over you see what I'm
saying and that's the reason why we
reduce uh this but we also reduce the
inter speed for for this right here for
the overlay weight itself it's not that
big of a deal because it carries a lot
of that Locomotion animation on on it
and that's the reason why I'm not really
uh messing with the overlay inter turp
speed here but you can do the same thing
over here as what I'm doing over here
but I didn't really feel like it was
that necessary
NE
so
anyway now we need
to
finish and that's where the overlay
State comes in and I'll go ahead and
show you
this so I'm actually not doing this
right here I'm using uh
0.8 on here and I don't have the
animation open but I can double click it
to open
and this is 0.8 it's where his hand is
pulled
back so that's the one I'm going to be
using for this one you can use one of
the other ones if you
wish and for the aiming I'm using 0.18
like we're already
using and then for uh this roll right
here you'll see I'm accounting for the
state weight I had actually forgotten
about that so I'm glad I came back and
looked um and when when pivoting hard we
need to ensure that the state is not
jumping back into the aiming uh State
until the ready
state has at least Blended a good bit
and the reason why is because if we
don't it'll it'll jump over here during
a hard pivot but then it'll just
immediately go back within like a frame
or two so maybe even the same frame so
anyway well not the same frame the at
least you know maybe the next frame but
we don't want that so uh that's why I am
getting the state weight of this state
here and I'm saying hey don't go from
this state to this state until this
state is at
99% and then right
here I'm just we want to return uh to
the ready state if we are pivoting real
hard or else it will look like the hand
is being left behind you know said that
before
so if we don't want to aim
or
um we are not within the aim offset
threshold then we will
return so that's what we're going to do
here let's see where did I hide
it so I'm going to just cut that and I'm
going to come into
here I'm make a state I'm going to call
it
ready and then I'm going to make another
state and I'm going to call
it
aiming and then on this state right here
[Music]
we're going to do a property
AIS and we're going to get the want to
aim we're going to do a
knot so if we're not wanting to
aim
or we are not within the aim offset
threshold
then we will return from the aiming
State back to the ready
state I'm just going to copy this
one and I want to put it inside of this
one going this
way I'm going to do an and off of this
one
I'm going to get a I'm going to get the
state
weight State weight
ready it should be the only one that
pops up because it's coming out of that
state it won't you can't get the state
to the one you're going to you can only
get the one that you're coming
from and if
that is greater than uh 0.9
then we will go into the aiming
State oh I did it let
me pull this back in
here we're going to set this one to .8
I'm going to copy that I'm going to
delete
that and then I'm going to come over
here and this one is going to be
08 let me make sure was it point
yeah8 and hopefully I didn't miss
anything
so that's a lot of setup
there let's see what it looks like
yeah
um so that's why I didn't set that to
mesh space you seen how the hand was
angled up at a funny in a funny way
that's why you don't want to do it in
mesh
space yeah see that looks
better so I'm aiming
yeah there we go if I do a hard
turn let's do a
jump and now let's aim and do a
jump and now let's do a vault
aiming and let's yeah let's do a vault
aiming and a mantle
aiming and now let's do it without
aiming and now let's do a a big one
aiming and now let's do a big one
without aiming
all right guys uh
so it went a little bit smoother than I
thought it was going to to be honest
with you that was a lot of setup there
all right so anyway if you found this uh
uh
useful let me see one
second I want to try a heavy land oh
wait I didn't take the heavy Landing
into consideration did I yeah we did we
we set up that it just seems like it's
still a little too rough on the heavy
Landing let me
see let me make sure I might have
overlooked it I don't remember if I did
or
not I mean you could
do you could do a nor here which is not
this or that actually I could have used
a nor on that other one too oh
well I can try adding that light one to
the equation okay maybe we did need to
uh do that for the for the light
but let's just see if that helps cuz I'm
not really sure what constitutes a light
uh Landing versus a heavy lending in
here I haven't really explored it that
much
yeah that looks a lot better all right
well I mean so I guess you know light
and heavy Landing any
Landing but yeah all right guys uh so if
you found this helpful make sure to like
down below and subscribe and I'll see
you in the next video

================================================================================
ARQUIVO: Unreal Engine 5.4 - Motion Matching_ Dynamic Additive Layering (Part 1.5) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

Just clearing up a problem I thought was a problem but really isn't.

Part 1: https://youtu.be/d_p1WhfPw5A
Part 2 (Optional): https://youtu.be/9UrMdkXZrMc
Part 3 (Aim Offset): https://youtu.be/fRw2YcyHzoM
Part 4 (Pistol Setup): https://youtu.be/zDZ8eatD6Wg
Part 4.1 (Slight Oversight): https://youtu.be/-73QaRYXpGg

Join our Discord: https://discord.gg/38ceaJ67Eu

=== TRANSCRIÇÃO ===

all right guys uh so I just wanted to do
a quick followup so you know how uh
before I was worried about this
stretching problem right here how
extended his arm was because on the UA
FN one it looks kind of bad I think this
has more to do with the way that the ufn
was designed and how low poly it is so
it is low poly and you will get some
funky looking stretching right here this
is more of a uh robotic uh character
with joint and sockets or ball and
socket joints right here and it's less
of a uh
humanoid uh organic style rig and so if
you have a rig like this that you're
using then yeah you might want to use
part two uh the techniques in part two
to fix this but if you're not
then it's really not going to be a
problem and you'll see right
here if I eject oh my God my mouse I
don't know what's up with it I need a
new mouse you'll see that there's no
problem here it looks fine
so yeah so anyway you can do part two
though if if you don't like this and you
want to reduce the amount of uh stretch
out in front that happens here then you
can follow up on part
two and uh I don't know what's going on
right here looks like the uh feed are
doing their own thing okay I think
that's only uh whenever I pause it yeah
so anyway as you can see here it looks
fine I just I didn't even think to
consider testing this on one of the uh
humanoid creatures or one of their human
creatures
human
creatures uh yeah I didn't think to test
it on them but yeah it looks fine uh so
anyway I'll see you guys in the next
video

================================================================================
ARQUIVO: Unreal Engine 5.4 - Motion Matching_ Dynamic Additive Layering (Part 2 - Optional) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

In this video I correct some of the Weight logic and the Layering Shoulder Weights.

WARNING: This part isn't actually necessary, the UEFN Manny makes it look like it's stretching. That's more of a problem with the weights and how it was designed (Test Dummy) and less about the Overlay, so this part isn't really needed....it should look fine as is on a Humanoid Rig, but if you have a Robotic like Rig, this may be needed.

Part 1: https://youtu.be/d_p1WhfPw5A
Part 1.5 (Explains why this part is Optional): https://youtu.be/NS-FpjzEb9M
Part 3 (Aim Offset): https://youtu.be/fRw2YcyHzoM
Part 4 (Pistol Setup): https://youtu.be/zDZ8eatD6Wg
Part 4.1 (Slight Oversight): https://youtu.be/-73QaRYXpGg

Join our Discord: https://discord.gg/38ceaJ67Eu

=== TRANSCRIÇÃO ===

all right guys uh so I wanted to do a
follow up on that video before I
released it this is going to be pretty
short so there was a few things that I
overlooked one was that during the hard
pivots if you hard pivot really hard uh
sometimes that hand comes really close
to the face and I didn't like that and
so this was uh my solution also you'll
notice that I actually uh turned these
into variables because I'm using them in
multiple places and I don't want all
this uh
logic uh well mostly the logic inside of
here because we're doing that land heavy
and land light stuff and the one inside
of
here it's
somewhat I mean it's not real heavy but
I don't want to I'm minimizing the
amount of processing that we're doing so
I'm just going to I'm just saving these
into variables right
here and I actually added the uh is
pivoting hard logic to the overlay
weight
itself as you can see
here
and if they're pivoting hard I'm
decreasing the
I'm decreasing it to 0.5 I'm still not
increasing the speed but actually I mean
I guess you could increase the speed as
well
so over here on the overlay the additive
overlay
strength when pivoting hard I increase
that to 0 five and when they're not when
they shouldn't
be overlay
aiming and they're in the idle state I'm
actually setting that to uh 0 five right
here and one uh if they are in the idle
state but they shouldn't be aiming and
the reason why is because the hand if
you remember the hand was straight out
in front right here and it wasn't
looking right so that's why I did that
whenever whenever we shouldn't be aiming
and we're running uh which would be this
right here we're setting it to 0 five uh
so that the hand isn't too close into
the body it may look little funny uh
during that
state now we could actually do treat
these as uh curve values instead and
have these curve values on the
animations themselves even though that
those are being motion matched uh those
curve values will still come out uh they
will be Blended together though so uh
that's one of the reasons why I'm not
doing it uh that way also there's a lot
of animations in here and going back and
doing that it would it would be a lot of
animations so anywhere I put the is
within aim offset or AO threshold I went
ahead and uh replaced that with the
Boolean value I did not do that on the
Chooser itself
though so yeah that's how that works so
there was also something else I did here
with
the upper body
layer I set the clavicles to only be
75% both
clavicles and if you look at these
weights I probably made some adjustments
to these weights I think I lowered this
to 75 and then this to 6
and4 and that's for the additive overlay
and the reason why is because even
though it does look cool whenever uh his
hand out in front is a little OV
exaggerated it causes weight
[Music]
issues without having it set up like
this it causes even with it set up like
this it causes some weight issues uh
that's mostly because of the uh mesh it
may not do this on your character
especially if you have a metahuman with
a
postprocessing uh
setup and the reason why is basically
because of uh the way that this arm is
being extended out in
front
but that's theas why I reduced the
clavicles
here and on this
one I just added a blend depth of uh
three it still has to start at the
clavicle uh but having a blend depth uh
allows it to still be
pointing straight
forward but with less of that uh problem
on the shoulder
because
before the shoulder the shoulder was
being stretched out this way uh and now
it's more being stretched out this
way yeah anyway I just thought I'd give
you guys a quick update on that before I
released the first part of the video

================================================================================
ARQUIVO: Unreal Engine 5.4 - Motion Matching_ Dynamic Additive Layering (Part 3) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

In this video we setup an AimOffset as a BlendSpace as well as applying Mesh Space additively to the lower body as well as a few other adjustments. At the end of the video I briefly discuss the process of making your own poses.

AimOffset Poses:
https://drive.google.com/file/d/1SACxudJuAlj3kHLPe1OAM53quOcRIh25/view?usp=sharing

Part 1: https://youtu.be/d_p1WhfPw5A
Part 1.5 (Explains why this part is Optional): https://youtu.be/NS-FpjzEb9M
Part 2 (Optional): https://youtu.be/9UrMdkXZrMc
Part 4 (Pistol Setup): https://youtu.be/zDZ8eatD6Wg
Part 4.1 (Slight Oversight): https://youtu.be/-73QaRYXpGg

Join our Discord: https://discord.gg/38ceaJ67Eu

0:00 Intro
1:28 Pistol AO Breakdown
4:30 Pistol Blend Space
10:45 AnimGraph Setup
15:30 MeshSpace Layering Setup
22:00 Poses And Mesh Space
27:20 Changes To Blend Weights
28:35 Mesh Space Workaround (Used In ALS)
30:30 Making the Poses

=== TRANSCRIÇÃO ===

all right guys uh so I'm back with
another video so when we're not aiming
we're doing the regular original aim
offset that was with this when we are
aiming uh then we'll use the other blend
uh pose now the speed of at which the
response of this is is currently only
limited to the actual Locomotion system
itself so if
uh I I'll investigate the turn and place
system to see if there's some way that I
can increase the responsiveness to so
that there's not a delay and he
immediately turns in place but right now
there's a delay and he doesn't
immediately turn in place and we can
only rotate the character so far uh
without uh him turning into like
a a pretzel so uh
yeah but anyway
seems to work pretty good and I got
about as responsive as I could and I'll
explain that to you so my original
thought was that I needed an a offet I
actually uh didn't need to use an a
offset it was actually it ended up being
easier to set up and more preferable to
set up using a blend space and so I
ended up swapping out the aim off set
that I did with the blend space and
there's less setup involved in it uh so
I'll go ahead and explain that to you so
I made these poses and any one of these
given poses is only rotated 75 degrees
in any direction so 75 left 75 up 75
down 75 right so on and so forth so the
thing about blend spaces is that
accuracy is important and that's the
reason why we use mesh space uh so mesh
space is important when you need
accuracy and that's the reason why we're
applying this in mesh space so on these
poses right here these will be down in
the description in a zip file uh you can
download them and use them or you can
make your own if you want uh so uh I'll
probably go over the general process of
making your own but inside of here right
now the control the modular control rig
is screwed up uh and the backwards
solver is screwing up the arms when you
bake uh stuff to it and we need to uh to
bake for that but anyway I'll go over
that near the end of the video uh if I
don't forget hopefully I won't but uh
anyway
so the important thing to know is that
uh is that all of these need to be in
mesh space and all of these need to be
set to the pistol CC uh which is the
center the center pose that's where we
start from and so all of these other
angles are just offset as Deltas between
this and that so that's how that works
uh with this setup
so what you're going to do is you're
going to select all of these and you're
going to right click them and go to
asset actions and go to edit selection
and uh property Matrix and then inside
of here you should be able to go under
additive
settings and change this to mesh space
and choose selected animation frame and
then right here what you're going to do
for the base POS animation is Select
this pistol CC one and then press that
back button and it's going to change all
of these to that even the pistol
CC we want the pistol cc to be as well
I'm not going to go into all the the
details of the math behind that and why
it is but just know that it's basically
uh 1 + one versus 1 minus one stuff like
that so it's it's actually basic
elementary math when you really get into
it there's nothing real uh mysterious
about how this stuff works uh they don't
use some Advanced technological
algorithm to somehow generate these it's
just basic math so uh anyway moving
on uh after you've done that you're
going to right click and go to animation
and select blend space right here and
you're going to create a blend space and
I'll just do this along with
you so you're going to go down and
you're going to look for the
ufn and I'm just going to say blend
space
uh pistol YouTube
here and then once you get this open
you're going to expand this so that you
have space here because of this annoying
problem where this window covers this
one but we need to drag stuff from this
window into that window uh it's really
annoying and so what you can do is you
can select all of them and drag them out
there and then okay that doesn't work
but anyway uh now you won't see anything
in the viewport right now and that's
because by default it automatically uh
set pistol CC the the one that I just
drug in as the preview base pose and
remember what I said about one uh 1 + 1
versus 1 minus one well uh when
you when you create
a an additive it gets the difference and
then when you apply an additive it adds
the difference you see and so if you if
you get the difference between pistol CC
and Pistol
CC and then you add that to Pistol CC
then you've just you you have zero
that's and that's the reason why you
don't see nothing because we just
canceled it out and so what you're going
to want to do is just type in idle
Loop and uh just choose the idle
standing Loop here and you'll see them
inside of here so it looks like you're
going to have to drag each of these out
one by one
and so LD goes in the bottom left Lu
goes on the upper right and
LC goes in the
center CD goes Center down CU is Center
up RC is Right Center
Rd is right
[Music]
down and Ru is right
up
now I actually forgot to uh enable this
snap to grid you should probably do that
beforehand but it's probably already too
late but if you do that then it'll snap
it to those
points uh I'm just going to move all
those one time just to make sure there's
no offset
because we do not want any offsets there
we want this to be perfectly zero and
oh okay so I kind of messed up here I
skipped some
steps so let me just bring these into
the
center and so what we need to do
actually this needs to be
-75 and this needs to be
75 and then this needs to be
-75
and we should probably move these over
into place because they're about to get
messed
up they'll get thrown out of the the
scene if you if you don't move these
in so I'm just going to
move these
in and then I'm going to set this to 75
okay it didn't do what I thought it was
going to do you can just say four and
four there we go
so this is your X and this is your
Y and all this should
be good and then this right here on mine
I went with a speed of five so speed of
one uh means that uh the change is going
that it's going to take one second
actually I'll just go ahead and uh show
you here okay well you're not going to
be able to see in here for some reason
but I just take my word for it that one
will will it'll take one second to get
from where you're at to where you're
going uh uh two will take half a second
uh four four will take a quarter of a
second you know so on and so forth five
will take a fifth of a second and five
seems to be good if you go above five
then it might look a little jittery even
with smoothing uh and you do want
smoothing
so again it looks like this got changed
I don't know
why so I'm just going to just like that
again and now you should see this and it
won't look right but that's okay uh
don't worry too much about that that's
just because we're doing this from the
idle pose and we don't have any of that
other additive stuff set up like we do
inside of
here
so that pretty much covers the
setup so
uh let me just close that of all this
stuff
here got too much stuff open
here most of them are the same window
open over and over
again
so over here where they have their aim
offset you'll see this stuff and you'll
see a dead blend uh right here or
actually actually right here and then
that'll be plugged into this so and so
forth we don't need the dead blending uh
and it does give some kind of
performance overhead so uh it's best not
to use it but you can just drag that
blend space out into
here and uh basically what you're going
to do is you're going to look for get
AO and you're going to select X for that
one and then on this pen you're going to
do the same thing you're going to select
y though
and then on this you're going to expose
it you're going to create a variable and
you're going to name that variable I
named mine blend space or BS aiming uh
you can name yours
whatever and that's pretty much it after
that I'm using a two-way
blend and you just type in two-way
two-way blend it should be the only
thing that pops
up and for the state weight to get the
state
weight you type in state weight and
you'll see two State weight aiming and
state weight
ready and we want the state weight
aiming you could use State weight ready
if you want if use Stateway aiming uh
when you are aiming it'll be exec in B
uh if you were to have if you were to
change this out for say State
weight ready then you could actually
swap that uh
so but I think it makes more sense to
use a state weight of the aiming because
we might expand our state machine later
and in case you don't know what those
State weights are you see this number
right here this
100% that's the state weight of the of
the ready State and uh and so we want
the state we of the aiming state which
is currently zero when we blend into it
it'll go from 0 to 100% based off of
this duration right here over 0.2
seconds it'll interpolate from 0% to
100% so because of that we're able to
kind of use this two-way blend mixed
with this state weight to just
automatically interpolate between those
and I didn't see any problems with it
but if any do creep up in the future
then you could swap that out for a blend
poses by bull and just say hey if this
is equal to uh 1.0 then that means we're
fully Blended in uh to that but you
could also say something like
uh
is is State blending
in oh well you can't do that you have to
do that from a a function so if you were
to do an on onupdate function right here
and I'll just show you then uh then you
have your context and you have your node
but anyway I'm not going to go into that
in this video and I'm going to reset
that and delete that function that it
created for
me so yeah so that's the the setup right
there that's why we're using the state
weight that's how we're getting our
state weight and that's why we're doing
the two
blend and so whenever we're not aiming
it'll it's going to execute a and so
that will uh play the original blend
space and when we are
aiming uh it's going to play this
one and so this allows you to swap out
the uh blend space during
runtime and I might I'm might go into uh
that well I'm more than likely going to
go into that in a later video
so so yeah I'm just going to turn this
into an entire series I
guess so this series is just going to be
a basic setup I might do a more advanced
setup and a later series but I'll have
to put some thought into how I want to
actually do this for the advanced series
The layering system is probably going to
be more sophisticated at uh
so there is one other thing I wanted to
do now that I have that aim offset out
of the way I'm going to go into some of
the other things that I
changed so what I did do is I got this
and I duplicated
it and I said this is going to be mesh
space because mesh space like I said
it's accurate and so for the lower body
we actually want to apply this in mesh
space
uh because what it does is it actually
graphs some of that pose uh that for the
lower body mostly right now just for the
pelvis and the Torso and so uh if this
one if the Torso or if the pelvis is
lower in this pose then it'll show up in
here if we do
this so it makes it look just a little
bit uh more natural in my
opinion and it allows us to adjust to
the actual offset of the
pelvis so for this to be a mesh space
you need to select the make
additive uh make Dynamic additive and
you need to check this and then you need
to swap this out with an apply m space
additive so I'm just going to delete
this because I've already done it but
now I'll go ahead and explain this other
part to you so you know we're doing a uh
layered blend per
bone and we're using Branch
filter uh it's just easier to use Branch
filter than it is to actually go through
and set this up and also I don't really
want like 50,000 blend masks in here so
you know to avoid that it's just easier
to do it this way because I mean you're
basically achieving the same thing
so uh this one's going to be the
pelvis and and these are going to be the
thigh L and thigh R I'm just going to
copy that and paste it replace that with
an R except these are going to to have
-1 blend depths and that means that
that uh we do want the
pelvis but the thing the thing
is is the thighs are connected to the
pelvis just like the spine and so if we
say pelvis uh blend everything onto the
pelvis well now the legs are being
Blended too so if we want the pelvis and
the Torso but we don't want the thighs
then we have to set we have to include
the thighs and say hey we want a blend
depth of negative 1 that tells it to
exclude those uh bone
chains
so that's how that works and you do want
me space rotational
blend and that's basically it for the
setup now the motion matching is going
to play on the legs
but the mesh space additive is playing
on the pelvis and the
spine and then of course we replace part
of the spine with a local space blend
and then we replace the arms
completely
afterwards now you'll see I have a note
here normally we would just apply the
entire thing in mesh space on the lower
body but there's a problem
it only shows up during 20°
turns let me see if I can recreate
it and I think it has something to do
with the leg ik I'm not 100%
sure um it's hard to uh reproduce but it
is there the leg will do it'll go
Haywire it'll turn completely off at a
90° angle to the left the left leg will
if I can get it to do it
let me see I think I have to aim yeah
there okay so it it only seems to do it
when aiming and this is probably why an
ALS when you're aiming it it puts you in
walk mode because when you're jogging
and you're or running or sprinting your
legs are moving at extreme angles and so
they're far more sensitive uh to these
yep there it goes uh so they're far more
sensitive uh to the these additive
overlays so what I'm going to do is I'm
going to press this button and say
follow uh Target
actor and now that will allow me to
place the camera where I want and it'll
stay at that offset from the
character and I'll scrub through
here right there so that one was
actually pretty fast but you see
how it went out sometimes it's a lot
more
obvious but yeah it did some funky stuff
there
so I did go back
and uh I I did disconnect leg ik
thinking that leg ik might have
something to do with that it does it
less often when leg ik is off but it
obviously stilles does it as you can
clearly see
so so yeah that's the reason why we want
for now at least uh until I investigate
this further we're going to want
uh the legs completely
untouched now another thing you might uh
that all here's some other things I need
to go into uh depth with you guys
because this is important for me to
explain the it's about the poses
so so these poses uh I did have that at
08 and I think some of you are probably
probably still using this pose but in
actuality we
want1 and in mine that's what I'm
currently using
so I'm using 11 now and that's because
if
we well let me let me give you a really
good example actually
so let's just ignore that one problem
with the legs during mesh space uh for
those 20° turns I don't know why those
20° turns cause that but they do uh they
just clash with it wrong so what's
happening whenever this happens is
you're playing a jog Loop and then a 20°
turn left or 20° turn right gets
overlaid or blended into that and so the
leg is back in one and the leg is down
in the other and then we're also
additively overlaying this in m space
and all that combined is what is
actually causing that leg Buckle issue
so
anyway I'm just going to show you what
this looks like
so right now it looks fine uh the so as
you can see in the idle pose the left
leg is forward and the right leg is back
that's how the idle pose looks if you
open it up outside of the animation
blueprint but if we set this to 08 and
we're applying mesh space you'll see
that suddenly the legs
are are
straight now I'm not going to go into
too much depth about this because I
cover this in my additive or my Advanced
animation series which mostly Co covers
additives but it goes in it basically
Bulls down to additives are applied now
if we look at point8 you'll see the
right leg is forward and the left leg is
back and if
we come over here and we disconnect that
mesh space you'll see that their Idol
has the left leg forward and the right
leg back so it's the opposite basically
what's
happening is we're getting the
difference between this neutral pose and
this pose and it's saying okay the left
leg in the neutral pose is right here so
we're getting this angle right here and
we're going to add this angle right here
in this angle right here uh to this
overlay pose and since the
are
opposite they basically cancel each
other out so that's like I said this
stuff boils down to simple elementary
math there's nothing real complex about
it uh you just have to understand that
this is math
and uh it'll make more sense so that's
why neutral poses are uh necessary
whenever you're applying this on the
lower
body uh during running especially uh if
you're in an idle pose then you can OV
exaggerate the pose but you need to make
sure that you do it in such a way that
it actually respects
the uh the pose that you're trying to
overe exaggerate so if you wanted to
modify this idle pose if I wanted to
modify this idle pose uh this is uh
probably what I would
do I would open up uh well I would go to
the to the idle Loop
pose so here's the idol Loop pose right
here and I would get that first
frame where he's in this pose right here
and I would go up here and I would go to
create asset current pose and I would
make a pose
uh from this and then I would modify
that pose to be uh to to be in the
stance that I wanted it to be and
then I would use that
pose right here in the in the uh ready
State whenever he's an
idol and that would allow me to make his
legs more spread
out but then you have to remember that
you you have to find a way to come out
of
that uh without any problems
so yeah anyway it's uh it's a
complicated uh subject but that's that
basically uh Bulls uh Bulls it down I
think that's it I think I've covered
everything here
so oh I didn't over
this so when he's idle I don't want I
don't want the overlay strength to be
applied so during idle I have that set
to zero so that the hand moves around as
much as possible uh so when he's not so
when he's not aiming when he's in the
ready State and he's
idle then I don't want the strength to
be applied
when he's not
aiming and he's not an idle then I only
want it to be applied
50% and of course like I said before
this is just to make to stabilize the
hand right
here this right here I disconnected it
now that we have the AIM offset we don't
need that hard pivot logic uh and this
greatly simplifies all of this and makes
it easier to understand as
well so yeah that b that's basically it
I'll see you guys in the next video all
right guys so before I go uh I did uh do
an experiment and this seems to work
fine
actually so what I was so what I decided
to try out uh just from it's just an
experiment really and uh this is
optional you don't have to do it but I'm
getting the future velocity I'm getting
the vector length of that I'm mapping
that from 0 to 500 because 500 is Max
Speed uh now I'm R mapping that from a
range of one to
zero and you can I'll just go ahead and
show you so you can get Vector length
and in actuality we only need the XY
Vector length so get the XY it's a
little bit more performance
friendly and then we can do
a map range clamp uh and
we and so what this is saying is that
when our speed is zero the value will be
one when our speed is 500 the value will
be
zero and then we did a two-way blend
here and so whenever this value is zero
we're going to be blended into this
right here but whenever the value is one
we're going to be blended it fully into
this and what that does is it it
prevents that issue with that that leg
during the Run aim turn left or turn
right
20° uh so that's a solution optional you
don't have to use it completely up to
you uh but yeah so I just thought I'd uh
share that with you
guys before I ended the video uh after
this part there will be an
intro a short explanation on how to
create those poses uh right here and
I'll see you later all right guys sorry
so before I go I did say that I was
going to explain to you how I made those
um poses and how you can make them
too
so this is what I did I went into this
uh compilation of poses here and I got
this pose right
here and I went up here and I said
create Set current
pose and I'm just going to place this
down in
here and I'm not even going to name it
actually so I have this pose and I named
this the pistol
CC and that's important because we need
that pistol CC pose we could have
actually uh referred to this one uh and
that specific frame that this pose was
in rather than creating uh and having an
extra one but it was just simpler for me
to uh explain to you
guys doing it that way so duplicate
it open it up name this one Whatever you
want left Center for
example and then you can go into here
and say edit with FK control rig and say
bake to control rig and then at the
world origin over here you'll see your
character and skeleton and you're going
to uh I held down control and pulled
back on the mouse to zoom out so I could
see frame two and that's because
whenever we go into here we want to add
an additive section and by default it
makes the additive section from zero to
one but we need it to be one frame
longer than the actual animation because
there's a problem with this
if you can't key that last frame in here
and I'll go ahead and show you so if we
have it like this and I come over here
and I press this button right here okay
it looks like they actually fixed that
okay
so they they fixed that part of it but
if you don't key that last frame or then
it it will not blend right here it'll
it'll snap out of that pose and so if
you just want to make a single pose and
not have to add an extra frame uh key
down here on the end then it's easier to
just extend this one frame because they
still haven't fixed that part of it yet
so on this additive uh layer that's what
we're going to make our alterations and
the reason why is because if we make a
mistake that we don't like we can come
back here and we can just delete this
and then we can recreate it uh we can
recreate it right here
so that's important to note so this one
is currently active I have it selected
and now with that selected and this
enabled right here so it automatically
Keys the frame when we make changes uh I
can start making my
changes and so let's see so we have five
bones and I need those five bones uh to
be distributed across uh
degrees so if we say 75 divided 5
we get 15 so that's 15° so I'm going to
set my angle to 15 degrees and then on
each of these bones I'm just going to in
World space not in local bone space I'm
going to uh rotate each of these 15
degrees and that's how I did it you can
do it however you want so that was
basically uh the gist of it for the up I
did five on every bone I did 10 on the
neck and the head bones and then I did
50 on the arm uh that's both in the up
Direction and in the down Direction
after you do that you can save it close
it and if you need to go back and make
uh changes to it you can go to edit and
sequencer and you can open that last
level sequence you were working in and
you'll notice uh that uh the frames are
still there so
it actually doesn't look like it keyed
those frames did it key those
frames don't look like
it it did key those frames it just for
whatever reason it's not showing a key
there okay anyway so there's keys there
they're just invisible for some reason I
normally press this button right here uh
just so I I can see that there's a key
there uh but
anyway that's
basically it I'll see you in the next
video

================================================================================
ARQUIVO: Unreal Engine 5.5_ Motion Matching Bug (Possibly Database Indexing Related) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

Download the Compiled Demo: https://drive.google.com/file/d/1fEVGe-VowC6pv4cvVsIViT49qtqUXjfE/view?usp=drive_link

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Project Documentation: https://unreal-devop.gitbook.io/gasp-dynamicadditiveoverlay

=== TRANSCRIÇÃO ===

All right, guys. So, somebody pointed
out to me that I was switching modes uh
on accident. Uh it be it's become a
habit. Instead of right clicking when I
get into my project, I middle mouse
button and switch modes. Uh so, I wanted
to to show you this because this still
this is still a bug uh in the engine. Uh
something to do with database indexing.
It has to be. Uh that's the only uh
explanation I can think of. Uh but
anyway, so if I uh in this mode, if I
spam the left and right keys, you'll see
he's teleporting everywhere,
right? Yeah. So,
um I'm going to exit out of that and I'm
going to come back over here and I'm
going to launch it and I'm going to
launch a compiled
build. All right. So, if I go into the
same mode in here and I spend the keys,
you'll see it no longer
teleports. So, that that has to be a
database indexing bug.

================================================================================
ARQUIVO: Unreal Engine 5_ Copy Motion Intro Part 1 (With Project Files) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

An intro to Copy Motion and how it works in theory as well as a demonstration.

Part 2: https://youtu.be/0r30muaB7Dw
DISCLAIMER: This is just my take on it and I am not claiming that this is the proper way to set it up or use it. I very well could be making some mistakes here.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

Project Files: https://ko-fi.com/unrealdevop

Original Code Release: https://eoshelp.epicgames.com/s/article/Using-Copy-Motion-node-for-layering-with-Motion-Matching?language=en_US

Plugin Version Provider (IamMe @STK_Oxy): https://forums.unrealengine.com/t/copy-motion-node-questions/1948708/2

00:00 Intro
02:12 Copy Motion Release
03:08 Pose History
04:27 Copy Motion Breakdown
06:00 Leg IK
07:10 Copy Motion Breakdown Continued
12:38 Copy Motion Using Baked Curves
19:22 Debug Draw
23:18 Target Curve
25:00 Additive Exploration
30:45 Layering Setup
36:30 Left Hand IK
37:30 Aim Toggle and Data Assets

=== TRANSCRIÇÃO ===

all right guys
so first off and foremost I'm going to
uh give you guys a disclaimer uh I'm not
going to claim that this is how copy
motion was meant to be used or set up uh
I don't know exactly if I'm even setting
it up properly uh so I'm just going to
put that out there but you'll see these
are the results that I get and I'll
explain them uh if I turn uh copy motion
off it's pretty obvious what's going on
right here when I turn it off versus
when I turn it on uh that's just a stiff
static pose and I'm overlaying uh this
co uh this motion onto it in a
controlled
manner uh so you'll see this is what it
looks like
normally and this is just the aiming
pose actually so when whenever you
overlay the pose onto the or The
Locomotion onto the pose uh then it it
offsets how he's aiming so that's the
reason why he's aiming down uh whenever
I have copy motion on you'll see that it
moves a bit differently more
dramatically I think uh and I'll explain
that to you as I go from behind you
really can't tell uh when it's on or off
in this uh scenario uh but it's pretty
obvious whenever it's off right here
because you can see the gun moving
around in his hand a little bit more
realistically so versus that really
stiff pose that I got so I will go ahead
and tell you now that I believe this
probably works better uh or it's at
least more visible whenever you're
working with stiff
poses whenever I'm not aiming I'm
actually uh applying an add a dynamic
additive uh to the upper body and local
space
so first off if we come over here to
this website and the link will be down
in the description uh they go over this
right here now you'll see something
right here and I picked up on this right
off the bat because it didn't make sense
to me I do believe this was an error on
their part when they were putting this
together for the uh piter
uh so he's applying this item pose
additively to a dynamic additive that's
not actually how you apply additives you
have to apply if you make something a
dynamic additive you have to apply that
additive right here to a base pose which
would be the item pose uh
so later on they corrected that as you
can see right here their item pose is
the base pose and their Dynamic additive
is the additive uh so one thing to note
from this uh when you first look over
this you're probably going to miss it
but you'll notice that right here the
pose history is being output right here
to this cached pose and that cached pose
is being used right here note that the
pose history has to come before the copy
motion uh that kind
makes things a little bit more confusing
uh especially whenever you're working
with the game animation sample project
because in the game animation sample
project the pose history comes after the
root offset root bone which preferably
should be at the end uh but in this case
uh I did experiment and I moved the Post
history over before the copy motion and
left the offset root bone behind it as
you'll see in this project right here
the offset root bone is still right here
but the pose history I moved over here
uh so another thing you'll notice is
that right down here in the lower right
hand corner you have this word that says
pose history it's not giving you the
title that's actually a tag that was
applied to it so if you look over here
in the details panel you'll see under
tag There's an actual tag here called
POS history that is actually used right
here so if you check this box which is
unchecked by default then you'll use the
base pose which is this right here and
what this is basically doing is it's
basically doing exactly what we're doing
right here uh so they're making a
dynamic additive and then they're
applying that additive to the incoming
pose the difference is is that they're
not applying that over the entire
animation they're only applying it to a
specified bone and then we have the
option to offset the uh translation and
the rotation before that Delta is
applied and we have the ability to scale
down and scale up that Delta and then
here at the end you'll see that we have
this target curve name and we have to
fill this out because it gets captured
by the leg ik so for the Arms by default
they have in rotation angle X which is
preferable for the arms you're going to
want it to uh be left like that for the
arms if you were doing this with some
other bone or whatever then it may be
possible you might want to try
translation X YZ rotation angle XYZ so
on and so forth but uh anyway so I have
these set up in data assets right here
uh so that we can just update this as
needed uh and and in
actuality I'm actually updating that
right here on the update animation event
which which is a tick uh that runs on
the game thread so over here in the leg
ik you'll see that we have our ik or
virtual bone handar set as the ik foot
bone and for the FK uh foot bone we have
our hand R and we only need two bones in
this slm if you set it to three it'll
expand it from just covering the arm to
also moving the clavicle as well which
is the shoulder and you probably can't
see that but if I expand this window
here if uh if it's set to two it's only
going to be rotating these two bones if
you set it to three it's going to rotate
this bone this bone and this bone and if
you set it to four it'll start rotating
the neck bone as well uh so just be
aware of that you're going to want it
set to two
uh the thing I don't like about that is
when ever uh you use leg ik with the
arms it has a tendency of pulling the
hands inward uh towards the shoulders uh
that is something I don't really like
about it uh unfortunately that's kind of
a drawback but you can compensate for
that uh on your translation offsets
right here
uh so yeah I just covered a lot in a
short amount of time and I'll try to
explain everything as best I can as well
as I know it you are supposed to be able
to
delay uh this right here now I looked
through the source code and when the
delay is anything but uh zero then in in
source code they're actually um getting
the Post history and they're getting the
time and I'm not going to go into all
the details of that you can look through
their source code if you're uh really
that gungho about uh seeing exactly how
that works in the background uh but
anyway the point is is that if delay is
is zero then it just takes the frame
from uh the current frame and it uses
the current frame rather than some frame
uh from the pose
history uh now the thing about the delay
is I haven't figured it out quite yet I
don't actually know why it doesn't seem
to be working uh if I set it to anything
but zero there's a slight offset but it
doesn't actually seem to be delaying it
which means that I may have something
set up
incorrectly I'll have to get back to you
all as soon as I figure that out now
something to note here is that I added a
bunch of Bones and I just added those
mostly for testing uh the important
thing to take away from this is that
anything that you're uh referencing in
here whenever you have this uh post
whenever you're using Post history uh
that also needs to be in the collected
bones list so this collected bones list
is fetched in source code and they grab
uh they grab this
information from this uh collected bones
array uh in source so it's important to
note
that uh so let's talk about how this
actually works so what it's actually
doing is it's creating a Del
or an additive between the base pose
reference and the base
pose the Basse pose reference would you
can actually think of that as the actual
additive that's coming out of here and
you can think of the base pose itself as
the base of the make Dynamic additive uh
because they're getting the Delta
between those in much the same
way and then they're applying it at
atively
to uh the bone to modify so the source
bone is the bone to copy the motion from
and that's going to be what they're
going to get that Delta uh for between
these
two and given the Post history so on and
so
forth now the copy space itself is going
to
determine uh the orientation of
things so if you don't set a a a a bone
space
to copy this from then it'll be copied
in component space and basically what
ends up happening is it it ends up
cancelling everything out you end up not
getting any effect from it if you do it
that way in some situations it may be
okay uh in fact it may still work if I
set this apply space to components space
but if I set the cop if I don't have the
copy space and spine five space then I
know for sure it won't work uh so it
still works as you can
see uh whenever you don't apply it in
spine five space but you'll notice that
now the hands are kind of in a different
position uh that may be because of these
offsets that I have here so since I'm in
the relax State before I compile that
I'll set I'll I'll copy that and then
I'll uh reset it okay so it doesn't
actually look like it's working
okay so we're getting some mixed results
there uh let me just try compiling it it
that may have been because I changed
it let's see if I compile it
okay no it's still not working yeah so
see you'll see it's not doing anything
here uh
so yeah I didn't expect it
would so normally it whenever you're
working with the hands you're probably
going to want it to be in spine five
space and if you don't have five spine
bones then it would be like the third
spine bone whichever is the the top
spine bone whichever spine bone is at
the very top uh so if you're not use you
can use this without motion matching
guys uh so it doesn't work without
motion matching so if you uncheck use
base pose uh then it'll ask you what
bone do you want to modify and what
space do you want to apply it in uh this
space is going to be in reference to the
reference frame uh
so that's this one right
here I'll explain this part of it uh
later and and why uh we do
this but you'll see this curve prefix
right here it says chest space uh that
means that it's going to look through
the animations uh or the the pose that
that's currently playing and it's going
to see if there's a curve there called
chest space so if we come over to an
animation uh you'll see we don't we have
some curves here but none of them are
called Curve
space
uh but if I come over here to the
animation modifier and and that's under
window animation data
modifiers and then you can dock it over
here like I did but if you go to add
modifier you should see a layering
motion extractor modif
fire and under here you can name the
bone space to uh chest space for
example and then you can you can change
uh some other stuff you can apply a
filter some mathematical Uh crap here uh
normalize it so on and so forth uh your
sample rate absolute value yada yada so
anyway you can just go over here and
apply
it and and it
says invalid reference bone
index bone name chest
space bone
name the bone name is spino
uh yeah okay so that's that was the
first time I tried to apply that guy I
so I don't know exactly what's going on
here maybe I am not supposed to uh do
that okay so it seems that I had a
misunderstanding there you'll see it did
copy the translation and the rotation
into these curves
here so it may be that spine
05 yeah so
anyway I'm not exactly sure how you're
supposed to use that because those are
all separate and this only accepts a
single oh curve prefix okay yeah so this
is wanting the the prefix of the curve
so if you were to apply
this then spine 05 would be the
prefix and then it should find it it
should find that so that should work in
theory uh it would grab all these curves
that are prefixed with spine
so that's how you would probably use it
outside of uh motion matching but inside
of motion matching we have this post
history here which will track all these
bones and
yeah so I do believe now I increased the
poe count and I increased the RO Bild
and recovery time thinking maybe one of
those had something to do with uh the
ability to delay the thing is is that
the de the the delay will not be able to
delay it any more than what is actually
being tracked from my understanding
that's what I'm assuming anyway and that
may be why it's uh not
delaying
uh yeah I'm I'm just not exactly sure on
that part of it uh guys I'll have to get
back to you maybe I maybe somebody will
uh uh figure this out and drop it down
in the comments that would be nice if
one of you guys figure it out I'm
passing the torch of this on to you guys
I'm going to have the uh this project
will be down in the description if you
want to download it I assume that most
people will so I'm just going to
reenable this right
here and now we're using uh the base
pose and and so when you're not using
the base pose those Deltas are taken not
between the base pose reference and the
base pose but instead it's the Delta is
going to be taken between the base pose
reference and whatever curves it's
picking up uh so that's how it'll
calculate the Delta if this is unchecked
but either way it's basically the the
same concept you can think of it as
making a dynamic additive and applying
it onto a specific bone uh with the
option to
offset the uh
translation before the translation Delta
before applying the translation Delta um
and then you can scale it
too and so I'll I'll demonstrate that
here in a
minute let's see
so the pivot is in local
space uh to use when applying the
rotation any nonzero value will cause
the target bone to rotate around the
pivot effectively introducing additional
translation
so it's going to wherever that pivot is
it's going to rotate it around that
pivot uh and that pivot
that pivot can be offset as
well that's what I'm assuming so I'm not
it it just dawned on me that I wasn't
exactly sure what it meant by that uh
rotate around the
pivot because it's not talking about the
bone
itself uh so that brings me to the
debugging
options uh a. anom node. copy motion.
debug that'll show you this and you'll
see these little things and now you
you're probably wondering you're
thinking well what the hell does this
mean because they both both of these
little gizmos look exactly the same and
you'd be right they do look exactly the
same except one is smaller so the
smaller one is actually uh where it's
being moved to and that line between
them uh just basically
represents the offset of them it helps
you visualize how things are being
offset and rotated and so if I come over
here and I just dock these side by side
I'm going to browse over here we're in
the
aiming uh the ready State yeah so I'm
going to dock that right there and I'll
just add some translation to
this and so you'll see as I move this
around it's actually this translation
offset is actually a rotator uh and
we're actually basically kind of
rotating it and that is actually the
pivot that's what it means by pivot so
this right here uh is where its original
location is the
pivot
so and then and then you'll see
this and so it's kind of weird it's kind
of
janky uh if you think about it but if
you're real careful you can get some
decent results out of it I suppose uh
now from my understanding they used this
for all their little items their item
overlay poses and each item stored a
data asset which was probably similar to
this and and so each item had different
like information
on how it was going to uh scale down the
the the movement that was being copied
over and how you were going to reorient
it right here and you'll see I have some
really low values here and so if if I
Inc I can increase this as much as I
want or decrease it and only when it
moves from zero to one do you see any
difference uh and that's the reason why
I was saying um I don't know what how
it's working if I'm going to be honest
um but it seems to be important for that
motion so if I just set it to zero let's
see if it's
still so I'll turn it off and I'll turn
it yeah so you see his hands are not
moving and if I just turn it up just a
little bit now you'll see they're
moving so yeah it's kind of weird so the
the delay has to be some nonzero value
uh greater than zero it has to be some
value greater than zero or it simply
will not work um it doesn't matter if
it's zero or negative Z it just doesn't
seem to work as you can
see but as long as it's greater than
zero it seems to work I don't know why
um I think that's a little weird I'll
look into that guys the project will be
down in the
description now the target curve uh
scale right here U so what the target
curve scale does let me come back in
here and I'll show
you so the target curve
scale is actually the the amount of
rotation angle on the X that's applied
from this
and from this pose we're copying
over and that controls the twist
offset which basically controls the
rotation of the
arm uh it's actually controlling The
Twist of it which is basically in this
case the rotation of it
so if I dock this back over here
here and I come over here you can see as
I move
this it rotates it
around
so
yeah so that actually ended up turning
out pretty good on the arms uh I was
actually quite surprised because I been
trying to get it to do that guys for
like two or three days and uh now
suddenly it's just working uh after I
set it up in this data asset so that
entire time I was changing these values
by and um and that was the reason why I
was probably having most uh so many
problems um so yeah in some situations
you may not actually feel the need to
use that copy uh motion but in such a
situation like this
uh where without it you see how stiff it
is in such a situation like that it is
actually pretty useful um and it adds a
lot of dynamic motion back to the hand
uh and this is a two-handed weapon too
so
um yeah I'm just kind of scaling these
values a little bit differently here so
if I didn't have those values you would
see it would place the hands way the
hell up here
here I don't
exactly know why it's doing that because
I'm copying it from uh spine five space
and then I'm applying it in spine five
space and somehow it goes from being
over here to being way up here and it
probably goes back to that concept
of because I haven't really given that
much thought but the concept of this
basically being a dynamic
additive so that's something I'll have
to kind of like brainstorm about um to
try to WRA my head around because
additives can be pretty confusing and
it's not something I can just like think
up of on the fly but I'm
assuming that it has something to do
with
that so
um the in pose has his hands down here
by a side uh
but the idle
pose and we can actually so this is the
end
pose so if I enable that that's the end
pose and I enable that that's the
current El pose his arms are right here
and so basically I'll tell you what's
happening actually since this is an
additive
it's getting the difference between this
and this and it's getting that in chest
space and applying that in chest
space which in
turn gives us this since this since it
goes from here to here we're going to
start here and we're going to go to here
we're going to go from here to here the
same amount as we went from here to here
you see so I do believe that's the
reason why uh I only just now it only
just now dawned on me that that was the
case so let's go
back and we'll say
okay the base
pose yeah I mean that's exactly how it
works with an additive animation guys so
like I said it it it is treated like an
additive so
maybe and it's copying the motion of
this because if if you
look okay so it's kind of let me do
[Music]
slowmo
so so if you
look uh the red one there's a lot of
motion in there on the on the red
one but the green one
is a static
pose and what's happening is the amount
that the red hand is going back and
forth in relation to the
green uh that is what is being added
back to the hands in this
case
and the distance as well between the
hands from the spine so that basically
breaks that down which means
that and you'll see how much his hands
go back whenever he stops and that's
because this right
here uh left and went forward but this
other one stayed here
um so that's an unfortunate side effect
of that
but that basically I think explains it
and I think now I actually understand it
a little bit better
myself after having explained
it and so you'll see it does clip in
just a little
bit but not too
bad so
anyway I know it's confusing that's why
I really didn't want to do a video on it
because I was actually pretty confused
but actually
I'm glad that I did do the video because
I believe I understand it a bit better
now uh and setting this up was fun
because it makes it easier to test and
experiment with the values that's what I
love about data assets um if you're
unfamiliar with that other project that
I did the animation system that I set up
U I used the data assets like crazy in
that one so uh I've really grown to like
data
assets um anyway guys let's see let me
make sure oh I never explained this well
okay so what I'm doing
here is I'm just layering this M4 pose
um
[Music]
oh one second let me so I'm just
layering this static M4
pose
onto onto the uh the motion matching uh
pose which is coming out of this motion
matching it's going through the lean and
then it's doing the Post
history yeah so I'm layering that M4
pose onto the motion matching from the
spine up and I'm doing it in mesh space
rotation blend the reason why I'm using
mesh space rotation blend is because it
makes it respect this more if you
don't use mesh space rotation blend then
the rotation of this that's applied on
here will be in local space it'll be
local to the same bones in this uh pose
and what that means is for
example if I were to rotate this 45 Dees
from where it's at now that would be uh
a local space
rotation you see and so I rotated at 40°
from where it was in relation to that
pose uh that's
basically uh what I mean by local
whereas if I were to rotate
this in relation to where it is in the
world
40° well then you'll see the hand
actually moved down and not up uh in
order to do
45° and that's assuming those axes were
the same axis and they weren't okay
so let's
say I rotate it on the blue
40° then it would move the hand up like
that that's local space uh now if I do
World space and I rotate it positive 40
on the blue then it rotates it to the
right
instead and that's World space so you'll
see the difference in rotating it along
the same axis by the same amount in
different spaces
so mesh space rotation blend is
basically like me rotating in World
space uh here
whereas uh having this unchecked would
basically be like me doing this in local
space so that's the best I can explain
it to you guys this gives us a really
stiff uh stiff pose on the spine one and
up and then
right
here I'm doing it again but I'm doing it
in local
space and I'm excluding the upper arm
L which is and the upper arm R which is
this bone right here but I'm
keeping uh from the spine from spine one
up to the head and out across the
shoulders so I'm keeping
that right there and what this does is
it brings in more of that motion back in
which loosens up the pose and that's the
reason why whenever uh I'm not aiming
and I turn this off that's the reason
why it still doesn't look bad um even
though it's just a pose that I'm because
that is actually being
dynamically
layered inside of
here onto the
upper body the spine and the
shoulders and that is being applied in
local
space if I were to apply that in mesh
space that's what it looks
like yeah so
uh it doesn't it doesn't look quite as
good
so let's
see right here if we want to
aim I'm not applying that Dynamic
additive instead I'm just keeping it I'm
just applying this stiff
pose right
here and then this comes over here and
that's what copy motion gets applied to
followed by the leg ik which is actually
used for the
arms and if
we press F on the keyboard it disables
copy
motion which sends us back to this L
pose which is
this before copy motion was applied
and that's basically
it um I'm just going to remove that I'll
probably move all that stuff down before
I put it up uh right
here I'm applying two bone ik to the
left hand to keep his hand on the uh gun
and that's about
it over here uh I'm not actually using
that chest uh one
anymore and so actually I can remove
that from here
and we don't actually need that or
that we do need hand or and the virtual
bone hand
or that's all we need and it should
still
work and so if I reenable
this it still
works so over here in the
blueprint I just set this up so that it
would be triggered on and off the aim
for testing purposes normally it's just
uh normally it's hooked up like
this like
that
um this right here is just loading in
this data asset
and that is under the CM data
folder and in here on the event graph
I'm just getting that data asset and I'm
saving it to a local data asset
variable and that's it guys that's all
there is to it and I'll see you in the
next video

================================================================================
ARQUIVO: Unreal Engine 5_ Dynamic Overlay and Copy Motion Layering (English_ASR)
================================================================================

=== DESCRIÇÃO ===

Just a short Demo of the current Open Source Project

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

=== TRANSCRIÇÃO ===

all right so this is an open source
project I started some time
ago and that uses a layering technique
this one uses copy
motion I'm still working on this
one I don't have transitions
[Music]

================================================================================
ARQUIVO: Unreal Engine 5_ Enhanced Input With Widgets (English_ASR)
================================================================================

=== DESCRIÇÃO ===

Yes you can use Enhanced Input Actions From Widgets. They won't fire however if you set the Player Controllers Input Mode to 'UI Only'

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

00:00 Intro
00:30 Setup
03:30 Widget Setup
06:15 Widget Animation
10:28 Character Setup
17:50 Input Modes

=== TRANSCRIÇÃO ===

all right guys I'm back with another
video so I'm going to show you one way
you can handle and widgets using
enhanced input it
only it works under most conditions but
if you set it to UI only uh if you set
your game uh your player input mode to
UI only then it will not work uh so I
have confirmed that it does work under
game and UI only or I mean game and UI
or game
so it works under both of those
conditions so anyway I'll go ahead and
show you guys how to do this so I'm just
going to add the third person template
uh just for the sake of this project I'm
going to move over to the to that map as
well I'm going to create a new folder
I'm just going to call it
UI and I'm just going to create
a I'm just going to set up a a simple
HUD and I don't need to do anything to
that yet and then I'll set up another
one and I'll call this
menu
so I'll just create the input folder
here and I'll add an input mapping
context and I'm not going to create any
subfolders I'm just going to create two
input actions by default they're Boolean
uh variables which means that the return
value is either true or false it's not a
float or anything like that so I'll just
say select and I'll create another one
and I'll call it
set
text and then inside of here I'll add a
mapping for
the
select and I'll add one for the
text and then on the select I'll just
set it to W which is forward for the
player uh it moves them forward uh this
is just to show you how we can give this
one more priority so that he doesn't
move forward when we press the select
button and then I'll set this one to the
right trigger on the gam
pad I'll set this one to the right Mouse
button and I'll set this one to the left
Gamepad
trigger and then I'll just save that and
then under their input I'll just create
I'll just just duplicate this jump one
and I'll rename it
to
menu and under here I'm just going
to add that
menu and I'll set this to tab on
here and then I'll just set it to the up
but up button on the uh dpad of the
GamePad so that gets that out of the
way now for our menu
example I'm just going to create a
border and I'm going to give us some
text I'm going to Center the
text actually I'm going to expand it
across here but I'm going to center it
vertically and then I'll just uh align
the text uh across here I'm going to set
the Border color to be a dark color and
I'll make it
[Music]
semi-transparent and it doesn't matter
that it looks the text looks small
compared to the button it'll
automatically adjust when we set it over
on the
uh on the HUD and I'll actually just go
ahead and show you that now so I'll just
set an
overlay I'm not using a canvas because
canvases are known to be performance
heavy and then I can just drag this out
here and Center it and there we go and
you'll see that it automatically expands
to the size of the
text so I'll make this text
uh exposed as a
variable and I'll actually make this
menu uh right here inside of this uh
exposed as a variable so we can get a
reference to it from the
blueprint I don't need to focus this or
anything but I am going to set the
visibility to Collapse by default which
uh means that it's not visible and it
doesn't take up any space uh if you set
it to Hidden it'll not be visible but it
will take up
space so that's all we need to do for
the HUD I can close that
now inside of here I'm just going to
delete this stuff and I'm going to uh
set my input
[Music]
actions so on this
one it looks like I accidentally exposed
the Border as a variable and not the
text I didn't want that I'm just going
to reverse that
and I'm going to set
[Music]
text and that's what it'll be set to
whenever we trigger this
button for this right here we're going
to create an
animation so I don't use this because
and the reason why is because if you try
to change something over here it'll
close this and it means that what
whatever you set here will only be
applied on the first frame because it
kind of re it screws stuff up so go to
the windows and you'll see animations
and just open that and this prevents it
from being collapsed whenever it loses
Focus so we're going to create a new
animation and we're going to call it
highlight and I'm going to select that
and you'll see it draws a blue outline
showing that this that there's an
animation selected I'm going to go to
add and Border because it's selected
over here shows up in that
list and then under here I'm just going
to change the brush
color so you can hold down control and
zoom in or
out I'm just going to make I'm just
going to drag the uh right side of that
out until we have about a quarter of a
second we're at 20 frames per second but
you can change it to 60 or 30 or
whatever you want uh maybe you only want
it to be 20 that's fine uh it looks
smoother if it's a higher frame rate I
think from what I've seen most UI
animations are actually 60 frames per
second but it's up to you but now that
we've uh docked this window right here
uh we can actually change the brush
color from right here and it'll reflect
on this point that we have the marker on
and so I can come over here and I can
just brighten it up a little
bit and now you'll
see well I think we still have to B oh
we don't have auto key uh set so now we
have recording so whenever
I change the value of this it'll
automatically key it down
here and now I'll just turn that
off okay so that's weird
let's just undo
that let's just do it manually I don't
know why it did that that's weird so
I'll just brighten it and then I'll
manually add the key and so now it
should
fade yeah that's weird I don't know why
I did that that's so weird it that
doesn't it doesn't work the same way as
it does in sequencer this button right
here that's weird um but yeah so anyway
we've made our animation that's cool and
now the animations are automatically
exposed as variables over here you'll
see it right here and so I can actually
just drag this out and just play
[Music]
animation and I could just actually
place this down here
and we actually don't want these to be
set to triggered because it it'll fire
continuously or multiple times we only
want it to fire once so whenever we
start holding the button down when we
start pressing the button this fires
only one time so I'm going to set those
to started and not
triggered and I want this to be pingpong
I want it to go back back and forth it's
going to highlight and then go back uh
go dark
again I don't need to restore the state
because it'll return to that state
automatically so I'm not going to worry
about restoring
it and that's basically all we have to
do on that so we've got our test uh
widget set up and now we can come into
our blueprints folder and open up the
third person
[Music]
blueprint and I'm going to drop this
menu input action
here and I'm just going to copy this and
paste it over
here since the AI can't trigger input
actions it's safe for me to just get the
player
[Music]
controller right here for this
purpose oh yeah right so I need to get
uh the enhanced input player local
subsystem and then we're going to remove
it whenever we are done with the
menu and so I'm going to put a flip-flop
right here this little squiggly in
looking
icon and when it first fires it'll fire
a and then the second time it fires
it'll fire B and so it starts off hidden
and then it and then we uh set it to uh
be
visible but we're not actually going to
set it to be visible visible because we
don't want it to absorb Mouse clicks at
least not for this example you could
probably do that but anyway
so in fact I might test that at the end
just to see if everything still
works yes so what we want to do actually
before we do this we need to actually
create the widget so let's create a
widget
we're going to create the HUD widget
we're going to add it to
viewport otherwise it won't be visible
and then we're going to store a
reference to it I'm just going to call
this HUD
Ruff and then off of this I'm going to
get W menu example
and I'm just going to store this as a
reference
to that's why I exposed that in the HUD
as a variable so that I could grab it
right
here so over here I'm just going
to
set visibility
and I actually just want it to be not
hit
testable but we'll test like I said
we'll test that
for uh visible and clickable later
on well I mean I'm not sure if it's
actually necessary to make it clickable
but but we'll test we'll test it with uh
with the mouse not hidden
I'm not sure actually I haven't tested
it with uh the mouse not hidden but I
imagine it'll still work
so yeah so this is basically all you
need to do from here and then it should
oh I have it set to triggered yeah that
would cause it to open and then
close
rapidly so we'll just go ahead head
and test
it oh I didn't give it a priority yeah
so you'll see it that when I press W
because it has the same priority the
other one actually took precedence over
it so we need to increase its priority
and basically how that works is like if
one is set to zero and then you add a
second mapping context and it has the
same key but its priority is one then
and when the way that's supposed to work
is when you press that key it won't
trigger the other one uh it'll only
trigger this one now I've actually seen
in projects where that doesn't seem to
be the case and I'm not really sure why
it could have been just that somewhere
else they were adding it and giving it a
a lower priority that that could have
been it um or they were setting that to
something else to have a higher priority
somewhere else but anyway so it's it's
important that you actually manage these
and in testing it's okay to just give it
a random thing but in actuality you
would probably want to manage the
priorities uh and give and so that you
can make sure that the one that you
wanted to have the higher priority will
actually have the higher priority and
won't be overridden by something else
otherwise uh it'll cause a lot of
problems and confusion in your project
oh so it doesn't help if I don't
actually change this uh either so let's
go ahead and change that so I'm going to
set the input to be the menu on both of
these which I never
did and now you'll see that when I press
it it triggers uh the animation but the
character is not moving
forward and if I press the GamePad
trigger you'll see it's doing that and
if I press the left trigger on the game
pad it sets it and if I press the up
d-pad button it closes it opens
it and yeah and if I open it with the
mouse and you'll see I actually forgot
to reset the value of that and so it's
it starts off bright um but yeah so
not a big deal though that's just a UI
thing I can actually change that in
here by copying that deselecting it and
then pasting it and that that'll fix
it you
see yeah so that's basically
it
now let's say you want it to be uh
[Music]
so if you set the input mode to UI only
this will not work um this means that
any bound input events in the
widget will not be
called
yeah so if you use this mode I believe
you have to handle the key presses
using these functions right here Onkey
down Onkey up and Onkey Char you would
have to override those and handle handle
it from right here yourself I'm not
going to go into that there is a video
on that uh out there if but it just know
that if you set it to UI only then this
won't
work but you can set it
to uh set the input
mode
to game and
UI and it should work even if I set it
to focus on this
[Music]
widget yeah so see it's still working
and I didn't set it back to
uh uh game
mode so you would have to set it back
to to Game Mode
afterwards yeah
yeah so I was thinking you can also
we could test this
too because I'm not sure if this will
still
work
if we do
that okay it still
works all right
that's the game pad right
there I don't have uh the left button
this isn't a button so I can't actually
click
it but if I click and drag you'll see I
can still I can still pin around so uh
yeah anyway so yeah that's basically uh
uh the rundown on that
guys and yeah if you have any questions
ask down below just remember if you have
it if you set it to UI
only then it won't work you can't use
this method with UI only but it'll it'll
work fine for in-game
menus
so there's that

================================================================================
ARQUIVO: Unreal Engine 5_ GASP DAO (GitHub Setup) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

New Setup Process for the project is described here.
Initial Setup
1. Clone the Repo
2. Create a GASP Project
3. Copy the Gasp Files over to the Repo Folder

Project Setup
1. Set my Character BP as the Default Pawn Class
2. Create Virtual Bones on the Character


BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Get Repo or Direct Download Access here: https://ko-fi.com/unrealdevop

GitHub Repository: https://github.com/JC0NN0R/GASP-DynamicAdditiveOverlay

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

00:00 Intro
00:50 Project Cloning
04:00 Project Setup
06:30 Live Retargeted Character Setup

=== TRANSCRIÇÃO ===

all right guys so I am back with another
video um I'm going to show you guys how
to uh set up this project now uh that
I've reduced it in size so I just added
the audio back because I had left that
out
um
so so the total size of the project is
probably about 50 megabytes now which
falls into the free range which means
that I no longer need lfs I've untracked
the files and
so uh this this shouldn't be costing me
any more money going uh forward so it
cost me $65 last
month so to get started what we're going
to do is you're going to go into the
into epic games launcher you're going to
create a game animation sample project
it just needs to be a blank original
game animation sample
project um after you've done that what
you're going to do is you're going to
clone this into a
repository so there's several ways that
you can go about cloning this if you've
already cloned it uh then what you can
do is from the GitHub desktop app you
can go under the reposit or under file
clone
repository and under the github.com you
can select that and then select the
folder that you want to clone it
under or you can uh clone it using the
URL or you don't even have to do this
actually if you just open with GitHub
desktop app right here inside of the
uh the repo
so you can open it right here and it'll
automatically do that but if you already
have one cloned then it won't uh try to
reclone it for you so just copy this uh
hyperlink right
here and
then inside of here you can paste it
under the URL it'll say this just ignore
it and then choose your folder
and I don't want it under a subfolder so
I'm going to remove that last part of
it and then I'm going to I'm going to
clone
it and you'll see now it has been cloned
and you'll see these files inside of
this folder all you have to do
now is go into the folder where
you
downloaded the game animation sample
project and just copy all of this stuff
and then paste it in here the config
files I kept on mine so that you don't
have to go back into the project
settings and change uh project settings
so whenever asks you if you want to uh
replace those just say skip these uh and
that's just the config files inside of
here those five right there are the ones
it was asking if you wanted to overwrite
which is no you don't want to just after
that you just open this up and the and
from here on out it's fairly simple
actually the only uh thing because I
didn't include the actual mesh of the
ufn uh character is that we actually
have to add those virtual bones back and
so I'm going to go over that with
you so this will take just a second it
shouldn't be long
so after you launch it it'll compal some
shaders and stuff and then over here
just in your world
settings expand the selected game mode
and we're going to replace this with my
character so under the da Dao folder
here we're going to go under character
data Char data and select this guy right
here the
CBP and we're just going to press the
back button
here and now it should say CBP undor
sandbox character _
Dao we're not done yet though we need to
open up the
blueprint and go to mesh and open up the
skeletal
mesh and then add a virtual bone by
right clicking on the
root and make it point to the root and
I'm just going to replace that r at the
front with f for foot root and then I'm
going
to add foot L I'm going to rename that
and I'm just going to take everything
off but foot
L foot
or take everything off but foot or and
then now those virtual bones are out of
the way now we need to right click on
the hand L and add a virtual bone
pointing to the handar if you're
rotating the
hand um
and we're doing the same thing there
we're just taking everything but handar
off if you have an animation that
rotates the weapon bone then that
virtual bone needs to be off of this
weapon bone otherwise when that weapon
bone rotates that virtual bone will not
respect that rotation of the weapon in
his
hand
oops we want hand L on the right
hand and that's it that's the setup
after that you can just press
play and that's just for uh this
character
here okay so the next thing we need to
do is set it up so that we can uh switch
over uh to these characters here and so
I'll go ahead and go over
that so those are under the characters
folder and if you go to them you'll see
that I have their blueprints in here so
we're going to go to the widgets folder
and we're going to open up this
widget almost lik this guy first which
is
the ue5
Manny and so I'm going to go into u5
mannequins
select the Manny and I'm going to
replace that right there I'm going to
select that one go under select the
Quin and I'm going to replace that
one basically the same thing for all of
this
the
Killin and then this one all
bodies and I didn't do that one or that
one
so I I might do those later we'll
see anyway so I haven't actually tested
this part of it out yet so let's see if
it even
works okay so it works but you'll see
that the weapon is on the
ground uh basically the same reason as
before if we go into the ue5 Manny
you'll see that it that it's looking for
a weapon bone I might even just call
that weapon R I don't know why I
didn't uh but we're going to select the
Manny open him up and we just need a
socket on his right hand
and we need to rename this to weapon
R and now you'll see that he's holding
it that's that's the downside of it but
in order to be able to prevent y'all
from having to do that then I would have
to include the meshes and I'm not going
to do that because then we're back to
the bandwidth problem and lfs storage so
unfortunately
that's not something I'm going to be
able to
do so I'm just going to rotate
this and place it in his hand
roughly
and that's pretty much it
yeah so anything else you you need to do
on it uh you've seen the other videos
you can go under class settings I mean
class
defaults I always go up here collapse
all categories expand the Dao and under
live R
targeting uh you can adjust this held
object definition or whatever you want
to call that uh data
and you have to close it in order to
open it but anyway you can offset
that you can go into these different
states here's the aiming state right
here and you can
adjust the way his hand is positioned
and everything so that his aiming is
accurate you'll see that right now it's
inaccurate uh I may fix that in a future
update that stuff seems to have gotten
broken
um
unfortunately
but I've done videos on how to do this
and it is somewhat of a process but once
you do it for your character it's uh as
long as you don't change the ik
retargeter uh in any way then you won't
have
to uh you won't have to redo this uh
these settings
so in my case I did something that uh
during the migration that broke that
I'll look into it but uh anyway for now
that's basically the setup I'll see you
guys later

================================================================================
ARQUIVO: Unreal Engine 5_ GASP DAO (New GitHub Repo) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

V1.22 is out but I won't be going over the changes in this video, I've moved this over to a Git Repository due to popular demand.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

=== TRANSCRIÇÃO ===

all right guys uh so welcome back to
another video from here on out the
download will be on a GitHub you'll have
to clone this do not download the zip uh
maybe I should put in big bold letters
up here do not download zip I'll have to
find out how to format tech text see if
I can make some text bigger in here I'm
I'm assuming that I can uh so I may do
that but do not download the zip this
does use lfs large file storage uh so
you may or may not need to download that
as well you can open up this link right
here and download and install that if
you need to uh but you may just be able
to Simply download the uh GitHub desktop
and open this and then clone it uh when
you open it using this link uh the web
BR It'll ask you uh if you want to allow
this website to execute command
say yes and check whatever and then you
can press this and it should open it in
the application down
here uh it'll automatically uh set it up
for cloning for you I'm not going to do
a a video right now on how to do that
there are videos out there that you can
uh go and watch uh for that purpose
there should be plenty of them this is a
pretty uh popular website for
repositories so
anyway that's that this is going to be
on here from now on so that you can pull
the updates without having to
uh uh redownload the entire thing uh so
that the download link on the drive it
will be removed uh mostly because it
takes up a lot of space and I'm paying
for storage on there just for that
purpose I'm going to be relinquishing
that storage there and I'm going to be
spending that money on bandwidth in here
for the
project uh so inside of here I'm going
to go over a lot of things right now I
want to address one thing that I've
noticed right here is this is kind of
hard to avoid by default because of the
default settings in here and I want to
show you the importance of something
here uh and I didn't think to try this
before uh I pushed it the last time so
you may getting another update where all
this is fixed on all the characters and
the guns are repositioned but I wanted
to show you something here so right here
this is the ik retargeter for this
character and if you want to know how to
get to this uh real fast and easy I'll
show you the method that I use uh so
basically if I want to find one of these
characters I just go over here to the
widget folder and I open up this uh game
animation
widget and I go down here
and I select one of these tiles and I
just double click this icon I don't
click the browse I double click the icon
that opens this up now I'm going to
select class defaults I always collapse
all categories this will all be expanded
for you and then I just expand what I
need to in this case it's the Dao that's
where all my stuff is I'll always have
my stuff under a Dao category uh that
way uh it's it's clean and uh easy to
find stuff so under the live retargeting
you'll see this right here I have it
running and you can't open it from here
while it's running which is kind of
stupid but uh it is what it is probably
a limitation of Legacy code but anyway
once you uh open this up you're going to
press this button up here it's going to
say running retarget uh you're going to
press it one time until it says edit
retarget pose and you're going to select
Source you'll be on target select source
and then I'm just going to show you how
this looks here whenever I do it so I'm
going to put it in put them in AIM mode
and I'm going to come out and so you'll
see how the thumb is sticking inside of
that right now so if I select the pelvis
right here and I select auto align and I
say allign selected in children voila uh
the hands seem to be more appropriately
aligned uh so and the reason why is
because I'm actually aligning the ufn
I'm making the ufn copy his
pose um you could do it the other way
around but I like to get into the habit
of having the source copy the targets
pose and the reason why is because if
you ever actually do retarget these
animations uh then if you were to do
that on the target then you would have
to change the target's Source pose or
base pose on the skeletal mesh itself in
order for those animations to play
properly and if you did that then any
other animations you were targeted from
other sources would suddenly have a
serious problem uh because his pose does
not match the well his pose matches this
one and maybe the other character has a
different base pose you see what I'm
saying so always match the source to the
Target not the target to the source it's
just good practice
so anyway now that I've done that you'll
see things are offset so I'm going to uh
this is where the new features come in
and so I'm going to show you guys how to
deal with that and let me just uh exit
out of all this other stuff here
so if I come back over here to the sand
CBP sandbox character
Manny you'll see under the live
retargeting you'll see these this stuff
right here I'm just going to drag this
out and what this is is these are
actually assets data assets this is data
driven and the reason why I use data
assets is
because is because during runtime in the
editor we can change the value uh values
of variables inside of a data asset
uh and it will reflect inside of here uh
so if you run if you update the data
asset settings on whatever from a tick
event uh then when you change the values
inside of these it'll update in the
viewport uh immediately which allows you
to easily change things while watching
them uh change and that just makes it a
lot easier it's a really good workflow
that's why I'm using a lot of data
assets throughout this project so I
wanted to explain that to you so under
here these data assets here they uh will
offset the hands the hand rotation and
location uh so that you can match up the
aiming so just in case you guys didn't
know what that debugger crap was for
some of you might have been annoyed by
it that's what this that's what that's
for also I've remapped the uh the way it
shows up on here the order of operation
of the rotation values that way they
match that of the data asset that way
you don't get confused the first one
belongs to the first one in the data
asset and I'll show you that here in a
minute uh
so now for the hell object we can offset
the held objects now too if you go under
held object and you go under here you'll
notice that I put this back in a struct
I removed it from a struct and then I
added it back to a struct now I'm going
to be revising the this entire like uh
weapon system I am going to have like a
a kind
of I'm probably not going to go all out
with the inventory maybe eventually one
day maybe I will uh but I am going to
create a
uh I am going to create a kind of weapon
system that's an ideal of mine anyway I
probably shouldn't say I will but I I'll
more than likely do that uh as soon as I
run out of other things to do on the
animation system but let me just uh
because you can't browse to any I really
hate that you can't browse to anything
while it's uh playing so just stop it
and then browse to it and you'll see
that under the rigs folder and in some
cases under the live ret targeters
folder of the characters so if I go
under here I go into rigs you'll see
this one doesn't have live retargeted
folder uh this one is just called held
objects but under this live retargeted
folder under Manny held
objects I might revise the way I did
that because maybe it's maybe there's
too many chains down the line to go
through and maybe that'll annoy some
people uh at least for the ue5 on some
of the other ones it's not like that but
under the R's folder you'll find like a
held objects folder or a liary targeters
folder and then under there you'll find
the other ones and then you'll find H
objects and then you'll find the weapons
uh and then under under there you'll
find their LR LR stands for
uh live R
targeting h o stands for held object
data held object
data and uh these are the live
retargeting uh
settings so the live retargeting
settings actually changes the ik
retargeter chain bone settings for the
hands uh from the animation blueprint
and the held object data just changes it
just adds an offset to the H object
itself
uh so I'll go ahead and show you how to
do
that so if I go to the m 9 and I open up
that data
asset and I uh aim this I can come over
here and I'm just going to reset that
and now that uh it's copying well now
that the the poses match uh you see that
I don't actually need I don't actually
really need an offset for that now the
hand the thumb is sticking inside right
here on this hand uh don't really know
what to tell you about that you can
reposition the hand I'll show you how to
do that so if you go to the M9 aiming
and you open this
up uh
then you'll notice these settings here
under the ik the only thing that you're
concerned about is the static local
offset and the static rotation offset so
the
firing uh print out up here it's
controlled by
the settings in inside of the main
character
blueprint that's under
Blueprints and I'll have to minimize
this for you to see it but under
blueprints this character right here
this is the guy that I'm inside of and
so if I go under
Dao and I go
under the aim offset you'll see we have
two debug settings here one of those
turns the debug
uh on and off so enable AO debug if you
disable that it won't print that out and
it won't uh show a line trace on this
screen this one right here is off by
default if you check that it'll just
show a set angle it'll tell it'll give
you a specific angle that the weapon aim
is offset from the center of the screen
so one of those line traces will
uh point to the center of the screen and
the other line Trace will Point down the
barrel of the rifle and then the readout
will give you the angle between that
line trace and the one pointing to the
center of the
screen so with this disabled it'll give
you that on all three
axes and you'll see it does look like
he's pointing off to the left a little
bit we'll see if that's off so it is off
a little
bit you'll
see uh the r right there which is
actually the Z uh inside of the data
asset it's off by
about
ne81 and so if I go over here to the LR
M9 I'm going to increase this by the
opposite of that negative
number I might change that so that it
actually prints out exactly what you
need to uh increase it by but because we
have breathing and stuff added over the
top of it the it'll be different every
time it might be a little uh down one
time and then it might be a little high
next time so you might want to fire it a
few times get the average and then uh
increase it or decrease it by that
average so in this case it
was about
negative 85 we'll say so I'm going to
increase it by
085 and now you'll see it's almost
zero I mean if you really want
to uh if you really want to go all out
you could try to get it to perfect zero
but that's gonna that's not really going
to happen guys you're not going to get
it to perfect zero without taking the
the additive breathing off
and so you'll see that's like negative.
75 and then it's positive. 78 which
tells me that the high is about 75 and
the low is about
Nega 75 if I had to just guesstimate an
average so that right there is pretty
much a dead on the reason why it's going
up and down is because of the breathing
uh you can decrease of the breathing
from inside of the animation blueprint
itself if you go to the anim graph and
you go to the overlay State down here
and you go to the aiming you can
decrease this aim this breathing
additive right here and that will and
I'll actually just go ahead and show you
so if I just set that to zero and I
apply it that's
without so with the breathing you'll see
that we actually shoot a little low but
I've been adjusting it with that
breathing uh setting that I had which is
why when he's not breathing he shoots a
little low I averaged it out during the
breathing so that uh because if you
don't then during the breathing uh he's
almost always shooting a little high uh
so that's the reason why I averaged it
out based off of this breathing
value if you want you could just disable
this uh
during this right
here and then you could just say Okay
positive 6 so I'll subtract
6 and there you go that's almost dead on
I'm not going
to go off trying to get that perfect
zero but you get the point
the problem is is when I apply the
breathing because the breathing makes
his arms move up and then back down to
where they
were you'll see he's almost always
aiming too high until he reaches the
bottom of
that what I what I might do uh actually
is I might actually end up going back
and trying to see if I can get that
breathing to where
it's more averaged out so that it moves
up and down the same amount uh but
anyway you get the
point I'm just going to undo
that and set that back to
0.25 and now you'll see that's about
averaged
so like I said I may revise that
breathing additive
animation man sorry
um but that's basically how that works
so we have the these data assets and we
have these data assets and all you have
to do is just duplicate them or move
them over here and say copy uh whenever
you need uh extras for your own custom
characters
and that's basically the uh
rundown on how that works now I only
recently realized that uh all I had to
do it never daunted on me to try to
match the source pose to the uh to the
Target pose to fix that problem with the
hands on some of them so I may end up
going back and tweaking uh those
settings uh for this right here and this
right here for all of the characters uh
but anyway yeah I just wanted to show
you that if you have problems with your
own characters match uh the ufn The
Source pose from the pelvis don't do it
from the root do it from the pelvis if
you do it from the route it could offset
the route I think I don't actually I
don't think it would but just to be safe
do it from the pelvis uh
anyway yeah
don't worry about those ik bones because
they's they're not going to line up
anyway uh that's just they they're not
going to SC they don't scale uh during
retargeting but that's basically the
rundown on it guys and uh if you have
any questions or concerns let me know
down in the comments and I'll see you in
the next video

================================================================================
ARQUIVO: Unreal Engine 5_ GASP DAO (Update v1.23) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

Breakdown on what was changed in 1.23 as well as the Hotpatch

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

0:00 Intro
0:35 Version Control
2:15 Character Blueprint
6:04 Linked Anim Layers
11:37 OnRep_HeldObjectState
14:14 Live Retargeted Characters
16:42 Animation Blueprint
21:30 Character Setup Refresher

=== TRANSCRIÇÃO ===

all right guys
so I'm back with another video uh in
this video I'm going to be showing you
guys the changes that I made and uh
discussing them going over them and all
that and then at the end I'll show you
how to fix uh how to fix this stuff in
here so right now I actually don't have
the breathing being applied over the top
of this uh that's something that I will
push after I make this video and get it
out there to you guys by the time you
are watching this I'll have already made
those
fixes uh
so right here these are the changes I
brought over this is what I'll be doing
from here on out is I will be working on
the development branch and then I will
be merging that with the master at the
end of every week uh with the new
changes that I've made so that will
allow me to keep uh
version uh keep track of versions and
stuff like that
so it'll make it easier for me to talk
to you guys about what I changed as
well so I overhauled the held object uh
system if I click on this you'll see it
says well let me just do it this way if
I press this little thing right here it
says held object overlay State uh enums
were replaced with enums that's supposed
to say gameplay tags they were replaced
with gameplay tags guys uh breathing
animation reference frame was adjusted
for even distribution of aim offset I
set it to frame 34 that seemed to work
best actually for some uh weird reason
I'm not exactly sure I didn't look into
it too much but uh linked enim layer
framework was set up for pistol
right so actually I ended up setting it
up for the rifle to later on down in
down the line so let me just go ahead
and go over those uh changes first so
it'll take place on the character
blueprint
first and under the
Dao the live
retargeting the held object settings
you'll see that we have this held object
state right
here and then under here we have these
two
elements these elements store a gameplay
tag key and a value which is an
array and that array holds a held object
offset for that weapon and it
holds it holds
a live retargeting hand offset
for data asset for both of those hands
uh given the current
stance that they're in I didn't know
what else to name it so I named it
stance so we have our states and our
stances a state would be like uh he's
holding the pistol or the rifle or a bow
or something like that and then a stand
would be like he's relaxed he's ready
he's aiming something of that
nature so that's his
stance uh these are all set via gameplay
tags and if we go to edit project
settings gameplay tags you'll see I have
a gameplay tag table
list and that is this right here it's
stored under blueprints Dao data that's
where the table
is that stores those gameplay
tags and if we go to manage gameplay
tags you'll see the Dao out object
stances and
States
so that pretty much sums that up
let me just go ahead and exit out of all
of that stuff and I'll go to the event
graph and we'll start from there so on
the KD weapons you'll notice that I
replaced uh that enum one that I had
there with a gameplay tag version does
basically the same thing if we go into
the Onre notify for that then you'll see
that I am
and um I'm getting the overlay data
here given the the current
state is the unarmed default unarmed
fighting is he holding a pistol or a
rifle and then we get the current linked
Anem layer uh class for
that which is stored on the St overlay
data and those
are using gameplay tags as well you'll
see that has the pistol State Rifle
State and then they hold a held OB a
linked anim
class and if
we browse to those linked anim classes
you'll see they're right here and so we
have this Ali held object anim layer
which each class needs to uh
inher Implement each of these
classes need to implement that including
the actual animation uh the main
animation blueprint this one right here
it also uses it and that is set under
the class
settings right
here so if you need a new one all you
have to do actually is duplicate one of
these and then change whatever logic
there that you need the reason why I did
this is because linked animal layers do
not support
inheritance uh like what you would
expect in a blueprint where you can
create functions and override those
functions on the children to create
custom Logic for those specific
functions you can't do that with linked
anom uh
layer anom graphs because anom graphs
don't support
that so
the best I could do is to have you
duplicate
it and so there's very little logic in
here that is actually duplicated uh
between each of these uh
there's there's this that runs on the
update uh which is the tick the reason
why this isn't running on the blueprint
thread safe update is because you cannot
call blueprint interface functions from
a thread safe function you can't do that
in a thread safe Manner and so it has to
be called on the tick that's why I'm
handling this on the tick actually I
don't need to use a property access
right here because it's not thread safe
uh
so on the thread safe I the only thing
I'm doing is I'm just fetching uh and
caching the aim offset value for the
pitch
and the reason why I do that from the
blueprint thread safe is because when we
start blending out of these uh animation
layers right
here and I do have uh blend times on
these animation layers uh whenever we
start blending out of this then some
there's a little small window where this
main
blueprint is
invalid and so if we were to get this
with without fetching it and we were to
call it right here then it would throw
errors uh which could possibly cause
crashes in compile builds that's the
reason why I didn't do
that so some of the other stuff that is
being duplicated is this it's just a
really simple thing it's returning a
booing whenever it's called and that's
being called called
from right
here so we're calling this to see if we
if it's ready to aim that prevents them
from shooting while we're blending in to
the aiming
State and so if you go
to the overlay State
here you'll see the aim offset is
handled right inside of here I'm not
handling it from that
anymore
and if you go inside of here you'll see
we have these functions right here so if
you go under the functions you'll see we
have these functions right here these
are also being shared between uh or
duplicated between them but basically in
some situations you might need to change
this stuff inside of here and so being
able to duplicate this it actually
allows you to Mo it gives you more
freedom to
modify this Logic on a per weapon
basis so I think that's a good thing
actually you'll notice I forgot to hook
this back up this breathing so I'll go
ahead and hook that back up it's on the
aiming for both of them I will push that
uh
later but yeah that's basically the
rundown on on uh that there's not much
else uh to explain as far as how that
has changed everything else pretty much
Works uh exactly as before it's just
that we're handling this per weapon now
uh which allows the weapons themselves
in the game to actually
store
uh a reference to what class
they uh that needs to be
loaded whenever they are
equipped and I did that because I plan
on
creating a held object system and also I
wanted to support other people's held
object systems uh
so that makes it a little bit
easier I'll go over that stuff right
here uh later give me one second I think
it's good it was just mine
fryer
so so yeah we're still doing the same
thing on the
Onre we're getting that we're getting
the current link enem layer we're
setting that we're updating the ik
retargeter settings inside of
here and we're getting that all that
data based off of gameplay tags now
and so if you select this you'll see you
can add entries here and you can select
which gameplay tag you
want that's how that
works let me just undo that because I
screwed it up so yeah that's how that
works and then we're getting the LR
chain
settings based off of what state
they're currently in which is
represented by gameplay
tag and then at the end if this live
retargeted mesh reference is valid then
we'll call this update live retargeter
settings blueprint interface on that
game instance which will pass in the
chain settings
to
the and I don't have it here but the
generic retargeter right
here and you'll see I'm actually
printing out the path of this and the
reason why I'm printing out the path of
it is actually
because with the metahumans I had them
all in one blueprint and so I had no way
of really knowing which one was which
and there was a lot of them and so I
wanted to be able to see what the p was
so I could easily
navigate to
where that stuff
was you
see that way I could adjust the settings
easily so that's why I did
that looks like I did forget to clean up
a little in
here so that basically explains all of
that those are all the changes that I
made inside of here that's that's
basically
it
so these are set from the actual live R
targeted classes so if I go to a live
retargeted character under
blueprints
uh retargeted characters and if I open
up one of these and I go to class
defaults and I Collapse all and then
expand the Dao and expand live ret
targeting and all this you'll see this
is where that stuff
is and if you browse to it you'll
see these belong to each of these
characters and they have their own
settings so I have one for the aiming
and I have one for the ready the reason
why is because of anatomy differences
and Library targeting and how things
don't match up for each different state
you're going to need different offsets
that's just how it is uh the only other
way around that would probably be to
have uh to retarget all of these
animations and then manually adjust the
way they hold things for each of those
animations for each character and that
would be a lot more difficult than just
using this method where we can just come
in here and add offsets for that
specific
state so that's basically uh the gist of
it they need to call their parent begin
play and the held object needs to be
reparented to the live retargeted
character and then we need to set up
their ik
retargeter uh for that specific
mesh that's why I have the liary
targeted mesh reference here and we
store this right here so that we can use
it later from the
parent when we update that it sets the
ik retargeter on the animation
on the generic animation
blueprint and then it sets their initial
live targeting chain
settings so on the animation blueprint
you'll see that I refactored a bunch of
stuff this stuff is not thread safe
which is why I kept it on the update
animation uh
tick all the other stuff that I was able
to move over I went ahead and moved over
uh the essential
values and the update
States uh the update layering
information and the update Dao stuff
where I'm just caching these values
uh should probably just remove that now
but yeah
so let me
see I re I reorganized this stuff right
here so linked enem layers can blend out
as I showed you before for inside of
here if you select one of these you'll
see that we have blend settings but they
only support inertial blending which is
why I have a dead blend here it's just a
new version of intialized
blending I moved the on overlay update
uh information right
here to this right here
and actuality I do not need that anymore
we're actually running it twice now
which doesn't make any
sense I don't think I need that let me
see maybe I'm having one of my moments
here no works fine okay so yeah ignore
that I'm going to fix
that that was an oversight on my part
I'm no longer doing it from here I moved
it from right here over to the blueprint
thread
safe right here but I forgot to take it
off of this right here uh that's all
that
was the additive Lane is applied right
after the motion matching
now and the yacht aim offset is applied
right here and ik C directions right
here after the default
slot where we are using gameplay tags
not enums
anymore and this is the weapon bone
correction this is
the hand I stuff it disables or enables
the hand
I it lets you override it and disable it
for some reason uh there's various
circumstances where you would need to do
that everything else is basically the
same I just reorganized it I moved to
this to the
end this stuff didn't need to be after
it so I just moved it I rearranged it
like this and I think this looks a lot
cleaner so I think
I I think that basically covers all the
major
changes I added a fallback so if we're
not in the pistol or the rifle state or
if we're not in a state that's listed
right here it'll load this one and this
is just a no layering everything is set
to base the weight is set to zero
meaning that it'll just skip over it it
won't even apply it which means that
this is actually pointless I just put it
to base just so you would know hey this
is going to be in
base
and yeah that that basically covers all
the major changes that I
made yeah thread safe
logic uh link anim layer
logic so now that I've done that I'm
going to I did Overlook one of the
characters so I'm going to take this as
an opportunity for those who want to
uh I want to let you see how you can how
we can fix this because I did not I
overlooked this
guy as you'll see his thumb is sticking
inside of here I'm going to show you
guys how to fix this and how to offset
the gun in his hand so first off uh what
I like to do is I like to go into play
mode and you can press shift F uh you
can go into the gun mode that you need
and then you can press shift F1 actually
you don't need to go into a gun
initially you just need to let me let me
just restart this sorry so let's say
we're in this I'm going to press shift
F1 I'm going to select the character
then I'm going to eject I'm going to
right click and I'm going to say edit
that's going to open up his blueprint
now I'm just going to stop it I only
needed to get in here now I need to set
this stuff
up you'll see that this one doesn't have
a reset button on it that's because I
never applied that which was an
oversight on my part I can browse to
this data asset right here it'll take me
to the folder it's in under uf5 rigs
blah blah blah I'm going to select this
right here this is our held object uh
data
it should be hold object offset but hoo
would probably be a little confusing so
anyway you'll see that this hasn't even
been adjusted for the pistol it didn't
need to be adjusted for the pistol but
just for brevity sake I'm going to apply
this what I'm going to do actually
is I'm going to close everything to the
right of
this and I'm going to reopen
this and now with this selected I'm want
to press this back button here and now
you'll see that it has been
applied for the M4 A1 that's going to be
under
here
applied so now we don't really need to
worry about that anymore we can apply uh
compile that and save it I'm going to go
ahead and play it I'm going to draw the
rifle I'm just going to
eject and we're going to start adjusting
this
stuff so I'm going to open up this data
asset and you'll see it's almost good
but his finger is sticking inside of
there so so what I'm going to do is I'm
going to lower it in his
hand and it looks like that's actually
sticking inside of his palm so what I
might do is add a an offset right here
on the the Y about
5° and I'm going to bring this
out well that's the wrong
direction so something like
that and that should be
good so I'm going to save that and now
that I've adjusted
this I'm going to come over into this
other one
and you'll see he's holding this like up
against his neck which I don't like so
what I'm going to do is move it back and
out
like something like that
and I'm going to what I'm going to do is
I'm going to make sure that the gun is
straight up and down it should be
straight up and down if it's a little
crooked it throws everything off
whenever we start trying to uh configure
the rotation of his hand so that it's
pointing towards the center of the
screen and I always do the left hand
last so I'm just going to go back in and
I'm going to
fire a few times and you'll see that
he's actually breathing and that's going
to screw stuff up so I'm going to go
into
my I need to go into the link enem
layer for the rifle this one right
here and if you go into this overlay
State go into the overlay stance go into
aiming and then just bypass this right
here
you'll see it screws it up we have to
change and then change back so that it
reloads
this because we compiled it and now back
over in
here you'll see that he's actually
pretty accurate he his hand is not
moving and I'm going to shoot a couple
of times expand my output log this might
take a second what I normally do is I
normally clear all this so I'll clear
this log so it doesn't slow my computer
down and then I'll shoot and you'll see
that we have these values here I'm going
to contrl C this with the
negative and at the end of this I'm
going to say negative and paste so
negative negative is positive we're
doing the inverse of everything so
always do it this way even if it's a
positive
I say
negative and you'll see that's a lot uh
closer to Center and you can do this
several times the the reason why it's
not 100% perfectly accurate is because
the rotational offset of the rifle might
be just slightly off and that can lead
to uh problems where you have
to uh do this this a few times in order
to increase
accuracy the more uh the more up and
down this is the more straight this
rifle is uh how he's holding it uh the
easier this is to
do and you'll see that we're we we've
become a lot more accurate now and I'm
just going to stop there because I think
that's enough to degrees of freedom of
accuracy I don't think it needs to be
any more accurate than that uh it's a
little Overkill to be
honest and
now no I'm not going to hook that back
up yet I like to leave it off until I'm
done so back over here on this we're
going to go ahead and adjust this hand
we have to do this in local offset now
later on I might try
to come up with some algorithms to to
for say allow you to use a static offset
that's forward and back left and right
uh in relation to the mesh and then it
and then after you've done that what it
what it'll do is it'll translate that
into a local
offset as you're applying it I might do
that later and then with this uh with
the static rotational offset I
might set up something where you can
just shoot this few times and it'll just
automatically adjust it for you the
accuracy uh I don't think that's uh out
of the realm of possibility but for now
this is how we have to do it in local
space so that's pretty accurate but
you'll see his fingers are kind of
inside the gun and the reason why is
because of how he's holding his palm and
so what I might do
is not that we're going to rotate it
along the
Z so that it's out a little bit more
and yeah that's pretty much
it now I'm going to save
it I'm just going to save all of
that and there you
go now I didn't check this let's see if
his hands are still on the
weapon it looks like this is a little
offset I'm not really sure what caused
it was probably just an oversight on my
part but I'll go ahead and show you how
to do that this is what I was talking
about about that right there and why we
need this for each
state it's just anatomy and how things
get translated from one mesh to
another and this actually didn't have
yeah it doesn't look like I actually
adjusted this
this was copied from another one and I
just never I must have completely
skipped over it thinking i' had already
done
it so yeah that's pretty much it that's
all I had to do you SE how easy that was
not
difficult so anyway
now this one still has the breathing
applied to
it but yeah that's pretty much it guys
that's how it's done I'm going to hook
this back up now compile it and now
you'll see that he's breathing but he's
still
accurate now the gun recoils so if you
if you just spray it you'll see that
because it's recoiling it gets more
inaccurate which is actually accurate
because that's what would happen in real
life
which means that the that if if you're
patient and you
wait you give it just a second between
uh shots then you'll be a lot more
accurate yep anyway guys that's pretty
much it I'll see you in the next video

================================================================================
ARQUIVO: Unreal Engine 5_ GASP DAO (V1.25 Overview) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

Replication Fixes:
Jump is now working
Aimoffset is now replicated and without the jittering issue from before
Projectile is now replicating properly on Dedicated Servers.

Other Fixes:
1H Pistol Animation was aiming oddly, It seemed that the animations somehow got messed up.

Additions:
Left Hand Fighting Punch (Cooldown was done differently for these, we fire a Montage Event off of them and capture it on the other side for cooldown reset)

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

=== TRANSCRIÇÃO ===

all right guys I'm back with another
video so uh first off I wanted to show
you I am on a dedicated server by the
way and you'll see that the aiming is
pretty smooth on both uh the client and
uh the player on the other side so
you'll also notice that the projectiles
are actually going in the correct
direction now and that actually T the
reason why it was so difficult for me to
figure out what why that wasn't working
was because I'd never seen that problem
before and that problem was actually
caused by this
plugin uh
so the character position is not
actually being replicated
properly uh with this smooth sink and
that's why I told everybody you know
if if if you can't wait until
5.5 then you know and you get one of
these plugins you're just going to be
wasting your money these plugins are
expensive they're overpriced
they're uh they're all they all revolve
around the hype behind motion matching
you know they they knew that nobody
wanted to wait until
5.5 these are not proper properly
replicating motion matching this is just
a patch and you're definitely not going
to want to
uh publish a game with one of these
plugins I'm just putting that out there
now nothing against the guys who made it
they put in work and they figured out a
way to get around the issue temporarily
but just know that if you go and spend
$100 or whatever on one of these plugins
you're just wasting your money uh so I'm
just going to put that out there right
now they're not replicating it properly
and if you didn't know this let me just
come over here
uh so if I go to the event
graph and let me find out generate
trajectory right so we have this
trajectory right here and uh it may look
empty right here but if I go to the
blueprint debugger and I just say
trajectory
uh
and
O It's is it lagging
let me see here it's just not letting me
expand
it oh well let me choose one one of
these guys
here so you'll see
that this is why I say that they're
doing it wrong there are 46 entries guys
there are 46 entries in this trajectory
they are replicating that array of 46
entries every tick okay that's what
these plugins are doing they're
replicating a traj uh an array with 46
points inside of it maybe more in some
cases it depends on the circumstances it
could be more it could be less but
they're definitely replicating that
array and that's not the proper way to
do it uh the pro the reason why the
character movement component uh
currently doesn't support it is because
it doesn't support replicating
acceleration and that's what's missing
from the character movement component uh
because they've never needed repli uh
acceleration to be replicated in the
past until now and so they're addressing
that with their new character movement
component that that or their mover 2.0
or whatever it's called and it'll be
replacing the character movement
component it'll be more robust it it'll
be more flexible it won't require a
character uh a character class blueprint
uh or a pawn uh or whatever it'll it'll
be able to be set up I believe on any
actor from my understanding uh but yeah
so anyway I just wanted to get that out
of the way that's a brief uh disclosure
on that now I do have this weak server
validation but it won't work with this
plugin because of course like I told you
uh the location is not replicated and
I'll go ahead and show you that just so
you understand so if it's false let me
just print
string actually I could do a format text
I like using this this format text
and then I will
just print that
out and that of course will only print
out whenever this whenever we're outside
of 100 cm from where the dedicated
server thinks that we
are and so you'll see now it's printing
this out and the reason why is because
the smooth syn is not updating the
character's position uh and so the
character is still way over here
um and see there you go
so yeah so on a dedicated server and the
reason why is because replicate movement
is
disabled but anyway so how did I fix the
projectiles basically I had to send the
socket location and the held object
forward Vector uh
from the
client uh through to the server and so
I'm piping this through to here which
pipes it through to here which pipes it
through to here uh so just so you know
this is not replicated if you choose to
use the camera based one uh right now
I'm basing off of this
so it's up to you if you you know want
to use if you want to use that just
follow the instructions all you have to
do is pipe it through just like those
other uh two
variables on this right here I'm no
longer using this I'm just using the one
that I'm sending in from
there
so which is just the the held objects
it's actually the held object's right
Vector because the held object uh if you
look in the
viewport uh well you can't see it right
now because the weapon R bone isn't
animated and so it's going to be facing
back this way but whenever we're holding
an object that red arrow will be
pointing forward and that red arrow is
actually the right that's actually right
green is forward uh so green will be
pointing this way and and red will be
pointing that way and so that's the
reason why I am using the uh the actual
right Vector instead of the forward
Vector here uh but I have it labeled as
the forward Vector just so you know it's
the vector that points forward um but
yeah that's basically the rundown on
that uh I must have replaced this and I
just simply forgot to remove that
yeah and so I have fixed the weapon fire
uh cool down so before uh uh KD had a
delay and then he had the he had it
firing now it fires and then it uh does
a cool down after this action cool down
time it'll reset this cool cool down uh
varable right
here and I'm actually
yeah I'm I'm doing it right here too
so I'm using a notify right here and
yeah that's going to confuse the hell
lot of people so let me
uh let me see here if I go to the fight
and the
actions and I haven't pushed to these
and let me just open up one of these
montages you'll see we have a montage
notify you can go to add notify and
scroll down and you'll see right here
Montage notify and if you add that it'll
show that little weird icon whatever
that's supposed to be
um I guess it's supposed to be nodes
connected together I don't know it's not
very clear what it's supposed to be but
uh anyway so that actually is what uh
comes out of here and fires these events
right here a lot of people probably
don't know that I've actually figured it
out on my own uh but uh there's probably
videos out there on it but anyway I've
just gotten to the point to where I
don't really watch videos that
often
um
so so yeah so if it's the reset cool
down timer and we can go back here and
if we select to this you'll see that the
notify name is reset cool down uh and so
those names have to match right here or
else this will never be
true so that's two different ways you
can handle it right there
um you could also have that on the
weapon fire animation but I don't see a
point in having it on the weapon fire
animation however on the uh melee attack
animations it does make sense because
there's a point at which you know it's
okay to to go ahead and start playing
another one and you'll see I I left uh
this connected here which isn't actually
being used anymore either um so that
brings me
to to the uh fight stance here
um and you'll see I added a uh a
left uh gut Punch or hook or jab or
whatever ever you want to call it I'm
not a fighter so I'm not I don't watch
MMA so um now in actuality the left one
is actually uh punching out further than
the right one I didn't realize that
until I brought it in I'll probably redo
these animations at some point but in
actuality like I said before on the
Discord uh this doesn't have a lot of
functionality if you can't uh fire them
whenever you're moving uh then uh I mean
somebody's not going to just stand still
for you so you can beat them up you know
what I mean so I'm going to rethink my
approach to this entire fighting thing
here um and I'll probably do it
differently uh I may go ahead and leave
this one in here and I may just like
extend it but then I may have like an
alternative uh version of this at a
later date the the fighting uh
thing but the the next fighting one will
it'll probably just have them in this
regular idle pose uh because I think
that makes more sense
but yeah
so uh there's that I fixed some other
things too I actually didn't make any
notes on what all I fixed uh
unfortunately so and you'll see I can't
fire right now cuz I'm too far away um
so if I wanted to I would have to bypass
this server
validation since the server is not being
updated on his
location
um actually let's just hook that back up
I want to make sure that it's not just
on a dedicated
server so I'm going to go over here to
listen server and I'll play as a listen
server
yeah so let's see yeah there you go so
it's not being updated at all guys his
uh location the server is not being
updated on his location so uh now you
know I tried to warn you
guys just saying
uh got to have some patience sometimes
especially when it come that's that's
why I didn't really want to mess M with
this stuff because of that
reason yeah
so sometimes it seems like it gets stuck
uh waiting for an extended period of
time I'm not really sure what's causing
that I'll look into that uh to find oh
you know what I think it's because uh
whenever we whenever we turn you see
pulls his hand back now remember I added
some logic in there that says okay uh
you can't actually fire the weapon until
you're fully
aiming uh and I'm not sure if you
remember that
but let's see right here so we're
checking the anom layer instance to see
if if he's fully blended into the aim
ready State and if he is then we can
fire so whenever it seems seems like
he's not he's not firing that's probably
why um you can always take that little
arm pole thing out uh it's easy for you
to change this stuff around now um so
yeah there is some latency uh here that
I believe is directly related to smooth
syn I'm not sure why I called it smooth
syn cuz doesn't seem too smooth to me
just
saying n it's not not that bad I mean I
give the guy props for uh for what he
did manage to do I wouldn't have been
able to do it or maybe I could have I
don't know I didn't try but
anyway let's see so what else did I
change let me go to the Discord uh
because I made
some yeah cool down on pistol Rifle
right aim offset replication
one-handed pistol aim looks odd okay
yeah I fixed that
so and I
added
uh I added that left punch to the uh
fighting uh stance so that basically
covers all the changes I've made I may
start uh trying to work on some AI now
I've never
uh set up AI with this so and I've heard
that other people have had trouble
trying to set it up so I may have some
trouble with it as well just so you know
so that that's a little heads up
there I don't remember if I yeah I did I
covered that so all that stuff is being
piped through now a dedicated server has
no access to this
stuff I'm not 100% sure if that's
because we have uh move uh replicate
movement uh
disabled uh but we have to disable it
for the smooth sync and that replicate
movement may very well be the reason why
this isn't
working I didn't really I didn't really
investigate it that deep I just realized
you know what it's not working so let's
just pipe it through from the client and
it worked so
that's basically it guys I'll see you in
the next video

================================================================================
ARQUIVO: Unreal Engine 5_ GASP DAO (v1.33 Overview) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

Changes in 1.33:
- 1. All MetaHuman Weapons Are Now Accurate
- 2. All MetaHuman's have decent finger grips on the weapons now
- 3. Auto-Aim was re-introduced and improved, it will start aiming if you simply fire the weapon and then go back to rest afterwards
- 4. The way montages are handled was Refactored.
- 5. Crouch Layering Issue when Idle and Crouching was fixed
- 6. Linked Anim Layer Output Warnings were resolved.
- 7. Unarmed Mode was Re-introduced, requiring some minor refactoring to properly support.
- 8. Other Organizational and Cleanup was done.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

=== TRANSCRIÇÃO ===

all right guys so finally I'm declaring
this
1.33 uh as you know I've decided to
start uh for the git repo version GitHub
repo version I'm just going to push and
commit and push the updates as I go
because if I have a power outage or
something like I don't know if something
gets corrupted I want to be able to you
know I don't want to lose all that so
that's the way I'm going to handle it uh
for now um I just I haven't even had
time to look into uh that other stuff
but yeah I don't even know where to
start on this update because there's so
much stuff that I've uh done uh
yesterday and today especially uh but a
lot since
Wednesday
so you'll see that all these are zeroed
in
and that's uh for both
guns and then go these
and then I have uh I have these these uh
montages are looking a lot better now
with this new approach the problem with
the hand it's it's was happened during
retargeting I I can fix that later it's
not that big of a deal but uh I'm not
going to fix it right now uh but you'll
see that the my bad uh I didn't mean to
push that that was the wrong button okay
so so yeah I'll fix that later um but
yeah we have our reloads here
now and if we're not aiming uh it'll
automatically aim and then it'll go back
that way it plays right and it works uh
for the rifles
too and I'll add a holding the barrel
thing eventually uh maybe next update uh
as well as uh maybe doing that Twist of
bone uh pose driver that I was telling
you about the postprocess blueprint uh
so I'll I'll do that as well uh for
these metahumans since these uh have
Twisted bones and they don't have
corrective
bones um so I'll make uh something like
that for uh these guys and then I'll
probably do a video too to show you guys
with character creator characters how to
do it with those uh but yeah so
so
anyway so we have you know our crouching
and uh now the crouching and the aiming
doesn't look funny uh whenever we're
idle like it did
before yeah
so I fixed
that and let's see what else did I uh
fix Jesus Christ I don't even know there
was so much stuff I have this auto aim
so I'm just pressing fire it'll
automatically stop
aiming uh and then I have uh the if you
I do have a debug thing that will toggle
it on and off and I'll show you that
here in a bit uh but that's mostly for
debugging like whenever we're trying to
zero in the guns for our uh characters
we'll we'll use that uh input action to
togg glit instead um or you can just
hold down the right Mouse button and
then when you release it they'll stop
aiming so yeah a lot of uh little
uh quality of life features like that
now I'm just going to I'm just going to
start going over the uh fixes in here
because I don't even remember what all I
did it was a lot yeah so Crouch State
refactor and auto aim I went over that
uh yep
so
I fixed a bug with the medy humans
their uh layering data was not loading
properly linked anom layer output
warning fix yeah so that was kind of
like a minor thing but there were some
warnings being thrown in the editor
every time we would uh uh link a new
anom
layer yeah so I fixed
that and then I just fixed it by doing
extra cast inside of there I was trying
to avoid that because if you
want to repurpose it to another
character blueprint it's going to be
more cast you have to go in there and
and fix but uh inside the linked anom
layers but there's there was no other
way to to get rid of those
warnings yeah so I I kept uh I kept
trying different things uh that's why
there were so many of those pushed right
there there was another auto aim uh bug
that I had overlooked I had to go back
and fix that uh rifle layering
adjustment those were the uh layering
settings uh yeah further tweaks uh
metahuman Ms were zeroed uh update to
that that layering uh liary targeting
setting
specifically I fixed the resting pose
there was uh an issue with the resting
pose for the Mel oh yeah so I forgot to
uh tell you about that so if we come in
here uh some of y'all might know that
the fingers uh are have been notoriously
bad for retargeting for metahumans I
came up with a method uh and I've
described it a few times already but I
came up with a method for fixing uh that
specifically for them I had to do it
separately for the males and the females
uh but you'll see that the fingers uh
look good now when I now when I uh do
when I make an alternative version of
this where he's holding the barrel
you'll still be able to use this pose
for SMGs or anything with a grip coming
coming off of it that's the reason why I
designed it the way that I did uh I I
thought maybe it would be easier to
repurpose it for a grip if that were the
case um
but yeah and you'll see that the finger
actually bent inwards uh right there
but yep so the aiming is all zeroed in
on those and if
we if we come over here I only had to
fix those for one and it fixed it for
all of them uh but it didn't fix them
for the females so I had to go back and
do it separately uh that fix separately
for the
females um yeah and so you'll see their
fingers are uh Cur uh curled a little
bit differently than the males were but
that's cuz I did their separately but
yeah anyway so there's that uh female
metahuman zeroed yeah and fingers fixed
I uh you can read that if you want
Universal aim offset refactor and
unarmed mode re uh
introduced uh and Montage handling
refactor so I'll go ahead and go over
that um
so I added uh a thing so that you could
check to uh say hey we do want to layer
uh we do want to uh override layering
settings or we don't that way
um it won't even bother doing the
validation check or anything like
that that was probably somewhat
redundant but I went ahead and did it
for brevity sake anyway
um so these are no longer actually being
layered by default the is layered is
false it does have layering settings but
these layering settings do not get
applied I just left them there for uh
reference purposes um there's probably
some issues with those settings I don't
know I haven't really looked that deep
into it but I know there was issues with
the method that I was doing using before
I just threw that together real fast
because some people were uh
uh were asking me at the time to do
reloads but I was really busy so uh I
I've done a proper one now so whenever
we reload the the weapon if we're not uh
aiming we're going to aim and then after
the Montage ends we're going to stop
aiming uh I I I leave a little window
there uh that way it gives it time to
fully blend out uh before we do that um
before we disable the aiming
so over here uh there's a problem with
the foot placement uh node it's plant
settings so if we go over here
to uh the ik
correction the foot PL uh placement that
the original one that came with uh the
gas project there's a problem with the
plant uh it seems to be a bug I'm not
100% sure if it is or not
but I do know that it's directly uh
related to the foot locking uh
functionality of the foot placement node
and so I've completely disabled foot
locking
uh for
uh that foot placement node the foot
placement node is still active it does
still offset the feet uh just like
before but it's just not locking the
feet so uh until I can figure out why
playing montages causes the feet to
start sliding backwards uh or any kind
of layering on the legs causes the feet
to start sliding backwards uh we're just
going to have to disable
it
so yeah I tried various different things
in here and I just couldn't figure out
how to keep it active and and not have
the feet
slide so you'll notice that I've
refactored this once again sorry guys
but I'm trying to get this in a uh I had
to do that for the uh AO I realized that
I was kind of doing a bunch of redundant
checks and stuff on uh on this and so I
wanted it to be more performance
friendly uh this actually removed to uh
blend by bull uh checks and it removed a
cached pose
so it's a plus that I integrated this
into one aim offset
so I also cleaned this up some more Yep
so that's that's that let me see if
there's anything else here for you oh
yeah so for the unarmed uh if we go over
here to this and we look at the held
objects so you'll see that now we have
uh an unarmed State inside of here and
it's it it just doesn't have any data
asset assigned to it so if you
fire this event with no data asset
assigned it's going to automatically
assume that you want no layering
settings so and that you don't want uh
layering so this is how I'm checking to
see if we're actually layering or not it
was the easiest way for me to uh keep
track of that and so if we open this up
it's the same thing it's just everything
is zeroed out
so I think that basically covers it it
was a lot of stuff that I uh did uh but
yeah so I wanted I'm glad to get all
that out of the way there's still some
things you know that uh I'd like to do
like you know the the pose for the hand
where he's actually gripping the barrel
uh I avoided that before mostly because
of the issue with the wrist but now that
I know how to make a uh pose driver that
helps prevent that twisting uh
collapsing of the wrist uh
problem now I can
introduce
uh uh hold the barrel pose without it
collapsing the wrist and then show you
guys how to do the same uh so you can be
looking out for that video because I'll
be dropping a video on that here
eventually maybe next weekend we'll see
uh it depends on how busy I am over the
over the next week um but yeah anyway
that's basically it guys uh I appreciate
the support for this project uh I kind
of expected a lot of backlash for uh
taking this over to Kofi but uh the
community has been pretty supportive so
I appreciate that and I will see you
guys in the next video

================================================================================
ARQUIVO: Unreal Engine 5_ GASP DAO (v1.34 Overview) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

Changes in 1.34:
- 1. Character Held Objects were not tagged for their specific Weapon Tags, fixed.
- 2. IK Retarget Settings were only being Updated by Linked Anim Layer Stance Changes, it will now be updated anytime our Weapons Change as well.
- 3. Weapon Cycle Setup Was only cycling right and never left, this is now fixed.
- 4. Leg Layering has been reconnected.
- 5. Old Unused Slots Were Removed, Code Utilizing it was Removed.
- 6. Rifle Fire Montage Was Updated To Use The Correct Slot.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

=== TRANSCRIÇÃO ===

all right guys uh so I'm just going to
go ahead and label this 1.34 because uh
there was a lot of stuff that I
overlooked that I had to fix today so
that's what I did this
morning
so character held objects were not
triggered for their specific weapon tags
that's been fixed ik retargeter settings
well let me just do go through these one
by one uh the character held objects
were not tagged
for their specific weapon tags right so
if I come in here I can show you
that if we come over here you'll see
that these are named uh held object
State Pistol M9 rifle M4 A1 they were
just labeled State Pistol State Rifle uh
that's it was just a generic uh thing
and so if we let's
see if I just come over over here into
say the metahumans I'll open up the
bodies and show these to you as an
example so I made the same changes on
that now on the Kellen uh I actually
didn't add this to it but I actually
fixed this as well on Kellan um his
pistol was set to the correct action uh
data but his rifle was not set to the
correct action
data in case you didn't know the
metahumans under animation assets we
have a female and a male and these have
the fixed fingers uh for them uh and
also their gun stuff is all based off of
this so I haven't actually included
these
um into the project but I'll probably
include the
at a later uh date I don't know
uh we'll see but anyway the the point is
is that I fixed that on the
Kellen and then the ik retargeting
settings were only being updated by
linked enom layer stance
changes right so if we go into the
linked enem layers
you'll see that right here when the held
object stance
changes we update the held object stance
on the character
blueprint and over here this is the
update held object stance it updates The
Stance but then it also sets the ik
retargeter uh settings this updates the
live retarget in settings the held
object
offset
um and the livey targeter settings the
bone chain settings
so over here on
the Jesus Christ people are running in
and out
today let me just open this up sorry
people are distracting me over here
there's a lot of noise outside
yeah so over here on the weapon changing
uh the update held object state anytime
the state is updated I'm just going to
go ahead and update the held object
stance now as
[Music]
well and that should
update um
regardless if it's a server or the
client I actually didn't uh consider
that so that may or may not actually be
properly
replicated yeah I don't think this is
actually properly
replicated guys
um I might end up having to go back and
replicate that I haven't checked uh that
I only just now
realized let me see
seems to be replicated okay if there's
any I might have to go back and and just
double check everything to make sure
everything is being updated here but it
seems like it is
so if I run into any problems or if any
of you guys uh notice anything let me
know so the weapon weapon cycle setup
was only cycling right and never left
that was fixed I'll go ahead and go over
that so basically
um for one I had the modifier the uh
negate modifiers on the wrong ones uh
and
[Music]
also let's see did I make a change to
this Jesus Christ let me mute my phone
because my camera is going off outside
somebody's moving around a
lot Okay so
yeah I didn't change anything in here
let's
see yeah so this is basically where the
change was and I forgot to disconnect
that my
bad but
yeah basically what I needed to do is I
had it uh firing on started but this
actually needed to be triggered uh in
order for this action value to have any
value it needed to be set to triggered
um the reason why that doesn't spam by
pressing it is
because we have that pressed modifier so
that pressed modifier prevents it from
being
spammed and that's the reason why we can
use
triggered without it spamming it so
that's how I fixed
that now the leg laying
has been reconnected right as y all uh
are aware if you've been following uh I
disconnected this because there was a
problem uh and then I ended up running
into that problem whenever we would play
montages too so I realized that the feet
were sliding uh backwards ever so slowly
uh
after um after a montage would
play and come to find out it was
actually the foot Place uh the foot
plant on the foot placement node so I've
temporarily bypassed their settings in
here uh until that's fixed or something
I'm pretty sure that's a bug uh so
basically it's set to lock uh with pivot
around ball uh this right here I've set
the unplant radius to zero which is kind
of redundant because I have the unlock I
have it set to
unlocked um so that basically just
disables foot locking it was causing
problems anyway where whenever you would
turn fast the feet would drag behind
them and that's how it was in the
original gasp uh that they the 5.5
version they released so that wasn't
something I did that was something in
their
system but it was also causing issues
whenever we would play a montage uh for
some weird reason
I wonder if it was doing the same thing
after uh mantling or vaulting I never
actually checked that because those are
played as
montages it may have been I don't know I
I'd have to go back to confirm that but
I know whenever I was playing montages
on mine after you know with my laying
set up it was
uh messing up so yeah I disconnected
this too I went ahead and left it there
as a r
reference and I renamed the uh well I
fixed
the if we go to the action
data the rifle fire Montage was actually
was actually pointing to the
old uh up upper body slot and I changed
it to point to the correct one so in
case you weren't aware I've categorized
these slots so these slots are
categorized
now this
also um will throw a warning if you try
to set a
montage to play the animation on slots
that are not in the same
group
so you'll have to pick these two if you
want
uh do a full body
slot a full body additive then you'll
have to play it on these two and if you
weren't
aware the reload animations are playing
on those two
slots and you can look at this this is a
local oh this is a local space additive
and this is not an additive uh that's a
method I picked up from larra and it
works pretty good
so I decided to just go ahead and run
with that I mean I'm using their reload
animations and in fire animations anyway
so as far as the fire uh fire
Montage oh my
God I hate that whole click here and
drag the entire
window thing I wish they would fix that
but yeah
so uh
if if the pose that he's
in
is if it
matches
the so if these are
additives and the pose that he's in
matches the the pose the overlay pose
then whenever they whenever they play
then it's actually okay to just play it
on this
slot otherwise I would suggest playing
it like I'm playing the ri uh the rifle
reload and the pistol
reloads so that's just a quick breakdown
uh an explanation on
that yeah so the old old unused slots
were
removed code utilizing it was removed uh
the rifle fire Montage yes I already
covered that that's basically the
rundown on it guys that's 1.34 I just
decided to just go ahead and label that
as 1.34 rather than a Hot Patch because
there were several fixes in there and I
wanted to go over them uh with you guys
so I only do these overview videos
whenever I release an official
uh uh new version of the uh project
that's why I went ahead and labeled it
as an
official update and I'll see you in the
next video

================================================================================
ARQUIVO: Unreal Engine 5_ GASP DAO (v1.36 Overview) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

A bug in relation to holstering rifles fixed and Distance Based Aimoffset added to the project. See the last video on the Distance Based AO for more information in regards to that: https://youtu.be/feMqo3MrbVs

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Project Documentation: https://unreal-devop.gitbook.io/gasp-dynamicadditiveoverlay

=== TRANSCRIÇÃO ===

all right guys so I'm back with another
video hopefully this works now yep it
works so I would for now uh with if you
have this uh distance-based AO
enabled I would not zero your characters
with this enabled if you want to use
this the reason why is because I'm
having problems uh trying to grab the
camera location I'm G to have to look
into that
uh but really this needs to be point
this needs to be pointing uh
basically to the same location this is
but if I try to do this from here I get
really weird
results
so I'm just simply not going to do that
from here for now uh you guys are just
going to have to
uh disable the distance based AO for now
and I'll try to fix that and the next
update also I'll try to
uh work on all this stuff that I've
filled out right here as well uh come
next weekend uh hopefully I can get
started on it before the before next
weekend but we'll see it's going to be
the holidays so everything will be
pushed back uh now I refactored the way
that this is handled here ever so
slightly so that it'll be more uh
performance friendly this is the way I
was uh calculating it this is the way I
I'm calculating it now
um so I was calculating it this way
because I was having feedback problems
but then I realized that I can just
calculate it in a more simplified manner
now that I've found a solution uh to the
feedback
problem this was uh a best approximate
uh
approximation uh calculation right here
it's not very it's not insanely accurate
uh
but yeah and I'm not sure it would be
any more performance
friendly maybe a little bit because you
could get rid of all all these uh checks
right here and then you wouldn't have to
do these right here either but anyway so
I'm going to leave that in there uh and
I'm going to leave uh this in here too
uh just for you guys to look
at but this current method is going to
be the most accurate right here pinpoint
accuracy so with that said uh I'll just
go ahead and cover what else I changed
in here so I didn't actually have a lot
of time to change a lot of things since
I got hung up on on that distance-based
AO but before whenever I would pick up a
rifle and then I'd pick up a pistol it
would throw the rifle down and the
reason why is because it was actually
uh what it was actually doing is it was
actually
uh trying to holster it
twice so I'll just go ahead and show you
that this
uh this
works for these guys too and the blue is
where he's actually pointing uh where
his gun is actually pointing uh so
you'll see that's basically uh dead
center of the screen you'll just have to
ignore the aim offset stuff over there
it's not
accurate um but yeah so it'll be
centered between the two uh during uh
this but later on when I fix that aim
offset for the distance based then
you'll actually be able to zero this in
for live retargeted characters just not
the ue4 Manny I mean the uh the ufn
Manny
uh I could add support for the for doing
this kind of stuff on the uef in but
it's kind of redundant uh for this
project because I'm simply just trying
to support other people's characters uh
so it's not really that relevant for the
base character because your character is
not going to be the base character it's
going to be livey targeted character
uh but I did in another video show case
how you could do
that uh without using uh live R
targeting so you can always go and look
at that if you're
interested but yeah this still pretty
accurate I mean each one of them will be
offer by a couple of centimeters when
you're dual welding but but I don't
think that's really that big of a
[Applause]
deal uh besides do welding it's just
something I added in here because I kept
having people ask for it so uh also
because I was adding multi-hand support
I was like you know what why not let's
just go ahead and add
that uh but yeah so I believe uh
did okay yes I thought I saw some J
there might have just been uh I might
have been tapping the uh mouse key
there but yeah everything should be uh
working properly
now again in case you don't know uh
currently I don't have full I don't
fully support skeletal meshes I do
support them being added and loaded uh
but I don't support support the physics
on them yet and I don't support uh
running animations on them yet I'll be
adding that back uh I'll be adding
support for that uh come the next update
so you can be looking out for that also
I did notice that
um the left arm right there it looks
pretty weird uh that's going to be my
layering
settings yeah just now realized uh that
so yeah I might have to I might look
into
that oh I may as well do it while I'm
making this
video it'll give you guys uh a chance to
see how this is
done you guys really need to learn how
to do this stuff yourself anyways rather
than just relying on me to do it for you
because if you decide to add another
weapon in here that isn't already in
here like like an SMG or something like
that then it's going to be on you to
figure out how the overlay uh layering
settings uh
work
so uh actually I need to go into the
pistol this is the leftand pistol that's
having the problem so I'll open up the
this one right here for the leftand
pistol
and the left stand moving ready is the
one that's having this weird
problem and I do have this in local
space the
arms the right arm is in local space but
the left arm isn't is fully oh
it's
okay that might actually be the reason
why
so let's
see no something looks off about
it it's looking a
little I mean the arm itself it looks
like
the the lower arm and the hand seems
it's acting like it's a mesh
space okay I think that looks
better yeah so normally if you're going
to uh if you want to add secondary
motion to it normally you you want this
uh to be in mesh space
but not
always you could
actually just apply this a bit in local
space just so it's not so
dramatic but you have to watch out for
doing that because you don't want it to
uh if if you
add too much local space to it then
it'll local space makes it move a lot
okay so if you add too much movement to
it then it'll start clipping into itself
the arm will start looking weird uh so
you have to be careful you can already
see that the arm isn't extended quite as
much as it was uh it's more up so yeah
so let me uh go back over to this guy
and see if he if he still looks weird if
it still looks weird when he's holding
it it was the right arm that was I
thought that was looking
weird yeah so you see for him it it's a
little bit too close yeah and youve seen
how it clipped
in
so what we might
do is
just do a little bit of local
space yeah and that'll keep it for
that'll keep keep it from bending too
much on
him that's still okay so it's doing that
because of the difference between
the moving ready in the idle
ready so you'll
see because when it Blends from this one
to this one you'll see this is zero this
is full local space and this is partial
local space so what we probably want to
do is we probably want to find a median
there so we can add a little bit of
local space to it make sure that's uh
fully overlay and then that should fix
it
yeah see so the the problem with it
clipping in is whenever you have them in
his idle you have them real really
dynamic in his idle and when it starts
blending from the moving State into the
uh extremely D from uh a not a not so
Dynamic moving State into an extremely
uh Dynamic uh idle State uh it caus that
the very active blending between those
settings is what's actually causing that
weird like clipping like
overshooting uh of the
arm and so that looks quite a bit
better yeah
yeah all right I think that looks fine
now so anyway so maybe you learn a
little bit of something right there uh
with the whole thing with me uh fixing
the layering settings I'll go ahead and
save those layering
settings and then I'll push this and
then I'll make this update
final I just didn't have a whole lot of
time this weekend guys uh but anyway
I'll see you in the next video

================================================================================
ARQUIVO: Unreal Engine 5_ GASP DAO (v1.37 Overview) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

GASP_DynamicAdditiveOverlay(1.37)

- 1. Item Skeletal Mesh Animation BP Support Added
- 2. Item Skeletal Mesh Physics Support Added
- 3. Distance Based Aim Offset Replication Added.
- 4. Refactored ItemsInHand Replication to reduce server traffic.
- 5. Pickup Manager Logic Moved To Slot Manager Component to reduce Logic on Character BP and make it easier to remove and manage.
- 6. Redundant Unused Code and HeldObject Skeletal Mesh Removed.
- 7. Distance Based Aim Offset Bug Fixed (caused snapping when aiming up quickly)
- 8. Slot Manager has Arrays for you to Add Starting Slot Actors and Items now.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Project Documentation: https://unreal-devop.gitbook.io/gasp-dynamicadditiveoverlay

=== TRANSCRIÇÃO ===

all right guys back with another video
so I added uh proper uh Skillet to mesh
support so I'll just go ahead and go
over that with you first if we come over
here to the ACT well it's still called
ad I'm going to have to rename that I
guess it should be called ID for item
data because I renamed that from action
data to item data but you'll see that
these are still labeled ad uh right
there so just ignore that uh this is the
animation blueprint it's stored as a
soft reference it's not a big deal
animation blueprints are fairly small
they're normally only a couple
kilobytes but anyway this will be
disabled by default it's only for
testing purposes to demonstrate that it
actually works all it's doing is
rotating it using a sine wave uh and so
you can see it's actually working even
with it
holstered when I simulate physics
because I'm not this isn't a physical
animation and I'm get not given weight
to the actual animation uh during
physics uh it doesn't uh actually
animate
whenever uh physics is
simulated so you'll see that it does
work uh and that's a skeletal mesh uh so
that'll be uh how
the rifle will be treated for for now
the pistol will still be a static mesh
by default um ignore that I don't know
why I added
that I was having a moment I guess
um so anyway back here on
the held objects master and yeah you'll
see that
uh these are still called action data or
ad even though I renamed him to item
data so just yeah ignore that um so
there's only a few changes that I made
over here in order to add support for
that it was very basic but some people
were getting confused by
it if we go over to the setup mesh
function you'll see whenever we add the
skeletal mesh component we just call
this and this will async load uh it'll
get
theom the anom instance soft glass
reference it'll load it like I said it's
only a couple kilobytes it's not going
to be
expensive um and then after that it just
assigns it to the skeletal mesh assuming
that it's a skeletal mesh which it
should
be so over here I just had to enable
Aquarian physics uh for
collision and then I added this in order
to get the skeletal mesh uh to be
properly supported uh this doesn't
doesn't cause any issues with static
meshes it'll still work the same way
um but
yeah
so on the character blueprint you'll
notice that I I got rid of the pickup
manager and I I migrated all that stuff
over to the slot manager and that
allowed me to reduce
everything down to this so in actuality
this is kind of redundant I could have
just called this uh event dispatcher
from uh here instead of calling uh these
two to separate ones I could have
actually just called this a hand state
change instead of the Occupy hand but
anyway it's not that big of a deal and
it's not going to cause any extra
overhead
uh but it it will actually help you know
exactly where this is being called from
in case there are any bugs or problems
so I'm just going to leave it there like
that for
now
so
yeah so you'll notice that I removed a
lot of stuff uh from
here now I did add okay it looks like I
have a typo here in this
comment uh but I did add these blooper
interface functions that I w't have to
cast to this uh to the character
blueprint class and I did that because
some people are inevitably going to want
to uh retarget this stuff and copy make
duplicates of this and if this is cast
into this character class then they'll
have to go in there and they'll have to
change that uh yeah so it's just better
if I use a blueprint interface to call
these functions uh from this instead of
doing a cast so that's the reason why I
did
that uh that basically oh well not
really
so I actually changed the way let me
just go ahead and open up this in a new
tab oh no I'm in the wrong
place yeah so let me go back to the
event graph I'm little lost here I
forgot where I put
that yeah sorry I've had a migraine all
day so I'm kind of like zoning out
here oh State updates yeah okay sorry
uh so yeah this is how things are being
uh repli replicated now it's only
executing on the server we don't need to
multicast this to all the
clients because uh this is a struct so
we can just simply replicate it right
here uh so I'm just having the server do
all this stuff uh so that will reduce
server
traffic uh which is good for
replication so other than that I did
make uh some I did
simplify uh the way that I'm doing this
here as you can
see
yeah so that'll reduce the overhead of
the distance-based aim
offset uh ever so slightly I removed a
bunch of stuff uh from here that was no
longer being used that hack that I had
in here uh I removed that because it's
kind of irrelevant and I've done a video
on it in the past anyway
so now you'll see that there's only a
handful of functions in here this should
make it a lot less intimidating for you
guys and a lot easier for you to
understand and extend and if you want to
remove this stuff right here you can
easily remove it
now but it's there to serve as an
example um let me see
yeah
so this was
fixed yeah so I fixed uh that bug right
there I don't know if you can see that
yeah so that bug is fixed
now
um and this is fixed as
well so this is replicated properly now
oh yeah sorry uh so so I did actually
show that but I never actually yeah so
basically it's just having this executed
on the
server so is locally controlled so if
this is locally controlled then uh the
client will will do all of this it'll
calculate it and then it'll just send
that over to the server and the reason
why I'm doing it that way uh why I'm
trusting the client with that
information is because by default you'll
always have to trust the client as to
where they're aiming there's no way for
you to verify that I can't verify where
somebody is actually aiming on their
screen uh without actually replicating
their Mouse movement uh and that's going
to create latency uh for the client so
that's not normally something that's
that important uh it doesn't actually
serve much of a purpose if somebody
exploits that uh because it's just where
they're looking so
uh
yeah so yeah basically that's that's all
the uh the changes that I made and so
I'm going to be taking some time off uh
from further
updates uh so that I can uh do I'm going
to get back to doing videos I'm going to
be doing some videos on how to do how to
create and set up
interactions uh item
interactions between the player and
items like shelves drawers stuff like
that items and the environment and I'm
going to show you how to do that using
contextual an animations
uh and yeah anyway I'll see you in the
next video

================================================================================
ARQUIVO: Unreal Engine 5_ GASP DAO (v1.38 Overview) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

GASP_DynamicAdditiveOverlay(1.38)

- 1. Gameplay Tags have been separated into individual Gameplay Tag Tables to reduce complexity and makes it easier to manage them from Tables if Desired.

- 2. BP_Slot_Master: Item Slots will now be identified via GameplayTag which I hope reduces confusion as to how they work.

- 3. AC_SlotManager: Refactoring of the Pickup Function to separate the pickup so that we could handle pickup of items and slot actors from a single function.

- 4. AC_SlotManager: Slot Actors can now be picked up and a variety of Find and Drop function variants for them were created to suit any need.

- 5. AC_SlotManager: Added Better Comments to the FindSlotByItemTag

- 6. AC_SlotManager: Fixed Error for Invalid Reference when grabbing Attached Items from a Slot

- 7. ABP_SandboxCharacter_DAO: Lowered the Exclusion of the arms down to the hands to reduce desynchronization around the shoulders.

- 8. CBP_SandboxCharacter_DAO: Fixed a bug where if the items were holstered before a Traversal they would be pulled out anyway after the Traversal

- 9. CBP_SandboxCharacter_DAO: InputActions now have the hotkey posted in the Bubble to reduce confusion and make it easier to find the hotkey while browsing around in there.

- 10. Adjusted the Rifle Ready Layering Settings to reduce left arm issues resulting in arm locking on several Template Characters and to improve synchronization between the left arm/shoulder and the body.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Project Documentation: https://unreal-devop.gitbook.io/gasp-dynamicadditiveoverlay

=== TRANSCRIÇÃO ===

all right guys
so I've already recorded this once and
then found out my mic
volume for some reason was turned all
the way down I don't know why I never do
that but anyway let me just go ahead and
start and I'm going to try to make this
as quick as possible get it out of the
way first off you'll notice that we can
pick up slot actors now and he only uh
spawns now with the pistol and slot on
his right side
and I did that so that you could test
this out for yourself and see how it
works
yourself and also there was a uh bug
where let's say you had uh some pistols
in your hand it doesn't really matter it
happened to all of the in pretty much
all situations but if you have an item
in your hand and you go to Traverse it
puts it away and then it pulls it back
out but there was a bug where after you
would
uh uh walk away if you would put your
weapons up and then Traverse when you
got back up top it would pull them back
out and that was basically just because
um
the
well there I I use an array to handle
that and I wasn't clearing the array to
put it
simple so anyway another uh complaint I
received was was one related uh to the
arm locking it was most visible on the
ue4 but I noticed that a lot of the
other ones were doing it too to some
extent or another and I probably just
overlooked it whenever I was uh redoing
a lot of those laying setting uh
settings but yeah uh
[Music]
so I think sometimes whenever you turn
his hand might come uh a bit off of the
yeah like right there um
so you can actually let me
see yeah so the moving ready that's
because I have a an upper body secondary
motion local space weight of3 and that
does have an effect also this is only a
uh 25 on the spine and overlay which
makes it stiffer uh so anyways uh it's
mostly because of this right here so the
three is is a bit high and that's in
local space even if it were in mesh
space it would still cause that problem
ever so slightly so if you want you can
turn that down uh it depends on your
needs so I just I think it looks far
more Dynamic with that extra upper body
layering there and I don't really see
the the
uh I don't really see that being a
problem it doesn't really come off
much also I've improved it so that the
uh startup looks better and more
natural so yeah that's the breakdown on
the main things that you're going to
notice right off the bat but let me go
ahead and get into some of the other
stuff so if you go into the project
settings and the gameplay tags and you
don't have to use these gameplay tags
guys you should be aware that you can
add them from right inside of here and
you can store them on the default
gameplay tags. file you don't have to
store them in the tables I just like
doing that for portability myself that's
just a personal
preference in fact it might be better if
you don't do that in your project
because if I ever update these again
then and you added stuff to it then it
you might lose it so um you can make
your own game playay tag tables as well
if you
want by duplicating these and then
removing the ones you don't
need uh in your second one but yeah so
anyway yeah these are all right here I
split that one up
into into
four so there was one and I split it up
into four the ones that are new are in
the slot actors and these are for uh
handling slots uh slot actors slot
management so if you go over into the
slot manager you'll see that if I just
add one in
here or actually let me just show you
from the character because that's where
you're going to be handling that from so
over here in the
character we can see that our item
slots we're comparing things now based
off of aoud slot gameplay tag we're no
longer comparing them by class because
people found that
confusing and it probably makes more
sense for me to use gameplay tags since
I'm kind of using them everywhere else
anyway so that's what I
did uh these are very specific holsters
but maybe you would just have a holster
for all your pistols uh but in some
cases you might have some holsters that
uh are only for
specific uh a specific class of pistol
and uh maybe some of them aren't and so
that's why you would want to have
separate ones if I come over here into
this BP slot hip pistol M9 you'll see
that we have an accepted slot tag and
we're using item data now too so you can
actually pull the gameplay tag off the
item data of the slot and I'll I guess
I'll go ahead and show you how to do
that if I can I've got too many windows
open
here so let's
see so you could do it just like like
I'm doing it for the uh items like the
we and stuff you would do the same thing
because this uh is actually stored on
the held objects Master which is the
master parent of all of
those other
items so they have these two and that's
actually grabbing this right here and
it's grabbing this item data Item ID and
then you can grab the gameplay tag off
of it and that leads me to this so I've
I I fixed a bug in the uh cycling
system right
here there was one person that uh
mentioned
a an error they were getting when
stopping and that was caused whenever
this didn't have anything in it and it
was calling this off of it anyway but it
didn't exist so this fixes
it it prevents that error from ever
happening
you'll see I have some iter iterative uh
slot actor drop
functions right under here and these
allow you to find them by class or uh by
reference in this case uh not class but
by reference or by gameplay tag the
gameplay tag one allows you to also
filter by hand preference in but you
don't have to if you just leave it as
either hand it will just uh be
true
so yeah so
anyway I say I don't recommend it but
it's it's there's not that many item
slots your character probably isn't
going to have that many and so it's
actually not going to and these are
oneoff fires so I won't be too worried
about performance hits with them because
they're just one-offs and the arrays are
very
short you can also search by the slot
socket name and that would be if you
come over here actually let me just show
you from here if you come over here that
would be the socket name hip R hip
uncore R for example but you may have
more than one thing under hip uncore R
probably not but I mean who
knows
so so yeah so we're basing off of this
basing this off of uh gameplay tags
now so back over here yeah you'll see
that we have some find filters here this
one's just for Holst string these ones
are actually for the slot actors
themselves and you can find them by
socket name or by gameplay t uh gameplay
tag and that's the allowed slot gameplay
tag and you can
also do it by reference but I also have
one more here that allows you
to
uh find them find all the slots with
these with this gameplay allowed slot
gameplay tag and it will return to you
an array of those item slot
configurations so that you might find a
use case for that
because it would uh be storing all this
information for you the slot actor
reference the allowed slot gameplay
tag and all that other
stuff all right
so anyway moving on let's see so so this
is an example setup of how you can drop
the slot
actors and here's the other ones right
here that you might use in different
situations or scenarios but I just set
it up with this one for zero and that's
just going to be the right hip uh
pistol like I showed you
before
so at least I believe I did I don't know
I'm kind of zoning out uh I've done this
video over uh several times over
now so let's
see I believe I showed you this but
maybe I didn't maybe I haven't showed
you in this video yet so let me go over
here if we go to the uh pickup category
and we go to pickup held objects you'll
see that the logic that was after this
is valid that's inside of here
now and then we are using the assigned
slot actor function which is also used
by the setup starting slot
actors right
here also you have the setup starting
items as well if you want want to come
in here and look at
[Music]
that all right let's
see find slot by item tag so if we go
over here to find slot actor H string
that's where the find slot by item tag
is this is only for when you're
holstering an item and so you want to
make sure that the that you're passing
in the item tag and that's from the
uh that's this tag right
here under the item id of your actual
weapon not the
slot yeah so I explained that to
you did I show it to you though I don't
remember I don't think I did so okay so
under here under the traversal category
you'll see two overridden functions if
you see that arrow that arrow means this
is a a a function that exists on the
parent and we are overriding it same
with the setup input and those were on
the original I did not change anything
on the original CBP sendbox character
those are just overwritten functions
functions that were available for me to
override and so in here if he's un if
he's unarmed we will try to we'll call
the try holster item it'll give us the
results of this
and the result will be not found item
dropped or item holstered it'll be one
of
those whenever this traversal is
done if
both uh of those are equal to item
holstered then we'll call this one and
then we'll clear it the clear the active
clearing is what I like left out before
and it's what caused that bug so that's
what I
fixed so this right here it'll try to uh
draw both of
those but the act of calling this twice
even if it doesn't exist isn't going to
cause any kind of Real Performance hit
because it's just going to not do
anything if it's not
valid so it's safe
and yeah so I I pointed out that other
issue to you with uh the arm so that's
all fixed anyway uh if you have any
questions let me know down in the
comments or on the Discord and I'll see
you in the next video

================================================================================
ARQUIVO: Unreal Engine 5_ GASP DAO (v1.40 Overview) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

GASP_DynamicAdditiveOverlay(1.4)

- 1. ABP_SandboxCharacter_DAO: Removed Temporary Exclusion of Hands from the Additive Layering, no longer needed now that our Neutral Matches our Idle

- 2. CBP_SandboxCharacter_DAO: Added Contextual Anim Scene Pickup Example for Pistol from the Video Series I did.

- 3. UEFN & MetaHuman Poses: Because I changed out the Neutral all poses must be redone to match the Neutral Pose, it's unfortunate but necessary for technical reasons related to offsets people may want to have on their Layered Poses.

- 4. Dynamic Additive Layering Adjustments: The Layering settings have been slightly altered for the Standing.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Project Documentation: https://unreal-devop.gitbook.io/gasp-dynamicadditiveoverlay

=== TRANSCRIÇÃO ===

all right guys so I'm back with another
video so one of the main uh things that
I fixed was um his leg locking that leg
locking problem where his feet were
floating a little I'll explain to you
why that was happening so in the last
update I swapped out the neutral
pose uh for the layering with the uh ufn
idle
pose I don't need to
I don't seem to need to do this for the
crouching unless you specifically want
crouching specific poses and some of you
may if you want crotching specific poses
then you need to add a a pose that where
this blends to that other pose whenever
it goes from sending to idle but then
you'll need all your all your Crouch
poses would need to be in the Crouch
it would need to have him in that Crouch
pose uh so I'm going to explain that to
you uh this temporary fix right here is
currently disconnected it's been
deprecated now that we've got the the
proper neutral pose uh this uh that
problem with the fingers is no longer an
issue when we're additively overlaying
those problems with the fingers were
being caused by the fact that the ALS
neutral pose had his fingers in a
different pose than what he was his
fingers were in and oriented at on the
idol pose for this character so there
was a mismatch there and that's what was
causing that along with some other
issues so I made these poses so that
he's not leaning over uh if you now guys
I can't make everybody happy there's
always going to be somebody to complain
about something now there were people
complaining about him leaning over
dramatically on their characters and
stuff like that so I decided to not have
them lean over if you want him to lean
over there's it's three poses guys go in
there and modify the three poses uh so
that he's leaning
over now there was another problem right
here and this problem I still have to
investigate I've got a um I've got a
temporary fix it doesn't completely fix
it but it makes it look a little bit
better but basically when he was holding
the rifle he would come over uh you'll
see uh
before and actually I can I can break it
so that you can see what
happens let me
see and I'll refactor this too guys by
the way I was just I had this here set
up like this and I was thinking
well I'll discuss that uh here in after
a minute let me
see I have to compile it one
second there we
go oh what just happened oh okay so
apparently apparently compiling the
blueprint causes a a weird problem
where he goes through
things so you seen that weird jolting uh
on the left hand yeah that was caused by
the ik snapping
[Music]
back and it becomes even more apparent
when you do it in slowmo
you seen what happened
there yeah so this uh is a temporary fix
until I I've had time to investigate a
more proper
solution it'll be something similar I'm
just going to refactor it so that
there's not two nodes there I want to
reduce the overhead of the
code but now you'll see if I do
this it still does it a little bit but
it's not quite as bad so I'll I'll
investigate how to extend this time
basically I need the ik to be disabled
until he hits the ground but I don't
want to disable the ik when he's in the
air specifically
because if I disable the ik only when
he's in the air then when you jump his
hand will come off the rifle so uh
that's going to be a little tricky
anyway I'll investigate that and I'll
probably have that fixed in the next
update so contextual animation scene uh
you seen I did a whole series on uh
setting that up with the
pistol I've decided to add that
this is the same logic that I did in the
video I just made this a a function the
one that the part that handles the
actual C querying of the the scene
actor and uh handling the the character
stuff and
the uh relative offset
calculation and the focal
point and then we have this
here so
yeah
so so this is only set up on the player
right now and I'll um and you'll see
that the player has to have the
contextual anmc en actor and so does
the so does the the item you're
interacting with now in actuality for
this setup in particular we don't
actually need a contextual anim SC actor
on our player but later on down the road
I'm going to show you guys how to
actually use contextual Anem scene
actors like they were meant to be used
this is like a a use case that I came up
with and you can use them this way you
don't necessarily have to uh but it does
give you a proper it does give you
proper information on where things need
to be uh which is why it's
also which is why it's also uh nice to
to have them for set setups like this
so um some of this is going to be
refactored for example I'll probably
move uh this uh the loading of this uh
scene asset data I'll make that
automated and I'll move this over to the
data the character specific data assets
again so each specific character could
potentially have their own if you wanted
uh a specific specific character to have
his own version of that then you would
be able to uh that's why I'll do it that
way uh in the next update I'll do that
as well as try to find a more proper uh
fix uh for this one that actually
completely prevents that issue when
you're uh traversing over a high
jump when you go to pick up the pistol
uh there'll be a delay there the AI
controller will take uh over uh it's the
only way to get actual proper uh
positioning and uh uh
placement now I I was a little lenient
on uh how I handled that because in
actuality you're probably going to be uh
approaching this from multiple different
uh from multiple different
angles as you can see here so that's the
reason why I did that it doesn't look
bad on uh these characters
either just out of the box I'm not using
hand I but you'll see it's pretty close
so if you don't like that delay all you
have to do is right here on this copy
this and just paste it
here and bypass it that's all you have
to do okay so it's not that difficult I
won't be able to please everybody body
some people are going to not like things
okay that's going to happen some people
will not like things not everybody likes
chocolate okay not everybody uh likes
coffee it's just a fact of life I can't
make this so that everybody's happy with
it uh so I'll show you how to undo stuff
if you don't like
it now if we come over here and we open
up this you'll see that I rearranged
things a little bit I no longer have the
item handling uh uh
sub
[Music]
uh sub thing here instead I uh brought
these out and I made these separate so
the pickup is obviously going to have
anything to do with pickup that's in
here and then we have our holster and
drop logic here these are the examples I
set up for you guys um that will be up
to you to handle on your own how you
want depending on your needs I've got
these examples here they're not hooked
up but currently I'm just doing it by
index uh this part right here is going
to have to be handled by you because I
can't predict how you want to handle the
drop uh slot logic I may or may not add
an actual official example of this uh
later on uh kind of like what I did with
the slot
manager but but the the thing is is
uh I don't know if you're going to have
an inventory uh system where you can
pull up where you can pull up a little
box with his inventory and you click and
drag and stuff gets dropped out there or
and there's so many different ways that
you could drop this which is why I have
all these different helper functions for
dropping it in different ways
so it's kind of hard for me to to say
exactly what people's needs are going to
be but I might try to
make this
more uh
formal right now I it's not it's just
there and I'm showing an example of how
you could drop
something but anyway so I might improve
this in a later update yeah that's
basically the rundown guys uh and I will
see you in the next video

================================================================================
ARQUIVO: Unreal Engine 5_ GASP DAO - Copy Motion (V1.27 Overview) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

Overview of the new additional Animation System driven by Copy Motion and simple layering.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

=== TRANSCRIÇÃO ===

all right guys uh so I'm back with
another video I'm going to show you the
new addition to uh the dynamic additive
overlay uh
system
Dao uh this is going to be an
alternative animation system and I think
it turned out uh pretty
decent the only thing that I uh still
have to work out on this is this blend
right here it happens a little bit
faster uh than the other one did and
also you'll notice that if we turn too
fast um you you'll notice that there's
no lag actually in the uh aim offset
anymore but if we turn too fast uh
you'll get that
pretzeling uh
it's it's it's actually not that easy to
pull off uh but it is
you can do it so I'll I think it might
actually be easier to do here yeah
so yeah there it goes okay so I'll uh
work out some logic uh for that uh
sooner or
later but this uh method allows for far
more simplistic logic especially on
rifles uh where or two-handed weapons in
general
and it also allows you to like
reintroduce uh Motion in a controlled
way to a stiff pose now some of you may
not like this you may find it uh more
confusing uh but I'll try to set up as
many
different scenario case use scenario use
cases as possible uh so that uh you guys
can have an idealized how it
works uh I had to treat things a little
differently for this one uh in
actuality uh if you see the if you see
that debug draw right there I'll go over
that but if you see that it means copy
motion is on uh when it's when you don't
see it it means it's off so I'm actually
not using copy motion for the aiming of
the pistol and the reason why is because
it's just problematic in order it's
difficult to stabilize the hands with
copy
motion uh and still maintain accuracy uh
so in order to maintain accuracy uh the
technique that I had to use that I uh
figured out
myself it kind of overwrites the copy
motion and so there's no point in having
copy motion on during the single arm
pistol aim using this technique that I'm
using and you'll see the arm the hand is
moving quite a bit but it that does not
affect accuracy and I'll explain that uh
later so let me just go over this debug
draw so if you press V on your keyboard
it'll make that go
away let's see yeah V if you press V on
the keyboard it'll make that go
away and so now you don't see it
anymore now I am actually disabling
uh yeah I'm actually disabling it
whenever he jumps and the reason why is
because there was there were some uh
issues whenever with his uh elbow
whenever he jumps the leg ik uh that we
use it it's kind of required for copy
motion to work
so whenever he jumps you'll notice that
uh his arm kind of goes stiff right
there but that was kind of necessary
because it was causing problems uh I may
investigate that further at a later date
and maybe we
can get away with not disabling it
during the jumps but for now it's going
to be disabled during the jumps so
everything in here is going to work
basically the same way the action data I
decided to keep that as a universal
that's shared between the two uh so on
the copy motion we'll have some entries
in this CM data map uh and based off of
The Stance they're in we'll assign a
copy motion uh data asset which contains
this information
here
um so yeah right now I only have two and
I'm sharing those between the M9 and the
uh M4 A1 uh primarily because I didn't
really feel the need to create anymore
but you can create them as you need them
uh so that you can have different
settings for different things
but yeah so not much logic changed
inside of here except for this right
here which is on rep held object
state right uh right here this is where
I added that and here's some uh more
variables down here that I have not
actually uh categorized yet I'll do that
in a later
update the copy motion stuff is under
this copy motion folder and if you go
under this uh folder oh it looks like I
pushed that I meant to delete this jog
right here but oh well uh so I mean it's
only 89
kilobytes and I'm not using the idle
pose either but I am using this one so I
modified the pistol aiming pose uh
because his arm was too far out and too
stiff uh his elbow was locked in that
pose and whenever he jumps uh it kind of
uh pulls his arm outwards and so I had
to make it just a little less stiff uh
and unlock his elbow so that whenever we
jump it doesn't cause
any problems with the hands so it was
either that or introduce some overly
complex Logic for something that I could
simply fix by modifying the animation uh
po or the pose I
mean so under this folder you'll see
this blueprint right here this is a
separate blueprint you'll have to assign
that under the default Pawn class
for the game mode by pressing this with
it selected in your folder or you can
browse to it from here I personally like
going to the folder selecting it and
then pressing the back
button the animation uh yeah I may need
to uh clean this up a little bit you'll
see that I'm actually disabling hand I
whenever he's in the air uh in order to
prevent a a slight problem with the hand
during the two-handed aiming pose uh so
if we jump like this it'll cause
[Music]
a the the interpolation on the hand ik
for the left hand putting it right there
where it is the interpolation out of
that is too slow and so the hand uh ends
up following the ik bone uh during the
during the jump animation causing his
hand uh to very
quickly go way back here and his arm
folds in the process and then some weird
blending issues can happen along the way
as well uh
so that was my solution for that at
least for
now on the enem graph uh everything
is a bit more simpler than what it was
before as you can
tell and I'm just running this copy
motion uh the copy motion is happening
happening on the linked anim layers and
so I duplicated the link anim layers and
modified those for the copy motion
variants and I'll go over that here in a
little bit but you'll see the offset rot
bone in the post the Post history has to
happen before the copy motion guys uh
because uh it needs to be able to get
these trct bones off of here um the
right hand actually may not need to be
tracked I think it's just primarily the
left hand maybe the virtual bone uh so I
may remove one or two of these bones
from the stct list but
basically uh if you're grabbing a pose
off the motion matching using the copy
Mo copy
motion the
space well it's primarily the bone that
is important
that you're copying from it needs to be
in this list
so you're probably
only going to
need the virtual bone
handar you're probably not going to need
the Handel or the hand R uh so I may
remove that in a later update the offset
root bone I did have it placed over here
but I was having problems with the
offset root bones interpolation by
having it after the pose history so I
had to put it right here before the pose
history uh this happens before the
offset root
bone and that may be what's causing that
problem uh that I showed yall
before and then everything else is
basically the
same so if we go into here and we go
into layering data copy Mo oh no uh if
we go into copy motion variant link anim
layers and we open up the pistol let me
just open up the rifle
first you'll see I had an alternative
that I tried it seems more Dynamic but
it introduces problems during
acceleration while welding the
two-handed weapon it also introduced uh
problems during acceleration with the
rifle too so I went back to the way I
was using it before we're copying from
the handar and we're copying that to the
virtual bone handar on the L pose and
the Hand R is being grabbed as an
additive between the motion matching
pose and the neutral
pose so I did find actually that I got
better results if the neutral pose was
actually um the idle pose at least for
aiming uh
but in this case it's not really that
important so I just left it as the ALS
neutral
pose I had to separate the hand R leg I
from the hand L leg I for the
rifle
uh so that whenever we jump into the
air uh the arm does not clip inside the
body
so you'll notice that I have this in a
state machine and what this does is it
allows you to change your copy motion uh
data right here and whenever you do
it'll blend out of this one into this
one uh it'll blend out of
the the CM data t as in true and it'll
blend into the one that uses the CM data
F which is the
false and that
happens inside of here so whenever we
run this and we run this whenever we
change our
state as you can see
here we run this and then it just sets
it to the
opposite and then it sets
that and then this
determines which of these gets uh
executed so if you need to swap between
uh those data that that data uh during
runtime then you can and it'll just
automatically blend between them it was
either that or I set up a complex
interpolation uh system where it
interpolates each of these values and
that seemed very uh performance heavy
so I decided just to do a state machine
blend
instead it may it may end up having
about the same impact on performance I
don't know uh it's hard to tell but I
would say it probably won't because
uh to interpolate all these data all
this data
independently is more than likely going
to be
heavier so us State machine probably
makes more
sense if we go into the cop copy motion
node this is the logic that drives it we
have our overlay State our aim offset
pitch we have a dead blend because these
two nodes use
intialization for their
blending um and that's the reason why we
have a dead blend right there
we have a simple layering which uh gives
us a stiff pose because it's in mes
space rotation it's a mpace rotation
blend on the spine one and up and then
we have a simple Dynamic additive
between the motion matching and the
neutral pose which gets
applied on the spine and the shoulders
excluding the
arms if we want to aim we're just going
to use the stiff pose we're not going to
dynamically add the motion matching back
onto
it and then this L pose is used by the
copy blend State
machine and then this allows us to
switch it on and off so if you want to
know how to switch it on and off uh you
can you can for right now I have it set
as F so that's what it would look like
without copy motion and that's what it
would look like with copy motion and
you'll see it prints to the TR uh screen
too in the upper left and that's with
and that's without and that just allows
you to see what the difference is
between the
two and again V on the keyboard will uh
draw the debug and that's just a command
line it's a a sear which gets
ran if I
go back
into let's
see
yeah let's see it's somewhere right here
yeah so V this is what draws it and
that's the uh console command or C VAR
that it's going to execute uh whenever
you press
it
so
that's that um over here on the pistol
the logic is going to be a little bit
more complex oh I actually forgot to uh
uh cover this so right here whenever we
switch from the pistol to the rifle and
say we're in an Aiming State uh it will
not automatically set up the data uh
properly and so this basically ensures
that the data gets loaded properly
whenever we're switching between these
linked enem
layers so
uh this delay right here uh is probably
irrelevant now that I have it working
but I have it here anyway and so it'll
just keep running until uh these are
valid in case basically in case the the
map hasn't been uh loaded into this
linked anim layer yet then it'll keep
running it until it
is uh you could probably disconnect that
it should probably still work uh in fact
it probably will never even
fire but in some cases it may and that
that's a good kind of cach all catch all
right there but anyway so let's uh go
over
the copy motion node on
here basically the same exact thing
you'll see I was experimenting right
here with those different
poses oh I'm actually using the idle
pose right there on that okay I think I
left it as the end POS okay so I never
switched to this one back like I said no
no no big deal it's just uh that the
idle pose uh the Torso is Twisted in
much the same way that it is whenever
they're jogging uh that's just because
the idol that's
during their jogs their torso is Twisted
slightly uh to one side I think uh but
like I said it probably doesn't matter
you could hook this back up this als
inose I'm doing the same thing here uh I
left this in here uh I was going to
delete it but it's not even being used
I'm only applying this uh additive pose
at 50%
on here and in fact I'm applying it
fully on this one which I guess is fine
but I got better results with uh less of
that being applied on the upper body
that motion matching additively being
applied on the upper body uh so I
reduced it by 50% and that seems to give
better results right here I'm basically
doing the same thing except if we are
aiming uh then I
will layer after after the uh well we're
not actually using the copy Motion in
this case we're just using the L pose
and we're
overlaying the overlay state which is
just
the just this right here before the
layering and we're applying that in mesh
space rotation blend on the lower arm R
which includes the hand and
fingers but it does not include the
upper arm or the clavicle uh and so I'm
only applying that on the lower arm and
that's the reason why our hands move
back and forth and left or right but
we're still accurate and that's because
we're applying it as a mespace rotation
blend
so if we're not aiming then we're using
the copy motion uh for
that and we're always layering the
motion matching pose back onto the upper
arm L after the copy motion and the
reason why is because if we don't then
we can't get that Dynamic movement back
in the arm uh you can experiment and
disconnect this just to see what it
looks like if we do not do
that and I'll show
you so you'll see it's pretty
stiff now
now the leg ik if we were to and that's
because I have the leg ik disconnected
in here actually uh
if we were to
apply the leg I back to this and I'll
just show you what that looks
like and we only apply it to the left
hand then even in that stiff pose the
arm will uh will move a little bit so
it'll look a little bit more
Dynamic but uh yeah it's it seems like
uh it's still really
stiff but it's just not as
stiff so that's that's what it would
look like in the resting pose
um because the arm isn't locked in the
resting pose and so it gives better
results uh but I don't like the way I
think that looks weird
so that's the reason why I just layered
the motion matching back onto
it so that's how that works and then of
course right here we can disable and
reenable the motion
matching so anyway guys uh that's
basically the rundown on the copy motion
system uh these assets right here are
under copy motion blueprints data
layering data copy motion that's where
this is and the PDA the primary data
asset is under here as well which
carries all of this stuff
here so that's pretty much it guys I
will see you in the next video and uh
yeah let me know what you think about uh
this versus the old a more complex
system I think it came out looking quite
a bit better actually uh but I'd like to
hear from you guys as to how you feel
about it

================================================================================
ARQUIVO: Unreal Engine 5_ GASP DAO - Custom Idle & TurnInPlace (Breakdown) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

A discussion about replacing the Idle easily and dealing with the issues

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

0:00 Intro
1:20 What I fixed On the Original Approach
5:15 Why Transition into Custom_Idle
7:23 A Proper Approach Is Time Consuming
10:55 How the Idle Transitions Were Made
14:40 How Blending Can Cause Foot Sliding
16:30 Setting Up The Idles
19:50 Alternative Transition Approaches
26:27 Where The Transitions Are Stored/Played
31:00 How I Quickly Blend Into Transitions
39:35 Interrupting the Databases
47:15 Dealing With Turn In Place And Alternatives

=== TRANSCRIÇÃO ===

all right guys uh so I back with another
video uh today I'm going to be going
over this system right here so I did do
this video earlier today but it turned
out a little bit longer than I wanted it
to so I am redoing it and I've organized
my notes this time so I'll be referring
back to those here and there uh so first
of all uh this will be in the next
version the one I'm showing you now is
going to have fixes and changes in it
that aren't currently in the other one
uh
so uh for some reason whenever you first
start it uh it there's like a a delay uh
sometimes see there wasn't a delay that
time you probably heard my key press and
then after like a second or two it went
but anyway I'm not real sure exactly
what causes that uh seems to be an
engine thing so the speed actually is
not going to seem significantly
different uh but I have actually slowed
it down just a little bit so that the uh
transition to idle is complete before we
transition to the flighting stance and
you may notice as well that he's
actually looking forward now he's not
looking off to the right and down uh I
fixed that as well uh and we are getting
complete transitions before
we uh or complete stop transitions
before uh we transition to the fight and
this is the old one uh so it may not be
noticeable but if you pay attention the
feet slide uh the reason why the feet
slide uh I will go ahead and show you so
I'm just going to start my
debugger and I'm going
to uh get it to do it again okay so I'm
going to stop it and my camera is all
bugged out right now so I'm going to
have to press the start Buton but on my
keyboard uh and change it over to follow
I wish they would fix that hopefully in
the next one it'll be fixed there's a
lot of bugs with this whole camera
system right here uh it also teleports
the player uh to other locations for
some reason or the camera I'm not even
really sure to be honest it's so
confusing when it happens that I'm not
even really sure what exactly is
happening but
anyway
uh so here you'll see the feet the foot
sliding right here on this
one and then he and then he
jumps now the reason why is actually if
you look at this little bump right here
just as soon as uh the stop animation
starts playing just as soon as it starts
blending in no sooner has it fully
Blended in does it start blending out so
actually I'm not even I don't even think
it's fully blending in before it starts
blending out and the reason why is
because I was just simply interrupting
completely interrupting the stop uh
database whenever in whenever we become
idle I was saying skip stop and just go
straight into idle and so that's what we
get we get a kind of semi blend to the
stop and then we play the idle
transition and that's the reason why it
was uh doing that so I did resolve that
without slowing it uh slowing the
transition down too much uh it does
there is a slight pause there uh that's
kind of unavoidable if you want that
those good
transitions
um and so now if we come over here and
we look at this stop F stop forward left
foot you'll see that right here on
this uh or right here on this one the
stop forward left
foot you'll see it fully Blends in
from
the Run start forward right foot it
completely Blends in from that and then
it Blends out
into the transition devite
as you can
see and then we enter
our fight offensive Idol
so I'll be uh going over why I did all
that later on let me just check this
because okay so these are the things I
need to discuss in this video to make it
complete and may still end up being just
as long as the other one but at least uh
I'll have my thoughts organized and
won't be just drowning on about random
stuff like I am right now for
example all right
so uh why we transition back into the
idol so somebody was asking me this
because uh well they were asking me why
do we
transition uh back into the idol
well that basically goes back to this I
was actually
trying
uh I was actually trying to avoid
transitioning back into the idle right
here but as you can see it causes foot
sliding um if we do completely disable
the stop uh database and we just skip
stop and go back straight into the idol
it looks really really weird because you
go from a a running to a dead stop all
of a sudden out of nowhere over the
course of a single frame all of a sudden
his pelvis just completely stops he does
not slow down and he just and he just
jumps up in the air and then pounces
back down like this there's no forward
momentum uh there's no uh there's no uh
sliding forward he just completely stops
uh so it's not really a good approach to
it it looks really weird you completely
remove momentum the forward momentum all
all at once instantaneously and it just
don't look good
um
so the only way we would be able to just
transition back into this and skip the I
or the stop transitions would be if we
made our own stop trans transitions
where we just move back into here I did
go through uh the animations to look to
see which ones we' have to replace uh or
modify and there's over
55 animations I don't know exactly how
many I'll go over them with you right
here we go into animations
uh there's eight
idle there's eight ID uh turn and place
animations you would have to modify
every single one of those
um there are stop
animations let me
see there's 20 walk stop animations we
would have to
modify and then there's uh 20 Run Stop
animations we would have to
modify that's uh that's
48 and then actually I miscalculated we
have to modify all of these
too so every single one of these would
have to be
modified
so that's
48 58 68
um
72 at least 72 and then uh we have these
jump animations and these jump
animations uh will end in the idols as
well some of them do some of them land
in the idols as you can see right here
you just transitioned into an idol you
would have that Idol have to be changed
to your idol and therefore this one
would have to be
modified
so if I had to guess without actually
going through and checking every single
animation I would say there's between 75
and 100 animations you would have to
modify so would you rather modify all
those animations uh or would you rather
use this technique
and that was my goal here my goal was to
present a
plausible uh approach to this that would
not be outside of the realm of
possibility for a lot of
people I wanted to find a kind of
workaround that would help us avoid
having to replace all those animations
or modify
them so that's actually
[Music]
uh that's actually why we transition
back into the
idol and that's also all let's see
that's also covers that one as
well because if I were to do this
properly that's probably how I would do
it because it is actually the proper way
to do
it but it's going to be really time
consuming
and it's going to take a long time to to
re to modify all those animations and
make them look
good oh thank God I killed that Nat that
thing was driving me nuts okay um I
don't know these gats came out of
nowhere and it seems like every time I
kill one another one pops
up so how they are
made that that part at least is is
fairly
simple so I can cover that as far as the
transitions go in the actual Idol now
the actual idle I I got that from miimo
and I'll go over how I did that because
I did have to modify
it
so basically this well I'm not going to
go over how they're set up yet I'm G to
over that next I didn't actually write
that
down so what I did is I actually um
added more frames on the front of this
than what I actually
needed and I went through several
iterations of this guys let me see I I
probably should have prepped to this as
you can see I I was trying to make
a a more realistic looking transition
and I was trying different methods but
in the end I just wasn't happy with any
of
them I'm going to load this
one so basically what I did over here in
cascader is I imported the first 10
frames of uh this idle
animation and then I
transitioned I well over on the end I
imported uh the first frame of the fight
idle
animation and then I just uh created a
transition here and I applied physics
right
here uh with all of this enabled right
here I turned all those on and I I
worked on the
interval I selected this interval right
here and I said work on interval and
then I enable
it and as you can see it's only applying
it on this interval excluding these
frames right
here
so that's basically how I did it right
there I did the same thing for the
transition
from uh I imported the first 10 frames
of that and I will see if I can find
that one
right
here and I I should have made this one
longer uh I didn't make this one long
enough oh this was uh one of my first
attempts at uh making a transition uh
from without making them
hop uh the one that I did the first time
was the one I'm actually looking
for let me see if I
can this is probably it right
here no I don't even know
guys let's see let's try this
one no anyway so the point is is that I
imported the first 10 frames of of that
Idol and
then I just imported the first frame of
the other Idol and then I just set some
key frames right here I haven't actually
Applied Physics to this one uh and this
one is incomplete actually I scrapped it
and started over so the reason why I did
10 frames is because I wanted to kind of
buffer in case I needed to ex uh blend
it more the reason why is because you
don't want the blend to uh happen for
example like right here if the blend
happens
say uh right here on this Frame and this
is5 seconds in and let's say that our
blend time is
0.25 then uh we won't be fully Blended
in until right here in the timeline
where he's already up in the air so in
this case it's not really that big of a
deal if that were to happen but in a lot
of cases if he's not jumping and he's
actually
moving his feet uh if he's keeping one
foot planted and moving only one foot at
a time then in that case if it were to
blend in while he was moving his feet
then you would it would cause the the
active blending would cause foot sliding
because it's going to offset the pelvis
which the legs are attached to and since
it's blending the pelvis between the two
pelvis positions that's going to drag
the feet along with it
uh so you always want some kind of uh
whenever you're doing these transitions
I mean you don't have to but it's good
to have uh some space to work with right
here at the front I only ended up ended
ended up using three of these frames
right here uh for the blend uh but in
actuality since this is motion
matching it could pick any position
within this open open area right
here and that brings me to the setup so
right here I'm actually excluding the
first seven frames from the database
that makes the animation basically start
at frame seven rather than frame zero
and how I did that was I right clicked
and added a notify State and I set a
exclude from database uh post search
notify
State and I just extended it along the
first seven frames
also uh added a block
transition notify State and that's going
to block the motion matching from
picking any frame between frame 10 and
frame 37 in this case to start the
animation basically it means that it has
to start the animation it has to choose
a place between frame seven and frame 10
to to start the
animation lastly I created a new notify
track and on that one I added an
override continuing pose uh cost to bias
and what this does is it lowers the uh
cost of continuing uh the animation by
one point and so it's much more likely
to play this animation all the way
through if you need to set that modifier
below negative one then it's very
possible that there's
something wrong in your animation that
doesn't quite line uh line up with uh
stuff and so it's basically more
expensive to stay uh to continue playing
this animation than to jump out of it
uh that would be why you would why you
might need to lower it below negative
one but negative one is the default
value and it's a very good value so in
every case that I've seen so far where
I've need to needed to lower that below
negative one it was because I was
overlooking something that I needed to
fix on the
animation so you'll notice that I have
these three curves right here this one
actually isn't even needed as you can
see the value is z0 uh I added that just
to make sure though so these are the
important ones right here uh I will go
over that in a later video
perhaps so if you look over on animation
data modifiers that's under window
animation data modifiers if you check
that it'll open up this window right
here and I'm just going to remove that
modifier uh but you can add the foot
speed L and foot speed R anim modifiers
and then just press apply the default
values are fine uh and what it'll do is
it'll map out a curve for the the for
the speed at which the feet are moving
at and that's used by the post search uh
schema uh when post searching in certain
situations
so that basically
covers that well actually I did not go
over the
actual fight offensive here you'll know
just like added those to that one as
well I'll just remove that curve curves
do have a cost
guys so if you don't need a curve remove
it uh
so
basically on this one I just brought
this in from mixim and I targeted
it to the
ufn
and
if if the pelvis is offset or if the
root has a rotational offset on it then
you'll have to fix it I may go I'm
probably going to just do a dedicated
video uh for bringing stuff in like this
and setting up your own Idols uh I'll do
that later um not this weekend but maybe
next weekend I'll do that uh just uh if
you guys want you can try to remind me
in case I forget
but yeah I'm probably not going to go
over that right now um because honestly
I don't remember so I'll have to uh see
if there's any problems whenever we do
that in order to remember exactly what
it was I needed to fix at the time at
the moment though I just don't
remember so
alternative
transition and why I didn't do it a
specific way
so there are our alternative uh
approaches uh to playing the transition
animation and I'm just going to close
that out
right so yeah okay let me just show you
the transition first there's an
alternative transition in here uh so I'm
kind of skipping ahead here so that I
can uh show you this but I think it's
probably best that I just go and show
you this is going to be an alternative
in the next
update and I'm not really happy with it
because it doesn't really seem too
realistic to me uh I personally think
that if I were to transition out of this
pose right here in real life that I
would probably push off of one foot
while keeping the other foot in
place and then I would just reposition
one foot I might kick off the forward
foot and keep the back one in place or I
might kick off the back one and keep the
forward one in place
I might re slightly reposition uh the
other foot after I've planted my uh
other foot but it wouldn't be by much
now the reason why I don't uh do that in
here is
because it requires root
motion so these are being played from
the an graph inside of here and anything
played from the enm graph by default uh
the root motion is just ignored they're
not driv sequences played on the enm
graph uh do not have they're not root
motion
driven the motion matching system does
analyze the root motion uh for post
searching
uh uh reasons but it does not
actually use that root motion to drive
the capsule that the character is inside
of and
so because this one starts right here
and this one ends right here the pelvis
has to match up in this one where it is
in the actual idle Loop uh otherwise if
it doesn't then you'll get foot
sliding uh whenever it Blends out of
this into the actual idle Loop it'll uh
it'll slide across the ground uh if the
pelvis position doesn't
match and so in order to transition out
of this one on one
foot you would
need you would need to move uh blend the
root bone from where it is in this
one to where it would be in this one
if uh if this
foot was uh if the if that foot right
there stayed right here then and you
moved to this foot up right here then
the pelvis would be right here and the
root would need to blend over
here if you did that and you played it
as a montage uh then it would probably
look more
appropriate but I feel like it's a it's
a bit inappropriate to play transitions
as
montages I may experiment with that
later and if I think that it's Justified
then I'll redo this alternative right
here and I'll set it up as maybe a
dynamic enim Montage that gets played
from the vent graph right here uh inside
of here so that's basically kind of what
they did in Als in some instances like
uh for the procedural foot correction
system they played them as those they
played those animations as Dynamic
montages from the event graph so I may I
may look into that and that may be a
better approach to it uh
but uh it's not going to be in this
update that I experiment with that I may
experiment with that next week
so where they are stored and played
from they're stored in the post uh
search databases the transition from
fight offensive is stored in the normal
uh idle database I duplicated this idle
database let me just show you I
duplicated this
and I renamed this one un with
underscore custom at the end to identify
this as the idle custom or the custom
Idol and so if you open up that one
you'll see this has the transition to
fight offensive and it has the fight
offensive animation as
well now if on the idle one if you want
to try out the other Idol I kind of
think that the Hop looks better and I I
will redo this hop animation uh to be
slightly longer and have uh a better uh
more realistic physical animation to it
uh the reason why it looks a little
stiff here is because I was trying to
make it too short and then I realized
later that coming out of the fight
stance I don't really need that to be
super fast so I actually can't afford
like maybe 10 more frames on it uh so
I'll go back and add maybe 10 more
frames onto uh this one so that the
physical motion looks more accurate um I
don't have a proper recovery at the end
of this one that's the reason why it
looks stiff at the end uh but if you
want you can disable this one by
pressing this eyeball and then press the
eyelash on this one to enable this one
and so if you do
that and you change
back that's what you
get so it's up to you which one you
prefer really but I thought I'd give you
guys an alternative and like I said I'll
revisit this one uh maybe next week uh
and maybe make it a dynamic Montage uh
on the event graph um so we'll
see so that's the database so if we go
to the
Chooser this is the dense
Chooser this is the actual CH uh Chooser
database and if
we if our database LOD it's currently
dense and this is automatically I think
uh regulated in the background for us uh
based off of distance from the player
maybe I'm not real sure I I haven't
looked into that
yet but if you browse to this one and
open up this one that's the one I was in
just a second ago and this is the one
that you'll see at least for sure
whenever you're close up
so if you see this stand Idols right
here this is is a nested
Chooser uh and there's different nested
choosers in here and if you press the
edit button it'll take you inside that
nested Chooser and it's like a Chooser
only it's a Chooser inside of a Chooser
rather than a completely separate
Chooser uh like this one right here is
the dense one is a separate Chooser but
these are actually inside of this dense
Chooser now I replaced the idle uh post
search database right here with another
another nested user called
idle and it's I didn't change any of
these settings right here so it'll still
select it based off the same criteria if
we go inside of it though you'll see
that it'll select the idle custom if we
are in the custom idle state if we are
in any other state it'll just choose the
regular normal idle that it would
normally have playing
so that's that covers
that
so how to blend
into those quickly using anom notify
States so I'll go ahead and play and I
don't know if it's going to crash it
didn't okay
so so you'll notice that right here I'm
blending into it fairly
quickly and some of y'all may not
realize
that I'm blending into it so
quickly but if you look at
this if you look at this uh stop let's
see you'll see it's pretty short only
only a few frames
long
and let's see this is the stop that just
played and it's the same length as the
other one it's pretty
short and then it just Blends into the
other
one so if we go into the regular uh
State and we do a
stop you'll notice right here that it's
actually quite a bit
[Music]
longer so right about here is probably
where it's blending out on ours
completely blending out so all of this
right here would normally be what you'd
have to wait for before you would
transition back into the
idol but I found a way around
that and I mean it's it's probably the
best approach I've found uh I've played
around with probably about a dozen
different ideas and this was the only
one that really didn't have any uh
serious issues um related to it and so
it's the one I went with and it
basically just takes advantage of anom
notifies so I'll open it up and show you
what I mean so right here is the window
where it's going to uh start blending
into that stop and then it'll just
continue
playing until it's
interrupted uh by the idle database or
until it finishes completely playing and
as you can see it's a pretty long this
is uh an Unreal Engine animations are 30
frames per second so this is several
seconds
long right here at this last fall event
and in case you guys didn't know these
fall events are just basically sounds uh
the those are those are what are
responsible for playing The Sounds
whenever you you take a step uh and on
the last one the last one is normally
where the last foot gets placed and
that's basically where we are fully
Blended in to or at least our feet are
in the their final resting place where
they will be at in the idle
animation and so if if we just create a
an anim notify and I named mine feet
planted and
so this lets me know on the enim graph
hey
uh both feet are planted you can now do
uh you can now interrupt this and do an
early out into the idle uh animation or
the auto transition animation and that's
what basically what I'm doing over here
on the event
graph uh I have this anim notify State
and I have this booing called feet
planted I'm waiting two seconds here oh
yeah and by the way this is going to be
cleaned up later I still have trash
laying around from my
experimentations but anyway so the feet
are planted I wait two ticks and then I
uh uncheck I reset this variable why do
I wait two ticks well the reason why is
because this anom
notify
um it's it's just a timing thing uh
basically by the time uh this anom
notify uh
fires uh we may have just started our
tick or we maybe halfway through our
tick we don't really know and so what
ends up happening is if we just wait one
tick
then uh this variable will be checked
and it'll think that it's F false
because uh this hasn't set it to True
yet or it'll set it it'll check it and
it'll be false and then immediately
after it checks it and thinks it's false
this one will be checked
and then before uh the next
tick
uh it's already set back to false so I
have to delay it for two
ticks you could theoretically just do a
single delay here like this and just set
it to
0.1 and in fact you might replace it
with something like
that but I wanted to keep it as short as
possible and two ticks seem to work for
me if I see any bugs popping up related
to this later on I might just replace it
with a single delay of maybe 0.1
seconds so
anyway this is being handled if we go to
the anom graph you'll see this is the
motion matching node right here and
every time this updates basically on on
a tick every time this ticks this motion
motion node it's going to call this
update motion matching
function inside of here it's going to
evaluate the Chooser and decide which
database uh uh we should be uh searching
from
next and
so in most
cases we do not
interrupt the current
database and what that means is
basically if we're playing a stop
animation and since stops happen when
we're in an idle state so let me just
show you here so we have these two
movement States idle and moving stops
and Idols both happen whenever uh we are
in an idle
State and if
you go to your post if I can find it
done
uh oh okay
right yeah
so so stops
happen
um based off of these this criteria
right here
but when we're when we're in a stop when
we're playing a stop animation we
actually uh transition
into uh one of these idle
databases but the thing is what a lot of
people don't understand is that unless
you interrupt it the last animation that
was playing in this
one if we're playing this animation
right here and let's say we get right
here to this
point
and this uh Returns the idle data datase
right here but we're still playing this
animation right here even though we've
reached this point and and the Chooser
has returned to the idle database we
will not stop playing this animation
we'll continue playing this animation
until uh it's either over or there's uh
or the post search decides that it costs
less to start playing an idol than it
does to continue playing this
animation uh to the
end and so because of that if we don't
interrupt it it'll just keep playing
until the animation is
over and that's where this logic down
here comes in right here so I had to add
some custom logic to
this this was an experimentation by the
way if you go in here here you'll see I
haven't completely removed it uh that
was my first ideal before I decided to
just set up some
custom logic in
here and and this other method actually
works basically what I'm doing is I'm
getting the Delta time of this
context and whenever we enter this idle
State I start adding that Delta time
to the current value of this
variable and that basically lets me know
how long I've been in this idle movement
State and whenever we leave the idle
movement State because we started moving
then I just reset it and what this does
is is I can
say back
uh over here I can say okay if this
value is greater than or equal to 7 then
we've been playing a stop a stop
animation for uh 70% of a
second and so we can interrupt it as
soon as that criteria is met um and that
does work but then you just have this
static uh ver varable and I decided to
go with this ANM uh notify State um
because oh give me a second I'll be
right back
sorry about that I set an alarm so I
wouldn't forget about it I had a soda in
the freezer and I didn't I didn't want
it to explode all over the inside of my
fridge because I've done that actually
several times and it's a mess to clean
up uh
so so anyway yeah the reason why I went
with uh this anim notify uh method was
because it gives me
precise timing on an on a per animation
basis which allows me to transition out
of that idle animation faster if I need
to so you may like that other ideal
better but uh that's that's on
you this method seems a little bit more
complex because I guess it
is but
basically this right here
means that we should try to interrupt it
if we're moving
from a custom idle from the custom idal
State
into one of these other states so if
we're moving from this custom Idol State
until the rifle pistol or
unarmed then we should uh we should try
to interrupt it and the reason why is
because and in actuality it will
interrupt it and the reason why is
because we
don't
want to have to wait until the custom
idle Loop animation has completely
played before it
transitions into the new idle uh
stance because that could take several
seconds or it may not happen at all um
it might just keep looping through that
custom Idol animation and never trans
position uh and that's the reason why we
interrupt it right here using this
logic
or if we are in the custom idle State
then we want to try to uh interrupt
it and I could have uh put this right
here but then it would be evaluating
every tick right here from the selector
so I decided to only
evaluate this
logic if we actually actually are in the
custom Idol state or we just left
it
[Music]
so that's the reason why I did that this
right here is basically saying that if
we are
idle
and we're not playing a turn and play
sentiment
then we can interrupt
it because we don't want to interrupt
the turn and place animations we want
them to play all the way through if we
do interrupt them then the character
won't completely
turn and the reason why is because of
the way that this system is set up in
here with the steering and all of
that if the turn and place animation
place halfway through you're only going
to rotate half the amount of that turn
and place animation uh and so you're
going things are going to become
misaligned if uh you interrupt it so we
don't want to interrupt turn and place
animations right down here I'm basically
saying that
if we're playing a stop uh animation and
we've reached the feet planted position
then we want to interrupt
that uh and then down here I'm saying if
we're
currently in an idle
State and our last state was not a stop
uh
animation
then that means that we're moving from
one Idol to another Idol and we can
transition we can interrupt
it um I probably explain that better
down here I don't know anyway you can
read through my comments so that part
was kind of long sorry but I I wanted to
try to explain this logic as best I can
it's a little confusing
yeah so already actually explained how
and
why uh we interrupt database changes how
turn in place comes into this and the
challenges it presents right so this
does present some challenges and it kind
of looks funny uh the way I have it set
up now and next week I'll probably end
up uh replacing this with that
alternative method uh but you'll see
that we do get some foot sliding and I
guess it doesn't look that bad it kind
of looks like he's hopping uh but I mean
if you're like on uh gravel that might
make sense but in a lot of cases it
probably doesn't make a whole lot of
sense that he can just slide his feet so
easily um into a position like that
unless he's on like a waxed floor and
he's in
slippers then
maybe but it does look kind of funny
so I have this button G that you can
press for the alternative one and this
actually uses motion warping it just
uses two animations that I made uh and
motion
warping and a little bit of logic I went
over that in the last
video but I guess I can go ahead and go
back over it
again I'm trying not to make this too
long but I think I've already went over
30 minutes oh well uh
so that all happens basically from the
character
blueprint right here
so I'm getting the the Delta between the
root uh post offset root
bone so I'll show you
that so this offset root bone offsets
the root bone so if you get the root
bone directly from the skeleton it won't
be the same as what it is after this
offset root bone is applied uh and
that's the reason why you have to get it
from this and so you'll see this little
tag down here it says offset uh root and
that's the actual tag that we've
assigned to it and so we can actually
use that tag on the event graph and
that's what they did I didn't do this
this was uh their
technique uh inside of here they're
getting the anom node reference to that
offset route and they're getting the
transform of it and they're storing that
into the root transform that's what I'm
getting
so I'm getting that root transform and
I'm getting the rotation off of it I'm
getting the angle between the root
rotation which is basically the for
direction and the base aim rotation and
then the based off the Z if the Z is
greater than zero then it should be a
left turn animation that plays otherwise
it should be a right
turn I'm setting the uh warp Target uh
rot
uh to be that of the aim rotation so
that motion warps towards the uh angle
of the base aim
rotation and so if we open up these
animations you'll see I have motion
warping
here and I have the target name set to
rotate I have warp translation disabled
because we do not
have uh a translational offset or a
locational offset I should say uh on the
root bone we only have a rotational
offset where it's
rotating and so if you select the
root and let me just do this so you can
see the root the root bone rotating
right
here I don't start rotating the root
bone until the feet come up off the
ground and then I stop rotating as soon
as they're planted onto the
ground so that's the full uh 90 degrees
here and you can see that it starts at
zero and goes to n uh negative 90
there's a slight
uh level of
precision uh discrepancy and unreal uh
but it is
90 it is a total of 90 I don't know why
uh sometimes you get this slight
discrepancy but anyway that's
irrelevant so
basically what I'm saying is I might uh
set up a system
later uh where this happens
on the actual uh event graph
somewhere somewhere on here and it and
it may play as a dynamic Montage from
the event graph along with maybe that
transition to idle from F uh animation
that I do later um and so I'll use I'll
try setting up a system that handles all
of that from here uh for that
custom because I think that real I think
that uh looks more appropriate uh than
trying to uh
rotate and place like
this like
this because it just looks a little
weird go uh blending into it looks weird
blending out of it looks fine but uh
there's just no good way I mean you
could create a transition uh to that uh
but it would slow down uh the whole Act
of turning in place and it may look a
little weird as well why is he going
into a different stance just so he can
rotate in place you know what I mean
like uh I think that other one looks a
little bit better if you're in a
fighting situation you may actually hop
around like that I don't know uh but
anyway that covers
that yeah so that basically coveries it
guys I guess that's the video and I hope
you found this helpful and I'll see you
in the next video

================================================================================
ARQUIVO: Unreal Engine 5_ GASP DAO - Custom Idle & TurnInPlace (Coming Soon) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

Idle and TurnInPlace will be in this next update I release Tonight or Tomorrow.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

0:00 Technique 1
0:45 Technique 2

=== TRANSCRIÇÃO ===

all right guys uh so I'm just going to
uh demonstrate this real
quick uh this is one technique that I'll
be
using uh but I won't have it set up as
the primary but it's rather responsive
for those who want a more responsive uh
technique now I'll go ahead and show you
the other technique but I need to enable
this inside of here uh one technique may
be easier for you guys to do than the
other uh so this gives you two different
techniques
um I will discuss a third technique
later um but it's probably not the best
ideal uh
so so this is uh the other
technique and I did shorten uh some
things so that it was more responsive as
you can see it responds uh rather well
now uh so if I keep turning he'll just
keep turning with me so uh I'll explain
to you guys how I uh fixed that so that
he turns really quickly uh I found the
reason why there's such a long delay
between turns and I'll explain that to
you later so I'll have both of these
techniques uh set up and one of them
will be deactivated by default and
that'll be this technique uh right here
but I'm going to leave it in here
because some of you like I said may find
one easier than the other uh to recreate
yourself

================================================================================
ARQUIVO: Unreal Engine 5_ GASP DAO - Fast Path (V1.29 Overview) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

After it was brought to my attention I realized that I had forgotten to fast path a lot of stuff throughout both animation setups. So that's what this is about. At the end of the video I will discuss how Offset Root Bone works Pre vs Post Offset Root Bone.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

0:00 Fast Pathed Nodes
3:30 Aimoffset
8:00 Other Fast Pathed Nodes
10:00 Gameplay Tags and Choosers
12:40 Offset Root Bone Quick Explanation

=== TRANSCRIÇÃO ===

all right guys
so somebody pointed out to me yesterday
that there was a lot of stuff in here
that wasn't fast-tracked so I went
through today and I fast-tracked
everything so I kept track of everything
that I fast-tracked on the Dao one there
were 15 nodes that were fast-tracked and
on the copy uh motion variant I
fast-tracked 303 nodes so yeah there
there were quite a few on the uh copy
motion one but that was still under
heavy construction as uh some of y'all
that have been following this should
have known so uh anyway I fixed an
interpolation lag on the pitch aim
offsets I had the uh smoothing on those
aim
offsets inside of those animations
wherever they are anyway I had them uh
set to I had the value set to 15 I set
it to 30 for faster uh smoothing
interpolation uh I actually fast FASTT
tracked the
motion matching blend stat graph which
they did not have FastTrack so I FASTT
tracked the orientation warping the
steering uh these two steering nodes as
well the reset route Transformer was
already
fast-tracked so that's all taking place
inside of this update uh event graph
right here so that we can Fast Track
these uh on on those
nodes so there's that I did that on both
the copy motion and the Dao
variant anywhere else that I saw there
wasn't a fast track I FASTT tracked it
you'll see these are FASTT tracked now
as
well um everything in here was already
fast
tracked uh the linked Anem layers I
fast-tracked everything in there so some
of these like probably about 50% of
these numbers here are probably just
from linked enom layers so you guys know
I went inside the linked enom layers and
I fast-tracked everything inside of here
that wasn't uh fast-tracked
before and everything inside of the
overlay states are now is now
fast-tracked
this as
well let's go back to the
Dao yeah so I FastTrack to that as
well
um I on this one yeah so I think this
was already fast-tracked even though I
had the node right here uh you can still
do a property access and get FastTrack
if the property is local
uh so
apparently if the property is not local
if you have to fetch it even if it's
from property access if you have to
fetch it from a external uh blueprint
then it will not be considered FastTrack
unless you bind it from inside of the
node itself like I did here uh now so I
didn't actually have to do it this way
but I did it anyway uh like
that
so the aim offset is actually being
updated in here you can read the
information on it I
removed
the stuff from the blueprint thread
safe that I wasn't needing so there's no
more uh spine being done right
here you could still do it right here
and that would probably be fine but
but uh because I was doing it on the
other one from right here I decided to
do it on both on both of them from right
here and that's fine it still gets
executed on a worker thread just like it
would if you did on the blueprint thread
safe update
animation the only difference is is that
this one gets uh evaluated before the
graph uh anom graph is executed whereas
doing it inside of here it
happens based off of the order of
operation so if you get something if you
get the value of the offset root bone
from before the offset root bone you're
going to get a different value than if
you get it from after
it it doesn't actually really cause any
problems uh there might be just a slight
bit of latency uh but it it'll be so
small that it won't even be noticeable
by anyone so it doesn't actually matter
if you get the aim offset before or
after the offset root bone uh just so
you guys
know inside of here I'm actually getting
the previous frames uh root transform
location and even though that I'm
executing
this during the the ANM graph and only
when the AO gets
executed and that happens after the
offset root bone it still
actually evaluates it based off the last
frame and in case you're confused as to
why uh the reason why is because all of
those values I'm using for that
calculation let's see all these values I
use in this calculation get EX get uh up
updated at the beginning of the frame
before the ANM graph runs uh so that's
the reason why um that might be a little
confusing to y'all but by the time it
gets to this node this variable actually
doesn't get updated until after
this until after it outputs and
then before it starts back over
again so
but it's not a big deal like I said
there if there is any latency there it's
so minuscule that it's not even
noticeable
so I was using this method I decided to
use this one because it's lighter also
because I need to clamp
it and then divide it by
six it's I Tred to keep uh the math as
as possible and keep these the number of
nodes here as few as possible uh so
that's the reason why I decided to go
with this method instead of this
one I'm trying to
cut performance as much as I can where I
can but in some cases it's kind of hard
to
avoid I left this here
because I'm not 100% sure which one of
these methods is actually
more performance
friendly when I used this method I had
to clamp the angle uh on both of them uh
to prevent an issue but I don't remember
that being an issue when I used this one
so if that's the case then neither one
of these methods is probably any heavier
than the other um to
any good sized margin
right
so like I said everything in here is
FASTT tracked now now I couldn't fast
track this because you can't bind uh you
can't bind anything to the weights right
here and hooking it up right here
doesn't actually FasTrack
it that's a seems to be limit of the
layered blend per bone and so I got
around that by just doing it like
this because we actually don't need to
evaluate this at all
if we're in an unarmed
State and so having this extra node here
actually might make it a little bit more
performant this got fast tracked this
got fast tracked
the curve is actually being
uh set right here inside of the node I
did not expose it uh so don't let that
confuse
you over here on this one basically the
same thing I fast-tracked everything uh
that stuff was fast-tracked already this
wasn't
FastTrack none of this was FASTT tracked
this wasn't fast tracked none of or
there was a lot of stuff in here that
wasn't fast Tred as well I went over
that
and so right here all that stuff was
fast-tracked I use the same method
here and then right here the the hand L
joint Target offset it's being set
inside of here and the update CM data
right here this is where all that stuff
is being
updated and so you'll
see this right here and I did replace I
removed the need for those game those
enums so I was using enums and I was
using a workaround to get the
enums for the Dao I removed all the
stuff from the Dao that we're not using
in the copy motion as well guys
uh let me show you what I did in here
so um uh and the update
States you'll see I'm no long I no
longer have that function right here I
just have this collapsed graph and it's
just uh we got this gameplay tag
container here and I'm removing the the
last uh one and then I'm adding the
current one to
it and so inside of here now we're using
gameplay tags to select our layering
data asset for the
Dao lay varing
settings
um yeah so you can go to properties here
and you'll see I have this set to any
and that just means that any that are
inside of this container if any of these
inside of this container match then it's
good
uh I tried this before and it didn't
work but that's because I tried to do it
from a pure thread safe function which
normally works inside of here but
apparently it doesn't seem to work if
you create if you make a game play tag
container using a helper function you
can't do that uh it won't read it inside
of here for whatever
reason so that's the reason why
that's the reason why I create I created
a new variable of type gameplay tag
container and I'm adding and removing
them adding and removing them so that
explains that in case any of you guys
need to set up stuff like that for
choosers
from an
enom or from anywhere
really choosers can be used anywhere
guys in case you weren't
where and yeah
that that pretty much sums it
up
so last night I was uh laying in bed and
I came to a realization it just kind of
popped into my head uh sometimes that
happens
but I was wondering I was like there's
got to be a good reason why the order of
operation for the offset root bone
matters and it's actually once you know
it you know it it's obvious
but this whole and this whole setup is
so odd to me uh that they came out with
for this motion
matching so it's it's been throwing me
off for a while now it's definitely not
a conventional setup
so just to explain it to you guys
basically what's happening and I haven't
even tested this but if
I uh come over here and I'll to I'll
togg go a pose right here on this motion
matching and if we if I were to
say toggle a pose inside of one of these
as
well so let's say the pistol
I can just toggle this pose before I
rotate
it and this
should let's see do I have it no so I'll
have to stop the game real
quick I should have put these in the
outside folder and I I don't know why I
did that um to be honest with you I'll
probably rearrange it at some point but
anyway
[Music]
so you're not going to see it until I
pull out the pistol for one and I set
these and
now we should see
it so this is
y so both of these are basically pre
offset root bone and you'll see that
they're always facing the direction that
the capsule is facing uh they're always
facing that
direction so whenever the offset root
bone is applied it will counter rotate
this and I'll show
you so if I toggle the pose watch for
that one it'll counter rotate that pose
uh to keep it in place you
see and so if you do your layering
before the offset root
bone then it automatically counter
rotates that as well and so the method
that I had to
use for applying this after the offset
root
bone it required me to manually rotate
it since this happened after the offset
root bone since it was being applied
after that since it was being applied
after that I had to manually do it
because the offset root bone wasn't
counter rotating it for
me so I hope that
explains uh
this how that works I was really
confused and I kept thinking I
understood it but I actually
didn't
and last night that really cleared it up
for me so I did I haven't even verified
it until just now uh as I talked to you
guys but I just knew when when the ideal
popped into my head it was just like a
sudden realization I knew uh that's what
I was uh uh missing so that's how that
works
guys it's an order of operation
thing and I will see you in the next
video that's basically it

================================================================================
ARQUIVO: Unreal Engine 5_ GASP DAO - Setting Up A Custom MetaHuman (English_ASR)
================================================================================

=== DESCRIÇÃO ===

In this video I'll show you how to setup and adjust the Aim for a Custom Metahuman.
WARNING! DO NOT USE STATIC OFFSETS
They are easier but I found that they cause problems when Aiming, use Static Local Offsets instead.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

=== TRANSCRIÇÃO ===

all right guys so I'm back with another
video we're going to set up a metahuman
so it it is a little quirky there's a
bug that's been in here forever uh ever
since the master pose was introduced and
I I'm assuming that the guys at epic
games just don't care to fix it or that
maybe it's some kind of
Legacy uh bug that isn't easy to fix but
anyway just go up here and press quickel
Bridge right there if you don't have a
metahuman downloaded then you're going
to need to sign in right here uh if you
do you can go to the computer icon you
can go to metahumans and you can
uh uh press this arrow button that pops
up whenever you hover over
it after you do that it'll uh pop up
with this window just press import
ignore this this is for DNA we don't
need DNA in here uh so go to Med humans
go to the folder that's named after the
medum which is best in my case open up
the BP
best it'll take a
second uh on your end you may have to
bake
shaders so go into the blueprints folder
under content go to the retargeted
characters duplicate this uh metahuman
Kell
rename this to
best open it
up we're going to just select all of uh
we're going to select everything but the
body for right
now let's see actually let me just see
where this is where this stuff is being
referenced at I want to right click and
go to by class member there's three
references to
it yeah so we're going to go ahead and
delete all of
this and we're going to select all of
this actually this compol it first and
save it and then come back over into
this select all
these I'm just going to select the LED
sync too I'm just going to bring it all
over I'm going to contrl C that and then
under mesh I'm going to control V it it
looks like LOD syn was already in here
so I'm going to delete the extra one
this should be a child of the mesh it
did not place it under the mesh because
it was under the mesh in the other one
so just drag the body over the mesh to
parent it to the mesh everything else
should be the
same now we're going to hook this stuff
back up
so right here we're attaching the held
object to the body uh it needs to have a
weapon R bone or a weapon R socket so
you need
to well this is the bug I'm talking
about right here I can't actually go to
it because it's all bugged out um so
back in this one just open up the
skeletal mesh on this one
and what I'm going to do is I'm just
going to collapse the hands since
there's 50 billion bones in
there and it looks like we have a weapon
R socket right here already uh I placed
that so I'm guessing or it came with it
already placed I don't know either way
it's fine so we have the weapon our uh
socket that's set up properly now we
need to set the body as the
leader right here under this
function and then on the construction
script we need
the
Torso and if you want you can uh open up
the
Kellen and go to the construction script
and you'll see we have feet legs and
torso
sometimes it does matter the order of
operation so I'm going to keep it in the
same order of operation as it was
before the face does not need uh to
be uh set up like that I don't think
because it uses a if you go to the face
nvp and open that up inside of the anom
graph you'll see it uses a copy pose
from mesh
that's the reason why we don't need to
do do it for that one because it has an
actual animation blueprint for
it so now we need to not offset the head
we need to offset the body so I'm going
to bring it down and I'm going to oops
make sure you have the body selected and
rotate at
90° so that it's facing uh forward where
this blue arrow and red arrow are
facing and then compil it and save
it then we're going to go to the widget
folder down here open up the game
animation
widget and I'm just going to duplicate
that one right
there and I'm going
to go back to this blueprint browse to
it so it's selected right here and I'm
going to select this one I just
duplicated and I'm going to assign it to
that
one and I'm going to go to the class
defaults here and make sure that it has
an ik retargeter right
here now what I normally do is I go to
this gear icon and collapse
all and then find the Dao right here and
then under live
retargeting uh this will be the stuff we
need
to uh address so I'm going to browse to
this let's see which skeleton is this un
W so it's the unw skeleton so what what
I'm going to do is I'm going to create
another sub foldo under here and I'm
going to call it
unw and I'm going to shift select these
two folders and click and drag them
under here copy here and now I'm going
to assign these to that one because it
will likely need different
settings so the M9 aiming goes to a the
aiming
State and then I'm going to press a
browse M9 ready the ready State browse
M4 A1
aiming aiming ready ready and
save compile
save press
play now I'm going to run over
here and I'm going to press shift F1 uh
to release my mouse cursor and I'm going
to select this character right
here and you'll see that we have an
obvious problem here this is probably
what that one guy was talking about
now that's that
might
be because we did not assign the anom
class right
here so maybe this is maybe that's the
problem he was having the ANM class is
not assigned uh so so if we go back over
here to this you'll see that this one
has the generic retargeter anom class
and I'm just going to assign that to
this and you'll see it says None that's
a bug uh it should allow us to do that
so what we're going to do is we're going
to under here we're going to search for
generic animation blueprint generic
retarget ignore the one the I'll show
ignore this one I'm going to remove it I
don't remember why I I duplicated it but
I think it was as a I think it was a
backup and I forgot to delete it
whenever I was running my test just in
case I screwed something up so I
duplicated it for a backup but it's not
needed anymore so now it should
work so you'll see this but the
character is floating here so we need to
go back in here and we're just going to
stop this and I'm going to go into the
front
view and you'll see how he's floating
off the
bottom and right now I have snapping
enabled so I'm going to set that to
one and I'm going to move him down right
there that may be okay but his feet are
sticking out the
bottom it looks to be okay uh actually
he still floating a little bit so what I
might do is bring them down maybe one
more
cm and we'll see if that's
enough yeah it's okay we could probably
bring them down one more
centimeter so that he's his feet are on
that line right
here and we'll see if that works yeah
that seems to work so now I'm going to
try and see if this works
okay seems to
work
so so you'll notice
that uh and it's hard to see from this
angle but he his aiming is actually
quite off so what we're going to do is
we're going to adjust those things we
created so I'm going to to
actually stop this I'm going to close
out of this stuff
here and then I'm going to go to the
class defaults and I'm going to browse
to
this and now I'm going to dock this over
to the side I'm want
to so that needs to come over
eight on the right hand this is the M9 a
so that he's aiming with the M9 right
now so I'm going to reset this right
here and now he he needs to come over
about
3.75 on the yah so this is the uh the
one in the center is yah which
represents z uh rotators are a little
bit different they're weird it's like I
think it's like pitch yaah and roll but
that actually translates to to uh
yaah uh pitch and
roll right here
so
3.75 because we want to move it in the
opposite direction that it was
offset and now you'll see it's almost
exactly
zero now we do have a little bit of
pitch going on there but it seems to be
fairly centered we can lower that uh
about one degree so I'm going
to enter positive one
here that was too much so I'm going to
say
0.5 and that seems to be pretty
centered so the offset of him shooting a
little high a little low and then uh
near the center that has to do with the
breathing that I'm applying over the top
you can red that in the animation
blueprint If You Wish by going to
mesh uh browsing to that or going over
here and going
to characters no blueprints
sorry and ABP sendbox
character and if you just close all tabs
here and go to the anom
graph and you go to the pitch AO cuz I
believe believe I did move it over to
the pitch AO didn't
I no okay I
didn't uh I think I had considered that
but I ended up not doing it so under the
aiming you'll see that we're applying
this right here now you could move that
into this right here if you wanted to
apply the breathing on a per uh weapon
uh basis but anyway this is pretty low
if you
increase it
further then you'll notice it's a little
bit more accurate
now so if you if you say 1.0 and compile
that you'll see it's quite a bit less
accurate so I'm just going to go back to
0.25 I think that's fine
and you could have something that
adjusts this uh for maybe they level up
their accuracy and so you can adjust
that that's pretty much it for this one
uh no it isn't actually we need to
adjust the left hand now so I'm going to
eject right here while he's in the
aiming mode and this is another reason
why I have the aiming set up to toggle
uh because it makes uh doing this stuff
easier so I'm going to uh reset this one
actually cuz that one didn't work for
this character those settings didn't uh
each character is going to be a little
different and so you can do this uh as a
static local offset but you're moving it
in relation to how the
uh handbone is oriented and so things
might seem a little weird uh whenever
you're doing that I don't think that
there's any problem with using a static
local I mean a static offset and the
static offset is in mesh space so it so
forward is actually forward like in
front of him and left and right is
actually to his left and right rather
than left and right in relation to his
hand you see what I'm saying so uh it
makes it a little easier to if he's
actually aiming the gun to actually
create your offset like this
so if you're okay with his thumb
sticking partially in uh like that then
that's cool
uh that's just a retargeting translation
problem
uh is you'd have to modify the actual
underlying animations to get it to uh to
get his thumb to be uh positioned
differently but you could also rotate it
out like this and then just reposition
it based off of that and and so that's
what I'll do
just for demonstration purposes
here and I'm just going to offset it
like
that actually I think that looks a
little
funny so I'm just going to do it
something like
that so his finger might cut slightly
into the into that so you could just
lower it just a little bit
uh and I think that looks fine but
that's basically it for that one and so
I'll go back into
[Music]
it now for the most part um I'll just
browse over here to the ready one is
just going to be default settings and in
actuality you don't even have to assign
it if you're not going to set it uh and
if you don't set it it's just going to
default to whatever the actual uh re ik
retargeter is set up for whatever
offsets are on it or if there are no
offsets on it then that's what it'll
take
on uh if you don't
assign inside of here so if I go to my
class defaults let me just maximize this
if I don't assign anything to this then
it's fine it's not going to cause any
problems so I can actually clear those
and it's just going to default to the
class defaults and I can show you how
that works so if I go to the generic
retargeter and I open it up and I look
at this update chain settings you'll see
if the live if the PDA which is primary
data asset so if this data asset uh is
null meaning that there was nothing
assigned uh to that uh to this slot in
here I don't know why it keeps going out
of that so if there's nothing assigned
to that it'll return null and if it
returns null then it will just get that
those settings from the ik retargeter
otherwise it'll get it from the data
asset that's all that's happening uh so
you don't have to assign those it'll
still work and I'll show you now so I'm
just going to dock this over here again
and you'll see it still
works
so I don't know what that look little
movement at the end was I may have to
look into that that's that was a little
weird so anyway so now we're going to do
the M9 I mean the M4 A1
aiming and it's basically the same thing
and I just copied this one over from the
other one but because his Anatomy is
different uh it just doesn't match
up and you'll see that's it seriously
doesn't match up that's because it's a
this guy has a different skeleton
and it has a different
Anatomy
so let's just see what this says so it's
about 2.5 we need to do it on the
yaah and about
6.5 on the
pitch - 6.5 because that was a positive
6.5
and now it's accurate you see how easy
that
is now we can adjust the that's why I
went with this method it's just it just
makes it a lot
easier
so there is a problem though is I did
not actually straighten the barrel so he
is holding it a little sideways so what
you would have probably wanted to do
first is
rotate uh the barrel so that it's a
little bit more upright and you can
actually well he's not facing forward uh
so it it would be a little hard to get
it perfectly straight but you can
eyeball it and that should be fine now
this is going to offset the
aim well not really it looks like it
didn't really offset it I expected it I
expected it to offset it so
now we can
uh uh POS reposition
it so I'm going to bring it back
to and I'm going to bring
it yeah I'm going to bring it to the
right five and then maybe back
four let's try five five is fine and now
I'm going to reset this
and because of the way it deforms his
hands uh we're going to have to rotate
this I
think so I'm going to say 18 maybe 20
oops
20 and now
now there's a problem is I actually
unassigned the other one for this but
actually for the two for two-handed
weapons we actually need that one so
you'll see uh so that looks fine to me
I'm just going to save it and then I'm
going to show you what I'm talking about
so this is why I set it up so that we
could have different settings per state
because of the Anatomy issues and how
things are retargeted Anatomy is going
to screw stuff up and so what we
actually need to do is stop it from uh
stop it momentarily and I need to
reassign that ready one right here so
I'm going to just reassign
that uh for the M4
A1 and so now I'm going to go back into
that
State and we're going to readjust this
one for this
one oops uh I just accidentally
uh did the aiming one yeah
there we go for this uh one because uh
this isn't poing straightforward it's at
an angle uh in relation to his to his
torso uh because of that we have to
actually do this and I mean you can
still do a static offset but it's
probably going to make more sense to do
it as a static local offset cuz up is
this way in relation to the hand whereas
uh the static offsets up is this
way
see and and back is this
way yeah so this is X is back and
forward in relation to the end but
that's kind of that kind of looks
off so I think it needs to go this way
it's still a little weird trying to
adjust it that way because it's not
moving really in relation to the
actual
uh hand so this
one well it's not moving in relation to
the fingers so it makes it a little
weird so I guess that's okay
um looks fine to
me and yeah that's pretty much it
guys so I might look into that one
problem that we had with the M9 whenever
we were uh uh in an idol we were in an
idle okay maybe that was just an engine
bug it's not doing it
anymore huh weird okay if anybody else
sees that I'll let me know but I have
been noticing some bugs that only happen
the first time you uh you run it after
first launching the uh the project and
that seems and those seem to be engine
bugs and not specifically related to my
project so
anyway who what was that did I just get
what teleported me
I don't know what
happened that was
weird all right anyway guys uh I will
see you in the next video

================================================================================
ARQUIVO: Unreal Engine 5_ GASP DAO Full Setup & Troubleshooting (v1.3x) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

In this video I'll go over all the common problems people have during setup, how to setup the test characters in the project with my system as well as a brief explanation of how they work, and some a small issue that is easily fixed that you may run across that were introduced in 5.5.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

=== TRANSCRIÇÃO ===

all right guys uh so I'm back with
another
video in today's video I'm going to be
going I'm going to be redoing uh the
GitHub uh setup but this also works for
the partial download so if
you
um if you I if you purchase the direct
download and you go in here and you read
this you'll see that you can request
full uh access to the full project from
me from Google Drive but due to
differing time zones uh you may need
uh to wait a bit when you first buy it
though the direct download anyway you'll
get direct access to a partial and all
that is is the zipped up uh GitHub
repository so the same setup applies to
this um it's just that for the direct
download partial you can you you you can
do it in reverse it doesn't matter
so anyway let's get started uh first off
I'll go over the direct uh or the
cloning uh
process uh when you purchase access to
this private repository this is private
I'll have to go into settings and add
you as a collaborator uh so for the repo
you'll just have to wait uh it's just
how it is the reason why I kept those
two separate is because I'm trying to
reduce the amount of uh people on the
repo uh because some people they just
want direct uh access to the download
but anyway let's just go ahead and get
started
so after you've been given access to the
repo version you can come over here to
the code and you can open with a GitHub
desktop uh and if you've already cloned
it then it won't do nothing but if you
haven't cloned it then
it'll show a window up here when I do
the updates it'll show a pool request
here and you go can go to the history uh
to look at the uh updates and the other
information on those updates uh so yeah
that's how that
works however if uh you don't get that
window or or you're not using GitHub
desktop for whatever reason you can
download GitHub desktop and you can copy
this link if you want to do this from
the console you can also do this
uh from uh the command prompt if you've
downloaded uh that part of get uh but
I'm not going to show how to do that uh
there's videos on how to do that so you
can go to file uh clone repository in
the GitHub desktop and you can go to URL
and you can paste to that there it'll
probably automatically choose a local
path for you on your C drive for me it
chose my e Drive that's fine I'm going
to go ahead and clone it into that
folder
it'll only take a second because it's
it's less than 100 megabytes the reason
why it's uh while I'm only doing the
partial uh download or the partial
project on the GitHub repo is because
lfs or large file storage is expensive
and the first month I did that it cost
me
$65 uh
so and back then I wasn't charging for
repo access I had to start charging for
repo access because uh people started
abusing it
uh and yeah so I'm not going to go into
that uh but I did do a video somewhere
where I discussed that if you want to go
and look for it so anyway once you've uh
cloned it the next thing you need to do
is you need to go into the epic game
store and you need to look for the game
animation uh sample and you'll see it
right here now one thing you need to
know is if you've down if you downloaded
this stuff pre fab before Fab was
launched uh and you go to create the
project you'll only see 5.4 5.5 will not
show up and that's a bug uh
whenever uh Fab was released any uh
thing in your in your Vault any cache
data in your Vault uh will prevent the
Fab version from showing up so you can
go to your settings and you can come
down here to edit volt cache
location uh and I've already already set
mine uh to my f drive but you can change
yours like I did mine so that you can
find it easier if you
want but what you need to do is you need
to clear out that Vault cache uh so that
these projects will be able
to uh pick up the Fab versions uh
because the old versions are not going
to update anymore so after you've done
that you can create a 5.5 version of the
project and I'm going to choose my
location I'm going to put it here in my
e Drive and I'm just going to call
underscore
2 and it
will clone it it shouldn't take but a
second in my case I I I've only
downloaded the 5.5 version not the 5.4
version make sure you did make the 5.5
version don't try to use this with 5.4
my I've already upgraded the project to
5.5 you're going to have to use 5.5 it's
not going to work with 5.4 anymore if
for some reason you want the 5.44
version you can contact me uh but I've
fixed a lot of problems with it since
then so um I I won't offer much support
in in terms of that
uh so yeah anyway I'm going to go to my
e
Drive and so this is the one I cloned
this is the one I just uh
uh created the game animation sample
project
of if you have the partial
download then you can just
copy that into this folder and you can
extract all and you can just do this uh
remove that last part and extract it or
if you have sevens up you can go to show
more seven zip and extract here and then
uh when it asks you to override the
config file say yes you you want to
override their config file with mine if
you're doing it this way uh but if you
have the repo version you're just going
to copy all of this and you're going to
go into the re uh cloned version it's
not going to have any project files or
anything uh and you're going to paste it
here now I copied the config file too
and so it's going to ask me if I want to
overwrite uh the Dao config file
and normally you would say no but since
people keep screwing that up no offense
it's easy to mess up uh but since people
keep accidentally doing that I'm going
to show you what happens if you do so
I'm going to replace the config file you
wouldn't want to but I'm going to do it
anyway just to show you what happens if
you
do so now I'm just going to open up the
project it's going to create the drive
data cache folder intermediate and saved
[Music]
and know it will only take a a
minute to open
up so I'm trying to uh cover every
possible uh situation in
here
so because of the way that serialization
works and stuff like that uh it may
actually work even though you at first
even though that you overrode the config
files but just in case you should always
check this uh to make sure that you
didn't override the config files you'll
go into your uh you'll go to edit
project
settings and go to gameplay tags and you
should have two entries in this gameplay
tag table list if you don't add two
entries and then we're going to add
those gameplay tags back so I'm going to
go into the content drawer
Dao and one of them is under blueprints
data that's the that's the primary GT
data tags uh and if you open that up
you'll see these are for the held object
States and
stances so the other one is going to be
under
character under Dao characters metahuman
data and these are only for this
metahumans so if you're not using
metahumans you don't have to worry about
this but I'm going to select the uh GT
metahuman tags table and I'm going to
add it there and this is just for the
bodies uh it helps me cycle through the
bodies in that body blueprint it's not
actually necessary uh but if you want it
to play around with the the body
blueprint uh this one right here then
you're going to need it because if we if
we go into
this then
we go to the uh let's see the event
graph I'm going to zoom out yeah so down
here I'm just uh cycling through uh
these
tags and right here I'm
actually uh storing the males in a
separate one and the females in a
separate one and then I'm just cycling
through that and I'm adding those and
choosing uh from a Chooser
table uh so right here actually is where
I'm actually choosing the metahuman
stuff and in actuality I only have the
meshes in here uh and I'm asynchronously
loading them as well as you can see here
um there's not much of a a delay for uh
loading those asynchronously and it
saves memory because it doesn't create
chain dependencies where it has to load
all those meshes into memory at game
start uh which is why do that it's good
practice to uh know when to use soft
references and when not to
so anyway that's the basic rundown on
that so let's go ahead and uh set up uh
the uh project there's just one thing
you need to do after this or two things
you need to do you need to go to your
world
settings and expand the selected game
mode and right here you'll see that we
have the original uh sandbox character
we're going to go under Dao Char data
and select mine and we're going to press
this back button here you can also
expand to this by clicking on that line
and dragging it to be able to see it
more and then just press the back button
and then hover over and make sure that
it's the one that has Dao on the end so
all my files are
uh they have AO in them so that you can
distinguish them from The Originals uh
and you won't get
confused so that's basically it for
getting it that part set up now you're
going to go into the character blueprint
select the mesh and open up the uef and
skeletal mesh you can also get to it
from characters
ufn uh and
meshes so it's also under here so I'm
I'm going to go ahead and open this up
and I'm no longer actually using virtual
bone for the virtual bones for the feet
uh there was one project where for some
weird reason uh it was actually causing
problems uh so I decided to stop doing
that in some cases you might actually
want to use Virtual bones instead of ik
bones for example if you retarget all
these animations ik bones get messed up
guaranteed every single time you
Target from one character to another
your ik bones will get messed up uh it's
not a question it's just a fact um so
anyway we're just going to create
virtual Bones on the hand so on the
Handel I'm going to have it point from
the hand L to the hand R uh and for this
one it actually uh doesn't matter much
there's a bug in here actually and
you'll see it here in a minute I'll show
it to you uh and what happens is
whenever you uh create these virtual
bones uh and by the way you're going to
name this one just handore R and
whenever you create the virtual bones
you'll notice that it suddenly uh
freezes up that has something to do with
motion matching it's somehow tied to
that I don't know how but it is and it
it breaks it so it breaks motion
matching and you're going to see that
here in a minute and that's because uh I
have my own database uh my own version
of their database in here that I'm
using and for some reason it needs to
you need to restart the project in order
for it to fix it I don't know why it
can't do it during runtime but it can't
for some reason at least currently
hopefully they fix that in the future so
on this one I'm going to go from the
hand L from the hand R to the hand L
it's going to freeze up again so why
it's frozen I'm going to go ahead and
explain to you why we're creating
virtual bones so virtual bones give us a
reference um so that if I say say if I
additively apply uh breathing over the
top of an animation I can go back in
time and look at the virtual bone and
say okay that's where his hand was
before I applied this breathing and then
I can tell the two bone ik to place his
hand where it was before I applied the
breathing and in relation to the other
hand the right hand for example I can
place the left hand where it was in
relation to the right hand before I
applied that breathing uh and so they
they work just like ik bones only you
don't have
to and yeah just rename this one to
Handel and it's going to freeze up after
you rename it um until they fix
that
but yeah that's basically it so they're
they're just references uh you can
achieve the same thing with ik bones
only with virtual bones you you don't
have to constrain and bake those for
every single animation manually from an
animation authoring software like Maya
or a blender or cascader or something
like that um so it allows you to skip
that
step so now that we've created our
virtual bones for the hands uh that's
basically it normally that would be the
setup and it would work but now it's not
going to
work so you'll see it's not working and
we're getting these uh messages down
here saying something about invalid
search result um and all this other
weird stuff so that's the pro that's the
problem I was telling you about the only
way to actually uh fix this I think is
to restart the project but actually it
might actually be doing that now because
it looks like it's going through uh
these so if I just wait until this
finishes um
then we might be good so let's just wait
and
see basically what it's having to do is
it's having to rebuild these uh post
search
databases and that's why you see this
information uh going through the output
log at the
moment so it looks like it did some so
I'm just going to save this it should be
safe to save
it I don't think that did
it okay it actually did do it okay so
that fixed it so you may just have to
give it some time if if it doesn't if
you wait until all that all that stuff
goes by and it still doesn't work then
you can uh close the project and restart
it and when you start it back up you'll
get a progress bar right here and it'll
start saying stuff about uh rebuilding
uh post search databases and stuff like
that just let it finish and then it
should be fixed um
so maybe it's not a bug maybe it's just
something you have to give give a little
time for it to complete but they should
make it more obvious that it's doing
that and you'll see now that it should
be working
fine so this actually went quite a bit
smoother than uh I thought it
would uh last time I restarted the
project and it fixed it I didn't realize
that if you just waited it would fix it
uh so now we know that okay so the next
part of this uh is is if you want to
test out my
characters uh in here then what we need
to do is we need to replace their
characters on the widget with mine so
I'm going to open up if you go to to
their widgets folder and open up the
game animation widget uh you'll see
theirs are right here and I'm going to
replace theirs with mine so these last
two I I do not have a version of mine
for these last two but we'll replace all
these other ones so we'll go ahead and
start with uh my character blueprint so
we'll go into Char data select my
character blueprint select theirs and
replace the
reference and then we'll go into my
character folder go to the echo
uh that's their character folder make
sure you're under Dao characters and
select Echo select theirs select it in
here and press the back button and I'm
just going to go through here and I'm
going to replace all of theirs with
mine so for the metahumans at the moment
I only have the body type that Kellen
uses uh zeroed in but over the weekend
I'll zero in all the other 17 body types
so that you guys don't have
to it'll save you a little bit of pro uh
work well I should say it'll save you a
lot of work actually so uh yeah I'm
going to replace the twin
Blaster I'll replace this
guy I'll
replace this guy and
Quinn and that's it
and now if I open this
up and I just walk over this uh yours
will open up automatically when you walk
over it but I got mine docked over here
to the
side so I'm going to press this and
it'll automatically switch you'll notice
that uh the weapon is on the ground uh I
forgot to show youall how to fix that
that's fine uh now you know what happens
if you don't add the socket so if you
eject and right click and just open him
up or you could go back to the widget
and you could just select him here and
double click on his reference and it'll
open up his uh
blueprint so we can just select him in
here or select him right here and then
we can open up his skeletal mesh and all
we don't need to adjust the offset of
the socket we just need to create the
socket so let's go back over here and go
to the event graph and I named all these
sockets for all these characters the
same so it's called held object uncore R
right now I only have this set up for
rightand right-handed weapons I'll add
support for left-handed weapons in the
future so I'm going to add a socket here
and I'm going to rename it to held
objector
R and that should be it for him
now whenever uh we run this you'll see
that he's holding
it and he's firing so if you fire in the
middle of a recoil it'll be uh
inaccurate as you can
see now I do have a breathing additive
uh that is set up inside of the linked
anim layers but it's they're
Disconnected by default because when
we're zeroing in our name uh for these
guys we want to uh what we want to do is
when we're zeroing in the aim we want
the breathing to not be messing with our
aim results and so if you shoot and you
see those two line traces the green and
the blue the green one is pointing
towards the center of the screen and the
blue one is uh pointing down the barrel
of the
rifle um and the numbers that are shoot
uh showing up over here on the left uh
the P Y and R those are
actually um that's actually the
rotational
offset uh
values that stands for pitch yaw and
uh I I don't I don't know what R stands
for to be honest um roll a pitchon roll
so
yeah so I'm not going to go into uh
zeroing in these in this one I just
wanted to show you guys how this worked
um so if
we come over here and we open up
the game animation widget and I'll just
select this guy and open up this guy and
like I said you can do it this way or
you can just select it in here this is
the live retargeted character
a lot of people think that uh that they
don't want to use live R targeting but
I'm going to tell you right now that you
only have two options you can either use
live retargeting and use the method that
I uh present you with or for example if
you're using medum characters there's 18
different body types for each differing
body type uh you will need to uh if you
don't use my method and you want to
retarget it to these characters you're
not going to be able to just retarget it
to one and it work for all of them even
if you share the same skeleton amongst
all of them like these metahumans are
there's going to be Anatomy offsets
which means that you're going to have to
retarget this entire animation system to
all 18 and then you're going to have to
modify all the weapon holding
animations uh or poses uh so that they
each one of them holds right and that is
one approach you can take to this but
it's going to be a lot more memory
intensive because you're multiplying the
amount of animations in memory by a
factor of 18 uh and if you have more if
you're using character creator every
single character you bring
in and let's say you bring in 100
characters for all 100 of those
characters you're going to need this
animation system to re be retargeted to
each of those so get the animations that
exist and multiply them by 100 and
that's how much memory
uh I mean that's how many animations are
going to be in memory uh and the size of
that is going to vary based off the
animations so this approach is probably
by far the most uh scalable
approach but if you only need this for a
couple of characters then it may be the
fact it may be the case that you just
want to ret Target uh this entire
animation system to those but it's still
going to be quite a lot of work to
do
so I'm going to open this
up and I'm going to go over here to the
right
hand Jesus Christ this thing has so many
bones I'm just going to add a socket
there and I'm going to rename it to held
objector
R and then then we're just going to
select him in here and then press
play and you'll see that right now uh
this character uh is not zeroed in the
the uh socket hasn't been uh the socket
offset hasn't been applied uh to this uh
and there are some finger problems I'll
uh resolve those at a later date um but
yeah
so uh this weekend I'm going to resolve
all that all those problems
so we can cycle
through these
characters yeah so it seems like there's
a slight problem with the
uh live retargeting data
I'll have to fix that uh over the
weekend I was going to show you the
other
one but yeah the Kell the Kellen guy he
is zeroed in so I'll just go ahead and
show you guys the Kellin so if I open up
the
Kellen actually I've already created the
socket for him so I ought to be able to
just yeah there we go
so you'll see he holds the rifle uh
correctly I'll fix uh the body uh
example uh
later but yeah once you've zeroed them
in they'll be fairly
accurate now I do have an auto aim on
here right
now uh and one second after you stop
firing he'll automatically uh go back
into the relax
state but I just seen another bug here
here where it seems like if I fire and
I'm holding down the right Mouse button
for some reason it's going back into the
relax State it's not supposed to do that
um I was pretty sure that problem was
resolved but apparently not um I'll have
to fix that this weekend but yeah that's
basically the rundown on it guys
um so yeah I hope this helps and if you
have any questions uh feel free to ask
and I'll see you guys later

================================================================================
ARQUIVO: Unreal Engine 5_ GASP DAO MetaHuman (Preview v1.23) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

A Preview of Anatomy Correction in the Coming Update for the MetaHuman's

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

=== TRANSCRIÇÃO ===

all right guys so just going to show you
what will be coming in the next update
so I got that pretty accurate as you can
see and I can move over to this one you
have to press the uh key again after you
change them to get the stuff to update
otherwise it just won't
update uh I'm not really sure how to get
around that and it's not really that big
of a deal it's only a uh problem
whenever you come in
here and start
testing so those are the females and now
you can see the
mouse oh like I said you have to update
it by uh activating the weapon a second
time and then I'll show you the
and I'm not showing all of them guys I'm
just showing some of
them and I have breathing uh deactivated
as
well and yeah that's pretty much it so
also I did uh
these on all of them I may have missed a
few little uh things here and there also
on some of these I believe that's a
problem with this model I don't believe
that has anything to do with anything
I'm doing it only does this on some of
them on the fingers even when they're
using the same one uh but it also could
be because on the females I'm using the
males ik ret targeters so that could be
yet uh in other words I may have to redo
the the female ones later on I'll have
to experiment and uh change uh make them
their own uh ik ret targeters and see if
that uh fixes it but anyway I just
wanted to give you guys a live uh
demonstration on uh on that for these
characters uh if you seen if you fire
when it's still recoil then uh it will
be
inaccurate because I do have that recoil
animation still playing but I do not
have
the
uh the I do not have the breathing
hooked up on them because when you're
testing you do not want the breathing
hooked up because you won't be able to
tell how accurate it
is but anyway so that's basically it
guys I was just going to give you the
rundown I still have uh some cleanup
work to do and then I will release this
update

================================================================================
ARQUIVO: Unreal Engine 5_ GASP DAO Synty (Char Setup) Part 3 (English_ASR)
================================================================================

=== DESCRIÇÃO ===

This Assumes You Have Watched and Re-Rigged the Synty Character Following This Video https://youtu.be/jqI3vW5vDok

This video explains how to setup the character once it has a proper rig. I tried doing this with their rig but had dozens of problems with it that you normally wouldn't have with a properly rigged character.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

=== TRANSCRIÇÃO ===

all right guys so once
you've finished exporting it you can go
to the folder where it's exported and
you can either right click and import to
or you can open up the folder and drag
that into the
viewport now I believe that we need used
t0 as rough pose because I believe that
it did put him in the unreal a
pose but that's stored at time zero on
the timeline here and that's the reason
why we need to check that if it's from
ACG or character creator then that's
what you're going to use and we're going
to import
him and you'll see he's in the a
pose I'm just going to name that text
and put that under here
and we can actually just do the use the
same
method so if I go back into this
folder we have this and I don't know
exactly how this is supposed to work
right here but I'm I'm just going to
hook it up
anyway it doesn't come out looking right
I don't think but I don't know exactly
how you're supposed to use this texture
it's one of those weird uh color map
textures where it has to be on one of
these colors for it to come out as that
color and then you can do like bit shift
operations or some crap like that to
shift it over to another color it's
weird I don't know why he did that
uh yeah I don't know why he did that so
anyway I'm just going to hook that up
anyway now it actually doesn't come out
looking right
anyway because if we come over here
you'll see it's gray but and his eyes
came out but the rest of them didn't
come out I don't think so I don't know
exactly how that's supposed to work but
you can look at the UVS by going to
Advanced UV visualization UV Channel and
it's not
apparent and you can't zoom in but
there's a UV there uh in that tiny
little space if we come in here and we
go to UV
edit and we select well let's go come
out of edit mode and we select the
character
okay so if I go into edit mode and I
just press a to select all the faces
you'll
see that he has these in different
places I don't know what's going on
there but anyway
so he has something weird going on with
that me personally I'd probably reuvv
them and retexture them myself I don't
know
but
anyway
so let's just go ahead and start setting
up so the first thing we're going to
do is we're going to go into the Dao
folder go into characters go under ue4
mannequin because he does have a ue4
skeleton now so I'm going to copy this
over to the cinty folder copy here come
over here open it up select the skeletal
mesh you'll see that there's nothing
here but there actually is something
there it's a bug so select your cinti
skeletal mesh and press the back button
he doesn't appear That's a bug so reset
this property and then set it again now
he's
there so the next thing we need to do is
we need to add a weapon bone to his hand
so under hand R we're going to right
click add
socket I'm just going to call this
weapon uncore R I'm going to uh press f2
on the keyboard and press contrl + C to
copy that under here in the event graph
okay it looks like it's the same but I'm
going to contrl V it anyway what this
does is it repents the held object to
the skeletal mesh so that it's under
that skeletal mesh uh and attach to that
socket on the character that we just
created this right here is going to set
the ik retargeter for the live
retargeting
settings but to set that we need to go
under class defaults go to the gear icon
collaps all categories
find
Dao expand it under live R targeting
right here you'll see this refs category
expand that and you'll see this right
here I'm going to browse to that and I'm
going to copy this over into the CTI
character
folder so I'm going to copy
here so this is an ik retargeter I'm
going to right click and create a folder
I'm going to call it
Rigs and I'm going to create another
folder and I'm going to call it
mesh and I'm going to drag the skeletal
mesh physics asset and skeleton under
the mesh
folder and then I'm going to drag this
under the rigs folder I'm going to right
click on the content and update
redirectors uh that will make sure that
um the re when you move something it
creates files in the background that are
invisible uh that tell Unreal Engine
where you moved things to uh if you when
you right click and you update
redirector references what it does is it
it'll actually rewrite the file so that
it's pointing to the correct place um if
your engine crashes before that happens
sometimes it can mess up those it can
break those uh temporary references that
it creates uh in those temporary hidden
files and that's the reason why you have
to do that so the next thing we want to
do is we want to go to this uh mesh
folder right click on the skeletal mesh
and go to
create ik
rig and I'm going to drag this into the
rigs
folder and I'm going to double click it
I'm going to select autocreate retarget
chains and autocreate
ik and always double check this make
sure that the left
clavicle uh starts and ends at the
clavicle and that the left arm starts at
the upper arm L and ends at the
Handel you do not want it to
start at the
clavicle make sure all these others uh
match the same your leg should stop
should start at this bone here and it
should end at the ball
bone the upper arm starts right here the
clavicle starts right here that's why
you don't want the arm to start at the
clavicle you want it to start at this
bone right here and end down here at
this
hand the neck should start at the first
neck joint and end at the last neck
joint so if you have one neck it'll go
from neck one to neck one if you have
two it'll go from neck one to neck
two same with
spines basically it's all
self-explanatory but if you bring in the
cinti character without uh riging it
like I did then you'll have to know that
because um the S when you do this Auto
create retarget change it'll start it at
the clavicle which is wrong it's not
where it's supposed to be the reason why
it does that is because of their naming
convention on the bones and Unreal
Engine just can't pick up on it because
their naming convention is so terrible
that unreal can't discern what supposed
to be the upper arm
bone so inside of uh this that we copied
over into this folder right here just
double click it to open it we're going
to replace this ik rig right here with
the one we created just now so select
this ik rig and press the back
button now it looks fine but what we
want to do is we actually want to match
the ufn to his pose so we're going to
come up here and press this running
retarget button to switch over to
editing retarget pose we're going to go
to the source and we're going to match
the ufn to his pose rather than him to
the ufn
pose it's just better to do it this way
so select the ufn pelvis go to auto
align align selected in
children now the ufn is in his
pose now we're going to come out of
editing uh retarget mode and you'll see
there's some problems with this feet
that's fine we'll fix that now go into
chain mapping uh Tab and go down to the
left
leg and what we're going to do is we're
just going to have to offset that
forward and
down and we don't want his leg to be
locked in
actuality so we don't want it to pull as
as pelv this
[Music]
down so maybe try five and
12 and
then -12
and
-5 on the other side because the other
side is the opposite of this
one and then what we're going to do is
under let's see s set
settings I'm going to offset this
character to the side so that we can see
what they're doing better and I'm I'm
going to type
in run
Loop and I'm going to select the Run
Loop F which is run Loop forward and I
want to make sure that everything looks
fine that his legs aren't locking in a
really weird way so you can pause it and
just scrub through this m
manually now we're losing some volume
when his legs beenin like that but
that's because he's such a low poly
character it's kind of hard to avoid
stuff like that because of uh how low
poly he is but if you want to go in
there and try to uh adjust those weights
to get them to look better you can but
because he's so low poly you're going to
have a really hard time trying to do
that so I'm not going to bother doing
that for me that looks
fine back over here I'm going to rename
this
actually
to
CTI M as in centi
M and now I need to set that ik
retargeter as this
reference so we're going to select that
and we're going to press the back button
now we're going to compile
it and save it and yeah it's probably
not going to update in here but that's
because we're not updating that this on
the construction script so you can
actually copy this and paste it right
here and hook it up on the construction
script and now you can actually see him
in the preview uh and it looks like it's
working fine so
now yeah let's test it uh so to test it
we're going to go to the widgets folder
open up the game animation
widget we're going to duplicate this one
right here and then this first one we're
going to replace it with our character
blueprint this guy right here by
pressing the back
button compile it save it come in here
press play
so it looks like I didn't hook something
up whenever I last uh did
this
I thought I hooked it
up let me go into project
settings I'll be right back all right my
bad so that actually didn't take long to
figure out I didn't replace this default
pump on so if you followed the setup
then you probably shouldn't have to do
this but I'll go ahead and include it
anyway so it's not difficult I go into
character data like this character and
replace it in here and then now it works
but you'll see that his legs look
funny so that's fine what we can do is
we can open up the character blueprint
select the mesh open up the mesh and
you'll see he has no virtual bones so
we're going to create virtual bones I'm
going to rename this to instead of root
root it's going to be foot
root and then we're going
to do a foot L and I'm going to discard
everything but foot L on
that and then foot R and same thing we
only want it to be called foot
R and then on the
Handel oops not hand L we want the hand
L to point to hand
R we want it to be called VB space handr
so we discard everything
else this one's going to point to hand L
right
here same
thing and now that should be
it so if I press play and it doesn't
crash it didn't cool and now you'll see
his legs don't look
funny so now that we've done that oops
let me just go ahead and see now we have
our character right here we're going to
test them out now the gun's not going to
look right for now because we haven't
adjusted the socket but you'll see
everything's
working
properly cool now if I pull the pistol
out you'll see he's not holding it right
so we're going to eject
and we're going to come come back into
this guy right here the skeletal mesh
and I'm going to close all the other
tabs to the right of that and I'm going
to dock this over here so I can see and
want to right click on that weapon and
go to add preview asset and type in
M9 so we can see what it looks like in
his hand and you see it looks just like
it does in the viewport right
here so I'm going to
to adjust this in his hand I'm going to
rotate at
90° uh 80
80° yeah we want it to be pointing
straight down the back of his
hand then we'll move it and adjust it
and come over here to the side and pull
it down and maybe back a
little like that now because his hands
are so big and this is so small it's uh
not really designed for his hands so you
know we're only going to get it so
accurate but you'll see now that we've
adjusted those weights that hand bends a
little bit better than what it was
before uh or what it would have been
so let's see it's in his hand a little
crooked so what we're going to do is
we're actually going to rotate it in
here so that it sits in his hand a
little bit better
I'm going to press e to go into rotate
mode and just rotate it 10° in One
Direction that seems to be enough but
you can go into your snapping tools and
go to five or just disable snapping uh
it's all up to you if you expand this
you'll
see that we can just press that button
to disable it or we can set it to five
or Point 2. 812 is as low as you can go
I wish they had uh a One degre Snap uh
but they don't maybe one day uh after
after a million people have bugged them
about adding it maybe they'll eventually
add
it it would be really nice if we had a
one degree snap uh just saying so anyway
now that we've uh done that actually it
looks like it's pointing down in his
hand we actually want it to be pointing
straight along that
finger so
we're going to rotate it
oops we're going to rotate
it uh on the
red now you'll see now if you look over
here it looks to be parallel to the
actual index finger and that's what we
want it doesn't matter if it looks
parallel in here or
not we just want it to to be parallel on
here so we can adjust the rest later um
actually damn let me go back into this
guy
I need to adjust it some more
sorry we need to bring it down
and back
apparently yeah anyway you can get it
looking however you want it doesn't
matter it's ultimately up to you but
he's holding it so he's got big
hands it's going to be hard to get it to
get them to hold it flush like that and
then but anyway you get it so all right
phase two
we have to set up
the the
blueprint so I'm going to come back in
here and I'm going to open this
up and there's more stuff under the
character default
settings for this under the live
retargeted character settings you'll see
we have this stuff here and this allows
us to procedurally like offset all this
stuff so I'm just going to
um I'm going to come over here to this
one
actually and I'm just going to copy this
entire held object
folder over to the cinti
folder and then I'm going to come inside
of
here and I'm going to replace that
d h held that's a that stands for data
asset held object definition M9 and then
uh this is for the aiming so you you'll
see this aiming tag we're going to put
that under
here and we're going to replace the
ready the ready stance right here with
this liary targeted data
asset and then we're going to do the
same thing for the
M9 I mean the M4
A1 we'll press that back button
all
right so I'm going to save everything
compile
this and
now we can press this we can go into
this mode and you'll see he's a bit
inaccurate what we're going to do first
is we're going to disable the breathing
you'll you see there's that he's
breathing that's because I'm applying an
additive breathing over the top of it to
make it look more
Dynamic so under the Dao folder under
your character data linked enem layer
you'll see a pistol and a
rifle in each of these we need to go
under the animation layers the overlay
state right here go inside of the
overlay stance State machine and go
inside of the aiming and we need to
bypass this additive uh ufn and
breathing and we need to do that on both
of these while we're adjusting the aim
offset
now we need to actually compile them too
now when you compile them
sometimes uh it'll break the uh stance
and you'll have to switch to a weapon
and switch back in order to for the data
assets to reload or the link animal
areas to be relink I
mean now we're going to go into this
held objects folder under the cinti
folder and go to the
M9 and we're going to go to the data
asset liary targeting M9 aiming stance
and under the right arm ik we're going
to adjust this we're going to reset it
first and we're going to uh actually go
into the output log first we're going to
right click and clear
log and then we're going to fire oh
let's see I like to aim towards the
horizon if you see that green line going
there that's pointing to the center of
the screen the blue one is pointing down
the barrel of the rifle so we're going
to get that green line to point around
that Horizon right
there and shoot it a few
times and then we're going to copy this
from the output log the Y right here
corresponds to this Center one right
here and we're going to invert it by
saying negative and then pasting
whatever value was there so it's
negative negative which inverts it to a
positive and inside of Unreal Engine you
can perform basic arithmetic math uh
operations inside of these
fields you can add subtract divide and
multiply these
values now it's not going to zero in
right away we're going to have to do
this a couple of
times and so I'm going to copy
this and go to the end here I'm going to
say subtract -1.19
then we're going to subtract this number
from this last
one and now it's pretty much zeroed in
you can try to get it better than that
I've gotten it several degrees of
freedom accurate uh but I'm not going to
nitpick on little details like that in
here now you can actually move the
arm back and forward and and stuff like
that and then you can go and adjust the
other arm but for this one we don't
really need to we do need to adjust the
left uh hand though and so I'm just
going to reset this right here which
actually puts it almost right where we
need it now the thing to take away from
this is do not offset it offset the
static offset because when when you aim
up the static offset will cause the hand
to come off off where it's supposed to
be you need it to be a local offset
so that it won't come off uh and it'll
stay where it is in this pose regardless
if you're aiming up or down so it's a
little annoying because that local
offset is local to the orientation of
this bone and not the mesh or World
space the static offset is actually an
World space so if you look at this GMO
right here that's how the uh static off
set is
oriented but that's not going to work
for us so we're going to have to use a
static local offset which is a little
annoying but you can change it and you
can watch this is the forward and back
of the hand and this is the left and
right of the
hand and this is the up and down of the
hand you see
so an actuality I think we need to
rotate it on the Z so that it's out like
this and then bring it
in bring it back and then bring it to
the side and you can mess around with
that all day long if you want uh if you
rotate it enough you should be able to
get it just like you want it and you can
rotate it like this as well
but
yeah anyway that's basically
that so I'm going to save
that and we don't really need to worry
about the resting state for uh for that
we don't need any offsets for
that but we'll go into the rifle and we
need to do this for the rifles as well
we're going to open up the held object
definition right here
because we're going to need to adjust
this for the
rifle and we're just going to drop it
that looks about right it's already
level so we don't have to worry about
anything else you could move it in a
little that's probably
good and yeah so that's about it
and now under
the data asset liary targeting m41
aiming
stance uh we're going to come in here
and do the same thing we're going to
reset
this we don't really have to worry about
resetting this right here but I'm going
to reset it
anyway and I'm going to shoot a couple
of times and we're going to go through
the same
process so we're going to
subtract that
number and then
subtract this
number we're going to do it
again subtract that
number subtract that number
now we're zeroed
in so now what we can do is we can
actually bring this one back so it's up
against the shoulder and bring it
out however you want to do it really but
I think that's probably about good you
can even bring it up a little bit if you
need it won't affect the aim uh not
offsetting it back and forth and
such under here we're going to just
reset this and then we're going to bring
it back and over and
down and actually yeah this needs to be
rotated
let bring it
back and that actually looks about
right so that's
that and then we're going to go into the
resting
state and we're going to do this for the
ready
and I think that's probably about good
good
enough and that's it
okay so I don't know why he's running
with his wrist all bent funny like that
uh you
could well that's just the right the way
he's retargeting so I don't know what to
tell you about
that that's
funny yeah so there there still seems to
be
some some weird Jank in this the last
time I did this I didn't have it didn't
I didn't notice that maybe I just
overlooked it so
um you could try going back into the ik
retargeter and try rematching
the ufn post to
him it may be because he got brought in
with that weird
uh POS let's see if we redo the ik
retargeter though we're going to have to
redo all those settings on the gun uh
for the pistol and the the for the aim
offsets
again it might be that pose that it
brought it in with because last time I
brought them in in the T pose
I'll just go ahead and try this on the
right hand
only go to running retarget where it
says editing retarget pose
Source oh that was the wrong one yeah
you see it how it messed up his uh aim
already no it
yeah I guess that's just the way he runs
I don't know I never noticed uh his hand
being bent out like that during the run
so I'm not really
sure let me see we could reset selected
and
children you know what let's try doing
this
oh it's this
okay so that apparently I'll look into
that that seems to be caused Maybe by my
Ling
system I'll look into
that but anyway that's basically the
setup guys I'll see you in the next

================================================================================
ARQUIVO: Unreal Engine 5_ GASP DAO V1.42 (Overview) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

GASP_DynamicAdditiveOverlay(1.42)

- 1: CBP_SandboxCharacter_DAO: New Graph was introduced to show examples of Equipping Items in Specific Slots.

- 2: IMC_Sandbox_DAO: New Input Actions were setup for slot specific item handling.

- 3: AC_SlotManager: Redundant Parameter was removed from DrawHolsteredItem and DrawHolsteredItem_ByIndex helper function was added

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Project Documentation: https://unreal-devop.gitbook.io/gasp-dynamicadditiveoverlay

=== TRANSCRIÇÃO ===

all right guys so if I press one you'll
see he Clips the right-handed pistol if
I press two he'll clip the left one and
and put away the right one uh same with
vice versa if I press two he'll put away
the right one and he'll only have the
left one so if I press three he'll pull
out both of them if I press four that's
the rifle and if I press five that's the
flashlight now the logic is kind of
simplistic so if I say one you'll see
puts away the flashlight but if I pull
if I press five again he'll pull the
flashlight back out so anyway uh these
are just primarily examples so you know
uh you could specifically go in here and
and say okay well instead of
just randomly trying to free this one
maybe I want to add a check and say hey
only if this is only if his uh if he has
a a pistol and his left hand will I
perform this logic right here otherwise
I'll just do this you could do that uh
that's up to you and maybe I'll do that
in a later update I don't know anyway uh
this is these are just examples uh right
here I did make a few changes to
accommodate this so I'll go ahead and
I'll go over that over here and uh the
slot manager I was having this passed in
uh oops I was having this passed in
which is grabbed by index uh just for
the sake of checking to see if there's
actually something in that attached to
that slot actor or not but then I was
also passing that in here uh rather than
just getting it from the slot
configuration which was kind of
redundant and I guess I kind of
overlooked that so right here I'm
actually I actually removed the need for
that and then right here I'm actually
just reg grabbing the reference to it
making sure that's it's valid just like
I was doing before except right here I'm
grabbing that instead of uh the past in
uh function and then right here I
created a helper function very simple it
just kind of reduces the amount of logic
you have to do all you have to do is
give it the index and uh give it a
reference to the items in your hand uh
and that's basically it uh so this
portion right here
I'll probably uh comment this later but
I if you're watching the video this just
frees the hand it holsters the item
that's what this does and then this
right here it
clears the linked enim
layer uh from the character animation
blueprint which ensures that he's not
still holding an invisible weapon after
he's put it away uh so that's the basic
rundown on it uh I probably should have
bypassed this if for whatever reason
this
failed but in actuality I should
probably just go ahead and do that I
think regardless of the result uh the
reason why it filed I should probably go
ahead and add that uh and just I'll
probably just go ahead and bypass that
there because that's kind of redundant
so I don't think it really serves any
purpose uh
this if I do equal enum you'll see this
means that it was that there was either
not anything in that hand the item was
dropped or it was holstered in either
case we want to update this right here
before we Hol uh draw the uh new item so
that's actually a bug that I caught
right before I released this and you got
to watch me fix it but basically that's
all for this update guys I've kind of
been focusing on some uh other things uh
trying to get organized again so I've
I've spent most of this week in actually
creating a schedule for myself and
believe it or not it was actually more
difficult uh than you would think just
trying to find a calendar that uh
actually met my needs but anyway that's
basically the rundown on that I going to
get this out to you guys and uh next
weekend I will will work on some of
these other things such
as uh possibly I'm not going to promise
proper physics
replication I'll have to look into that
because I'm actually unfamiliar with how
to properly do that uh but I will look
into
uh uh improving this Universal
AO uh so that it's not affecting the
offand and by default
the universal AO will probably be off
because I'm going to bring back custom
aim off sets so the universal AO will be
a fall back uh but we're going to I'm
going to bring back custom aim offsets
because that's actually more appropriate
uh so that's basically all I got for you
this update guys and I'll see you in the
next video

================================================================================
ARQUIVO: Unreal Engine 5_ GASP DAO v1.35 (Custom Bow & Pose Setup '4') (English_ASR)
================================================================================

=== DESCRIÇÃO ===

In this video I'll be demonstrating how to create and fix custom Poses for your character and how to set them up with a Linked Anim Layer. I will be showing you how to customize the layering settings for this item. I will also be showing you how to setup the item in the game and configure the settings for your character.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Project Documentation: https://unreal-devop.gitbook.io/gasp-dynamicadditiveoverlay

00:00:00 Exporting Assets
00:06:23 Importing Assets
00:07:13 Retargeting Poses
00:08:23 Separating Pose Set
00:11:29 Bringing Over A Control Rig
00:15:46 Importing Bow Skeletal Mesh
00:18:21 Fixing Poses For Your Char Type
00:51:49 Retargeting Poses To UEFN
00:55:20 Setting Up Bow ItemBP 
00:55:49 Setting Up Bow AnimSet
01:03:17 Enabling Hand IK
01:04:59 Assigning AnimSet
01:06:32 Adding muzzle Socket to Bow
01:07:56 Layering Setting Adjustment
01:12:14 Testing and Troubleshooting
01:17:13 Modifying/Customizing Linked Anim Layer
01:19:34 Adjusting Layering Settings Some More
01:22:00 Future Support Discussion
01:28:00 Slot/Holster Setup (Quick Intro)
01:35:12 Adding Slot Actor

=== TRANSCRIÇÃO ===

all right guys so in this video I'm
going to show you guys how to bring over
a bow from
alss and we're going to set it up
so these animations were made for the
ue4 so I should be able to
just export these and import them
straight onto I'm going to export the no
curves one uh of the bow poses because I
don't want those curves I'm not going to
use
them so I'm going to export
these and let me create a folder on the
desktop
I don't need any of
that you could also do a bulk export but
it's going to put it in the same like
subfolder structure is they're they are
in here in case any of you are
wondering so I'm going to go under the
props
folder and I should have a bow in
here now this actually has a bow draw
sequence I don't have anything set up
for it
to like
we could set up some logic where it
draws the
bow
yeah I might show that in another video
I just want to show I'm mostly trying to
show you guys how to uh just handle this
stuff like setting up
uh uh this
stuff like a new weapon
basically so I'm going to export the
actual bow
mesh yeah I'm not going to show you all
how to do this right here this
time that's going that's going to be a
bit involved uh
[Music]
also I don't have any set up currently
right now for actually
synchronizing stuff like that I mean
yeah I could but I would have to I would
have to have an actual animation where
he's drawing the bow uh
and that's the way they set that up it
his hand is just
like
um I think they I think they have that
set up to
where
maybe I'm not 100% sure to be honest
with you I've never actually looked at
that not on the boat
I
haven't does he have a bow draw
animation in here no he doesn't Okay so
he's probably using I he's probably
setting an ik Target or
something no okay no he's not even doing
that okay I see so if you go over here
to the
bow I actually don't know how to I
haven't used this in so long I don't
know how to put them in in the different
camera mode
let me
see cycle overlay States Mouse will
MW okay there we
go yeah so it's it's not perfectly
synchronized it just so
[Music]
happens yeah you'll see his his hand
does move around okay yeah I wasn't
really sure I didn't even know there was
a firsters uh camera for
that it's pretty close though just
because of how it Blends from one to the
other okay
anyway let me see
here so I'll go ahead and I
guess I guess I'll go ahead and
uh
export that I'm not sure I really want
to do that to be honest it's going of
let me see what he's got going on in
here it's probably just
okay so he's setting the draw based off
of uh something
nothing on here so you must be setting
the variable directly from
somewhere oh you can't search while the
game is
running he's setting the draw via the
spine rotation
H
okay
interesting all right so let's just go
ahead and get started here let's getting
light and I want to get this over with
so I'm going to import this onto the ue4
actually I'm just going to create a new
folder under here I'm going to call it
uh ALS
bow
poses and actually if you go under the
mesh and you import animations it'll
actually go ahead and fill it in for
you you see so it automatically selected
the u4 mannequin
skeleton we want import only animations
we don't need t0 as rough pose
yeah this should be
fine all right and then what we're going
to do is we're going
to
uh retarget these to our cc4
character oh man I forgot they haven't I
was going to show y all this but they
I'm going to try something though I
might still be able to
Steve and I'll show you a trick if you
copy this
directory right here and you paste it in
here it'll only show the animations
under that
directory so we'll go
to I'll just put it under
guns
bow and
I could call enem set I guess
but
okay I might TR treat this as a
riful since there's
only so many poses
here now the bo actually the bow aim
sweep we don't actually need that
um so I don't do my uh stuff like that
in fact I might show you how to do uh
custom aim offset setups here later but
for now I'm not actually going to do
that because it's actually pretty
involved uh so that may be something I
do later we don't need we actually don't
need these
too we just need these poses so so he's
got a few poses
here he's got one where he's
running like
this and then if we go to asset details
and we set this to step it won't
interpolate between frames it'll just
snap to the
frame we'll call this the relaxed pose
so we'll go to create asset current
[Music]
pose and under
here we'll call this
bow
relaxed actually I should call this bow
ready let me just call this bow ready I
guess that's more of a ready
pose and then we'll come back over here
and this is
uh the bow draw
pose current
pose
bow aim
and let's see and then we have this pose
right
here so yeah we'll do three
poses and I'll call this the
bow
relaxed okay
so this part is going to be pretty
involved guys uh this might actually
take me a while to show you and I
haven't even eaten yet
but so I'm just going to leave that
under anims we'll make an anom set
folder later because we have to retarget
these after we fix
them but but now I don't have that in
this one no I do not
okay so I'm G to have to share that with
you
guys I'm probably just going to leave
that open for
now let
me let's
see yeah this one
I need to um I have some stuff that I
need to move over
here because I don't have uh a control
rig they haven't updated uh their
control rig for 5.5 so there's no
character Credit Control rig in here but
they do use the Unreal Engine 4 skeleton
so this other control rig should work
for it if you guys want this control rig
let me know it's I didn't make it uh
somebody El made it I'll uh share that
information with you here
shortly as soon as I can get this
[Music]
open I don't know why my computer's
running
slow it's it's running slow suddenly for
some
reason I have 64 gigabyt of ram so it
shouldn't be the number of Windows I
have
open let me see
here somewhere in here
yeah this guy here all right so I'm
going
to migrate this Twisted bytes control
rig that's who makes
this I fixed it
though so I'm going to not include this
stuff here
like I said if you guys want this you
can request it from me I'll send it to
you I didn't make
it so what I'm going to do I'm going to
try to repurpose this
I fixed their well I fixed their twist
uh their control rig picker I didn't fix
the actual control rig but I did update
their little switches in
there I'm going to copy this over to
rigs this Christ dude why is my computer
running so
slow it's like my mouse is all sluggish
feeling sluggish and stuff so I'm going
to right click on this rout and refresh
and choose the old Steve
rig and hopefully this works if not then
I won't be making this video I won't be
publishing it and you won't be watching
it
yeah I'm going to have to go ahead and
exit out of this stuff guys I if I have
to go back in there I'll I'll go back in
there
but I need to close out of some of this
stuff cuz for whatever reason it's
running a bit
sluggish that doesn't really help much
but
all right
so now I need to I need to import the
actual
mesh I'm just going to put this under
the blueprints folder I'm just going to
call it bow I guess I could put it under
uh you know what let's just put it under
the same folder so under here I'll just
make a new folder I'll call it uh
mesh uh
I'll just dock those under there too
I'll just call that
that I'll go ahead and import this why
not and set it up
here no that needs to be a regular
sequence cuz we need
to no I think it does need to be a
single frame and the explicit time will
be a variable
and what we'll do is we'll we'll
manually Drive the
animation
uh the thing is
is I don't have access right now to the
aim State I guess I could expose it yeah
we might skip that part of it I don't
know we'll
see either that or I'll just like
change the animation based off of uh if
he's aiming or not but I'll have to
update the bow on if he's aiming that
that may be something I have to uh
refactor a few things so that you guys
could have like access to something like
that uh I don't know I might end up
having to add the bow uh to the actual
project myself but anyway let's just go
ahead and start setting this up the main
point is to show you guys how to create
your own like linked Anem layer like
with your own logic and stuff like that
so in order to do that I first need to
uh make these poses for
it and also this is going to allow you
to actually see how I fix uh poses for
the characters so it's best just to make
them for the character and then just
retarget them over but you can also
retarget those poses that already have
to your character and then fix them and
then retarget them back
so uh the this part of
it will work the same if you retarget
from those and then you'll be
retargeting them back as I show you
after I'm done so the first thing we
need to do is pull the bow out so we
have this bow skeletal mesh
here and we're just going to drag that
into the
scene and we're going to add
that over over
here and we're going to right click and
we're going to convert this to a
spawnable actor so that when we come
back in here it'll still be in his hand
so if we need to modify this later uh
you know that's the reason why I'm doing
this so I'll go to Bow
relaxed attach it to that and then
attach it to the held object L and then
I'm going to zero that out and you'll
see it's not positioned properly in his
hand
but I'm going
to uh go into local space here okay that
was a bad idea
because oh no no it wasn't okay yeah and
then we can move it using those arrows
but you'll see that if we make this a
little smaller over here you'll see we
have this Snapper over here we can
disable
snapping and move it into his hand
and I think something like that would be
appropriate and then if I rotate in
local
space then we can get it somewhat where
it needs to
be and actually the fingers actually
came out looking not bad for the uh well
right there you'll see there's a problem
so what I'm going to do is I'm going to
come over here to my control rig and I'm
going to open up this editor utility
widget it's going to dock over here to
the side because that's where I've been
keeping it at and then I'm going to
refresh this select this pose and then
enable this and now we can see these
fingers
here and this is in my left hand and I
believe
this is the index
finger no that's the pinky this one's
the index
finger yeah and I'm going to reset
this in fact I might
just go ahead and uh press this now this
makes it lag I don't know why his lags
uh so much but it does so I think I'll
just go ahead and reset all of them and
then I'll position them and then I'll
create some poses that way these poses
are
cached so I'll say
cc4
Steve
bow
relaxed
yeah and then I will hold down control
and deselect the thumbs and then do do
this in local space guys don't do this
in uh Global space it'll twist the
fingers all
funny and so we have
that unfortunately the finger controls
on this I mean they are useful the way
you did them but uh they have their they
are limited in
usefulness so in this situation we need
to select the
manually and close those just a little
bit more now I do have rotational
snapping on that's the reason why it's
a snapping so I'm going to turn that off
and just bring them out just a little
bit and that'll be the bow grip
pose so I'm going to actually come back
over here and I'm going to press this
it's going to select them all again and
then I'm going to save that as a a
pose and you can mirror these poses too
so if you wanted to make a a a a hold in
right hand set then you could just uh
mirror these mirror these poses and
paste
them so that's my leftand grip
so you would say key mirror and then
paste select mirror
paste so if I mirror and I select the
controls you'll see it selects those
over there
now by the way uh this uh selecting and
pasting only works after you've
refreshed this and selected your
animation and and enabled your finger
controls if your finger controls aren't
visible here it won't work
so um I think this hand kind of looks
okay
H I think the thumb looks okay but I
don't like the other
fingers so I'm going
to I'm just going to uh manually do them
yeah and then I will
select that manually because it's faster
than selecting them from
[Music]
here and that's my relaxed
grip or my hand relaxed
pose I'm just going to look and make
sure that there's no funny looking
little twisting on my wrist make sure
that my wrists don't look weird and my
posture too so there's the posture kind
of looks weird right here so I'm going
to adjust the posture in actuality dude
uh I should have had you guys uh um I
don't know why I said dude but yeah uh I
actually should have had you do this on
an additive layer I always tend to do
this I don't know it's it's like a bad
habit I get into where sometimes I
forget to create the additive layer uh
and then I start doing the pose and then
I can't undo stuff because I didn't do
them from an additive layer on an
additive layer you can delete this and
it'll go back to how it was that's the
reason why it's uh important to do
things from an additive layer so I'm
just going to bend this forward and then
bend this
back and think could maybe bend it
forward a little bit
more that'll give them a more sturdy
looking a less hunched
over um
appearance yeah and make sure that that
he's not looking up or down uh if so
then you might have to adjust the way
he's
looking and I'm just going to check the
shoulders and I think that looks
fine so we only have to do this a couple
of times that looks fine the legs and
the feet are grounded that's good okay
we're done with this one so
let me go back over
here that was the bow
relaxed yeah so you'll see it saves it
here if you need to get back into it you
can open level
sequence and you'll see he's holding the
bow just like he was that's because we
made that spawnable if you hadn't made
that spawnable it would be in the level
and if you deleted it from the level and
you open this back up it wouldn't be in
his hand anymore so would that be known
now we're just going to do this
one and I need
to drag that mesh back out here
and before we do anything because I'll
forget I'm going to go ahead and make
this an additive layer that way I ain't
got to worry about that but there is a
bug I'm going to let you know delete
this last key frame right here it will
cause finger issues uh at least it has
for me after adjusting the fingers uh
it'll cause the fingers to open and
close rapidly uh as it goes back and
forth between this Frame and that frame
so even though this looks like one frame
it's actually two frames uh this is a
frame and this is a frame
so just letting you guys know because
otherwise you might be
a wondering why uh your stuff is
twitching I'm going to go ahead and I'm
going
to add an
attach to the held objector l
and I'm going to save this because I
haven't actually created
my layerings uh I mean my my stuff like
I have for these guys so we might
actually want to go ahead and create
that so I'm going I going to create a
new folder I'm going to call it
uh layering I guess I'll call
it probably should have call it overlay
but that's fine so I'm going to copy
this stuff over here into this
folder and I'm going to search for M4
A1 and baty name that M4
A1
bow so this is going to be a left-handed
bow we're we're going to be making our
own anom set
but we want this to be pointing to the
bow and we want this to be pointing
to I'm going to call this hand
L we don't need a hand R
[Music]
offset so I'm going to empty that one
so I think we're going to go ahead and
add
a another anom state in
here yeah I might have to look into that
um I've moved stuff around so I don't
know
if uh I I'll look into that we we're
going to start off just filling out
these two states and then I'll look into
adding another state a relaxed State
because this is set up to support it but
I'm not
sure if this is only being hand I think
it is only being handled
from yeah I think I think I can show you
guys how to add a relaxed uh state to
here so we can have three
states that wouldn't be too difficult I
don't think
so all right we have all of our stuff
set up
here now what I want to do is I want to
fill this
out so we're going to go back to our
enms we're going to open up the
relaxed we're going to open up this
level
sequence and we're going to select the
bow and go into
details and we're going to open up this
and dock it over here and go to the
go to this and I'm just going to copy
this stuff over
here so this is going to be the offset
for how he holds it this offset right
here is local to uh that socket that
it's connected
to so when we come over here to this to
this other
one we won't have to guess how he needs
to hold
it I'm holding shift and right Mouse to
copy shift left uh to
uh
paste so it looks like I actually need
to rotate
that so let's rotate it like that
we'll have
to I'm just going to shift control shift
s to save all this stuff in case it
crashes and I'm just going to come back
over here and I'm going to update the
way he's holding it in this
one there we go and make sure there's no
issues and I don't see any issues so I
think we're good
all right um let's go ahead and finish
fixing this one
up you'll see this one has problems
around the wrist I'll show you guys
later how to set up a POS driver for
fixing that by driving the twist Bones
based off of the hands uh angular
rotation
um that's that's one way that I've
figured out how to fix that now what
we're going to do is we're going to
select this uh right here we're going to
actually add a constraint here now by
default these constraints allow offsets
we're going to press the plus button and
set parent to this
one and if you right click you'll see we
have Dynamic offset sometimes you want
that to be false uh but for this case we
actually want it to be true so I'm going
to leave it to be true and then I'm
thinking I'm going to move it out and
maybe down a
little oh I don't want it to look too
weird let's try rotating it make sure
you're in local space when you rotate
and what I really want to do is I want
to try to see if I can find a good pose
where we're not having too much strain
on that wrist so you'll
see how it strains right
there and right there it starts
straining and I think right there is
actually probably
oops it's probably about as good as
we're going to get it without rotating
it this way some more maybe
that causes strain on the other
side I think that's probably about as
good as we're going to get it you'll see
the weights are kind of failing right
here and that's the reason why it looks
funny
um I'll do it like
that yeah my uh my voice just changed
I'm not sure if you uh realiz was that I
don't know I seem to have some chest
congestion now this stupid control right
here is making it hard to
see let me see if I
can hide control shapes there we
go okay that actually seems to end up
looking the best I think but it kind of
looks
weird with his hand arm being so close
to his body I'm wondering if the
layering might end up causing
problems uh with it being like
that I'm wondering if maybe
I try to do it more like
this and
seems to favor that angle like right
there
more but I actually want it to be
further out so I
can rotate
this a
little I was hoping if I did that I
could bring his arm out more but no okay
okay yeah this is the hardest part about
posing is you have to try to be careful
so that you can pose it in such a way
that it looks right but it doesn't cause
constraint problems where the where
those uh weights start
failling so you kind of have to make the
weights happy while still keeping it
looking decent
man dude it it seems to favor this for
some reason the weights do I don't know
why that's so
weird
let this is starting to drive me crazy
here yeah I don't know what to do about
that except twist this around
like
this yeah that's
probably probably best to just redo
this yeah it looks like it favors that
so I'm going
to oops it didn't oh
so let me try that again
yeah so what I'm going to do is I'm
going to bake
this nope that's not what I wanted to do
okay I'm just going to remove that
entirely and then reposition it
all right
so this is this is the hardest part guys
you'll spend more time just trying to
find a a good pose that uh doesn't cause
any waiting
issues than
anything and I think that I think that's
fine I think that works okay Jesus
Christ dude I was I was like losing my
mind over here I was like come on dude
I'm going to go into
World space to adjust this
I don't like the way he's hunched
over and I think that looks a little bit
better all
right I guess we'll just have to leave
that there I'm just going to undo that
actually I need to a paste to this grip
here uncheck
mirror oh so like I told you you have to
do this or it will not and then you have
to uncheck and check it again to refresh
it and now you can paste
the
post okay I'm not sure what happened to
the hand suddenly it looks
weird oh make sure you
turn the key frame stuff fun otherwise
it won't update it
yeah I mean so you can tweak it
until until you're content I'm just
going to uh leave it at
that make sure too your character isn't
hovering
because that'll transfer over when we're
done and once again we're just going to
drag
this drag this
out and we're going to go ahead and
create our add ative layer so we don't
forget we're going to delete that last
key frame so we don't
forget and then we're going to set this
to be
spawnable and then we're going to attach
it
to the socket we're going to open up
this and copy and paste this you have to
do it under the details with this
selected it won't let you copy it and
paste it under this right here just so
you know
so the thing about aiming is if you want
it to aim dead Straight Ahead then your
aim needs to be dead straight so just so
you know uh if it's not dead straight
the uh it actually won't be aiming dead
straight so what you'll do is go on the
top down and you'll see
this icons I like to place these all in
the center I'm just going to move those
off to the
side well this makes it hard because if
you're yeah so what we probably want to
do is we'll just focus on getting it
dead straight for first and then we'll
rotate
it yeah so you'll see he's actually
aiming aiming over this way
diagonally
um oh my God this I hate the way that I
have to go up and down instead of left
and right with
this just kind of I don't know I don't
like it
well that doesn't work I was hoping I
could get the grid to get smaller but
the grid doesn't want to get smaller for
some
reason okay so we just want that up
straight up and down as close to
straight up and down as we can get and
then in the back view
you also want this to be straight up and
down I think that's probably close
enough and then in this view with with
it in World rotation not
local we could
try rotating
it at like a 45 degree angle in fact
I'll just go ahead and do it at exactly
a 45 degree angle it doesn't really
matter that
much there we
go and
then well it looks
like
okay
so we need to give this an animation
[Music]
um yeah so add uh this is the start this
is the range end this is the frame at
which it ends so we're going to start it
at the
end and yeah so that digs into his
body that's not
good let's
try
yeah no we want to rotate it in World
space if you rotate it in local it'll
get offset
well
that's yeah so you're not going to be
able to get this dead
straight unless
you have him standing real
funny yeah so aiming the bow dead
straight guys is going to be I I've
never had to aim a bow uh dead straight
for a
character so this is something new to me
you could do it something like
this so if we if we angle it like of
that
now now uh he
can yeah I think that would probably be
the the best way to do
it and I want to set this to local space
and I want the
arm to be back like
this and I'm going to turn the snapping
off so you guys been been asking me to
show you this stuff so I don't want to
hear anybody
complaining about uh this being boring
and slow and painful to
watch I'm actually going to angle
this well I guess I guess I was probably
about right the way he had it angled up
so that's probably right
do but I still want to fix this so I'm
going to go into
world so that he's standing straight and
tall and as long as I lined it up
up and down left and
right and I only rotated it this way it
shouldn't throw off the aim because I
didn't Ang I didn't angle it this
way so I what I'm saying is I didn't
rotate it in this direction
here like this I didn't do
that so I'm thinking it should still be
dead on it ACC
but we would have to shoot a projectile
from it to find out and I'm not going to
set up set it up so that he's actually
shooting an arrow uh out of here for you
guys
uh I'm already doing more than what I
should for this video
so I need to keep this to a minimal but
we're done with
this and I'm just going to move this and
make sure nothing is uh jumping around
when I do
that okay so that was painful um but we
got all these done
so now what we need to do is retarget
them so in my previous
one I think I actually had y'all create
one of these and I'm must have deleted
it but I'm going to create another one
I'm going to call it
Steve to
[Music]
ufn and I'm going to shift right click
this and shift left click there and I'm
I'm going to replace this one with the
ufn ik
rig and I'm just going to just for
brevity sake I don't think I did uh
match any of those but I'm going to
reset everything everything anyway just
to make sure I'm going to remove any
offset any offset on the arms you don't
want any offset on the arms when you
retarget it'll offset this hand in that
for that pose by 2 cm we don't want
that for the legs it's okay for the legs
you want you want the legs to be
touching the ground so I'm going to come
over here into the back view and we need
to raise these legs up so I'm going to
say four
and -4 so it was easy for mine but for
yours it probably won't be um it looks
like these are back a little bit you
could move those up uh a
hair yeah that looks about right
all right so that should be
good so now what we're going to do is
we're actually just going to
retarget those
poses so I'm just going to right click
on one of them and retarget
animation I'm going uncheck autogenerate
retarget and I'm going to
say Steve Steve to
ufn it'll automatically fill this out
for
me I'm going to copy this
path and paste it and I'm just going to
retarget
these and I'm just going to retarget
them back under here
now these might look funny on the ufn
but they'll look right on your
character so just know those that's
because of anatomy differences this is
kind of a hack uh so that we don't have
to retarget all of the ufn
animations these these will look exactly
like he's holding on them holding them
in these That's How it'll look like uh
on uh the other
side
[Music]
so all right so I need to create some I
need to set up some
stuff uh for
these so I need to set up this stuff
here
so for the bow I'm going
to copy
this actually I'm thinking I should yeah
I'm just going to copy them over and
then I'll make a subfolder over here and
I'll call this uh
settings for now I don't know what else
to call them
and then I'll move these
here and then I'll rename this to
Bow and I'll rename this well I should
have done a batch rename but oh well
it's too late
now so I'm going to replace this with
the skeletal mesh for the
bow it doesn't this doesn't care if it's
a a mesh or a skeletal mesh I mean a
static mesh or a skeletal mesh that's
why I named it mesh uh it handles
everything for you on the other side
also it stores a soft object reference
as well so that's a plus to it but it
gets loaded as soon as the actor is
placed in the scene just so you
know so this needs to be
so I'm going to go under
here my bad I'm like starting to zone
out here guys
okay um
I'm just going to call it a
compound a compound
boo
yeah all right
that's actually not needed but I'm going
to fill it out
anyway so I'm just replacing this
here and now I should be able to just
drop this into the
scene
so before we can pick it up
though we need to set
this
up so this is the
user and really you would probably
delete all these enturies in here until
that character was actually able to hold
this you could always add them back
later but I'm I'm just going to remove
all that stuff from there
and that's the M9 that it's pointing at
right now but we need that to be
pointing at
this and so this will be the settings
for this character for holding this
bow and right now it's using the u4
rifle right Anem
set but we actually want to copy this
over
and we're going
to yeah we'll try this you know what
we'll try this right here and we'll see
how this
looks we'll probably end up needing
different layering settings oh yeah
we'll def we'll definitely need
different uh layering
settings
yeah
so we're going to have to create some
layering settings for this guy
so what I'm going to do is I'm going to
drag this entire overlay folder over
here and I'm going to copy
it um wait what what are these
called okay I didn't name those oh rifle
okay yeah I
did
oops Jesus Christ I must really be
starting to zone out this is a really
long one guys
rifle
bow there we
go so we're going to start with stand
idle ready and moving
ready idle ready moving ready and then
stand idle oh I mean idle
aiming and
then moving
aiming and now for
the crouching
all right so now we have our own
personal settings for
these and we're just going to reuse the
rifle anom set
[Music]
all
right now there is one thing that we
need to
do for these
poses we need to
enable hand I for this one and for the
aiming
so I'm going to add metad
metadata
enable
hand R
ik I don't think I can copy and paste
that no I
can't and the metadata just means that
it's going to have a solid value of one
that's all that means
it means it's just going to be
on now it'll automatically blend in to
one it's not just going to jump straight
to one if this is blending in over like
a quarter of a second it's going to take
a quarter of a second from it to go from
this for this curve to go from zero to
one just so you guys know
um I'm not sure if you know that or
not for the relaxed one we don't need ik
we don't want it either either
so let's just see where we're at I'm
sure I missed probably 50
things
okay for one it looks like he's
holding a
rifle okay yeah he's holding a rifle I
don't know what happened there uh I must
have not swapped oh yeah okay so let's
go back to
the let me just close all this Jesus
Christ I got too much stuff
open I'm G to open this back
up
and we need to set this to yeah that's
what it is we never swapped that out so
under the anom set we're going to swap
that out actually I need to rename
that Steve Bo left left hand requires
two hands it means you can't hold
something with
it now I I still have these fire and
reload weapon uh M4 A1 montages I could
remove those
um I'll just remove this one I
guess all
right all
right okay now that doesn't look right
because we don't have the uh the bow
string draw so that'll be the next step
I guess
oh muzzle yeah so socket yep I forgot
that I'm glad I I added this messages
because even I overlook that stuff Jesus
I'll probably add more messages like
that in the future guys
um but yeah let's add
a let's add a socket
here let's see
okay yeah right here let's add a socket
no we want the socket right here
actually
muzzle um let me just make sure that's
lowercase I don't think it's case
sensitive but I'm going to make it
lowercase
anyway and I'm just going to bring it
out a little
bit whoa what was that
oh oh I might have to look into that oh
that's probably going to be layering
settings yeah so it is off a little bit
we can adjust that though it's not off
that much though it's just down and to
the left a little
bit so the problem you've seen there it
has to do with our layering settings we
have not adjusted our layering settings
that's the reason why I created layering
settings uh specifically for this bow is
because I knew there was going to be
some problems there uh related to that
and that's because this is still
assuming that we're holding the gun in
the right hand and not the
left so we would need to now go through
here and adjust these settings
so right now we're stand idle
aiming that looks like it would be
okay let's check
the moving aiming
both of those are full overlay both arms
in both of
these
so
wait oh it's not okay I see
okay okay that has to do
with the overlay amount so this has a
high overlay
amount and a low mesh space amount okay
that's starting to look a little bit
better I think
yeah and now we could stiffen this up a
little bit because the thing is is when
it's blending from this to this that's
where some of those problems come from
so we could say 6 or even 7 and you'll
see his arms go out a little bit because
he's respecting that pose more but we
could say 04 on this and then raise this
up to the same amount and that might not
cause any problems yeah okay so it does
kind of make his arms go off into the
right a little bit so what we could do
is we could try switching this over to
mesh
space yeah there we go that doesn't look
quite as bad
and yeah so this whole problem right
here around the wrist uh that's kind of
making it look a little odd from the
back side right here because it's
dipping down uh and that's because uh
our wrist is actually starting to
collapse right here now that's going to
be where a POS driver comes in uh and
that'll that'll prevent
that unfortunately I can't actually show
you a good example of that right now
because they're it's setting those up is
quite a task if you thought this was a
task setting those up takes just about
as long so I'll have to I'll have to
make another video on how to do that and
I'll probably show you how to do that
for this guy so and and uh and and
demonstrate on this weapon uh but that
won't be in a video today because as you
can see it's already 8:00 p.m. and it's
getting late for me and I've been making
making these videos for hours now so I'm
trying to get all these videos made for
you
guys
so that part is fixed but we're going to
have more problems and we'll address
those as as they
come okay
so so for some reason his hand is coming
off off whenever we start
moving but I know I have hand I enabled
right here for
this now this could have something to do
with the ufn character too though we
have not tested this on the ufn
character so if the ufn character's uh
arms are locking right here then it will
cause this character's hand to come off
so that's one of the problems uh because
this guy's being live retargeted and to
some degree he's actually following the
UE fn's uh the ufn character during all
of
this I have not added the ufn character
to uh this Chooser oh I deleted him from
here
yeah we might need to actually test this
on the ufn character too to make sure
that his arms aren actually locking and
coming off
um actually we could just simply unhide
them from
here
so I could probably do that from right
here okay
yeah let's um okay so let's just see if
we can uh drop this weapon can we drop
it we can't drop it
okay let me let me do it this way
then cuz compiling that breaks or doing
that during runtime breaks it so I'm
just going
to set it to be visible
and this will let us know if we're
having any issues
here no I don't see any issues
okay his arm is not locking okay so
that's not what's causing it it's going
to be layering
settings so I'm just going to uncheck
that and we're going to go back over
here and pick this guy
up yeah so it's going to be layering
settings something to do with the hand
layering
settings so we're going to open up both
of
these and we're going to look at the
okay so the right hand
has secondary motion that's probably
what's causing
it
yeah that could be what's causing it I
can't be 100% sure let's see we only
have slight overlay on the spine but as
you seen there was no arm locking for
the ufn so that shouldn't be a
problem we do have local space
here we could
try mesh
space uh that can also throw things off
as well just so you
know yeah
I might have to look into that I'm not
exactly completely sure why his hand is
coming off of
that it shouldn't be coming off
something else must be causing that
maybe let me check let me check the
animations again I'm pretty
sure I'm in
oh wait okay yeah so we we might end up
having to create our own uh for this I
know why it's doing it so I was just
making an assumption there with that
state there but I was
wrong so you'll see that when ever we're
moving we're blending between the idle
ready and the moving ready
pose but in
actuality let me
see yeah so that's like a partial blend
and it works fine for the rifle but for
this it's probably not going to work as
you can see here it's based off of speed
and uh it only parti Blends right here
so what we're going to do is we're going
to duplicate
this and I'm going to put it under the
enem
set and I'll call it bow
and then I'm going to go into my overlay
state I'm just going to have a blend
between this one and this
one but I'm going to have it blend
fully so that should be on the blueprint
thread safe update
I'm going to set this down to like I
don't know
250 we'll try something like
that wait did I even assign that I
probably
didn't no so we need to assign this
yeah okay so now you'll see his right
arm looks a bit funny and uh well he
looks stiff in general so we need to
adjust the stand moving
ready
and for this
we're going
[Music]
to we could set those to be
1.0 you could also probably
do
um zero but this the thing is is when
you desynchronize the the idle ready and
the moving ready too much like this when
it's blending between those values and
these values and this one has uh zero
and the other one has one uh then it can
actually cause some problems so we
actually might want to leave those as
one and then just set this as local
space
okay
so it's kind of moving inside of them in
in some situations and we can
probably uh somewhat mitigate that by
only putting this as .5% I'll leave that
at one but the left arm we might want
that to just be partially local
space and that should help a little bit
all
right
so let's see
now yeah so I haven't set up
the I haven't set this up so that you
can actually like play animations on
these that hasn't been something I've
actually considered until just now so I
might have to get back to you guys on uh
that part of it playing the animation on
it so I might just come back later if I
like after I've added some way of
playing stuff on here and synchronizing
it somehow between the character and
stuff that part is going to be a bit
tricky
uh because I don't have a whole lot of
stuff exposed to this so I'll have to
provide some way for this to grab
specific information from the character
uh so that other actors can just grab
the information that they need from the
character based on their current stance
State stuff like that I am updating the
character itself the character blueprint
itself is being updated on The Stance of
the character and that's being updated
by the linked anim layers so if we go to
the event graph you'll see right
here um oops I didn't mean to move that
you'll see right here it is sending it
is updating the object stance of this
linked animal layer uh it's updating the
character on that
so
yeah all right guys I think that's
pretty much it for this video I'll have
to get back to you guys on
uh I think I showed quite a bit here in
this video but I felt like it was
important you'll
see um there there's a bug there um
um we don't actually have this set up to
be able to holster and I think the
reason why it didn't fall uh let's see
if we got a message log no okay so
actually before I go let me just go
ahead and show you guys this needs uh
some kind of collision uh or it can't
you can't simulate physics on
it it may not actually have Collision on
the map
so it has a physics
[Music]
asset uh it looks like it does have
physics
Bodies Okay um
um I might have to look I might have to
get back to you guys on that part of it
um
[Music]
yeah there's likely a way to
still simulate physics on this without
it deforming and flopping around like
it's a fish you know or like it's a
rubber
toy but I would have
to look into that because I'm not used
to simulating physics on stuff like this
that's not meant to flop around you know
like it's
Rubber and this is not a static mesh so
it makes it a little bit more difficult
yeah I might have to look into my setup
too because I'm actually
just assuming that it's a static mesh
when I ra simulating physics and there
might be some more logic I have to do
for handling it for skeletal
meshes so that wasn't something I I've
actually considered until just now that
may be something I have to get back to
you guys on uh but yeah that's very
likely the reason why I didn't fall uh
and hit the ground
I could like attach it
to uh an invisible like Cube mesh and
then simulate the physics on the cube
mesh I could do something like that and
it would
work
but that would require me to like change
some stuff in
here so if we go back to the
master and we go to the setup
mesh you'll see it's casting to skeletal
mesh if it fails It cast to The static
mesh blah blah blah but right here what
you could do is you could add add an
extra
attach or instead of attaching the item
mesh to the scene right
here you could attach
it to this box maybe and simulate
physics on this box but this box
I don't know if you can simulate physics
on this box also this box is Big so you
probably wouldn't want to so you
probably want to add a little cube in
here make it
invisible and attach it to the
scene and then right here maybe you
would
attach this to the
cube instead
and then you would you would have to go
to where I'm simulating physics and
instead of grabbing the item mesh you
would grab the cube and simulate it on
the cube
um that would probably work
but I don't want to test that in here
now as far as the putting the bow
away if you go to the slot manager
[Music]
um yeah so the slot manager you'll see
we have some stuff right
here now I could create another slot
here I'll duplicate this
one um one second get my phone
scen that is my alarm
yeah so I don't
want yeah so we'll call this uh
bow I don't know what's up with that why
it's showing that
but yeah I'm thinking
maybe oh
okay that's the cube that I added before
I was wondering I was like why am I seen
a cube
suddenly I forgot that I had added
that okay so this is the
bow
slot and I'll just I'll just use this
bow slot as an example but I'll go to
the class def defaults and I'll change
this to from that to Bow so only a bow
can be placed in this one the rifle
can't be placed in it but you could make
it so that both the bow and the rifle
can be placed in
it it's up to you how you want to handle
that you could also create an uh an item
data for this bow holster and do it that
way but instead what I think I'm going
to do is I'm just going to add
a bow to the rifle one and that should
allow me to attach it to the rifle
slot so if I press
h let's
see okay so I press
h it should be holstering it let me see
oh that's I went too
deep I'm going to close all this other
stuff I'm doing it again I got too much
stuff
[Music]
open so let me just find my
holster stuff
yeah this probably should be something
that I should get back to you guys on
but either
hand what's calling this one
oh right
so if we tell we won we don't if if we
tell it it's either hand then it'll just
try to uh holster both hands
uh otherwise you can just have it
holster a specific hand uh so I'm just
going to create a breako right here
because this one's going to say not
found and I'll just skip ahead and
you'll see it says not
found and now this one shouldn't be
saying not found but apparently it's not
being
found and you'll see it's the reaching
hand is left that's that's correct
yep the item we free is the
bow right so we have a bow it's a
compound compound bow so it's going to f
it's going to look for a slot for
that so this might be uh my fault this
might be a bug in my own system here
it looks like a lot guys it's it is
actually but uh it's not something that
runs on a tick so don't freak
out there's a lot of logic you have to
handle for something like this uh this
is the hip flashlight holster and
obviously that's not going to be
it okay it said it didn't find it it
should have found
it
oh because this is Left-Handed and I oh
okay okay yeah
so right because you you're holding it
in your left hand so you won't actually
be putting it behind your back like that
so what I'm going to do is I'm going to
create another
one and I'm going to put it in I'm going
to set this one to left hand and I'm
going to put this to back R and now what
we're going to do
is on this character here we're going to
create another uh
and I'm going to call this one back R
and then I'm just going to invert this
um wrong wrong way let's try inverting
this there we
go and so now you'll see we don't get
one but if
I come over here to my event
graph you'll see on the slot manager
we're doing a a slot setup
here and we're just going
to add a second one and this won't fail
because there's two slots of back of
type slot
back rifle
okay so I mean it's it's a little out
there but that's because it's rotated
let me just
uh rotate this
90 oh NOP wrong
way definitely don't want to rotate it
like that let's
see there we go
yeah I guess that looks that doesn't
look too too bad I mean it does but so
if I holster it now it
should item holstered
good there we go it looks funny but
that's because I haven't configured it
uh this is configured for the rifles uh
orientation and not the Bose orientation
so that's the reason why it looks weird
but you'll see uh I can press e now and
he'll grab it with his hand again oops
it looks like it's it grabbed it with
the wrong
hand okay well I'm not sure exactly what
caused to that if I'm to be honest with
you because that's
that might actually be a bug I keep
thinking I'm finding bugs but I'm
actually missing
stuff
so I don't think
yeah I'm not sure why it would do that
guys
uh Jesus let me see
here item
handling this is turning into a really
long
video I should probably just like call
it quits and get back to you guys later
on
that um let's see
cycle okay so that gets called on the
event
graph under pickup
management I believe this
is where that's being called let me
see well not directly it's actually
being called from this event right here
and then that's calling the change state
of
hand so if
I yeah so it's returning right hand for
some reason the slot manager
is I'll have to look into that that's
that might actually be a bug on my end
but the slot manager is actually the one
responsible for
that the cycle holstering items it's
drawing the holstering
items
so so I could put it up and then try to
cycle it again
yeah so I don't think
this yeah I'm G to have to get back to
you guys on this I
think ah okay yeah that's a bug on my my
end sorry guys I just
assumed
that if it requires a free hand
apparently I assumed that we need to
occupy the right hand right
here so this would actually need to be
uh grabbed from the item so if it's a
so I'd probably need to verify that
there's a right hand and if there's a
right hand
then then we could you know we could say
we could say
select right otherwise
left you see so I think that would Pro
something like that would probably work
but I I I believe there's probably a
better solution than what I just did
that's just something I did on the Fly
real
quick and now it's occupying the left
hand
yep there we go so I'll fix that but you
seen how I uh went in there and fixed it
and maybe you learned something from
that so anyway Yep this was a really
long uh video and yeah this isn't like
perfect right here there are some issues
with it
uh uh and I I'm I'm kind of thinking
that we're going to need a different
solution for hand on on
bow like maybe we would because the hand
is actually still moving around because
my Universal aim
offset I think was mostly working for
two-handed rifles it
wasn't it probably isn't the best for
handling bows it might actually be
better if you used
a
custom aim offset for the bow and I'll
probably add that back guys I'll
probably have the a universal aim offset
but then I'll I'll give you the option
of adding of uh setting up your
own yeah that's probably something I'm
going to work back into the system and
it'll probably be part of the enem set
so I'll probably have a section in there
where you can like set up aim offset
poses two aim offset poses and I'll show
you how to make them uh and it'll just
be like for the pitch it'll be one where
he's aiming up and one where he's aiming
down and then uh if those if those poses
are available then it'll use those
instead of the universal that's probably
something I'll do and I don't think I'll
actually have to refactor anything as
far as these assets these data assets go
I don't think I'll have to refactor any
of those in order to accommodate that
since I've allowed for tags
uh for poses to be added and bound to
tags I can just take advantage of that
without having to add anything to the
data assets that was the reason why I
chose to set up those data assets the
way I did was so that I could easily
expand that later without having to
worry about refactoring it but anyway
I'll see you guys in the next video uh
yeah I'll see you later

================================================================================
ARQUIVO: Unreal Engine 5_ GASP DAO v1.35 (Custom Character Item Setup '3') (English_ASR)
================================================================================

=== DESCRIÇÃO ===

In this video I'll be showing you how to setup your character to use the Template Items and Weapons in the Project

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Project Documentation: https://unreal-devop.gitbook.io/gasp-dynamicadditiveoverlay

00:00 Intro
01:22 Item Data Setup
03:24 Item Char Data
03:02 Linked Anim Set & Linked Anim Layer
05:23 Overlay Layering Pose Settings
07:37 Hand Management Explained
10:20 Held Object Settings (Char Specific)
11:35 Assigning Char Specific HOS
14:25 Assigning Item Char Data To Items
19:20 Right Item Offset Configuration
24:00 AO Debug Widget & Right Gun Zeroing
25:34 Anim Set Discussion
29:00 Left Item Offset Configuration & Zeroing
31:33 Dual Item Zeroing
32:20 Rifle Offset Config & Zero
36:52 FlashLight Config & Adjust

=== TRANSCRIÇÃO ===

all right so now we're going
to set up
the character to work with the
weapons and this guy here so I'm just
going to create I'm just going to
organize this stuff a little bit
I'm going to create a new folder called
H
[Applause]
objects I'm going to create two
subfolders one called
guns the other called
items and then
rifle well I guess that would be called
in 4
A1 you could say rifles and then M4 A1
you know however you want to do it but
I'll probably
just do it like this for now I'm not too
worried
about that so I'm going to go over here
into the Dao characters folder and it
would have it probably would have been a
little bit easier if I would have put
this stuff over there to begin with but
I'm want to because this ue4 Manny guy
is already set up with his own anom sets
uh that I made for him I'm just going to
go ahead
and
um I'm just going to go ahead and copy
all this over
actually so I'm just going to copy that
whole entire thing and I'll just go
ahead and delete
that so the thing is is it did create
all this for us but we're going to have
to rename them and we're going to have
to reassign uh these references because
these are referencing each other uh but
in actuality when we copy them they're
still referencing the the ones in the
other folder
so first thing I'm going to do is go
into the main held objects folder and
search for
ue4 and I'm going to select all of these
and right click and bachy
name and I'm going
to replace E4 with
Steve you could even say cc4 Steve
underscore Steve you know in this case
but because I would probably have
multiple
different character creator
characters the thing about character
creator is your characters can have
drastically like varying anatomies so
it's important that you try
to
not like have every character with a
different Anatomy because if so this is
going to be a lot more work for
you
so yeah let's just go ahead and go into
the M9 folder I'm going to open up this
one and this uh asset it stores the
montages and the montages are uh chosen
out of this map via gameplay
tag and so these montages
are looked up by gameplay tag from a map
the linked anim layer class right here
this
uh dictates the logic that is driving
this anom
set so one thing to know is that your
anom sets this is an anom set ALS
and it stands for Linked enem
set these post sets right here they have
to so if you come back over here and you
go into the linked anom
layer go into my
blueprint and under Dao
pose
setup primary and if you just look at
these and you go into these
you'll see that they're looking for a
pose with a specific gameplay
tag so all of those
poses all of those gameplay tags must
have a pose associated with them if you
create if you modify this if you
duplicate and modify this linked enom uh
layer class then you can replace this
linked enom layer class sorry
my my camera outside is going off mute
my phone
um so you would assign that linked anim
layer class right here and then you
would have to create a linked enem set
for it and you'd have to make sure that
every gameplay tag that you used in
there um is has a pose associated with
it in this map so that it can find and
load a
pose and then for each of those
poses uh you also
need overlay layering
settings so in actuality you're only
going to need so many of these like I
could probably have I could probably
eventually set this system up so that
you can select from
a um from
presets and you w actually have to
actually set these settings yourself
but in actuality you know depending on
the circumstances you're probably going
to want to um it'd be hard for me to
cover every circumstance with a preset
for you but it is
possible so I'm just going to leave it
like that for now but yeah
so every uh
State inside of here that requires a
pose you must have a pose associated
with that gameplay tag that it's uh
that's associated with that and you must
also have an overlay laying setting
associated with it as
well so you have
these you have these for standing and
you have them for
crouching so for the most part as long
as you're not creating your own enem
sets you don't actually have to do this
you can use pre-made ones that are
already in here but if you want to set
up your own uh it also you can replace
these poses in here and just the poses
and you won't have to touch these
overlay layering settings so you would
only need to touch those overlay
layering settings if you needed to
drastically change the way things worked
in which case You' probably be making
your own link anom layer and then you
would need to uh set this stuff up uh
for
it in actuality the just to let you know
the flashlight is actually using uh the
the pistol uh linked enim layer believe
it or not
so that just goes to show you that you
can re repurpose these uh for different
[Music]
things all right so moving
on outside of the anim sets for each
hand um that the item can be held
in we need to actually specify if it
requires a free hand CU just because we
have a a right hand and a left hand down
here it doesn't mean that you want this
item to be held alongside another item
so for example if this was a bow but you
wanted the bow to be able to be held in
both the right hand and the left hand
but you didn't want something to be held
in the other hand then you would need to
check requires free hand for a pistol
you don't need a free hand uh really
um there is actually a setup in here
that does require a
freehand
but it doesn't seem to really affect the
layering that much in this situation so
I'm not requiring a free hand for
it so for dual welding I actually have
I'm actually using either hand uh for
dual for the Dual welding anom set and
that's uh an anom set specifically with
poses where he's actually holding to uh
two items so this actually does look
funny on him on the ufn and that's
because I re I retargeted this pose from
the UE FN to the ue4 I fixed it and then
I retargeted it back so
the um deorations that the U fn's
original pose was causing on the ue4
that's now
being uh applied to the ufn so you won't
be able to use these posits for the ufn
but you can use them for the ue4 and
they'll look
fine in this case we're actually using
this for Steve the ue4
ones so if I actually go over here
you'll see that these are all in the ue4
folder this is part of his anom
set and that was so I could fix the way
that he looked when he was holding them
and the way his fingers were
bent so the ik retarget data I decided
to make these specific for each hand
because in some situations you actually
do need different ik retargeting data uh
for the different hands you might be
able to get away with one in some C
situations but there are situations
where you're going to want uh these to
have their own
so these settings
here uh they you know I've gone over
this stuff before the held object offset
I don't call it h anymore it's called
hoo um so I renamed all those assets to
Ho instead of h o and I added a I added
one for the left hand so now you have
one for the left and the right hand you
don't need these per set so these
actually only I I've I've kept these in
the right hand folder these right here
but you'll see that these other ones
they just have the aiming and the
ready okay so we need to make these
assets for this character uh actually
that's what we're doing now so I'm just
going to close all those tabs right
there and I'm going to go back to the M9
folder for the
character and what I'm going to
do is I'm going to do this because it'll
it'll make it easier
so over
here I'm just going to drag that
one and this is why I renamed it to
Steve that now I now I can tell which
ones are which we're going to keep the
enem sets for the u4 but we're going to
use uh Steve is going to have his own ik
retargeter uh offsets offset settings so
that he can hold and aim the gun
properly that's because Anatomy differs
from character to character and because
of that they all need different
offsets I go over that in depth in the
documentation if you want to go and read
it so for this one same
thing you'll see this one only has a
rightand inem
set also I made these so that the
montages are actually here instead of on
the guns the reason why I did that is
because you might want each character to
have their own like firing or reloading
montages you know or you might want just
one out of five characters to have their
own personal one maybe you have a
special character and you want him to
have different reloads you know
so this allows you to do that that's why
I structured these the way I did I
structured these with expansion in mind
I want want this to be as flexible as
possible so I w't have to go back and
refactor things
again I know I keep saying I'm not going
to refactor things guys and then I end
up refactoring it I'm just going to tell
you now if I find a better way to handle
something I'm going to I'm going to do
that I'm not just going to leave things
all screwed
up you'll see the flashlight can be held
with anything in the M9 but the rifle
the M4 A1 it cannot
okay and the if you notice
too
the flashlight can only be held in the
left hand but it does not require a free
hand I that's the reason why I needed
that right there I needed this so that
it would be really flexible and if you
hover if you ever have any question
about something you can hover over it
some of these actually
have uh information uh in their
description so when you hover over it
it'll show up as a tool
tip so that's basically the setup on
that now we need to just uh zero these
in I know I'm rambling a lot guys but
I'm trying to cover everything
um so if I come over here you'll see I
still can't uh pick it up um and yeah I
forgot to do that part so we need to
browse to this asset and we need to open
up this Char data
M9 and I'm just going to do that
for the flashlight as
well and I'm going to do that for the M4
A1 so now what we need to do is let's
see I want to close these
two
so templates I put this under the
templates folder so I'm going to go
under the template section right
here and I could do an ested
Chooser for cc4 chars if I wanted um I
guess I could do
that actually no I can't because this uh
needs to be set up differently so if you
look over here you'll see this needs to
match exact and it needs input in row
value value but over here on this one it
doesn't need to match exact and it's
real value and input so that allows us
to match partial tags right here in this
folder but inside of this folder you
have to match the tags exactly um so you
would have to create your own like
subfolder structure inside of here um if
you were going to do
that so I'm just going to switch this
over to
asset and I'm going to give this
the hopefully this doesn't this sub
folder of cc4 doesn't cause any problems
I don't think it will
though it
shouldn't and then on this
one I I could I I should be able to copy
that okay copied the entire thing okay
that's fine
though so if we go back
into our character folder up
here and go to the M9 this is the asset
the M9 is looking for and you can
actually click and drag that over here
and it'll accept it as long as it's the
right type it has to be a PDA item jar
data
asset and just to show you if I try to
do it with this one it won't take it see
it's red it has to be a PDA live chart
uh data item chart data asset so if you
go to this settings you'll see it it
needs to Output a PDA item Char data
type and the
parameters is a a
structure that holds a gameplay tag
container I had to do it that way the
first time I tried to do this I couldn't
figure out how to compare gameplay tags
inside of here because they needed to be
containers so I tried to set this up to
be a a gameplay tag container and it
didn't work uh and then I realized you
can't do it like that it has to be
inside of a struct that's why this says
struct right here it's looking for a
struct so any data that you pass into
here has to be passed in from a struct
which just a structure data type so also
you can go through and you can see all
your subfolders inside of here your
nested
choosers so now we should be able to at
least pick it up he won't hold it right
but we should at least be able to pick
them
up see
so it looks like he's about to it looks
like he's about to shoot
himself um or like he's trying to so
we're going to come back over here and
we're going to open up this guy right
here also you can go over here and you
can switch this over but there's a bug
right here where it doesn't actually
update uh immediately you'll see nothing
showing
up but if I holster this and I pull it
back out it may actually show
up it still doesn't
no let me try it
again okay well anyway you can find them
from here that's some weird bug I don't
know what's what's wrong with that it
seems like uh these kind don't really
work all that well maybe because they're
only firing once that's probably why I
only have these firing once inside of
there
so he's holding in the right hand so we
need to open up the ik retarget data for
the right
hand um I actually have this wrong
you'll see this says Dole hand this
should say right so I assigned the wrong
one here if we browse to it you'll see I
sure did so um I need to replace that
with yep and I I assigned it the right
hand to the uh so I need to assign the
Dual hand that's also why I named these
right left Dual hand you know the way
that you name these is very important or
else you'll end up putting them in the
wrong slot and then you'll get confused
why is it not working uh that's why so
I'm going to have to stop this and start
it again because they were on the wrong
uh folder and it caches
them
so anyway now I can open up this and I
can open up the hand
R and I can expand to this
and I'm just going to zero this
out and I might like do some magic later
on guys to where the location and
rotation is relative to World space
instead of bone space but right now it's
relative to Bone space so it can be a
little confusing trying to move this
stuff around rotation isn't really
confusing in uh local space but location
is
so also this tends to get gimbal lock
that's why it's spinning a lot and these
other ones are changing um I'm not sure
how to address that but yeah that's
called gimbal lock uh you can look it up
if you're interested in in knowing
more but I'm just going to say 90 there
and I think that's probably about good I
just want to make sure that oh we can
adjust it more after we get get it in
place let's go ahead and do that first
so I'm going to move it forward and move
it to the side and then move it
up and you can scale it down too guys uh
so if you need it to be smaller you can
say
[Music]
0.555 you
see so if the character has really small
hands you might actually I need to just
make it
smaller so it does look like it's a
little lopsided in his
hand let's
see no I think the hand is just tilted
to the
side it's hard to tell
actually I'm going to move it more to
this side though where the fingers are
up against it it looks like the pinky is
inside of it now
yeah so I'm going to tilt
it I'm going to try NE
five let's try negative
8 I think that's
good I think that's good so I'm not
going to go all nuts with it here
[Music]
yeah okay
um that's it for that we'll have to do
the the other one too so what I'll do is
I'll just probably just copy this one
over to the other hand so I'll open up
the left hand and I'll just paste that
one into there and then we'll adjust it
we'll invert it and stuff like
that it's not going to be right because
I mean the offset's going to be
different in the other hand because of
the differences but
anyway I might add a button later inside
of there to where you can end to where
you can just like press a button and it
inverts these values for you uh and then
you can adjust them from there that may
help you adjust it for the left hand or
for the opposite hand after you get it
adjusted in one
but yeah so anyway we're going to go
ahead and go into the aiming and we're
going to go ahead and expand the I
sections of these and then we're going
to go into the content drawer and we're
going to go into Dao Blueprints and
there should be a widget folder there
right click on this editor utility and
run editor utility widget for me it's
going to dock it because I've already
docked mine before so it remembers that
and these are for the static rotation
offsets that you see here
and so what I'll do is I'll just fire it
once and I'll copy this um actually I
make sure these are zeroed out before
you do this you'll see that value is
different
now and there you go that's all there is
to it now what we can do is we can
adjust this other hands positioning
you'll see there's a problem here I'll
show you guys later how to fix those
problems around the wrist by creating a
pose driver um but I'm not going to do
that right now cuz it's pretty
involved also you'll see his his fingers
actually look
funny um I don't like the way that his
fingers look with this Unreal Engine
4 and I'm set you know what let's try to
switch this guy over to the metahuman
Anem set it might it might actually be
better might actually look better so
I'll go ahead and show you guys how to
do that so if we go into the M9 you'll
see that we have these PDA uh linked in
them set and these are all for the ue4
but if I go over to a
metahuman you'll see that the Mel has
his
own and I'm going to drag these into
here and we'll just see what it looks
like with that now we're going to have
to rezero it because those are different
poses and anatomy and all of that it
looks like his fingers bent backwards
this guy might actually end up needing
his own Anem
sets
yeah I mean it doesn't look much
better he's going to end up needing his
own enem sets I'm just going to uh undo
that and we're just going to stick with
uh this U this ue4 enem
set I'll show you guys later how to do
that it almost looks fine it's just like
right here looks
weird I might go back and modify those
u4 poses uh it might just need the pose
itself just might need to be
modified so anyway we've got that set up
for the right hand aiming we don't need
to adjust the ready pose because it's
not hand positioning sensitive so we
just need to adjust that
one now this this actually goes a lot
faster than it is for us right now and
that's just because I'm I'm trying to
explain how things work to uh to you
guys
yeah so his hand kind of looks a little
weird uh when
he's let's see and that's just because
the pose just doesn't quite
match nicely with him and so it's doing
some funny things to his fingers yeah
that this is why you really need to make
your poses uh for your character
specific uh type
for example with the metahumans I only
had to one make one set for all the
metahuman males and one set for all the
metahuman
females for the CC characters you're
probably only going to need to make one
set for all of them uh so that should
work as because they all use the same
skeleton they try to universalize all
that and so the the Basse pose that they
have when they get exported for unreal
is just a little different different
than the Unreal Engine 4 characters and
that's the reason why the Unreal Engine
4 characters poses just look a little
odd uh on it they almost look good but
there's just some slight
Oddities anyway so I'm going to uh
unpause this for one and then I'm going
to press h to holster that pistol and
I'm going to come over here and pick up
this other pistol and if I have a pistol
holstered and I pick up another one
it'll automatically pick the other one
up and then opposite hand because
there's a spot available right here for
it to be placed in and there's none
available over here so anyway you can
see that didn't work I told you it
probably wouldn't but what we can do is
we can say plus
180 um that didn't work
let's
try
180 there we
go that gets Us close but we may still
need to adjust it its angle in fact this
angle right here is probably going to
need to be
adjusted because that negative is local
to the other hand and this hand is
mirrored remember so
actually that that actually looks about
right yeah I'm going to say that looks
right so that doesn't need to be
adjusted for the metahumans I had to I
had to uh adjust that offset right there
the uh rotational offset this way
um that way but anyway for this guy it
doesn't seem to
matter so I'm just going to open up this
we're going to do the same
thing and this time we're copying the
left oops I forgot to zero this out
always zero that out because this
doesn't take this into
consideration in fact if you read this
right here I have a warning up here just
to remind
you and now you'll see it came out over
a0000 Z that's pretty close to perfect
you might think it is perfect but that's
only accurate to three degrees of
freedom you'll see you can't even see
where the green you can you can barely
see like a few green pixels because
they're so close
together yeah so that looks
good so now we just need to do the DU
welding
so yeah the left one doesn't have a
two-handed pose I took the two-handed
pose off from the left left one that's
why he I didn't have to uh correct the
opposite hand for holding you know the
supporting
hand so anyway we can fire the gun open
this up we're going to have to zero it
out because we copied these remember and
these are zeroed for the other guy so
fire at
once copy paste
and I'm uh shift left clicking to paste
that by the
way and there you go
perfect so there's
that so now we just need to do it for
the M4
[Music]
A1 I should have gave him the the female
anim set
the ue5 uh characters they're using the
metahuman ones actually give me one
second let me turn the light on it's
getting
dark so we'll just browse on over to
this one and open it
up and open up this right here I'm just
going to zero that out add a 90°
rotation there
and that looks pretty
close we'll see let me get it in it
properly positioned in his hand and then
we'll make any further adjustments that
we
need yeah this one I think is going to
need to be rotated I think we did
something like7
yeah and that seems about
right looks like we can probably go down
some if I move it any closer I'm afraid
it would
uh put his finger too close to where a
trigger would be on an actual
gun but you can always adjust that after
you replace this rifle with your own
so let's just go ahead and zero this
this is zeroed
already
[Music]
so all right now we
can and you'll see he starts leaning
forward whenever I move that forward
that's why I was telling you guys you
probably aren't going to want the full
body ik on the arms uh because it can
you see that you see this that's why
that's why I was telling you guys you're
probably not going to want that uh it
can cause some issues it'll cause them
to lean look as I move this over you see
how he starts leaning that's what that's
why I don't use the full body ik for the
for the arms
yeah just personal
preference all right
so that's good now we can go into the
resting pose you'll see his hand is
messed up on this one so for this one we
will uh well I I call it the ready pose
but yeah for this one we actually will
need to uh
just this
hand now the full body ik can kind of
help in situations like this it can help
kind of prevent issues around the wrist
but I don't think it's worth the other
problems it causes and you'll see this
thumb is all screwed up it just doesn't
that U that pose looked good on the u4
guy but it just doesn't look good for
his thumbs it makes his thumbs look
funny um but yeah I'll show you guys how
to uh set up custom
poses actually I'll probably go ahead
and show that along with this series
I'll probably come back and do uh
another video alongside these other
videos I'm doing in here today I'll
probably go ahead and show you guys how
to fix that
for maybe the uh maybe the rifle
actually because there's only three
poses for the rifle so it'll be easy for
me to show you how to do it for for them
so I'll do that
actually all right but yeah anyway
you'll see that you know now he's
holding the rifle
properly and if we holster that you know
puts it on his
back then we can come over here and we
can pick up the
okay oh okay that's
uh yeah so that's because we don't have
anything uh set up for
the uh let me
check I'll have to look into that that
might actually be a
um I mean it's probably due to not
something not being set up properly
oh I set okay yeah so I set the uh
m41 okay yeah so that was my fault guys
um it wasn't a bug it was just me not
paying
attention so it was loading the M4 A1
andem set for the
flashlight and it was treating it as a
uh a two-handed right a right-handed
weapon so now you'll see that it's
loading it properly and we can go ahead
and just position this we only really
need to position this in the hand you're
probably not going to care that much
about the accuracy of this if it's
aiming straight forward um but that's up
to you you know if if you want to make
it aim straightforward then what you'll
probably do is you'll probably add a an
actual light source to it and put them
in a dark room and then adjust the way
he's aiming it
so um when he's in the aim State and
when he's in the ready state so you'll
see that on this one we only have two
states
uh yeah so that's actually pretty
close I'm just going to kind of move it
somewhat into position
here and yeah the fingers are looking
pretty bad for this guy here so I need
to actually rotate this
upwards yeah that's I think that's
actually pretty close to
Accurate now I'm going to move it back
and up a
little and yeah these directions are
confusing that's why I was saying I'll
probably uh set this up so that it
automatically converts it it'll convert
it from World space uh
or it'll rotate it in world or offset it
in World space I don't know I'll I'll
I'll figure something out eventually on
that front
but yeah because it's it's kind of
confusing okay so I'm just going to
leave it like that um like I said if you
want it to look any better than that
you're going to have to modify you're
going to have to create your own uh anom
set linked anom
set and I'll show you how to that do
that in uh I guess the next video
so
well I'm going to be bringing in a a
custom weapon so I'll probably
just show y'all how to do it for that
we'll see um
[Music]
yeah all right
so that's
the let's see what it looks like when
he's aiming okay it's actually aiming
pretty high it's actually aiming a
little high actually for uh instead of
level it's actually aiming upwards a
little
bit so we could
actually rotate this let's
see
that's I don't actually have the I'm
just going to aim it a little down I
think that's probably okay
okay it would probably be shining
somewhere around right
here it probably doesn't need to be
aiming straightforward it probably needs
to be aiming slightly down um
yeah I have all mine aiming like
perfectly straight but that's probably
not actually how you want it in in the
actual game I didn't add actually add a
light source to mine so it was difficult
for me to tell I just treated it like I
was aiming a rifle
anyway that's basically how you do that
so you learned how to set up all these
with the Chooser and uh you saw a little
a few minor mistakes on my part oh look
this one finally start decided to start
working nice now that I don't need to
see
it there's a way to trigger that uh to
get around that bug where it doesn't
update I don't remember how though um
but anyway
and yeah the the left hand actually
recoils when the when you shoot and
that's just because that recoil
animation was meant for a two-handed
pistol that's the reason why it looks
like that I'll I'll fix that later I've
already got it set up so that we can
have like hand specific recoil montages
um the weapons are actually updated on
what hand they're being held in so that
allows you to select specific montages
from the weapon logic based off of the
hand they're being held
in but
yeah hope you guys found this uh useful

================================================================================
ARQUIVO: Unreal Engine 5_ GASP DAO v1.35 (Initial Custom Character Setup '2') (English_ASR)
================================================================================

=== DESCRIÇÃO ===

In this video I'll be showing you how to bring in your custom character and set it up.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Project Documentation: https://unreal-devop.gitbook.io/gasp-dynamicadditiveoverlay

00:00 Intro
01:25 IKRig & IKRetargeter (I got a few things wrong here)
08:53 Character Blueprint Setup
12:57 Correcting Feet On IKRetargeter (BlendToSource Set To 1.0)
15:57 Socket Setup (Hands & Slots)
17:39 Char Tag
18:46 Adding Char To Widget
19:26 Adjusting Slot Socket Offsets
20:23 Correcting Traversal Hand Offsets
22:13 Retargeting Char Poses To UEFN (Quick Intro)
25:25 IKRig & IKRetargeter (Recommended Method)

=== TRANSCRIÇÃO ===

all right guys so I'm going
to bring in a
character I'm going to use the same one
I used for that last
video I'm just going to use the cc4
character you'll see I just drug it in
but you can import it from inside of
here as
well for the for these characters I need
to use t0 as the reference pose that
stands for Time
Zero in other words frame
zero because that's just how they handle
that's how reill usion software handles
their characters they put their default
posst on on a
timeline so I'm going to import that and
you'll see it's going to create random
Assets in here because they're a bit
slow on updating their plugins and stuff
so I I have to manually import it like
here like this
unfortunately I'm just going to call
that mats I can delete
these I don't know why it's importing
those like that
but
yeah so you can do this uh two ways for
example I know this character has the SE
the Unreal Engine 4 uh skeleton so I
could just uh pull this over here I
could copy this here and then replace
that character with this one but I still
need to create an ik rig for it or I can
just handle this
myself so I'll probably just do that uh
instead but I'm going to reference that
other one just to make sure I don't miss
anything so I'm going to right click
click on this and go to create ik rig
right
here I'm just going to press this Auto
stuff here that works for the most
part now I've showed before how you can
like uh replace uh this full body ik
with
um yeah with uh
a a Lim I
solver so I'll go ahead and do that now
so what I'm going to do is I'm just
going to delete these
two uh right
here and then I'm going
to assign the right arm as the root of
this and then I'm going
to assign the hand as the ik goal
and assign
that and now you'll see that
um yeah so if you do stuff like this you
know you'll get deformation problems but
it'll keep uh it'll keep you more on
track
because your entire body won't be moving
with it but I don't know I mean that's
that's totally up to you if you use the
full body ik for the arms it can cause
your entire character to lean over like
this when you're trying to adjust the
hand positioning uh the way he holds
weapons and
honestly you if you have to adjust it
that much you should probably be making
custom poses for holding those weapons
you probably shouldn't be trying to
reuse the rifle one that I have in the
project already just modify those for
your uh for your new weapons that's what
I would
suggest and probably just go ahead and
uh
I'll just set that back
up so I'm just going to go ahead and
stick with this one that we have in here
already and you can reset this right
here to put it back where it
was yeah
so I'm going to create an ik ret
targeter by right clicking on it and
creating ik retargeter retargeter
actually I'm doing this wrong uh this
needs to be from the ufn to this
character so I'll just
uh say
ufn and then I'll select Steve
here I'm going to go into this if you
click running retarget it switches over
to edit retarget pose you can also press
this button and select it manually from
this dropdown
and I like to just reset these just to
make sure that they're not aligned the
reason why is because if you align these
then it can have an effect on posture
your character will tend to adopt the
ufn posture but in
actuality
um it's also not needed
because what we're going to do is we're
going to retarget these poses over to
this
character and we're going to fix them
for this character and then retarget
them back I probably won't do that in
this video I'll probably just show you
how to use some that I've already made
that should work with this so the ones I
made for the Unreal Engine 4 I'm hoping
will work with this we'll
see so I'm just going to come back out
of here and I like to make sure that
there's no static local offsets in here
I like to keep these zeroed out
personally um
now if there's any offsets on his hands
when he's trying to grab a hold of this
ledge you might offset
him but I would do that after you finish
completely finish setting up your
characters uh because if you want to use
my finger correcting method and you have
offsets on this it can create problems
but in actuality I'm taking another
approach with that now and instead of
using the same one to retarget to and
from uh I suggest that you create an ik
retargeter like this that that uh goes
from the ufn to your character and then
create another one that goes from your
character back to the ufn and the one
that goes back to the
ufn uh that one has to have this stuff
zeroed out and it also can't have the
pose aligned right here so you can't
come over here and say align all
bones uh if you do that and you retarget
to the ufn with one of these aligned
like that then it'll screw everything
up for that method uh that I'll be
showing you guys
later so if you do want to align these
poses you can uh but I wouldn't suggest
doing it
uh the only time you ever really need to
align those poses is if you're trying to
get um
say a dog to walk like a human you know
that might be a a time where you might
need that uh but you're not going to
like the results because the weights are
going to break down on the dog because
he wasn't designed to stand up and walk
like a
human so in reality there's really no
use no real strong use cases for that
there are some Edge case use cases for
actually aligning those poses but uh in
most
cases unless your character is in a t-
pose it's not really
needed if he is in a t pose I would
suggest reposing him into the a pose the
enal engine a
pose that's what I would
suggest but anyway moving on um I've
rambled on a little bit too long about
that I just wanted to kind of explain
how that works um to you
guys so I'm going to
create a character
blueprint but actually I'm just going to
duplicate one of
these I'm just going to
copy this one over it doesn't really
matter you could copy any of them over
really but um so this is a a Remnant I
forgot to destroy that that's not needed
anymore um attachments of items are
being handled by uh the slot manager and
pickup manager now you don't need to uh
in fact this held object thing right
here I forgot to destroy it by the time
you see this this held object je
skeleton will no longer be here it's
going to be gone this is the only thing
you need right here on the begin
play and this character mesh you can
override that from in here I'm going to
delete this so that I can show you
manually how to do this so when you
create your character you're going to go
into
override and you're going to scroll down
and look for get character
mesh and you're going to over ride that
and you're going to get your character's
skeleton and you're going to plug it in
right
here that's
it and that this is for the SL uh the
slot manager when the slot manager needs
to attach a slot this tells it to attach
it to this skeleton and not the U and
not the UE FN sorry
um so outside of that what we need to do
is we need to actually set the skeleton
and you'll see this is bugged out right
here so I'm actually going to delete
this that's
fine because it seems to be uh
corrupt and I'm just going to drag this
guy out here and I'll put him under
there and I'm going to zero this
out and then I'm going to go back into
that and I want to plug in
Steve and then on the event graph this
is the library targeted
character and I want to change his
animation blueprint to use the in fact
it's right here at the top Dao generic
retarget now right here you're not going
to see this the reason why that other
one got corrupted is because I was doing
this right here uh this act doing stuff
like this is dangerous actually uh to do
this from the construction script A lot
of people do it only because
it looks nice to them to see the
character actually moving in this
preview uh but just know that this
serves no purpose in a compiled game uh
being able to see him move in in your
preview it serves no purpose in your
compiled game because the construction
script does not get ran in a compiled
game it gets stripped out of here so if
you want to risk corrupt ing your
blueprints by running stuff like this on
on it then you can that's totally up to
you I'm going to go ahead and I'm G to
go ahead and do it uh just for the sake
of this video
uh but just know it's
dangerous and now you can see him he's
uh now he looks funny and that's because
right
now we're we don't actually have the
proper ik retargeter on them go under
defaults character specific we need to
give them a character tag and we need to
create some hand sockets with these
names or we need to change these names
uh and then we need to replace this with
our characters ik retargeter so this is
our characters I oh no this is our
character's ik retargeter right here so
I'm going to place that there and you'll
see it still looks weird and that's
because we haven't actually came in here
and uh fixed uh the feet I think
uh actually we haven't uh done a lot
so this needs to be normally the the
clavicles are one to
one these don't need
offsets I'm just going to make sure
these are zero out I don't want those
aligned and I'm going to align the
legs so I'm going to come over here
into yeah so this is the reason why it
looked funny I was in editing mode
that's why I didn't see
it so what we need to do is we need to
align this you can go into preview scene
and disable postprocessing to get rid of
that brightness that happens hopefully
one day in the next sometime over the
next hundred years maybe they'll fix
that bug but it's been in here for a
really long time
uh so yeah I'm just going to say
10 so if I say 10 here I'm going to have
to say netive 10 on this
one yeah because it's mirrored that's
the reason why if your character uh
isn't mirrored then it'll be the
same I don't think we need to lift it up
or
down let me come back over here
into it's hard to tell but I think it
needs to go
forward
more yeah so I want the ankles to be
around the same location so I'm going to
say -12 and
12 and I think that's actually fine I
don't think I need to lower
it and if your character has a wider
stance that's fine you don't need need
to bring his legs in it'll end up making
him look funny uh this character just
happened to have his legs right there in
the same spot I just had to bring this
feet
forward
yeah so that looks a bit better now so
if we come back over here into this guy
we can Rec compile him if we want you'll
see it looks a lot better
now so later on I'm going going to uh
create a idle layering pose right now I
don't have aay idle layering pose but
that would allow us to correct his
posture uh when he's in an unarmed State
and correct his fingers when he's in an
unarmed State as well um that's the
reason why you would want
that so probably in the next update I'll
have something like that now what we
need to do now is we need to create
these sockets
on this character so I'm going to open
up his
skeleton I'm going to create a socket on
his left hand and that'll be held object
L and then this
one will be C uh called held objector
R and now what I'm actually going to do
is I'm actually going
to open up the
ufn actually
let's let me do it this way so I'm going
to close all other tabs because I have
too many windows open now I'm going to
go under the ua4 folder and I'm going to
open up him and I'm going to open up his
skeleton mesh and I'm going to select to
these because he has the same skeleton
and I'm going to copy these sockets
right here and I'm going to open my
Steve guy
up and I'm just going
to paste and now you'll see they're uh
in similar uh
positions so if you need to you you can
offset them uh after the game starts
running you can offset them and I'll
show you how to do that so before we do
that actually let's go ahead and make a
gameplay tag
for I need to rename this as well
under the class
[Applause]
defaults I'm going to create another one
in
here you can put yours wherever you want
I'm just going to add it this one under
templates
I'm going to choose that ini I to add it
to and that's going to be cc4
Steve so if you go to your slot manager
you can actually change the name of
those sockets for this character
specifically and you can just type in a
new
name but I just copied the copied them
over from the u4 to the
Steve um well let me go into the
widgets and I need
to add a button for them I can just
duplicate this one and then right here
this guy here I'm going to
replace with
mine and if I run over this guy he'll
open up over here where I docked him
last and you'll
see so I'm going to want to adjust this
one you can also set this uh at a
preview mesh and Set uh one of those
dummy things as the preview and just do
it without having to do it during
runtime
so yeah looks fine to me I think that'll
work I don't have any animations in here
right now so yeah we'll get to that
eventually but if I try to if I try to
pick something up you'll see he can't
pick anything
up also sometimes his fingers look a
little funny uh and that's just because
uh uh the fingers don't
really uh retarget well you'll see
there's also an offset going up right
there uh so
that's
why inside of
the ik retargeter I'm just going to
close all those other tabs
again that's why inside of here a lot of
those characters have some static local
offsets
here and so these static local offsets
are local to the hands orientation and
not the not the mesh
orientation that's why you don't really
want to use static Offset you only
really ever want to use the local
offset so that's the wrong direction
this will be up and
down so I might say -4 for this one just
to see how that comes out and then over
here on this one I'm going to say
positive 4 since it's
mirrored it since it's mirrored it you
have to go the opposite
direction and now if I come over into
here and I try to mantle you'll see now
his hands are actually
touching so I hope that helps you guys
understand that I know I'm kind of like
taking this real slow um
but I want to make sure I cover
everything that's the reason why I'm
taking it
slow so this is the stuff you have to
watch out for when retargeting your
poses back to the uef in you don't want
stuff like that because that that offset
of four will be added to the pose after
it's retargeted back so in that case you
would actually just want to create a
separate one of these and this is uh
ufn to Steve you would create another
one and I'll I'll call it Steve to
ufn and I'll copy that by shift right
clicking and shift left clicking and
then I'll say
ufn and then right here I'm going to
zero these
out but then you'll see that his feet
are all weird and that's because we have
these offsets
here so we would need to do the same
thing for him for the legs for the legs
it's fine uh you want this to come over
properly uh for the
legs um I haven't seen any negative side
effects of like making sure that these
are aligned right here this part is
actually kind of needed so it looks like
the orientation of these legs are
different that's why going up and down
on this doesn't move it back and forth
it moves it uh instead of going back and
forth it's moving it up and down and
that's because the orientation of these
bones between these characters are
different so I'll do 12
and -12
and it looks I want to say I should
lower it a bit
so uh that's going left and right this
goes up and down these were the ones
inverted so that's probably going to be
one
yeah so that's how you would set one up
for for uh retargeting the poses back to
the ufn that's this is how you would set
it up you want to make sure that these
are not aligned you don't want you don't
want this you don't want that you want
it to not be aligned okay so I want to
get that through to you this would be
the one you would use to retarget the
poses
back
so anyway that covers uh uh the initial
part of the character
setup so in the next video I'm going to
be showing you guys how to actually uh
set up the weapons to work with the new
character all right I'll see you in the
next
video all right guys so I was actually
going to show you guys how to set up the
ik rig and ik retargeter from scratch
but I ran into some problems and I just
don't want to drag this out so I'm going
to have you guys just select the
character whose skeleton is similar to
yours and if there isn't one then you
can go and look up some videos online on
uh setting up custom ik Rigs and ik ret
targeters uh or you can just use the
auto method and if you have any problems
then go look up videos I did have some
problems so I'm just going to copy uh
these two over into my character
folder and then I'm going to open up
this one here and I'm just going to
replace this
with uh
Steve and I'm going to rename this to
Steve and I'm going to rename this to
Steve and I'm going to
replace this guy here with this
one something I'm I'm going to do though
is I'm going to
reset both of these so come over here
and press edit retarget pose and under
source and under Target go to this reset
button and reset all we don't actually
want to match uh their
poses that can help in some situations
but it's going to cause other problems
uh along the way so I'm going to suggest
you guys don't do
that yeah so anyway yeah so I'll I'll
continue this video and I'll I'll
include the rest of the video in here
but just know that I don't suggest
setting up a custom one I'm just going
to tell this I'm going to put this at
the end of the video where I showed
youall how to do this custom uh I'm
going to suggest you just do it this
way so it looks like we're not having
problems down here you want to make sure
that the feet are actually down on the
ground you might have to adjust these or
flip these in this case I
didn't so I'm going to now come over
here to my
oh and I'm going to assign it to my ik
retargeter oh come out of edit mode
where you won't see those offsets now
you now you can see them okay so I'm
going to have to invert
these there we go for my character uh it
was the same offsets I just had to
invert them
again remember guys if you do this you
may corrupt your blueprint if you do
stuff like that on the construction
script not everything is safe to do on
the construction script now I haven't
gone over this part of it with you guys
yet but you'll see in the next video uh
where I'll cover this part of
it yeah
all
right wait was I not
recording
[ __ ] oh wait

================================================================================
ARQUIVO: Unreal Engine 5_ GASP DAO v1.35 (Project Setup & Intro '1') (English_ASR)
================================================================================

=== DESCRIÇÃO ===

In this video I'll be showing the project setup process and introduce you to the basics of the project.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Project Documentation: https://unreal-devop.gitbook.io/gasp-dynamicadditiveoverlay

00:00 Intro
01:45 Copying Game Animation Sample Over
03:54 Project Settings & Gameplay Tags
05:51 Char Setup
07:28 Adding Pickup Items To Level
08:46 Handling Items
11:24 How Pickup Items Work
15:35 Char Tag And Item Char Data
18:15 Slot Manager

=== TRANSCRIÇÃO ===

all right so I am back with another
video this is going to be a series of
videos done back to back trying to cover
everything that you could possibly uh
need to know at least for now uh with in
regards to working with the
system so I'm just going to go ahead
with the
setup um inside of
here for the repo guys you would just
open with uh GitHub desktop if you don't
know how to clone uh then you should Pro
there's plenty of videos out there guys
on how to clone projects so I shouldn't
have to do a video specifically on that
but I do have videos on that for this
project that you can you can go and look
at the older ones they still apply to
this also in the documentation if you go
to the uh website uh for the document it
actually has
the cloning of the project outlined in
here and uh pretty good
detail so anyway I'm just going to open
up a terminal inside of this folder and
I'm just going to paste this I'm going
to clone this from my staging
Branch this is
uh the version 1.35 that I'm about to
release but I have not released
yet not officially that's why I have it
in the staging Branch but if you're on
the repo you may have already gotten a
chance to look at
it anyway this is what you get inside of
here the you the license and the files
in relation to my project now this is
the game animation simple project uh
that I picked up from
here I'm going to copy
this over into this
folder it's going to ask me if I want to
overwrite or overwrite some of
the gasp Dynamic additive overlay
project files never do that uh don't
overwrite anything in the project that
you're trying to set up
so I'm going to say let me decide so
that you can see what
files uh it's asking you if you want to
overwrite these are the inii files I
included those because of uh really I
only needed one of them but I want to
included all of
them mostly the gameplay tags is the
reason why uh
but yeah if we if you scroll down you'll
see that I am now also including the
skeletons of the echo twin blast
ue4 uh the ue5 um
mannequin and the ufn in the metahuman
the reason why is because it'll reduce
the amount of work yall have to do and
in regards to setting this up for the
repo version so I'm just going to say
skip these files I do not want to
replace my files the dynamic additive
overlay files with the original game
animation project files if I do that
there will be no gameplay tags set up in
the project and there there will be no
sockets or virtual bones set up on the
skeletons so I'm going to say skip these
files and I'm just going to go ahead and
open this up the setup is pretty simple
but I just want to explain to you don't
overwrite anything when you're copying
those files over it will ask you if you
want to overwrite say skip these files
do not overwrite
them once you're in here I'll go ahead
and take you to the project settings and
let you know what it is that I did
change in the project settings which was
why I included the I and I the gameplay
tags I just have three gameplay tag
tables set up on here these are for
character tags right here and what these
are responsible for is whenever we're qu
quering the items to fetch the character
data character specific data for those
items uh
what it has to do those by character tag
otherwise it doesn't know what
character
you're playing as and it doesn't know
what settings need to be
loaded so these other tags are in
relation to the animation system and the
IT the weapons themselves and those are
still important guys the uh State pistol
pistol M9 rifle rifle uh rifle 4 A1
items items flashlight those are still
relevant so you don't have to put them
in a table like I did but my system
requires those because we have to be
able to identify the items uh otherwise
we don't have any way of identifying
them and we don't know what items are
being held
so yeah so the slot system in in here it
requires us to know what items are which
or else it doesn't know which items are
allowed to be held in pistol holsters
you could if if we didn't know then we
we might have a grenade in a pistol
holder uh or we might have a rifle and a
pistol holster um that's why we need a
way to identify and I chose to use
gameplay tags so uh that's just personal
preference if you don't like that feel
free to change
it anyway outside of that the only setup
really is the game animation widget and
the world settings over here
uh both are pretty uh simple to do just
go to your Dao folder character data
Char data and we're going to replace
this ufn with
mine or you can leave that one like it
is it's up to you and then under
characters Echo I'm just going to
replace
Echo and you can also just press this
browse button to get that open faster
but yeah I'm just replacing their
references with
mine and mine are all tagged with
Dao because I want you to be able to
distinguish them from The
Originals the generic uh blueprint is
also called uh Dao
generic um
so yeah so right off the bat
you won't have the proper character
because we have not changed out the
default polling class under the game
mode settings so I still need to go to
the CH data select him and press that
back button you can hover over it and it
should say Dao on the
end but we need to drop some items into
the level so I'm going to go under
blueprints held
objects and I'm just going to drop out
this BP gun
M9 and I'm going to hold down alt to
duplicate
it and under items flashlight BP items
flashlight
and now when I you'll see those slots
spawn on the character right now they
just spawn on them I don't have those as
pickups yet but maybe in the next
version I'll have those as uh items on
the floor that you can pick up
yeah so I'm pressing q and E to cycle
through those guys uh I probably should
have mentioned that but
yeah I can toggle with my uh uh with one
of the buttons on the side of my mouse I
can toggle the aim or you can just hold
down the right Mouse
button yeah so that's how you can aim if
you just fire it'll automatically aim
and then stop
aiming if you mantle he'll automatically
put his uh weapons away and then he'll
pull them back
out so if I come over here and I pick up
this rifle
and I try to mle he'll drop the rifle
but he won't pull anything back out when
he gets to the top and that's because uh
the last thing that he had in his hands
was
dropped so if you want that to be to
where he he'll still pull out the
previous things that he had in his hand
before that you can it's not that
difficult but I chose not to uh just
because
so anyway you can uh pull uh weapons out
you can press h to holster
them uh and you can press L to drop
them and you can press F to pick them up
you have to be uh close to them to pick
them
up so if you try to pick something up
and there's nowhere to holster it he'll
just automat automatically drop it so
you see he dropped that
flashlight and now I dropped that so
that's the basic rundown on the
mechanics of that um C is Crouch you
know that's you should know that by now
because that's a gasp thing that's not
uh something I set up and then shift is
to Sprint
yeah so I tried to make this as dynamic
as I could I think that left arm looks a
little weird I might look into that and
maybe tweak those settings just a little
bit uh but I'm not going to do that
right
now so if you go over to the
items so this is just like a setup an
intro uh
to the systems that's what this video is
going to
be so if I come in here you'll see this
event graph right here on there there's
nothing in here but if you look under
the class
defaults um I'm probably going to hide
these uh guys so that y'all can't see
them uh because it'll confuse you I know
uh just like this stuff here probably
will confuse you I don't think that's
even being used anymore I don't think
that's even hooked up but
the action ID and the item info these
are the uh main things that you have to
worry about is the item data the fire
action tag the reload tag and the muzzle
socket name so if you add a an item
static measure skeletal mesh you need to
add a socket called muzzle on it or you
need to change the socket name for this
weapon it's it's up to you but if I were
you I would just use this conven
muzzle name for all of them you can
ignore this this is completely
irrelevant it's only used internally so
is this this information is
automatically fetched and it's fetched
from this get item Char data uh function
which is actually a child um it's an
inherited function that we're overriding
inside of here so the parent actually
doesn't have anything set up for this
function it's meant to be overridden by
the children uh so you can if you
overwrite if you're setting up a
new uh weapon I would just suggest
duplicating one of these so that you
don't have to set up the Chooser and
stuff like this that I already have set
up for you in
here but you're going to want to replace
this
Chooser so if we come over here you'll
see this has a Chooser right here and
that's what we're assigning right here
and if you go inside of this Chooser
you'll see it has this character tag and
that's what we're uh that's what we're
plugging in right here so I'm getting uh
the character
tag from the character and I'm passing
it in here to this
Chooser so let's see
if I go to the master I
believe that might be where I have it
set up I don't even remember where I set
that up at let's
see items
data yeah so that's going to be that's
actually an interface function
okay yeah so this is actually called on
the character class when they need to
fetch this item character data from this
and whenever you call that from the
character the character passes in its
character tag so let me just go ahead
and go over to the character and I'll
show
you so it may be under item handling
let's
see get item Char data
yeah so you'll see over here on this on
wrap I'm
uh using these macros these are just uh
setting the values of uh they're just
loading these variables with references
to the H or the items in the hens and
then right here I'm getting the I'm
passing in the character tag and this
should be set on every character so you
make a child class of this character and
then your in your in your class
defaults under defaults right here
characters specific you'll see Char tag
you're going to want to change this to
your character tag so you'll have to
make a character tag uh for your
character uh you can uh go to manage
gameplay tags from right
here and you
can let's say I wanted to add a
character tag right under main okay
so I can right click and I can add
subtag right here and then I can say
somech and then uh I could say I want to
add this directly to the default
gameplay tags. inii now that's in the
inii file these other tags though are
actually in a table so um
yeah so now you have some Char so you
could potentially change this over to
some Char but watch what what happens
whenever I go to uh pick up these
items your character has no data
assigned for this item or you have not
set your character tag okay so I'm I'm
printing those warnings uh to kind of
help you guys out to help you identify
hey I missed something here oh it's my
character tag that's not the right
character tag or if it is the right
character tag then you need to go in
here and you need to say okay is my
character in here no it's not uh this it
only has the Dao tags main.
ufn so I need to add one over here for
that
character okay and now I need uh to set
up a a primary data asset that stores
that information for my
character uh
so I go in that in depth in the
documentation but I'll uh I'll do a
video on that as well uh I'm going to do
a video where we bring in a
weapon uh into this project actually so
I'm doing everything all this entire
video series I'm doing them back to
back and they're all going to be taking
place in this one project this is a
fresh
project but yeah so I'm just going to
delete that I don't need
it and I'm just going to go ahead and
save all that I probably screwed
something up somewhere I'm sure I over
here messing with stuff looks like I
changed that back though so I think I
should be good I should be able to pick
up the weapons
now
yeah all right so the slot
system the slot manager is right here
now I did have the pickup manager uh
stuff inside of this uh blueprint and
there were functions inside of here but
I was like okay well you know what some
people are going to be like I want to
remove that I don't want to use that so
I decided
to place it in an actor component but
some of the functionality still has to
take place right here on the character
because it has to communicate with the
slot manager and I didn't want to tie
those two together I didn't want to do a
cast to the slot manager or anything
like that I actually could have looked
for I might refactor that later because
I actually
could search for the slot manager
component uh on the owner I could have
gotten it gotten
uh yeah but I didn't actually want to
tie these two together so that they
required each other anyway I don't know
I might refactor that later but the
point is is that we have the slot
manager here and if you go over here
some of this stuff needs to be hidden it
needs to be set to private so it doesn't
show up in here I'll do that later um
the only only thing that you need to
worry about is item slots and this
dictates the name of the socket that
these slots are going to be attached to
so basically what I'm doing is I'm
attaching I'm attaching slot actors to
slots uh to sockets on the character and
then I'm attaching the items to those
slots you
see so the preferred reaching hand lets
us know which hand uh we prefer to reach
for that slot with so if it's on the
left side you're probably going to want
the left hand to reach for it but in
some cases you might actually want the
right hand to reach for a slot on the
left side so this allows you to to
select which uh side you prefer and you
could probably even set it up to where
you could use either hand uh but this is
just an enum and I use this enum
everywhere uh rather than making like
three different
enumerators that are all related to
hands and specialize in different
scenarios I decided to just use the same
one all across the board um allowed slot
class uh this lets us know which slot
actors are allowed to be attached to
this
slot so maybe we don't want a rifle to
be a rifle holster or um an arrow quiver
to be attached to the hip right here
then we maybe we only want the pistol
you
see but if you want multiple different
ones you would create a child of this
and you would still have this as the
allowed slot class because any child of
this slot hit pistol is going to be a
slot hit pistol class which allows
anything that you create that's a child
of this to be attached to this slot okay
so that's the reason why I chose to do
it that
way the slot actors themselves
um they have an acceptable item tag and
this allow this is a gameplay tag
container and this uh allows us to tell
it which items are allowed to be
attached to the slots so I could say I
want pistols and rifles to be to be uh
holstered in the slot I don't but you
could you could tell it that and it
would let a rifle be attached to it
so I don't have like real sophisticated
uh logic behind these slots right now to
determine uh or to handle multiple
different like types of items being
attached uh to them uh but for the most
part
if you have a pistol holster and you
want to holster another item in it then
you might draw one pis you might draw
your M9 out drop it and then pick up the
desert eagle and then holster it you see
what I'm saying so it should work for
most
cases for these I'm actually just uh
setting up I'm calling the setup mesh
function and I'm just passing it a dummy
act a dummy actor mesh I was trying to
avoid creating item data assets for them
but you can do that as well and if you
do that then it'll still work just like
this because these
are um the slot Master is a child of the
held objects master and
so so are the guns so the held object
guns is a child of the held objects
Master as well
okay so that covers the slot manager
stuff well not completely let me go
ahead and show you this so if we come
over here to the begin
play you'll see we have this slot
manager stuff
here and I'm binding to some events this
allows the slot manager to have uh the
character drop items or place items in
their hand
right here at the end though you'll see
I'm just calling this macro I made it
set it's a setup slot actor and I'm just
spawning the that
class and then I'm uh setting us as it's
owner I'm disabling
collision and I'm assigning uh this to a
slot this actor I just spawned I'm
assigning it to the slot
manager which handles the rest for you
it'll attach it to the socket and if
there's something already there it'll
drop whatever is attached to that slot
it it will drop that slot actor on the
ground
so yeah that prevents you from attaching
two pistol holsters to your right hip
I think that pretty much covers it for
this uh initial
introductory uh of course I'm not really
going to go into this uh pickup manager
stuff I'm not going to go into all that
deep logic there's too much to cover
guys um I'm sorry but I have left a lot
of uh uh notes around I've done a lot to
try to clean things up some of the logic
is going to be
self-explanatory uh this is just for
this was just something I set up for me
so I could pause things while um
testing yes so I did a lot of clean up
here I hope that helps you guys uh
become more familiar with the system and
feel less overwhelmed by all the logic
that I've had to
add but all right uh so in the next
video I'm going to bring in a custom
character and then we're going to bring
in uh yeah so I'm going to bring in a
custom character I'm going to show you
how to set them up
uh with this stuff in here and then
we're going to add a
custom
item to the
game a custom gun
and we might um even set up a custom
linked anom layer for it so I'll see you
in the next video

================================================================================
ARQUIVO: Unreal Engine 5_ GASP DAO v1.3x (Custom Character Setup) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

In this video I'll be showing the process of setting up and Zeroing in the Anatomy Offsets for a Character Creator Char.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

00:00:00 Intro
00:02:30 Child Class Setup
00:11:26 IK Retargeter Setup
00:22:14 In-Game Test
00:25:30 Live Retarget Setting Chooser Setup
00:34:35 Live Retarget Setting Setup Prep
00:37:40 100% Accurate Finger Retargeting Fix Overview
00:56:21 Adjusting Held Object Offset
00:56:44 Adjusting Anatomy Based Hand/Aiming Offsets
00:59:50 Inaccurate Method For Finger Retargeting Fix
01:03:00 Matching Poses Pro vs Con
01:06:00 Adjusting Anatomy Based Hand/Aiming Offsets Continued
01:11:26 Adjusting the Overlay Layering Settings

=== TRANSCRIÇÃO ===

all right guys uh welcome back to
another video so in this video I'm going
to be showing youall how to set up your
own custom character for the
system so getting started uh first off
right now the Character Creator uh
plugin Auto setup plugin it's they
haven't updated it yet for
5.5 so I'm just going to import this
character uh normally like you normally
would for character creator characters
they actually set the reference pose at
t0 so we actually need to if you're
using character creator characters you
need to check
that now I exported mine a little
differently than what you normally would
so I'm not sure if this will actually
work
uh looks like I might have to reexport
it yeah
okay so I was trying something different
there and it didn't work out like I
thought it would so you can skip this
part of the video if you want I'm just
going to reexport this
guy I just tried doing current pose and
I
disabled the embed
motion and that didn't work out like I
thought it
would I probably actually could have
just exported re-exported this and then
just reimported it uh from Source but oh
well and now use two Zer or ref pose
should work
yeah now he's in the a pose that's what
we want and I'm going to I'm just going
to create another folder here I'm just
going to call it
maths and then right here I'm just going
to delete I don't know I created these
uh animation sequences that's so weird
it always does weird stuff like that for
no apparent
reason and then I'm just going to drag
these into this folder if you have the
Auto setup uh plugin by the time you
watch this video then you won't have to
do that what I just did uh and your
eyelashes will look correct mine don't
that's because I just manually imported
it without the plugin because they
haven't updated the plugin yet so anyway
so the first thing we're going to do
actually is we're going this is a ua4
skeleton so I'm just going to drag this
guy over here uh this character
blueprint it's a child
class of my Dao class which is a child
class of the original sandbox character
logic and I have not changed anything on
this and the reason why is because if we
want to update this later I can just
replace this and I don't have to worry
about making any changes in my child so
it'll make up upgrading this to later
versions
easier and it also keeps things cleaner
and separate since the sandbox character
doesn't really need uh all this logic in
it
so yeah logic should be uh shared where
it can be if you don't understand how
objectoriented programming uh works then
you should probably look into that
because basically 99% of all software in
the world revolves around object
oriented programming
techniques and so it shouldn't be
dismissed as something that's not
important it's very important uh I've
had people I've had people try to argue
with me over that I don't know why
somebody would argue with me over that
but it's just a fact of life uh you
should really use object-oriented
programming techniques there's a really
good reason behind
it so anyway that's my little rant so
over here in this character blueprint
we're going to copy this socket name and
go over to the skeleton we're going to
find his right hand hand R and we're
going to add a socket to it and rename
that to held objector
R so I'm not going to position it uh I'm
actually going to rely on my data asset
to position it which will allow me to
position it during
runtime uh while the game is running for
this specific
character and you can do that for each
weapon without needing separate sockets
that's the reason why I'm using this
method it allows me uh to uh just
displace this held object in uh relation
to the
hand and it achieves the same purpose as
having a
socket uh having multiple sockets so it
saves uh performance by doing it that
way so on the skeletal mesh this will be
the live targeted uh character and I
don't know why that's empty but it is
we're going to replace that reference
with the skeletal mesh in case you
didn't know when you import skeletal
meshes the skeletal mesh is the only
thing you're actually importing these
other two assets are created by Unreal
Engine when you import them these do not
exist separate from this uh skeletal
mesh outside of this it's just just
something that unreal uh requires and so
it creates some for
you so I'm going to close that for now
and I'm going to assign that skeletal
mesh to the skeletal mesh asset it
should automatically fill in your uh
materials this is actually a lot of
materials you want to try to keep these
this number as low as possible this is
actually kind of insane they have
materials for their upper teeth lower
teeth left eye right eye uh cornea and
then the actual eye yeah it's just like
that should have been like two you
should have had two materials there
instead you have six
um and this shouldn't have been so crazy
either but
anyway yeah so if you get
this then you may need to
actually clear this and set it again
okay this is some kind of weird bug guys
I don't know why it's doing
this let me clear
this yeah that's a bug uh that's
definitely a bug I've seen this before
but it's the first time I've seen it in
this setting uh this is new this is a
new bug
so let me try doing
this okay yeah that's that's some kind
of serialization bug I think
um so if it does that to you this is
what I would uh recommend delete
that and then create a new
one and then parent that under here and
then zero out these transforms this will
automatically be set
up now I should rename my generic
retargeter uh I'll do that in the future
it should be the second one down you can
browse to it it should be under the Dao
folder uh Char data and live R targeted
I'm actually going to rename that so by
the time you watch this video uh some of
you uh will notice that this is now
called
abore d oore generic
retarget um that way it'll be easily
distinguished from the original
untouched one I I've customized this one
to fit my needs I have a blueprint
interface in here that allows me to uh
change the data on it during runtime
which you guys will find very
helpful this is the live retargeted mesh
reference I'm setting that uh for
the so that the uh base character
blueprint can uh manipulate it during
runtime so it needs to know which one of
these is going to be the live R targeted
mesh that's going to be this guy right
here because this is a live retargeting
uh animation
blueprint so under here you want to make
sure that the the parent that you're
attaching you're reattaching this to is
the one that
you're uh trying to live R
Target and just so you guys know live
retargeting is not expensive I keep
telling people this I've tested it I
brought 21 characters in and with my
setup I was getting uh like 90 95 frames
per second with 21 characters and that's
it's actually pretty good uh because I
didn't actually apply any visual uh or
any kind of like performance
optimizations as far as loding the
animation system or uh anything from
like inside of here uh none of that was
optimized and I still getting 95 frames
per second
so live retargeting is actually pretty
light it doesn't cost that much
and you may think it's a bad ideal now
but when you start trying to scale up
your game with multiple different
characters if all your characters don't
have the same body
uh the same body
anatomy if you want some of them to be
shorter some of them to be taller you're
absolutely going to have to use liary
targeting there's no way around it
either that or you're going to have to
retarget all your animations to every
single one of your characters which will
end up being a lot more expensive uh so
memory wise at least so anyway it's up
to you you can do that but it's going to
be more uh heavy on
memory and uh memory management
shouldn't be taken
lightly so anyway so we got our
character in here now we have them uh
the held object being attached now we
need to actually create an ik retargeter
for I know I've kind of been going off a
little tangent here but right now he's
using the u4 one actually we could
probably use the U the
u41 uh we need his ik rig which is going
to be in the original assets folder
under uh characters U for Manny and rigs
it's right here I have not touched that
in my project which is why it's not
under uh my project sue4 mannequin
folder
and I'm just going to copy
that and now inside of here I can
actually replace the skeletal mesh with
Steve's skeletal
mesh and since they use the same
skeleton everything should actually be
good one thing I should warn you against
though is actually having the arms use
the full body ik I don't like that and
the reason why is because if you move
this it'll drag his entire body with it
and in some of these poses whenever
you're doing whenever you're readjusting
and centering the aim for your weapons
and repositioning him his weapon uh so
that it sits on his shoulder properly in
some cases when you start doing that
it'll actually cause him to lean over
like this even if he's aiming even if
his arm is going out like this and you
have to move his hand to the side it'll
drag his his entire body over like this
and he'll be leaning sideways so that's
the reason why I suggest you don't use
that and
instead we use two
lambi now this will uh create two more
solvers so it's up to you if if that
ends up not being a problem for you just
go full body ik but for me I've noticed
that in a lot of cases it is a problem
so I would actually uh suggest doing it
this way so you're going to create yours
you're going to select uh the LM I
you're going to right click on the upper
arm L not the clavicle which is the
shoulder bone uh you want to start on
the upper arm and you want to set that
to root bone on selected solver which is
the LM I and then on the hand you're
going to right click and set a new ik
goal and assign
it and now you'll see that's lit up
and now you're going to do the same
thing on this other one select your
upper armr select your Lim I right click
select root uh uh set root bone on
selected solver select the hand R right
click on it and set uh new ik
go and
now and now you'll see that his body
doesn't get drug along with
it so
from my own testing this gives this
gives much better results uh whenever
you're having to adjust the way that he
holds the gun uh during live retargeting
uh using my setup inside of this project
which I'll cover
[Music]
later
so now what I'll do is I'll just copy
this over as
well and I'll swap this ik rig out with
the one that we just set
up I'm going to go into running
retarget and I'm going to reset all
yeah and then I'm just going to come out
of
it and
uh what that does is it'll maintain his
posture if you don't uh if you don't
align uh his base pose with the other
one
then it will respect his
Anatomy but if you want it to conform
and look more like the poses that the
ufn has it it it will be destructive as
far as his uh posture but it'll make it
more accurate and you'll do you'll just
go to align auto align and align
selected in
children now when you do that it aligns
it to some degree but it's not 100%
accurate guys uh it does get things
wrong so just know that whenever you
align it that doesn't mean that now
they're perfectly aligned they are not
perfectly aligned uh I I've looked into
that deeply and that is not the case so
you'll notice that the feet are doing
some crazy stuff that's fine we can come
down here and what we're going to do is
I'm just going to uh reset this that was
set up for the uh ue4 this one is going
to need probably some different uh
offsets this one
because these these legs have different
uh pole uh joint orientations uh you'll
need to go in the opposite direction for
each so going positive for the right leg
on this character actually makes this
foot go down uh and we can go to the
asset settings and we can actually say
150 and that puts them over
here and we can actually go to the right
or let's say back I don't know why right
is is front and back is right I don't
know why that's the case but it is
uh but yeah so now we'll just reselected
that and you'll see that it's glowing
real bad go to the global settings let's
see it's in here somewhere oh preview
settings go under the preview settings
and
postprocess and just disable that and
it'll quit glowing that's been a a bug
for a long time I wish it would fix it
um it's really
annoying and I wish they had a an actual
orthographic view because when you zoom
in it Clips out the other character
which makes this hard I was actually
just trying to align his feet let's go
to the front yeah there we go okay that
works so now I just want to actually
reselect the
leg and lower that I don't want to lower
it so much that his leg is locked
because the other leg is not locked I
think 3.5 is about right for this
character I'll copy that over and I'll
say
-3.5 and then looks about
right like I said those are inverted
because uh
the bone orientation is inverted between
sides and the reason why is because
whenever you're animating characters
inside of 3D
software um if the if if the bones
aren't inverted from between one side
and the other then you can't move this
arm arm and have this arm move down just
like you're moving this arm and so it
allows them to move limbs in unison like
together uh more easily so that they can
pose both sides perfectly uh and
accurately
um without having to make the same
modification for both arms uh one after
the
other so anyway that's just a quick uh
little insight there as to what why
that's the
case so now that we have our ik
retargeter we're going to go inside of
here and I'm actually going to rename
these Assets Now I'm I'm going to call
this uh
cc4 Steve
[Music]
there we
go now inside of this we need to go into
the class defaults and I'm going to go
to this gear icon and collapse all and
then I'm going to expand the Dao and the
livey
targeted and right here you'll see that
it's still uh referencing the ua4 one we
want it to reference
ARS this is the ik retargeter and I'm
just going to press back with that
selected in the content folder and now
we've assigned the ik r targeter and so
whenever we're animating it'll use this
to translate the animation from this
character to this
one it's not heavy you'll see that this
set ik retargeter it needs a skeletal
mesh reference we need to make
sure that uh on begin play We're
attaching the held object to Steve on
that side ET and that he has that socket
and we need to make sure that we're
setting the ik retargeter uh to that
mesh as
well and that's
for uh logic in the base
[Music]
character yeah I might actually create a
a function a setup function where you
can just pass in uh the reference to
your character and it'll just do both of
these for you I use held object R uh for
mine but you could really name it
whatever you
want so now that we've got that uh
character we should be able
to assign that character to as the
default Pawn class under the world
settings if you don't have that window
go into window and go under World
settings and if you check this it'll
open it up yours will probably be like
this it'll probably be uh docked I mean
undocked but I normally dock mine just
for the sake of having more real
estate and now when I play this you'll
see he he's not actually holding it uh
properly but he's animating and you'll
see his fingers are kind of funky I'll
show you how to fix that as well and now
we can uh uh jump up and climb on stuff
so
yeah um you'll notice that whenever he
falls uh he he kind of jolts quite uh uh
funny uh I that's because we haven't
actually set the we haven't finished
setting things up yet uh so it's
actually applying layering settings uh
in properly inside of here and that
should be fixed
uh actually I just set this up uh from a
a fresh uh clone let me make sure that
isn't actually uh a weird uh
problem in
here let me make sure that that's just
that character
it looks fine on
that okay it's just it's probably just
the layering
settings I'll show you how to adjust
those layering settings so that it's
stiffer whenever he
falls for for Steve it looks a little
bit too dramatic but he is a cartoon
character so maybe maybe that kind of
goes with
that but yeah I'll show you how to fix
the fingers here uh after a
while I just I thought I seen some funny
leg motion oh no that's just part of the
animation okay
um yep so now what we need to do is we
need to actually fix uh the way that
he's holding and aiming these weapons uh
and I'll show you how to do that right
now you'll see that it's still
referencing the ue4 uh references if you
look right here uh and those are data
assets that controls how that works
which I'll go
over uh now so if we come into our
and yeah we can close that
stuff if we come in here and go under
class
uh actually if we come into here it used
to be under class default it used to be
under a uh a map right here but I moved
that over into a Chooser and so we
actually need to make our uh we actually
need to copy this
Chooser so we're actually going to copy
this entire folder right
here okay so I was supposed to delete
these and I forgot to um
so ignore
these we're going to copy this entire
folder over here copy don't move just
copy and I'm going to rename this
to
cc4 unor
Steve and I want to rename all these
assets
just so that I can identify the
character that these that this is for
you're going to need to adjust these
settings for each
character and the reason why is because
of anatomy guys uh this is the
best approach I've found that doesn't
require you to actually modify the
animations uh it allows you to align
things a lot lot easier even if you do
modify the animations aligning the the
gun so that it's pointing in the right
direction is still difficult uh I've
managed to do it with the ufn character
but recreating that is actually
difficult uh
so it's easier if you can try to avoid
that where
[Music]
possible
so y so we have renamed all these assets
these this is the
Chooser this right here is just a an
asset that stores all these settings
right here and these are the individual
settings so I did that so that we won't
have to have two different choosers one
for liy targeting data and another for
the held object uh offset that's the
reason why I created another uh data
asset to store those and so if you open
these up you'll see that there
uh these are looked up via a map where
the key is
actually a gameplay
tag and then we have our held object uh
definition right
here or held yeah whatever you want to
call it held object data and that just
stores the offset for the
weapon so this was this is going to very
these settings are going to vary from
character to
character but I only have two stances I
have an Aiming stance and a ready stance
and you can add a uh a second or a third
stance I mean uh but you'll it'll it'll
require you to uh create another data
asset inside of here and give it that
stance so I actually have third stance
in here already just in case uh but I'm
not using
it so now we're going to set up this
right here the pistols will go under uh
the
pistols and the rifles will go will go
under the rifles if you have SMGs you
can uh create uh another
nested
Chooser and and you can say new nested
Chooser and you can call it
SMG or SM uh GS or however you want to
do it or you can just say sub machine
guns if you link it to one that's
already that already exists when you go
inside of it it'll still have that stuff
so you need to create a new
one I'll just go ahead and create one
inside of here you won't see nothing
you'll add an
asset and you'll add a gameplay
tag and then you'll bind it to the GT
container and then you'll
select whatever uh weapon under there so
you would have a a submachine gun uh
under State you would have a submachine
gun and then you would have your
submachine guns under that and that
keeps it
organized and then you would you would
select your uh data asset it has to be a
PDA held object settings uh
asset so these are all based off of off
of that you can copy these you can
duplicate these and repurpose them or
you can go under miscellaneous go to
data asset and type in
PDA held object
settings and
then actually this should be called da
you
know your character
name and
then SMG or whatever your weapon is is
named and then you would create these
assets for it these are already default
values so that you don't have to uh
create new maps and select your key uh
gameplay tags and all that this allows
you to just like assign these and be
done with
it so that's how that would work after
you created that you can assign it right
here by pressing this back button with
it selected inside of
here so that's just an
example and if you wanted to delete that
category cuz you maybe you made it by
mistake or you want to rename it you can
do so from over
here now I'm going to go into here and
I'm going to replace these references
with the ones that I duplicated and
renamed for uh our
purpose so I actually need to replace
these references inside of this asset
with
these aiming right here
aim
ready goes under
ready and then under
here I need to do the same thing for
this one
and now inside of here I need to
reference those
[Music]
now we're going to replace that Chooser
inside of uh here with our
Chooser and now it's referencing this
Chooser so the values that will be
returned right here from this
Chooser will be the ones that we just
set the references to
now we can come in
here and if if you notice whenever he
tries to aim it just un it stops
aiming uh oops uh so I'll show you how
to
actually work around that this is what I
uh did so just go back to the uh main
character
blueprint and uh and you can do that by
going to the parent of this one and then
going to the parent of that one and
it'll bring you right over here to the
event graph and if you scroll down
towards the bottom you'll see near the
bottom the second to last one is the
aim and what we're going to do is we're
just going to do off of start we're
going to do a flip
flop and we'll plug both of those in and
then is a will be the want to aim and
I'm going to disconnect the triggered
the trigger spams by the way it'll it as
long as you're holding the button down
it'll continue like uh firing depending
on how you have set up your input
but so now you'll see that I don't have
to hold this down now um also right now
I have it randomly selecting one um I'll
show you where that's at actually if you
go to the CBP sendbox character
Dao that's under
the Dao
folder under the da Dao folder under the
character data it's right here and so is
the animation
blueprint you can actually disconnect to
this or just like only connect it to one
so let's say right now I only want to do
I only want to test the rifle out so
I'll do
this and now it'll always pull the rifle
out and now what we need to do is we
need to adjust these assets so we can go
into
Steve um I'll just browse to his asset
and I'll go inside of here and open up
this Chooser and I'll go into rifles and
I'll open up this data asset this helps
me browse to everything and get to
everything real quick and
fast so does this
so we're going to open up the H
asset and I'm just going to dock this
next to it I'm going to remove
that I'm just going to zero this
completely
out and I'm going to rotate that 90°
[Music]
actually before we uh do this let me go
ahead
and show you guys how you can uh fix the
finger
problem
well I'm
thinking yeah let's just go ahead and do
that
okay
so if you go
under I'm just going to minimi collapse
this real quick so under the Dao under
the Char data you have your linked enom
layers so the way this works is we have
a master linked anom layer for
pistols and then for different
variations of that pistol if you need
different animations you can duplicate
this
child and you can go under class
defaults and you can just replace those
poses for this right here this right
here is the layering settings so this uh
controls how the pose is layered during
different
states uh such as Idle ready moving
ready idle aiming and moving naming so
different states we want different
settings and you can come through here
and look I've done videos on this in the
past and I'll likely do more videos on
this uh going forward right now the legs
are disconnected so if you make changes
to this it'll have no effect these right
here the settings that you see in here
by default for each of these states
those are the settings that I recommend
I'm not going to go into the layering
data stuff right
now I may cover that in another
video so what we want to do is we want
to duplicate this child class of that
linked anim layer we're actually going
to do it with the rifle first
so I'm going to go under characters and
I'm going to create a folder under here
and I'm going to call it linked
layers and I'm just going to copy that
one
over I'm not going to move it I'm just
going to copy
it I'm going to copy that one
over and then I'll just
uh create uh an M9
folder and an M4 A1
folder and I'll actually just rename
this
to be after my character so I know this
is for this character
[Music]
if all your characters are
rigged uh like for
example all these characters character
cre characters are rigged the same way
and all the metahumans uh are rigged the
same way so you would only have to do
this once uh and then you could use the
live retargeting to correct uh Anatomy
offsets uh between the characters so for
correcting the fingers you would only
need to do this once uh so just let that
be
known now something that I recommend
when you're moving stuff around like
this
is go up to the content folder right
click and update
redirectors it may pop up with something
like this just say delete unreferenced
uh
redirectors if you don't do that uh it
can cause problems later on down the
road I'm not going to go into details
about that
uh so
anyway so now what we're going to do
is I'm going to open up the M4
A1 I'm just going to close all this
other stuff for now the stuff that I
don't need or won't be making changes
on now under the uh class defaults
you'll see some poses browse to those
poses rightclick go to asset
actions and what we're going to do or
not asset actions sorry uh go to
retarget animations so hopefully they
fix this part of it here pretty soon I
really don't like uh the way that
they've set this up because if you right
click and you say I want to retarget
this one it won't it won't automatically
select that in your list over here U so
you'll still have to search for it which
is annoying
um especially if you're trying to
retarget multiple ones and only specific
ones then it becomes even more
uh uh annoying I'm going to create a new
folder under here and I'm going to call
this uh anim
fixes and I'll say
M4
A1 poses and you only need to do this
for the poses it's not going to be
difficult guys uh
if you have a custom character um you
may have to do this externally somewhere
else like character inside of character
creator or something like that but I
would
suggest because if you have character
creator uh the Character Creator
actually has a control rig
um
so this will be easy with character
grader characters because they already
have a control rig and it'll be easy
for uh metahumans too because they
already have a control rig uh but with
the cc41 you have to bring that control
rig into this project uh and right now I
can't do that so what I
may try to do is I may try to create a
modular uh control rig for it and
hopefully they fixed the bug with the
backwards solver I guess we'll see I'm
going to say they probably haven't so
what we may do is we may just fix the
fingers using the FK control rig which
any character can use so I'll probably
just go ahead and show you how to do
this with the FK control
rig if the modular control rig is still
broken we'll see so the video may cut
out whenever I go to do
that so anyway we're going to we're
going to I'm going to browse back to
this this and I'm going to press f2 and
then copy the name of this
pose and come back in
here and actually I forgot something
sorry guys so go back to your character
and you need to do this using the ik
retargeter that you're using in the game
for this
character so we're going to uncheck
autogenerate retargeter and we're going
to uh pass that in and it should
automatically select the target uh
skeleton for it we're going to search
for this and we're going to export the
animation and I'm going to place it in
that folder I
created
um yeah and then I need
to do
these other ones
too so that's that's only three poses I
have to fix for the
rifle and you'll see that the poses
looking exactly like they did for him uh
whenever we were running running it uh
the liary targeter during runtime this
is how his fingers uh
were uh and that's the reason why I said
use the ik retargeter we created for
it that way it comes out exactly like it
did before and we and we use that same
one when we retarget it back to the
other
character so all right so the video May
uh cut out right here so I'm going to
just stop this video and start it start
the recording again that way in case
the the modular if the modular control
rig is still broken I'll just show you
how to do this with the FK control rig
instead all right guys so I decided to
uh skip that I'll have to show you guys
how to uh do that another time
um unfortunately the Character Creator
control rig it has not been converted
over to CC uh to unroll Engine 5 and I
tried to bring it over and there were a
lot of errors that Pro popped up on it I
tried the modular control rig and the
modular control rig uh I still can't get
it to work on the backwards solver for
some reason uh I'm still not 100% sure
why but I'm having problems with it so
uh for now if you have a control rig for
your character already uh then that's
great just all you have to do is
retarget the animations to your
character fix those poses and you only
have to do it for the so what you would
do I'll actually just go ahead and do a
brief summary of what you would
do so under the linked anim layer let's
say you want to do it for the rifle
so you have your rifle logic right here
that drives the rifle and then you have
poses right here if you create a child
then it'll create a child of this
logic and when you open that child up
it'll have these poses you can also just
duplicate these uh for your various
rifle type weapons and you can just
replace these poses where needed
and where not needed you can just share
this same one across all those
rifles so if you needed to fix the
fingers or you're going to have to fix
the Fingers um unless you're okay with
the way they look what you would do is
you
would copy that
over and I'll just create a new folder
I would rename this
one so that I can identify identify that
it's for this
[Music]
character I would retarget each of these
poses to uh to this
character right here
here after I've done
that then I would open them up I would
open up those retargeted uh animations
not this one but the one retargeted to
this
character and I would bake it to the
control
rig I would then fix any problems like
the hand being over here instead of uh
gripping the
gun I would attach the gun to the side
lock it and you and position
it and then I would move the hands over
so that he's gripping the gun I would
fix the
fingers and
then let me just go into animation
mode and then I would open up this poses
thing and I would create poses for uh
the different kinds of hand poses that I
need for each hand or finger poses I
need for each
hand and then for the other uh weapons
uh weapon
poses I would just select this and paste
paste them into there and then just make
whatever uh modifications I need to to
make to these from there uh and then
afterwards after I'm done and I'm
satisfied with the way he's holding the
rifle I would just retarget those
animations back to the ufn
I would open up that linked enom layer
and I would assign those poses right
here then in the character blueprint
under the class
defaults I would collapse all these
categories expend the Dao the held
objects and the SD overlay data I find
that weapon
uh gameplay tag inside of
here I would browse to this and I would
duplicate
this again rename it for
[Music]
clarity so that you know who it's for
you only have to do this like for
example I would only have to do this
once for all all character creator
characters I would not have to do it
again for each one of them I would only
need uh one of these with the fixed
poses for all of these characters the
rest of the offsets the anatomy based
offsets can be dealt
with uh from the liary targeting
settings and I'll show you all how to
fix that here in a second how to fix how
the hands are positioned
I would then assign this to this
asset and then in the character I would
assign that to
this and then if you did it right then
when you come in here and you start the
game uh the fingers and the way he's
holding the weapon will be
exactly the way
you set it up to be in that pose when
you fixed
it and that's assuming that the set the
settings under here for it if I go to
the settings for the
rifle that's assuming that that these
settings are zeroed out
so I'm just going to eject from
here and in actuality for this character
the fingers don't look too bad but the
fingers are not curled enough his
fingers are like straight and that's a
common problem whenever you're
retargeting these animations from the
ufn to a an anatomically correct uh
character it's the reason why is because
uh like for example this character Creed
characters their fingers are oriented
differently and they're spread out more
uh in the Basse pose whereas the ufn the
fingers are like parallel to each other
and they and whenever they Bend inwards
they just bend straight inwards whereas
these Bend inwards at an angle which is
how fingers actually Bend in real life
whereas the UE FN one was not made to uh
mimic the real life bending of fingers
which is why there's so many problems
with it so anyway these off right here
we can fix using these settings inside
of here we just have to adjust these
settings so we'll start with the held
object uh
[Music]
[Music]
definition and I'm
actually just going
to move this inwards more
let's try to find a medium Middle Ground
there like I said I can't fix the
fingers on this uh without using that
one method I told you about so if you
need the fingers fixed that's the only
method I found that actually works uh
guys that's and it's not that difficult
you're only having to modify uh like
positioning of the
hands mostly what you're what you really
what you the only thing that you really
have to modify from those animations is
the fingers
so if you want to modif if you want to
reposition the fingers so that they're
on the guns you can do that but you can
also reposition that from using this as
you'll see here in a
second so I want to make sure that this
lines up with uh that this is a lined
with the
finger so I
might try negative
-55 actually looks about
right and I'm just going to drop this a
little
bit and that's the positioning data
asset now for the
aiming all
right so I'm not going to worry about
the leftand positioning until after I've
zeroed in the
aiming so I'm just going to uh come in
here and I'm going to click one time
actually I like to do this where he's
aiming towards the horizon the green
line is where is pointing towards the
center of the
screen the blue line is where the rifle
is actually aiming so I don't know
what's causing this but something keeps
causing these windows to go Haywire
inside of here and it's rather annoying
to be honest this part isn't though it
actually uh is helpful because now I
have this docked and you'll see these uh
those angle offsets are printed out
right here and actually that's not bad
we could just stop there and say okay
this is actually good uh but in a lot of
the cases you're actually going to have
to modify this and so I'm actually
subtracting this it's going to depend on
uh your character but if your character
was rigged properly then what you're
going to do is you're going to copy
these including the negative sign and
then you're going to subtract which
inverts it it rotates it in the opposite
direction of where it was
offset and now you'll see it's it's
basically zeroed in so that was easy for
this character uh it's not always going
to be that easy guys uh so the reason
why it was easy for this character is
because uh I'm using I brought over the
uh Unreal Engine 4 uh settings and these
were the settings for the Unreal Engine
4 character
and so the settings only needed to be
slightly
modified if you have a bad rig this is
going to be a lot harder and you may
have to do this right here several times
and keep doing it until it gets close to
zero so just let that be known now what
we can do is we can offset this
forward and to the side and this was why
I was telling you that you want the you
don't want it the Lim the arms to be
controlled by the full body ik because
doing this would have made them bend
over uh he' have started leaning and you
don't want that it looks
weird only use the static local offsets
I know it's easy to use a static offset
but when he aims up uh a static offset
will be like in component space a static
offset is in component space so if you
move his hand forward in component space
when he's aiming up it'll be forward off
the
gun so don't use the
uh static
offsets but yeah that's basically it
just like how you're seeing here this is
the easiest way to do it guys um I've
found no way that that's easier than
this now I did now I'll show you
something that you can do uh that may
help make the fingers look a little bit
better but in my experience it's
actually
caused an uh it it messes up the posture
and so you only want to do it to the
fingers if you do it at all and in all
all honest honesty it's not it it's not
even really that helpful for the fingers
the fingers are still going to look
messed up so just go to the skeleton
where you have the ik retargeter and
open that up and what you're going to do
is you're going to match his fingers
to that guy's fingers actually we're
going to match this guy's fingers to his
fingers so we're going to go to the
source and we're going to select running
retarget this puts it in editing
mode and then we're just going
to I don't know why these are
excluded that's
weird the metac carp
oh because this character doesn't have
metacarpal okay so we're going to select
these and I'm holding down control to
select this one and then shift to select
the rest of
them and then I'm going to go to auto
align and align selected in
children that'll align only the fingers
and all of the
fingers and it's not
perfect it tries to get them
right but I've noticed that in a lot of
cases as you can see here his fingers
are spaced out more than this
character's fingers uh so you could try
to adjust and compensate for that but
it's probably pointless uh because if
you try to adjust it any further it's
going to screw stuff up in other poses
and it's going to be a pose specific
problem where you have to constantly try
to adjust it for different poses and it
messes it up for another pose as you're
trying to fix it for one so you're just
it's going to be like a
a dog chasing its tail so just don't
even bother just do this and then be
done with
it and then we're just going to come out
of here and now you'll see his hands
look clawed uh and that's normal and
that's because this is the default pose
his default pose is now going to look
closer to uh this
pose but there's going to be some
deformities and now you'll see that his
hand is closed a little bit more but
you'll notice a lot of problems with
that uh um like these fingers are
overlapping that's why I said this is
it's only a Band-Aid these fingers are
overlapping uh this finger is too far
forward so the retarget method is is the
best method and there's really no other
method that it even comes close to being
as
accurate so if you go and look at the
metahumans I used that method to fix the
fingers on the
metahumans so if you're using a
metahuman then uh you won't have to
uh you won't have to worry about fixing
it using this
fix it's probably about as close as I'm
going to get
it you see because the thumb is sticking
too far
inwards so yeah
[Music]
so by doing it this way by only matching
the fingers you can get the fingers to
match somewhat without destroying the
posture of the character it'll keep his
default
posture the posture that he holds in his
default pose so if I go to edit uh
retarget this is his actual uh default
pose and the way his back is arked right
here it'll maintain that Arc in his back
during the animation
retargeting if you don't match their
poses for that for the body so that's
the reason why his posture looks more
correct right here now if I do match it
you'll notice something so I've zeroed
this weapon in right so if I come over
here and I just select the pelvis and I
align all you'll notice that that uh his
he's leaning forward more and for this
guy it actually doesn't look bad but
you'll notice too that suddenly his
hands have been offset and that's
because we modified the way that it's
retargeting uh and posture and base pose
both play into that I mean uh base pose
and Anatomy both play into that so now
our gun is no longer aligned now we have
to realign our our gun so it's actually
best uh if if I'm just going to reset
all
this if you only if you're going to do
it you probably only need to do it for
the fingers and even then I think that's
a bad ideal I wouldn't recommend doing
it for the
fingers if you do do it for the fingers
though then you're going to have and you
want to fix those poses using that
method that I showed
you then you can't change these base
poses on this retargeter afterwards and
you have to use it going back and forth
both ways otherwise if you don't
uh then you'll have problems in fact I'm
thinking
that the Basse poses shouldn't be
matched in order for
that to work because when I did it I did
it without the Basse poses matching
so that's basically it for that I know
I'm rambling on a lot but I want to make
sure I cover everything in this video
because I don't want to have to redo
this setup video I want it to be
painfully clear I keep having to redo
this and uh yeah so you'll see that in
this pose the character's hands are off
this is the ready
pose that's the pose that he's in when
I'm not aiming
and so for this
one I'm going to bring his hands back a
little bit more and bring it
up and maybe bring it in a little bit
more however you want to do it now later
on I'm going to have the I'm going to
have him actually gripping the barrel of
the rifle instead of the magazine clip
but I need to create a
um in order for us to be able to twist
uh the character's wrist like that
without his wrist be becoming uh
collapsed and having no volume and
looking really weird uh we need a pose
driver so I'll make a pose driver
example for the metahuman uh the game
ready metahuman
characters and you'll be able to for
those you'll be able to use that for a
reference
[Music]
so yeah that's basically it for the
rifle you would do the same thing for
the
pistol
um so I'm not going to do it for the
pistol you've seen how to do it for the
rifle and I think that's enough the
video is already drw on way longer than
I thought it was going to but you would
just come in here you'd open this up and
then you would do the same
[Music]
thing none of the other settings do you
really have to worry about too much
but in another
video I'll probably
uh I I'll do another video that goes
over bringing in custom uh weapons for
your character and and setting
up uh stuff like
this for that weapon so for the most
part you're either going to have uh
one-handed weapons or you're going to
have two-handed weapons in which
case you can just reuse
these or you could make a hybrid between
these for an SMG so I don't have an
SMG uh in here but I might go ahead and
set up an SMG example which will use a
combination of the pistol poses and the
rifle poses in order to make it look
more like how you would expect a
character maybe to hold an SMG because
he would hold it and run with it he
would run with it with one hand not both
hands on it uh in my opinion uh because
they're they're fairly small they're
only slightly bigger than pist
most of them anyway some of them are
bigger than that but like closer to
rifles but for the smaller ones you
would probably have them running with it
with only one hand and maybe even
shooting it only with one hand but
whenever you're idle maybe he shoots it
with two hands you know so you could
treat it like a pistol um if it's an
SMG but you would want
the two-handed
pose to not be this one you would want
it to be the rifle one where he's
holding the
magazine anyway I think that basically
sums it up guys I don't think I've
missed anything that's the entire setup
I brought in a character and I set them
up with
uh everything and I got them working
and so now I can just run
around and mantle stuff and
shoot and yeah I'll probably do another
video uh where I show how to bring in a
metahuman and set it up to use the data
assets that are already present in the
project that way you don't have to go
through if you're using metahumans
you'll be able to skip a lot of this set
up
so yeah I think with the pistol one I
think uh I might have
the yeah I think
I'm you can go in there and adjust uh
the the layering settings for those I'll
show you how to do that actually before
I go so if we open this up well open up
the child cuz I don't have those
assigned for the master you'll see the
link layer settings for this pistol this
is
it and so the pistol running
ready would probably be the one you
would want to adjust the settings
on and it looks like I have the the
spine and fully in mesh space and then
the pelvis partially in mesh
space but if I come back over here
and I look at the same one for the rifle
you'll see the spine is an overlay
50% and this gives a stiffer appearance
and so I can just paste that over
here and
so if I jump off now he should he
shouldn't uh jiggle like
that yeah see now now it looks a little
bit better but I don't know maybe you
like that uh overd dramatic uh impact uh
stuff may you know maybe like that so if
you do you know you can stick with mesh
space mesh space will give you a more
Dynamic like reaction overd dramatic
reaction whereas partially applying the
overlay will give a
stiffer uh look if you apply this 100%
though it's going to be really really
stiff I wouldn't recommend applying this
uh any higher than maybe 6 on overlay
for the spine but yeah that's basically
it guys uh and that's the video that's
the rundown and if you have any
questions feel free to ask ask down in
the comments I'll see you guys later

================================================================================
ARQUIVO: Unreal Engine 5_ GASP DAO v1.3x (Custom Weapon Setup) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

In this project we will go over the process of setting up a 3rd Party Weapon with the DAO System.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

00:00 Intro
00:20 Weapon Orientation
04:40 Static Mesh To Skeletal Mesh
07:30 Gameplay Tag Setup
09:30 Adding Weapon To Character
12:15 Setting Up For Live Retargeting
15:25 Live Retargeting Offsets
25:50 (Bonus) Modifying Pose Preview

=== TRANSCRIÇÃO ===

all right guys
so um I thought I was recording last
time but I ended up finding out that I
wasn't even
recording so anyway I want to show you
guys how to uh bring in your own weapon
and set up your own weapon with the
system so the first thing you need to uh
check though is check your
weapon and uh let me so this one has a
skeletal mesh and has a uh static mesh
variant so I'm just going to start with
the skeletal mesh so I'm going to open
it up and I'm going to go into the top
uh
perspective and it should the barrel
should be facing towards the positive
wide Direction it should be facing down
like this because that's how my weapons
uh that I brought over from all the ALS
weapons that I use in this project
that's how they're aligned and you can
actually align them uh you can actually
rotate them and stuff that's fine it
just makes things a little bit easier if
all your weapons are aligned the same
way so I really highly recommend doing
it this way if your weapons have some
really weird rotations on them for
example if you have somebody making
weapons for you and they're exporting
them all weird like like for
example
uh if
if if they're rotated
like like this for example they're all
like sideways and uh at an angle and
like yeah
uh make them fix it that's all I can say
because you don't want to have to mess
with that that throws stuff way off uh
so
my set my setup it assumes that that
these are level with this uh plane right
here that the top of this is perfectly
level with the ground that's that's how
uh my zeroing system works
so this one is it's level even though
that has a 90° rotation and technically
that would be fine but just for brevity
sake I like to rotate all these anyway
so I'm going to actually export this
uh this is one way to do it if it's
already in your project then you can
just export it I export without level of
detail or cation when I do this and then
what we can do is we can go to our asset
details and if you go to window it
should be checked right here mine is
docked to the side I did that
intentionally but anyway if I scroll
down to the import settings you'll see
that we have a trans form an import
rotation now the thing to know is that
clockwise is positive and
counterclockwise is negative so if it's
facing this
direction uh and we need to rotate it
this way then it's going to be negative
90 but since the barrel is right here we
need to rotate it this way and so that's
positive 90 and so we can put 90 here
now there's something they've been doing
a lot of work on the way things are
handled for the importing uh process and
so there's some kind of weird bug after
you do this all these settings will
disappear I don't know why but they will
um all but a couple of them will so what
we're going to do is we're going to try
this and if it works it works if it
doesn't it doesn't but we're just going
to repport with new file after we've set
that 90°
offset and I'm just going to select
that and in my case it worked for you
for you might not uh you you may have to
take this into blender and uh fix it but
it's up to you you could also do it this
way actually so I could go and I could
go to import and I could just select
this and I can add a 90 Dee offset right
here you'll see I already did that
actually yours will say
zero uh and then you'll just put a 90
degree offset right here and then
import but yeah
so that's how that works
um if you're dealing with a SK a static
mesh then you can actually for
example I'm just going to zero this out
and then I'm actually going to rotate it
90° and then I'm actually going to take
this one step
further and I'm just going to kind of
bring it up and for it a bit so that
these uh these triggers are aligned uh
with each
other and if you go to edit and you go
to plugins and you type in
skeleton you should see the skeletal
mesh editing tools and you can check
that and restart if you're using my
project with my config file uh settings
it'll already be enabled and so what
we'll do is we'll use that to convert
this to skeletal mesh um but first we're
going to go into modeling
mode we're going to go to x
form we're going to bake
transform and then accept that'll zero
out the
rotation and then I'm going to go to
edit
pivot world
origin and accept and that'll uh zero
out the location and so now I just
changed the transform of it
and now what I can do is I can actually
convert this to skeletal mesh and by
default it'll say bottom center you're
going to change that to origin for the
root bone placement and then we're going
to convert it and if you open this
up uh you'll see
that the uh the root bone is
[Music]
actually uh right there where where the
uh world world origin was
so and you'll see the Green Arrow is
pointing this way along the green and so
if we go on to the
top it's pointing right okay so that's
basically the prerequisite for your
weapons uh those are just my
recommendations you don't have to do it
like that uh these do have held object
definitions where you can rotate and
offset them and all that but I like to
try to minimize
uh that as much as possible so that
things are as consistent as possible
also because fingers uh you know the
fingers are going to be in a very
specific
place and I like to try to
minimize uh those tiny little uh
fixes but let's just go ahead and get
started I'm actually going to use this
uh skill tool or the stat mes one that I
made I'm going to create a folder I want
to call it
data and I'm actually going to set this
up for the metahumans but before we do
that we actually need to add a gameplay
tag for this weapon so I'm going to go
to edit project settings and if you go
into gameplay tags you'll see this da GT
Dao States that's under the uh Dao
blueprints data it's right here I'm just
going to double click on it though and
I'm going to um so I actually already
added one in here I'm just going to
duplicate the M4
A1 and then I'm going to click and drag
to move it up
here and I'm just going to name this M1
A1 and I'm going to name that M1
A1 and so you can also go to manage and
you can actually add it uh to the
default gameplay tags. II Direct ly uh
but I didn't do that it's up to you if
you want to do that but you'll see it's
under here now and you can just right
click and add subtag to the rifle if you
want to do it that way
instead but anyway moving on that's all
we needed to do for that I'm actually
just going to add this I'm going to set
this up for the Kellen guy I actually
haven't added him to the widget yet so
let me just go ahead and add him to the
widget
[Music]
there we go I should be able to select
select them from the uh widget
now and I just want to make
sure that everything is working
right it is okay
I'll add more poses for the uh for the
rifles later uh so just be looking out
for that right now I know it's a lot of
people are like oh people don't hold it
by the
magazine and you're right but at the
time I did that for several reasons one
people could repurpose that for weapons
with grips or for like submachine guns
and two some characters might be really
short and so they'll have a hard time
reaching the barrel uh their arms will
actually lock and they'll uh depending
on how big the barrel uh the gun
is in that case I would actually just
recommend scaling the weapon down guys
if your character is too small to reach
the barrel I am going to add a a barrel
pose aiming pose in here um or a
set I'm gonna have a whole set of poses
for that purpose later on but yeah
anyway let's just go ahead and go in
here and under the class defaults Dao
held objects we're going to add one to
this map and we're going to select to
that uh rifle M1
[Music]
A1 and what we need to do is browse to
this M4 A1 right here and I'm I'm
actually just going to copy that over
into this
folder and I'm going to rename this to
M1
A1 and I'm going to assign it right
here and then we're going to open it up
and we're going to assign the weapon
mesh to
this so I'm going to uh add this one
that I made from the static mesh that's
the skeleton I need the skeleton
mesh and I'm actually not using this
stuff here but I'm going to go ahead and
set it
anyway this actually isn't being used
currently in the project just so you
guys know uh but I edit it uh to show
you and that stuff is actually held
under the primary we have this item ID
that's all we need to do for that now we
have it set up so that it should uh be
able to switch to it
now yep and so we're switching to it but
you'll see we're getting uh this none
none none none uh right here and that's
because uh we haven't set it up to have
a data asset yet so what we're going to
do now is if you if you go into the uh
get held object settings right here
you'll see a Chooser and this is
actually what's returning the held
object uh uh settings and the live
targeting settings and everything for
the live R targeted characters uh they
use this and I'm just going to go in
here and I'm going to
add uh one of these to here and I'm
going to browse to this one
and I'm just going to copy all this
stuff right here over to the data
folder I'm going to call it M1 A1
[Music]
and now in this asset right here this is
what stores all those
settings I'm going to replace this held
object
definition with uh the M1
A1 and I'm going to expand to these and
the aiming goes under
aim and the ready goes under the ready
stance and then this right here is what
I'm going to assign right here to this
Chooser and I'm going to give
it the M1 A1 gameplay
tag and if you look here you'll see I
have this set to any but I have it set
to match exact and this has to be input
in row value I'm not going to go into
detail on this stuff it is a bit
confusing I actually said it wrong the
first uh uh twice in a row actually I
said I set this up stuff up wrong so
it's not difficult to accidentally mess
up on this but this is actually a
gameplay tag container it has to be a
container it can't evaluate like
individual gameplay tags uh it's just
going to evaluate them as a container so
that means that if you have it set
to uh all so if you have this set to all
that means that it's going
to evaluate this for all of the gameplay
tags that are in the container and I'm
actually using uh using this for more
tags than just the the rifles so that's
the reason why you want to set it up
like
[Music]
this so I'm just I'm pressing
uh the
button on the left side of my mouse not
the left Mouse button but the one on the
actual side of the mouse I'm pressing
the the one of those buttons to toggle
this but if you go into
the Dao input
settings this is the thing that toggles
it you can set this to whatever you want
and if you press this one time it'll
just set it to aim and then if you press
it again it'll it'll stop
aiming that's mostly for debugging
purposes now you'll see that he's
actually already holding it almost
almost perfectly and that's because I
aligned uh that over here to the trigger
uh and that's the reason why I did that
but you'll see his uh hand on that other
one was on the magazine right here
whereas this magazine is way back here
so that reduced the amount of stuff I
have to do for the hand placement but I
will have to bring this back and I will
have to bring this forward it's
actually uh too far inside there and
maybe that looks okay uh to you but I'm
just going to for the sake of brevity
I'm going to show you how this works so
I'm just going to open up this held
object definition here and let's just
say that it's uh messed up well what
I'll do then is before I set the
rotation of it uh the Y and the
X rotation of it I'll actually try to
align the position as best I can and
then I'll rotate it on the Y and the X
because the offset of the direction that
this moves in will actually be the
original orientation of the weapon and
that's just how I have it set up right
now I may change the way that's handled
in the future so that it's moving in
relation to the hand or something I
don't know we'll see uh but
yeah I might add a uniform scale to it
as well later on but I think this is
fine we could make this a little bit
smaller yeah
so so so we could do
that and then we could move it left and
right and back and
forth and we can move it up and
down and then for the
aiming we can actually move
this
forward and I might actually just move
this
up and this is probably a a gun that you
would want your own pose for because as
you can see here uh it kind of the arm
is just too far in uh for this gun and
you'd probably actually want the arm to
be out
further for it to look right
um yeah
so I'm not going to uh go over I I'll
I'll go over that briefly but I'm not
going to actually walk you through
it so I'm just going
to we're only going to use the static
local offsets uh these are cool guys uh
because they move in component space uh
and it's e it's easier to position it
but this will cause an offset when he's
aiming up and aiming down his hand will
actually come off the gun so that's why
I'm not actually using that it's a
little bit more confusing this way but
yeah
so that might be uh good
enough depending on how like perfect you
want to try to get
it but yeah in reality you probably
would want that between his arm and his
body
uh or you would want to modify the pose
so that he's holding it better so I'll
go over briefly how you would modify the
pose uh but I'm not actually going to do
a full video on uh on all that now uh I
might do another separate video on that
later that's basically it for this I'm
going to save it and if I come out of
this that actually doesn't look too bad
uh I mean it doesn't look good I don't
like the way he's holding
it personally
but if you were trying to avoid making
your own
poses you can rotate these to by the way
so yeah that's basically it
and you don't even have to aim uh mess
with uh the
aim because I've already uh zeroed this
aim in for you right
here but if you modify the pose if you
rotate the hand in any way when you
modify the
pose and even if you
don't you if you just move the the hand
back back and forth it's very still very
likely you're going to have to rezero in
the aim right there uh and as far as
that goes if you see those numbers that
are printing right there that's the
accuracy uh that's how far from Center
it
is and so that also prints out in the
output log which is why I have this
docked down here and so if I wanted to
try to
uh zero it in I'd shoot a couple of
times with a a slight delay between
shots and you'll see that both of those
numbers are the same and I would
subtract whatever that number is even if
it's a negative number I'll subtract it
so this is a negative
number and I'll subtract that from here
and so I actually reoriented these so
that they matched the uh positions on
here in which you need to add these
so uh Y is the center one and R is uh
this
one and you'll see it's a little bit
more accurate
now so it's not going to be perfectly
like pinpoint shoot uh a quarter off off
a rock on the moon uh accurate but uh
it's it'll it'll get you there it'll get
you to the to where he's pointing
towards the the center of the screen and
that's all that really
matters so that's basically it for how
that works I'll go ahead and uh do a
brief
rundown on the
uh poses and how they
work so I'm not going to show you how to
do that for the metahumans today because
uh it's a that process is a bit more
involved uh I'll I'll be honest with you
uh
[Music]
but what I will do is I'll show you how
to do it for the ufn
ones so under the M4
A1 um actually let's just go to
the let me just collapse all this stuff
I have too much stuff expanded go into
the CH data linked anim layer and go
under the rifle and the rifle default
this one right here go to the class uh
defaults and you'll see that we have
these poses right here these are the
layering settings for standing and
crouching uh Crouch is almost exactly
the same as stand it's just that I'm not
applying the pelvis and mesh space when
crouching but for these poses right
here uh you
can go over here and press this go to
edit and sequencer
and I'm just going to unlink
this but I'm going to go to bake to
control rig and I'm going to bake that
to the control
rig and now it'll create a sequence and
it'll automatically link this to that
pose and so now all I need to
do is uh I'm going to I'm going to get
this weapon here since I've already uh
this is actually the same one I'm using
and I'm just going to add this in here
actually that's not the same one that's
actually the static mesh
one is this
the yeah that's the static mesh so I'm
going to come over here to my weapon and
look
for I'm going to drag this skeletal mesh
[Music]
out I'm actually going to zero let me
see so this is what I'm going to do I'm
going to go to the held object
uh or I'm going to go to this stuff and
I'm going to go to the M1 A1 and I'm
going to open up this and I'm going to
open up the held object
definition and I'm actually going to do
this
so I can't copy and paste this I don't
think let's see okay I can if you do
this before you add it to sequencer you
can uh copy and paste
and now what I'm going to do is I want
to add add to uh add to sequencer and
then I'm going to add the selected one
in the
viewport I'm going to right click
convert selected binding to spawnable
actor and then I'm going to press this
plus
sign I'm going to attach it to the M4
A1 and I'm going to look for a weapon
R oh okay so uh I was using the
metahuman okay so if this was a
metahuman that's how you would do it but
I actually don't need any offsets for
this uh for this one because it's
already aligned with the uh with that
and so you'll see it's inside of him his
chest too um
so although his arm doesn't look to be
as straight down as the uh metahumans
did for whatever
reason uh that's probably because of the
how the ik r targeter handles that arm
chain so we're going to right click or
we're g to right click on this actually
let's before we do that I'm going to uh
hold control and zoom out I'm just going
to delete this last key I like to do
that if it's a sing single pose and then
I'm going to go to Global control expand
it and if you go down here you'll see
these switches and this will switch it
to
ik and so I'm switching both his hands
to ik and then I'm going to right click
on the crfn mannequin
body add section additive this will me
this means that anything that we any
change we make now will be added over
the top of that pose
and so what I'll start off doing
is actually I'm just going to bring this
in like that and then I'm going to go
to
constraints add constraint parent
and I want to select that this box here
which is the hand the hand R
control and if I select this hand L
control and I right click on
this I can tell it I don't want it to be
a dynamic
offset I do want it to maintain its
offset though and so now if I selected
this
control you'll see when I move this one
the other one stays in place
and so what I might do is just say okay
well this guy has a this gun has a
really long uh thing here and he's going
to have a hard time trying to reach it
uh so I could actually
just rotate his body more like this
I could handle it this
way so it's totally up to you for uh for
a short assault rifle like this I don't
know why uh this uh is so long so anyway
it just kind of over complicates things
I'm just going to go ahead and undo
that and it's instead what I'm just
going to do is I'm just going
to have this a
hipfire
weapon yep and there you
go that's basically it guys uh
if I save
it
then it should
update yeah so see when you save it
it'll automatically update and if you
ever want to go back you can come over
here and just open up level sequence
don't unlink it if you unlink it then
you lose connection it loses connection
to this and any changes you make in it
will not update this automatically you
can relink it though later but let's go
to open level sequence and you'll see
it's still there my additive track is
still here so if I want to make any
changes or if I want to undo the changes
if I want to undo the changes I can
delete
this or I can make another additive
section and I can layer over the top of
those changes and I can stack
them
so yeah I mean it's totally up to you
and if you ever uh say okay I don't like
that you could just delete it and now
it's back to how it was and if you
didn't like that you can delete it and
now it's back like it was and now if I
save it and I go back over here
uh you'll see that it's back like it was
inside of here you actually saw it
change back whenever I opened it back up
but yeah that's basically it guys uh if
you do that make sure that your enable
hand l i curve is set here and this is a
uh meta data curve so if you go and you
add any curve you can go over here and
convert to metadata metadata just means
that it's going to have a solid value of
one
so
yeah and uh that's basically the rundown
let me know if you have any questions
and I'll see you in the next video

================================================================================
ARQUIVO: Unreal Engine 5_ GASP DAO v1.3x (MetaHuman Setup) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

In this video I demonstrate setting up a MetaHuman, I use a Cinematic but the Characters in the Project are the Optimized Versions and I have also tested this setup with Optimized version from Quixel as well.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

00:00 Intro
02:10 Blueprint Setup (Painful to Watch Sorry XD)
09:10 Blueprint Setup (1 Crash Later)
11:00 Blueprint Setup (2 Crashes Later)
14:15 Replacing IKRetargeting Chooser
16:56 Testing
17:30 Generic Retarget ABP
18:25 Adding Socket To Skeleton
20:10 Testing Fixes
20:40 Outro

=== TRANSCRIÇÃO ===

all right guys welcome back to another
video so in this video I'm going to show
you how to import and set up your own
characters now I highly recommend that
you use the optimized ones uh these are
optimized for game uh for games so you
don't want to use the Cinematic in a
game uh I had one person who was like
well uh they have a lot of
lods
yeah
but you're going to you're going to blow
your RAM
uh and people don't have infinite
Ram uh your environment is going to
consume a crap ton of ram if your
characters are consuming 90% of your RAM
you're going to have problems so I'm
just going to go ahead and uh try
setting this up uh for uh using the
Cinematic one this is a tall uh
metahuman uh
so okay the session was closed due to
inactivity right so anyway this is a
tall meta human right here a tall
underwe I chose the tall underwe one uh
just to uh show you guys that it should
work for all of them you shouldn't have
to you shouldn't have any problems uh I
don't think you'll even have problems if
it's a cinematic now I've already uh
tried uh setting it up uh with this guy
on the high optimized uh that's that was
already downloaded I added him to a
project before and he's a medium uh
normal weight
male so yeah
anyway now we have this character uh in
here
and if you get that message that pops up
talking about choosing a skeleton I'm
not exactly sure what that's for but I
don't think you actually need to to uh
do that I think you can just close it I
think that has something to do with DNA
or something I don't I don't know I'm
not that well versed on Med humans if
I'm going to be honest but yeah you'll
see this is a pretty tall character
right here so we're going to use
him so what I'm going to do is uh for
the metahumans and I'll do a separate
well I already did a separate video on
importing your own custom characters and
setting them up uh so what I'm going to
do
is I'm going to go to the characters the
metahumans and I'm actually going to use
the Kellen the bodies is just to show
you the the different metahuman
bodies uh you can use that guys but
you're can to have you're going to have
to change some stuff because uh this
character right here uh these these
characters are not modular characters uh
these are just templates uh this is the
modular character so I'm going to uh
show you how to do it with him I'm just
going to copy his over here
here and I'm going to open up both of
these and I'm going to rename this one
actually
to tall unw for
underweight and I'm going to open this
up and I'm going to browse to this guy
yeah so this is going to be bugged
that's fine we're going to clear this
actually just set it to something random
and then clear
it yes I'm kind of I don't like
uh uh this the this is some kind of
weird bug uh guys so I'll tell you what
what what we're going to do is we're
actually just going to oh God I don't
know what happened
there we're just we're going to first
disconnect to this uh off the
construction script honestly I don't
recommend doing this stuff right here
guys on the construction script this
tends to corrupt stuff I've seen it
happen before you can call me a liar I
swear to you it it happens and it's a
common thing so I definitely do not
recommend it what I'm going to do is I'm
going
to browse to this and I'm going to
add that
here and I'm going to copy
this over
here that's basically it let me see what
is this Collision settings I'll copy
this Collision settings too no Collision
okay yeah it's already set up
so I'm going to
add his
feet and we'll rename this
afterwards his legs
I'll just call it legs two and I'll call
this feet
two torso
2 and you can uh copy and paste that
stuff over here as well
okay
didn't I just add that to here I don't
know what happened that's
weird
so okay okay uh yeah so it's just
automatically deleting it okay I don't
know why it's doing that that's weird
let me just do this instead
okay that's
cool
um so that was a bad
idea this
is oh man
[Music]
okay yeah these components they tend to
get corrupt um and what you just seen
there that was probably just had
something to do with the groom being
moved over there because those assets I
should have cleared those assets before
I tried to do that so if you do that
make sure that you clear the Grooms out
of those assets and the bindings uh to
that mesh off of them at least uh remove
the bindings before you do
that yeah so I just lost all that stuff
stuff that I just did okay well let's
start again I guess
um let me I wish it would I wish it
wouldn't by default not open stuff up in
the content uh drawer and instead open
it up in a new window I wish you would
to do that by default it's rather
annoying so I'm just going to say
body to
and
then feet
two and
then legs
too
and torso 2
and then pH
[Music]
[Music]
two I'm going to try doing this in me uh
oh it's not going to let me because of
this let me just delete this I think
it's okay to copy and paste groom assets
over I do believe that's okay
let me save it first in case it crashes
again it crashed okay okay so maybe
don't copy or move Grooms over you're
going to have to make them one by one
manually that's
unfortunate I think this has a lot to do
with the the leader pose
logic it's been buggy for a really long
time it mostly has to do with running
that from a construction script running
stuff from a construction script it can
corrupt stuff it can corrupt components
uh I've seen it happen uh a lot so it's
it's not
uncommon I'm just going to copy his uh
materials over here real
quick oh that's supposed to be for the
Torso
okay so I'm actually going to
replace this
this let's undo
that
[Music]
okay inside of here
set the body set it to body
2 I really don't recommend doing this
from the construction script but people
do it so that they can because I think
it looks pretty whenever the character
is animated in the uh uh preview uh
window but it has a tendency of
corrupting things I'm going to let you
know that now so if you don't mind
things randomly corrupting uh then uh by
all means just go ahead and do it that
way so
everything all these settings I think
should be safe uh if not we can go back
and cross reference them later I'm going
to go ahead delete
those and on the event graph we need to
okay it so it deleted that we need to
set this to the body
to and just for brevity we're doing this
twice we're doing it on the construction
script in here uh
I think this
is fine I don't think we need to do
that let me see it should be under here
already so if we go to Dao liary
targeting refs it should already be
here yeah that's fine so we don't need
that just that stuff right there I'm not
going to even set up the groom uh guys
I'm just going to leave it uh not set up
because it's already crashed twice and I
just don't want to mess with it so
anyway because this is already starting
to get uh to be longer than it should be
uh so now that we've done all this uh
what we actually need to do is we need
to go into this Geth held object
settings and right now you'll see this
is the Chooser for the male medium uh
normal weight we need to get the one for
the tall underweight character and if
you really just don't want to uh look
for this uh then you can go and you can
browse to this it it should well it it
it's taking me to this other one but go
under Dio folder characters metahumans
and open up the
bodies and you can go to the Geth held
object settings on this one and open up
this and you can look for your character
so mine's the tall underwe and it's the
male this one here this is the uh uh the
one I need to
set so I'm going to come back over here
and I'm going to set that so now it's
the M tall underweight character and if
you open that up it's got the stuff for
the weapons in here and these are the uh
data assets that store the held object
uh definition which is just an offset
and then the library targeting settings
and this actually
should be set to this face
[Music]
blueprint and so if we're not going to
do this
here uh then we need
to do it here
and this is really on begin play this is
really where I recommend uh doing this
stuff at like I said if you do it on the
construction script you're risking
corruption and the the the bad thing
about corruption is that it's not always
apparent when it happens
I'm just going
to rename
[Music]
these cool I made it through without it
crashing again all right I think we're
making progress so I'm going to go to
the widgets I'm going to open up this
game animation widget and I'm just going
to replace this Kellen guy with this
one you could also just duplicate that
and add another one
but I'm just going
to do it like this
[Music]
oh so I never set the generic retargeter
on it that uh is part of the problem so
I'm going to go back to the I'm just
going to go to the bodies I'm going to
select the skeletal mesh and I'm going
to copy this
ABP uh and this is the
uh let me see yeah it's under Dao Char
data I thought i' had read renamed that
I'm gonna have to rename that guys uh so
that it y'all don't get it confused with
theirs uh it's not good to have multiple
Assets in a project with the same
name it can be quite
confusing all right so that's
working so it looks
like did I not set that I may not have
uh actually added that let
me check you know what this guy might
not actually even
be uh I might have added him in such a
way that he wasn't sharing the skeleton
I didn't even think about that until
just
now let me open this
up uh
okay so let me just try this
uh this is probably what you should do
is you
should let's see let's find the
skeleton
huh let me uh let me look into this real
quick so this
guy F
skeleton okay they're using the same
skeleton I just
apparently I thought I set it up let me
go to that skeleton and let me add this
socket under that
skeleton so we want it to be called held
objector R for the right one I'll add
support for our left-handed weapons uh
later but right now by default it's it's
not set up for
that it has some support for it it's
just not I don't have anything set up
like any
examples but
yeah okay so somebody was making this
seem like it was really hard like uh
like they kept showing me their stuff
they were saying that nothing was
aligned uh the hands are all over the
place and I understand guys is a this
has gotten to be a pretty complex
project so it doesn't surprise me uh
that uh some of you guys are having
problems and uh yeah so I apologize for
the delay I know a lot has changed since
I made that last video for the metahuman
but now uh you'll see that it's working
so I hope you find this video helpful
and uh if you'll just be patient I'll
get these videos out there all these
videos that I've been promising I'm
trying to pump them out I'm trying to
fix all these little uh issues that that
popped up some of them have been
longstanding issues and then some of
them uh were just issues that popped up
when I brought this over to 5.5 but I've
been fixing them as fast as I can and
trying to help people at the same time
last week I spent like 10 hours uh just
answering uh people's questions and so
if I've if I've seemed a little uh
like distant uh this past week that's
mostly why I just I started feeling
overwhelmed so anyway I'll see you guys
in the next video

================================================================================
ARQUIVO: Unreal Engine 5_ GASP Dynamic Additive Overlay (Overview v1.21) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

This Update Includes Fixes and a Data Asset Driven Approach to Live Retargeted Offset Correction.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Update Notes:

Custom Idle - Transitions Will Interrupt as soon as it's appropriate for a Fluid Transition to Occur.

Custom Idle - Foot Sliding would occur during some situations, this was fixed by making it wait for an appropriate moment before transitioning.

Traversal - Replication was broken on that for some reason so I refactored it.

Reload - While Jogging the spine had too much movement and the hands not enough, Data Asset was tweaked for better playback.

Reload - While Spamming Reload you would float through the Air.

Added Features:
Each Live Retargeted Character now has a Data Asset that lets you offset the hands based on both the Overlay State and the HeldObject State.

00:00 Intro
00:30 Reload Spamming
01:40 Reload Jogging
02:44 Traversal Replication
04:55 Custom Idle Fixes
07:47 Data Asset Hand Correction Overview
25:41 Live Retargeted Hand Correction

=== TRANSCRIÇÃO ===

all right so I fixed a lot of stuff in
uh this update I made a lot of changes
I'm going to try to go over uh some of
those I may miss a few things that I did
over uh or that I forgot about because I
changed to so many things so uh
anyway
so let's just go ahead and get started
I'll pull this up so there was some
things
I fixed and one of those was floating
while spamming reload in midair so
whenever you spam and reload uh you kind
of Glide across the map because uh there
was nothing stopping it from being uh
played before it was over so I I set up
a do once that uh gets reset after the
Montage is finished
playing and I can go ahead and show you
that actually inside of
here it's just a do want whenever this
gets called it gets reset that gets
called when it's interrupted or
complete
so that's
that jogging to idle foot
sliding
um yeah so this was on the custom idle
State uh and I did fix that I had to uh
change my approach to that I did a video
on it uh the other day maybe yesterday I
don't even remember uh but anyway so you
can go and watch that I'll have a link
down in the description if uh you're
interested in watching uh the breakdown
on that custom idle uh because that one
is based off the one I'm working out of
right now so reload while jogging it
looked a little shaky I'll go ahead and
show you what I did here on that so the
layering settings for this right here uh
what I did is I partially uh put the
spine in overlay 80% so that some of it
was still in mesh space about 20% of it
still in mesh space and then I added
about 50% secondary motion to the arms
so that the underlying animation affects
it a little bit more and I'll go ahead
and show you what that looks
like so that looks a lot better in my
opinion uh let me know what you guys
think uh I'll redo that animation later
so that it's more accurate uh but I just
don't have time to for this
update I've uh already done so much I'll
go over this here in a
bit so traversal replication was
broken so I had to rework the traversal
animation uh I mean TR yeah reversal
replication uh setup and I
will uh show you that if I can find it I
have too much stuff open right here I'm
just going to close all tabs here go
back to the event graph uh that's the
wrong
one right here
so what I did is
I have this replicated but with a notify
so over here on rep uh traversal result
if you go in here that's actually what
calls this on each of the characters uh
so whenever this replicates it it relays
that replicated data to all the clients
and then all the clients will
fire this function right here
uh yeah so I did not
actually handle this for the server I
didn't notice any problems but it may
there may be a problem with it not
acting on the server in which case
you would need to call that for the
server because I'm not sure the server
actually fires this uh it may not
so
anyway it seems to be working and I've
been playing in Standalone so I'm
assuming that it it works it does the
server does fire the notify as well uh
anyway so I'm no longer replicating this
doing to reversal action
uh and I'm no longer replicating this
stuff I'm just replicating the act of
firing that function and it's going to
use the traversal results provided by
the server I think that's a pretty good
approach to it um anyway
so that's that let's
see custom
unarmed uh calling wrong
function yeah so I already fixed that uh
I was just uh so let me just go ahead
and show you I guess if you go to the
Dao logic where I have this one
separated uh from the others this right
here was calling a different thing uh
this it wasn't calling update ik
retargeter I mean it wasn't calling
unarm uh unarmed custom it was calling
one of the other ones ones for one of
the guns it was calling this for one of
the guns cuz I had copied and pasted
this stuff over here and so this uh
right here it wasn't calling this event
it was calling another one uh that's the
reason why that one wasn't working
properly during replication so this is
calling the proper event now which
executes on the server
um so since I set up this ik retargeter
stuff guys I have not tested replication
with this yet so I don't know if there's
going to be any problems I don't know
why there would be but there could be
problems uh just letting you know um if
so I'll have to go back and uh see why
what's the problem but I don't I don't
perceive there being any replication
problems with that but there could be um
sliding into custom uh transition state
again it had had to do with the way I
was handling the custom idle um that's
already been
fixed so you can watch that other video
on the custom idle and how I did that
and how I handled it if you're
interested it is like an hour long uh
which is why I'm not going to go over it
in this
video but I will go ahead and show
you so here we are in the custom
idle and then uh we move and then we
stop and then we go back into the custom
Idol now I have to do it this way I
explain it in the other one uh there's
like there's almost 100 there's
somewhere around 100 animations I would
have to modify uh and I could do that
but I'm trying to provide you guys with
a reasonable uh approach to replacing
Idols without having to modify over a
hundred animations
so uh that's the reason why uh I'm
trying to make this friendly for people
who aren't animators um who may have to
get their hands a little dirty with
animation uh but they don't want to have
to go through and do over a 100
animations so that's that um the last uh
thing here that I wanted to go over is
this right here as you can see it's
pretty accurate um so
um and if you seen at the beginning he
was holding it properly in that other
state and he's holding it properly in
this state and you can offset it so that
his hand comes back you can completely
modify his hand positioning on this so
that he's holding it way out there or
way back here uh this is very good for
having to deal with Anatomy issues
between characters because it just goes
ahead it easily lets you adjust uh
Anatomy problems
uh uh problems related to Anatomy now I
didn't straighten out this uh the rifle
on him I I noticed that afterwards and I
did I just didn't feel like going back
and doing it because I just did like uh
probably like a dozen characters uh uh I
fixed this up for like a dozen
characters I'll go ahead and show you so
uh I'll go to this
guy pretty pretty
accurate now the inaccuracy on on the
pistol is due to the breathing uh I have
the breathing the breathing is pretty
heavy that's being layered over the top
of it
um but it's pretty accurate even despite
the
breathing uh and then I have a different
one on her
and then this
guy he may need to be adjusted a little
bit it looks like he's shooting off to
the right a little bit or his gun is
pointing off to the right a little bit
from where he's
shooting for him I already had some ik
uh retargeter settings so I just kind of
copied those over to the data asset and
I'll go over the data asset here in a
second um it looks like I may have
missed
her yeah oh I missed her uh yeah I
definitely did okay um well that's cool
I this will give you uh give me a chance
to show you guys how this
works uh so that's completely fine so
I'm going to go ahead and stop it for a
second um actually I should have uh I'll
just just eject and edit and then I'll
stop and so over here in our class
defaults you're going to notice now uh
that we have an ik retargeter uh you
need to set this uh if you bring in your
own character and you have your own ik
retargeter you need to set it from here
I'm no longer I no longer have it uh
being fetched via tag uh so it's not
it's not we're not using this tag
anymore um under the echo body um we're
not using that anymore
so we're just setting them from here I
think that's more appropriate I didn't
like the way that they were grabbing
them via
tag so under our Dao under the class
defaults under the live R targeting live
R targeting chain settings the held
object States we have the we have these
right here and we have uh these right
here under here
and these hold data
assets
so we have that right here this ignore
this uh I'll probably hide that later so
it doesn't show up under the class
defaults um but right now it shows up
it's going to show up under the class
defaults so just ignore it that's just
for internal
purposes I need to set that to private
so it don't show I don't think it'll
show up if I set set it to
private um so anyway here's the data
assets and if you
wonder uh and I do have data assets
under here so I renamed the overlay
layering uh data assets I prefixed an O
to them and for uh for these I prefixed
them with LR uh that way you know this
is the the live retargeting and this is
the overlay that you don't get them
confused um yeah so under
our layering data you'll see a new PDA
live retargeting data asset and it just
has two target chain setting uh settings
inside of it and you just need
to you can duplicate the ones in here uh
or you can go to
miscellaneous and oh my God that gets on
my nerves I need to add a delay right
there before the windows go away um that
would be nice
so data asset and then PDA live
retargeting that's all you have to do
and then select and it'll create it for
you
but so these are Under the rigs the rig
folders if there is a rig folder uh for
each of the characters and it's under
the held objects folder under that and I
separated them by held object M9 and M
uh 4 A1 and then we just have this uh
the what I'm calling the held object
states which is
like uh relaxed ready or aiming now we
aren't using relaxed yet but you'll
notice that I have a relaxed state in
here because I I'm planning on
maybe I I think I will add a relax state
to these weapons uh here in the near
future
so that's why I added that relaxed state
to the enum and the enums are under the
data uh Dao data enms folder just like
the other
one so with that out of the way you can
see that uh they're categorized I did
them using Maps some people don't like
Maps they like using arrays but then you
have to iterate through each element of
the array maps are really userfriendly
because you can just say hey uh get me
this state here's uh the variable
reference for this state and it'll just
return you the value whatever has been
assigned to that and
so if we go back over here and we go to
update retargeter settings
you'll see that I'm getting that live
retarget chain settings I'm getting the
held object States out of it based off
of the over the current overlay State
it'll return the correct uh let me see
It'll return either the either the
pistol one or the rifle one uh after
it's done that uh we just I just store
it into a local variable because I'm
going to use it uh in multiple places
well I actually I didn't end up using it
in multiple places so I might remove
that later on I'm only using it right
here but oh well uh so anyway I do a
switch off the overlay
State and we're only doing this for the
pistol or the rifle if uh if it's an
unarmed or a custom idle then I'm just
passing in a n reference uh via a
blueprint interface to the animation uh
blueprint and over here on the
animation uh or let me just finish here
first so I'm getting
the I'm getting the proper live
targeting setting uh data asset based
off of the current held object
state so if we go back over here you'll
see that we have these this is what
we're getting this from
so uh it's if it if we're in the aiming
State it'll return this one if we're in
the ready State it'll return that one so
that's pretty
self-explanatory as long as the live
retargeting mesh reference is valid then
we'll call this on it if not then we
won't this isn't really uh relevant
because in actuality you can call this
on a n reference a blueprint interface
function and it simply won't do anything
it's not going to crash the game so but
it's always nice to do a a validation
check anyway when you can validation
check you can't do those on
uh on thread safe uh
functions this is not a thread safe
function my original thought was to try
to handle all this from right here
inside of the animation blueprint but I
could not do that it wouldn't let me so
I did update uh this note right here on
uh this function update layering data so
that you guys would not get confused
because I came in here and for a second
I was confused and then I realized that
I needed to leave a comment
so if we go inside of here you'll see
that I moved
the everything under this overlay state
so it may be just a little maybe just a
hair more performance friendly doing it
like I had it before but it's not really
important and I think it looks cleaner
to do it this way
and I do not think it'll have much if
any of a performance cost also this
allows us to apply that breathing over
the top of that as well so that it kind
of looks the same as the rifle and the
pistol states that way they don't look
more Dynamic than the uh unarmed
State on the output of this uh state I'm
using the oncome relevant which fires
when this uh has any we so when this has
any we it'll
uh call this no uh on not aiming and
this oh that's the wrong one on state
entry yeah on state entry is whenever I
actually call this that's when we
actually enter this state when we
actually enter this state I'll call this
and it just sets the current held object
state to
ready on the other state if if I can get
back to it the aiming state I'm doing
the same thing on uh State entry I'm
calling on aiming State
entry and it's just setting it to
aiming so I did a lot of organization
over here too you'll notice that
everything is under a uh subcategory
it's under a category and a subcategory
uh all throughout here now you don't
have any like floating variables
everything is in a place where it
generally makes sense and that helps
clean things up and helps you guys find
things and also makes it seem less
overwhelming
so that's that as far as the
actual Act of uh handling that so how do
I get that so yeah okay so we're setting
that overlay state or what the current
held object
State uh right here we're we're setting
this inside of here but how are we
getting it back over to the character
blueprint we're I'm actually doing that
on update additive overlay uh I just
decided to do that inside of here and
you'll see I I commented it and I'm
keeping tabs of the last held object
State and if the current held object
state is different than the last held
object state then we will send a
notification to the character blueprint
and he'll perform the op he'll perform
his stuff that is required to update uh
the live retargeting settings so that's
how I'm handling
that and all of that is hand uh
commented right here so as far as the
animation
blueprint of the Li retargeted guys I
refactored some stuff in here we're no
longer using this tag stuff I did put it
in a function uh so that you could still
hook it back up if you needed to for
whatever reason so what the character
blueprint is actually calling this right
here and it's just setting the
uh and when I say the character
blueprint I mean uh each of these guys
are calling this set ik targeter which
is actually which is a function that
actually exists inside of
here so I
actually need to put that under live
retargeting there we go so under Dao
live retargeting set ik retargeter
that's where you'll find it
and there should be another one this one
so I'll put that under there as well and
so if we go into this you'll see that
it's just updating the ik
retargeter so you have to set the
variable and I'm I may actually refactor
that because in actuality I should be
setting this variable inside of
here
uh otherwise you have to call this
yeah
so I'm just going to leave it like that
for now I may refactor that uh like what
I had in mind in a later update but
anyway I don't want to get into that
right now so we're setting the live R
targeter mesh reference right here and
then we're calling this function and
that just uh gets it uses that blueprint
interface function on the Anem instance
to pass in the ik retargeter
and so if it's valid and it's not equal
to the current the current one which it
shouldn't be then we'll go ahead and
update
it this function right here is what
we're actually using inside of uh the
character
blueprint right here that's what we're
calling here to pass in our data asset
settings and it's just setting the
settings
this is actually being updated on a tick
so that it can
interpolate oh no never mind it's
interpolation doesn't take place here it
actually takes place right here so uh
this is actually bound to a
function a thread safe function called
get retarget profile and you'll see it's
thread safe and that's actually where
the interpolation is happening so
so this is only relevant
uh during
runtime when you go to compile the game
you'll want to disconnect this and
you'll want to set this right here
you'll want to call this off of here and
I might just go ahead and
uh do that so it may cause it to be
called twice but
I think it'll be
okay this is just in case you guys
forget to disconnect this because it's
not important after the game has been
compiled for this to uh be
here
actually I don't think we need it at all
anymore yeah so I'm just going to
disconnect that actually guys uh we'll
call it initialize update but I'm just
going to do
this yeah so we don't actually need that
anymore uh I may have gotten confused
because of this interpolation stuff so
we don't need that anymore so I'll just
have it like this uh that should still
work let me just make sure that's not
going to break anything
yeah so that's fine it didn't break
anything
uh so yeah so now I'm going to actually
show you guys how to do this because I
started talking and I forgot that I was
even going to do that so uh let me just
go ahead and show you guys how that's
done so I'm going to open up this data
asset and I'm just going to expand all
right click on this and expand all and
then I'm going to dock it off to the
side over here and I'm just going to
press
play and now you'll see this right
here uh we do
not need those to be expanded
actually and we don't need FK or speed
planting
so
um I'll show you a way that might
actually make it easier so we have our
uh debug settings right
here if we go to the aim offset category
and we'll have to stop it to do
this and we uncheck Dao I mean a a o
debug uh
degrees then you'll see it prints it and
the middle one is the act is actually
the
yah that's the left to right which will
be Z in
here so it's about
three uh positive so we need it we need
to set it
to-3 wait do I have the right one
open okay so what I did may have
actually broken it okay I didn't think
it would but it looks like it may have
actually broken
it uh so yeah so it looks like we're if
you want this if you want this stuff to
update in real time you do need
apparently you do need that uh
to uh be Set uh to be running on a tick
or maybe not uh I'm kind of zoning out
because I've been talking too long now
so so you'll see that one's pretty uh
accurate and now this one is about
3.5 so let's say say
-3.5 yeah so interestingly
enough uh rotating
it on that one actually added an
offset
to
this let's
see and it's a negative one so we need
to
yeah I'd say that's pretty
accurate and you can mess around with it
some some of that inaccuracy is due to
breathing we could try cyan
1.5 so anyway you can tweak it until
you're content but that's basically
uh the gist of
it now I feel like I don't like the way
that's right underneath her uh right up
against her neck so what I'm gonna do is
I'm actually going to create a static
offset because it's easier to create a
static
offset I'm going to just bring it back a
little
bit and that shouldn't affect the uh
accuracy as you can
see so
now what we need to do is adjust the
hand and basically this is just uh how
it goes and you could try to do
something like this if you want but I'm
just going to make it like I did the
other
ones I'm just going to do something like
that
and that should be good
enough let just move it out a little
bit okay so we might need to rotate
it we need to rotate it this
way
and that may be the part that kind of
throws you guys off
but luckily we can change it and watch
it change in real time
so I'm just going to move it back over
just a little
bit and forward a
bit yeah anyway
that one's kind of hard to do
but I'll try to get it a little bit more
accurate
there that should be fine anyway I'm not
going
to tweak it to any extreme here I'm just
trying to show you guys how it works so
that's not it though we're not done now
what we need to
do is we have to do it we have to fix it
for this state because you'll notice
that D due to anatomy and the
differences during live
retargeting that will be offset so we're
not going to have to actually mess with
this one and this one because it's
accuracy isn't uh important but we're
going to use a static local offset this
time because using the static offset is
going to be a little bit more difficult
because we're at an angle here
so I'm going to
do
this
yeah looks like her hand
is needing to
and that's basically
it now as far as the fingers I can't do
a whole lot about that you can mess with
the uh the live R targeter settings to
try to fix the fingers uh
but the live R targeter has always had
issues with fingers and there's not a
whole lot I can do about that
so now as far as displacement in the
hand itself you can move if it's
attached to a socket then you can offset
the socket itself uh don't rotate the
socket just position it up and down back
and forth uh so up and down back and
forth don't rotate it uh if you need
it if you need to rotate it so that it
it's uh so that it's running along her
hand right here you can't you can but
make sure that it's pointing straight in
her hand that's the important part as as
far as uh modifying the accuracy you
need to do that from
here and yeah so um that covers that one
now I'll go ahead and show you the other
ones now some of these might actually be
crooked in it in their hand like the
pistol was a little crooked but I didn't
really mess with it I was like you know
what it's okay
so
now now these right here the the
retarget Showcase mannequins and the
metahuman bodies
uh I have not done those and I'm not
going to do those right now I will I
will do these in a later one because I'm
going to have to handle these this one
uh differently because you're changing
between like 12 different uh body types
types within a single animation within a
single character
blueprint and I didn't really feel like
taking the time I'll I'll do that uh for
the next update okay so uh but if you
want to you can try to do it yourself I
have all these other examples here and
those examples actually are working as
you could as you can
see and yeah so any anyway I'll go ahead
and leave that uh debug setting set up
like that because it makes it easier
to set these data asset
settings uh to adjust them and I will
see you guys in the next uh video

================================================================================
ARQUIVO: Unreal Engine 5_ GASP-DAO (1.35 Early DEMO) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

A Quick Demo of the Coming Update.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

=== TRANSCRIÇÃO ===

all right guys
so I wanted to show you give you a
little sneak peek here uh so right now I
don't have the slot system uh finished
but as soon as that is finished and I've
made sure everything is replicated I'll
be sure to update y'all on that but I
wanted to show you that I've tweaked the
layering settings and so it looks a lot
more Dynamic now uh and the back looks a
lot more relaxed when he's idle and
aiming
um so yeah I wanted to show you that and
also whenever he's relaxed and
moving you'll see that his his arms are
a lot more Dynamic his body is a lot
more relaxed it's not so stiff uh now I
did make it stiffer when he's aiming and
moving
uh yeah so I just made it a little bit
stiffer for that if I come over here and
pick up the pistol you'll notice that
the rifle gets dropped and that's cuz I
don't have the slot system uh finished
yet well I basically have it finished I
just don't have it uh I just don't have
any of the slots set up on them yet I'll
update Jaws soon as I do that
but yeah
so also you'll notice that he looks a
lot more relaxed when he's crouched and
resting and crouched and aiming with the
pistol uh and when he's running with the
pistol
he Al he's also a lot more relaxed as
well
[Music]
so and then I can pick up another one
and right now I don't have the linked uh
a linked layer set up for dual welding
but you'll see that he can shoot both
weapons and then if he if I pick up this
other rifle you'll see
uh those rifles uh all those pistols get
dropped and it may not be apparent
first but if I move this one you'll see
those two are actually
uh
there and if I come over
here well it looks like yeah I haven't
set up the uh re-enabling of the
Collision yet so whenever they get
dropped that you can't pick them back up
but I'll have that fixed later but yeah
I thought I'd give you guys uh the
rundown on all of
that and I'm not seeing any problems
with
clipping
uh so even though that I made it more
Dynamic uh it does not look like it's
clipping into them so it almost does
right there
but that's uh I think that's
[Music]
okay
so for live retargeted characters uh you
shouldn't have that uh problem because
you can just offset the hens further out
if clipping is an
issue uh with this guy I don't have any
liary targeting setup for him he's the
base character so it's all based off of
how the poses were actually made and
that will determine if things clip or
not so for him if I wanted to make if I
wanted to change that I would have to
actually modify the
poses yeah

================================================================================
ARQUIVO: Unreal Engine 5_ GASP-DAO (1.35 Releasing Soon) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

A Final Update, Showcasing the final results for the new update.

I'll make a release video going over the details of how the new systems work when I release it.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

=== TRANSCRIÇÃO ===

all right guys so I'm back with another
video uh I kept going to make this video
and I kept realizing I forgot to uh do
things so um yeah anyway so um maybe in
the next update I'll add the ability to
uh have per like to have offsets on
these slot actors on a per character
basis because obviously depending on the
size of the character and the clothes
that he's wearing uh you know you might
want to offset it a little bit so it's
not clipping in I haven't adjusted uh
the the positioning of these for this
character so um yeah
anyway so let's just go ahead and get
started
so I have uh fixed the fingers uh for
the all for the metahuman character and
the posture as well I outline that in
the documentation even though it has
nothing to do with my project that's
just uh something you need to learn uh
you need to uh learn what causes bad
posture what misses up the fingers uh I
outline it in the documentation even
though it's not it's not something
that's part of the
project or specifically related to the
project I should say
and so yeah so he's holding both uh
pistols
correctly
and you'll notice uh he's holding the
flashlight correctly you'll see that his
fingers are actually holding the
flashlight properly uh that's Precision
you will not get from just straight up
retargeting guys uh I briefly go over
the process of fixing fingers it does uh
require you to modify the poses uh that
you're layering uh and then retarget
them back so anyway it's not a difficult
process and they're just poses so it's
an easy fix
um but
yeah and you'll
[Applause]
notice and with him too I haven't
actually even adjusted anything on him
uh and it does cut into the weapon but
that's just because this is a blockout
uh that I made uh in case you guys
didn't notice I'm getting rid of the ALS
stuff because people keep uh thinking
that this is an ALS port and I don't
want people thinking this is an ALS Port
because it's not I made all this from
scratch but
yeah so
[Music]
anyway if you if you get up here oh
okay well that that's actually uh a bug
but it was an interesting uh bug uh so
I'll go ahead and explain whenever you
go to
Traverse uh if it he'll try
to he'll try to find a slot to holster
his weapon in and if there isn't one
then he'll drop it uh now whenever he
got back up to the top he just
automatically grabs the last two
references uh
for the items uh that he last held and
apparently uh the last
two that he held before that the last
two slot items that he holstered were
these two pistols so this uh system
actually just grabs the last two that
you holstered uh I didn't take into
account um that he might have a weap
another weapon that that wasn't Hol in
his hand that he just picked up so
that'll be a bug I'll have to fix but
yeah so if I switch over to this one and
I come up here you'll see he just pulls
that one back out uh
so and same with this flashlight
[Music]
yeah okay so let's
see I haven't really been testing this
much so
oh
all
right so yeah I think I've pretty much
uh polished this up quite a bit let me
know what you guys think

================================================================================
ARQUIVO: Unreal Engine 5_ GASP-DAO (Slot Actor Setup Explained) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

In this video I'll show you how the slot manager works and how things need to be setup to get them up and running

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Project Documentation: https://unreal-devop.gitbook.io/gasp-dynamicadditiveoverlay

=== TRANSCRIÇÃO ===

all right guys so I am back with another
video I'm going to try to clear up how
slot how to create slot actors uh for
your holsters for your weapon holsters
or
whatever A lot of people keep thinking
that there's a bug with them uh that
they don't work properly but in truth
it's just it's it's fairly easy to not
understand it to me it makes sense
but uh it's it can it can be very easy
to make mistakes when handl on this um
and that's simply because it's a
flexible system and there's you know
there's a lot of moving Parts in here
and it's fairly easy to get these into
or to accidentally Overlook something so
I'm going to start by open right
clicking and open up this gun in4 A1
I'll lead with
this so the guns have this it data and
this is normally where we get their ID
from their item id gameplay tag that's
where this comes from and that's under
the H object uh State Rifle and
so be careful whenever you're uh
assigning these and setting these uh
because if you create a very specific
one like I have here uh under your
gameplay tags then it's going to be very
easy
to accent ly get those confused actually
yeah let me open this
up because the
slots might have a specific one
too so I'll go ahead and explain to you
a few things now I I am probably going
to make a slight change to the how the
slot tags are handled so that they're
handled more like the item tags and I'll
explain that to you here in a
minute actually I'll just go ahead and
explain them to you now
so if I go to set up assign slot actor
this is what gets it uh called whenever
the slot actors get attached to a
slot and the slots are on your character
blueprint your AC slot manager by
default there this item array is empty I
I'll probably I'll probably go ahead and
fill those out as as defaults but you
know you can always clear those if you
don't want those to be default values
but
anyway so these right here these item
slots these are uh the slots themselves
and all these do is they allow you to
identify like Which slot goes to which
socket and which hand it requires that's
what a slot is uh it's just a way to
identify things and keep track of things
so this is I'm going to rename this from
a loud slot gameplay tag right here here
I'm going to rename this to uh slot ID
because these gameplay tags are really
the identifier for these slots and so
whenever you go inside of here and you
start uh trying to assign a slot actor
it has to go through there and it has to
figure out which one has that gameplay
tag now I would have liked to have this
as a map but there was no easy way to
handle this as as a map or the key was a
a gameplay tag
um I mean I could
probably I would have to go back and put
these as sorry about that I'll just not
reset that one this
time
so yeah so I may I may consider and see
if there's maybe an easier a better way
to manage that from a map but I don't
think I don't think there is Maps can
cause certain complications in C some
situations but anyway moving on these
are slots they're identified by these
slot IDs right here I'll if you're
seeing this now they it might already
say slot ID
so if we go over into our slot for our
M4A1 you'll see we have this accepted
slot tag this accepted slot tag is is a
gameplay tag container and it holds a
list of slots that we want or that we're
okay with these being attached to so
there may be some edge cases for that
but in most situations you're probably
just going to have one under here but
you could
have you could have
two it just depends on your situation I
decided to use to go this out simply
because
uh now right now these require exact
matches but I'm probably going to uh
uncheck that so it doesn't require an
exact match and I'll explain to you why
now so if we come over here and we uh
see the item
tags it's already set up to not use
require an exact match for
these and that's all based around how
things are categorized so if
you if you create a gameplay tag it's
important that you create proper
structured gameplay tags like this right
here and you don't have maybe you can uh
think of a better way to structure these
yourself uh that's cool you know I'm uh
I'm not saying that the way I did it was
the best it probably isn't it's most
likely isn't in fact uh but I'm going to
explain to you so if we try to pick up
uh a gun with a pistol M9 or just a
pistol a State Pistol uh gameplay tag
then it's not a rifle so it still won't
uh even if we just had that set to Rifle
it still would not pick up that pistol
uh just like if it's an m41 it won't
pick up the M9 it'll fail even if we
don't require an exact match
uh and so if if it's not an exact match
then it means that anything that's a a
subtag of this tag will be accepted so
if it was just held object State Rifle
then any anything under anything that's
a a child tag of rifle a subtag of rifle
anything that's a subtag of rifle will
will be
passed if it doesn't require an exact
match however if it's a rifle in 41 and
this uh is
rifle then it will
fail so that's how that works so right
now on the slot tags uh if this was a
slot actor. back. gun. rle then it would
fail because it's not a a M4 A1 at the
end in fact I can actually show you how
that works right here so if I go ahead
and start the game it'll pop it
and if we come over here let me
see so if it's if it doesn't require an
exact
match then any one of these will will uh
pass if it has any one of these it'll
pass if it is an exact match then only
this one will pass
my bad let me go
back and to further clarify
that if the one that it was comparing
against
was
uh was dot rifle then it would fail even
if it uh didn't require an exact match
and that's because it's on a different
branch all right so with that cleared up
and out of the way right now the slot
actors have require an exact match
but remember though that inside of here
these are gameplay tag containers and
you can add as many gameplay tags as you
want under
here so if I come over here and I say
rifle it'll anything that is a
subcategory of rifle and sorry I forgot
to uncheck that anything that's a
subcategory of rifle can be attached to
that thing on his back that holster and
you'll see I can pull it out and I can
put it back and if
I come over here and I set this to just
Dao it still can be attached
but if I set this to
pistol State
Pistol then it can't be and that's a bug
yeah I'll fix it later uh it's a timing
issue I accidentally uh messed that up
in one of the last updates I
guess but if it's just
State you'll see it works all
right or if it's State Rifle
so I hope that uh really helps uh nail
that down for you guys because it's
important that you understand how uh
those tag relationships work uh that's
what makes them different than regular
tags is how they're handled in a
structured Manner and you can compare
against them and the reason why why
that's powerful right there uh is
because when you're not using an exact
match what you can do is you can have
subcategories uh that and you could have
this uh envelop entire subcategories of
rifles so you could have uh a
subcategory for all the rifles that can
be placed in this holster or all the
rifles that can be placed in that
holster and and those holsters will only
allow those rifles that fit inside of
them um but you won't have to go through
here and just and just start filling up
this huge uh gameplay tag table
that spans the entire an entire page
that's the reason why I handled those
like
that in fact I might even go back and
just not have these gameplay tag
containers I might just go back and have
them gameplay
[Music]
tags
so anyway so now that I've explained
that to you in great detail on how that
Works um let me go ahead and show you
guys how to create one from scratch so
I've already gotten prepped some folders
for them so what I need to do is I need
to uh create some gameplay
tags so I'm going to go into the slot
actors and I'm going to duplicate
this and this is going to be my uh slot
[Music]
ID that's going to be an m181
and then under the held
objects I want to duplicate this one and
do the same
thing I'm going to move this up
here and so under here I'm going to
say oh I need to create a new one
actually for this so let's just
duplicate these we're going to copy
these over into this folder
and we're going to batch Ren name I'm
going replace four with
one and I'm going to open this and
replace this right here and honestly
these aren't actually being used in case
you were wondering uh it
doesn't because I I'm actually already
grabbing them not from this but
from uh but from here
and the reason yeah I'm probably going
to refactor this I'm not really sure yet
but the the idea was to allow you to
have a slot that can be placed on more
than one I mean a slot actor that can be
attached to more than one slot
um but I'm not really sure that that's
uh adding anything to it uh useful and
in fact it may even be causing confusion
and so I may just move over to using
this one and just uh remove uh this
right
here
so yeah so now we just need to replace
these uh gameplay
[Music]
tags and so
now this uh can hold an item of type
held object State Rifle M11 and it can
be attached to Slots of type slot actor
back gun rifle
M11 so we need to create one for that
over here on the item slots on our slot
manager we just need
to I'm going to call this back
car and this is a slot actor back gun
rifle M1
A1 so now we need to also create our
socket don't forget to create your
socket a lot of people forget to create
the socket or they forget to you know
set up the tags properly or they Mis uh
identify the tags they get a slot actor
tag confused with the item tag I mean
the held object
tag so I already know this is is 90 and
this is
180 and then I'm going to copy this here
over to this and I'm going to invert
this because I've already done it
several
times and now I'm going to just test
real quick
dummy dummy I'm going to select to
that and you'll see it's uh right there
up against the other one in fact I think
those two are overlapping right there I
see some Z
fighting
so the slot should be set up and working
properly
now so I'll drop that out there and then
I just need
to go to guns
I'm going to copy this and this because
I'm just going to use the same character
data I'm not going to set up a whole new
like weapon or
anything and this isn't going to affect
the results uh it'll still it'll this
will still act the same way as if you
had set all this stuff up from scratch
but I've already went over that stuff in
a later earlier video and this is just
holding character data related to the uh
gun
let me expand to
that so again battery
name I'm really glad that they added
this
here that battery name is pretty
useful I'm going to drag that over here
and I'm just going to give it a new tag
M1 A1 and make sure that's the held
object State Rifle M1 A1 not the uh not
the slot actor
variant so you have to make sure this
tag right here is the same tag that's
right here if not if they don't match
then it won't be attached
drop that out
there now as long as I didn't forget
anything uh it he'll pick them up it
it'll attach you SE it attached and then
uh I got the M1 A1 you see it says a gun
M1 A1 was picked up and then if I
holster it holsters into the right one
now I can drop this one and I can pull
this one out and try to holster it again
and it still goes into the right one now
the reason why uh why that's important
to know is because over here we're
iterating through this array and this M1
A1 comes after the M4 A1 that's how you
know that it
works so I hope that clears up a lot of
the confusion for you guys I know it can
be confusing uh working with that system
it's it's a bit
um the more flexible you make a system
uh the more uh easy it is to acally
screw stuff up or Overlook something um
or with any complex system really
because there's so many moving parts and
complex systems that it's not difficult
to overlook something but anyway so I'll
see you guys in the next video

================================================================================
ARQUIVO: Unreal Engine 5_ GASP-DAO (Slot Manager and Item Handling) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

In this video I'll be be breaking down the Slot Manager and how Item's are handled throughout the system.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Project Documentation: https://unreal-devop.gitbook.io/gasp-dynamicadditiveoverlay

00:00 Intro
00:30 BeginPlay & Animation Casting
03:50 Setup & Assign Slot Actors
08:10 Holstering Items
10:26 Pick Up Items
11:43 Updating Items In Hand
16:05 Gun Char Specific Data
17:00 Updating Items In Hand Continued
18:30 Freeing Hand and Finding Slot Actors
22:20 Last Accessed Slots And Traversal
23:55 Equipping Item In Hand & Sockets
26:00 Pick Up Items Continued
28:40 Starting Items
30:45 Drop/Find Slot Actors
37:88 Cycling Holstered Items
44:25 Updating Items In Hand When Holstering

=== TRANSCRIÇÃO ===

all right guys so I'm back with another
video in this video I'm going to be
going over the AC slot
manager in case you guys uh weren't
aware uh I did have the pickup and a the
pickup stuff and a separate component
but that just added an extra component
and it required communication to be set
up on the character blueprint so that it
could act as a median between the two
and it just added a bunch of extra logic
that wasn't necessary so I just put all
that in here
here so anyway this right here is a
blueprint interface to avoid casting to
the character
blueprint now the animation
blueprint does cast to the character
blueprint if you're not aware uh one guy
was complaining about that not long ago
but the problem is is that on a
blueprint thread safe update event right
here if you if you do this on an update
it it's going to
uh it's going to cause a bunch of issues
uh with uh whenever you're using thread
safe uh and the thing is is that if you
want this stuff to be updated uh on a
work on a worker thread rather than the
game thread then it needs to be running
on this blueprint thread safe update
animation
event so just let that be known you
could set up a blue blint interface
right here and manually cache the
variables on the game thread blueprint
update animation event but just know
that if you do that uh it may cause uh
like one tick uh delays between changes
in value and the and what they are by
the time the blueprint thread safe
update event runs
because that one is not in sync with
this one it's not in sync with the game
thread at all in fact
so depending on timing uh you could be
one tick behind or one tick ahead uh I'm
I'm not entirely sure but it'll be it
could be one of
those so yeah so this right here it's it
it's only needed for really whenever
you're
you have a child set up with
this and mostly it
probably well what happens is the master
fires this and
then it actually has to do with this I
believe so whenever you're using this
widget it first spawns the sandbox
character and then it'll uh spawn and
then it'll uh like remove move that one
and replace it with this one I believe
that's basically what it's doing I
haven't lo I haven't went through there
and actually looked yet but I do believe
that's what it's doing and that's why
this is getting fired twice which is why
I add the delay so that it only fires
once uh after that character has been
destroyed and the new one has been
spawned in so anyway
uh in yours you'll probably not use the
widget to do that and so this would be
relevant but anyway so in a multiplayer
uh game
setting uh this right here would only be
fired by the server and a standalone
it'll just be fired by the one thing
that's running it
so uh this right here is just going
through a list of uh classes here actor
classes uh that have been assigned right
here so it's going through
those and it's adding the it's spawning
those it's disabling the collision and
it's uh calling this assigned slot
actor this assigned slot actor and let
me actually just show you where that is
over here so it's under setup and it's
setup starting slot
actors that's calling the assign slot
actor and that takes the reference to
the slot master or
this right here for example would be
what would be passed
in and that's just going to go through
there and it's just going
to make sure that let's see if we go
over here to the item
slots this actually is an array and I
have an example here uh but yeah this is
an array and uh what it's what it's
uh doing here is this is actually
assigning a slot to the
character and these uh slots right here
represent where slot actors get
attached on the character so they have a
socket a preferred hand so if it's on
the right hip you might want to want it
to be uh used only by the right hand the
attached slot Act is going to be the
actual reference to the slot actor that
gets attached to
this so that would be like a pistol
holster that's what would be uh getting
attached to that this thing right
here and then you have your allowed slot
gameplay tag and that's just if we go
over here to the uh to this VP slot hit
pistol M9 you'll see that the accepted
slot tag is uh this right here
and also I assigned to that as the item
data um item id gameplay
tag so anyway that's what's uh happening
right here it's just comparing this and
it's making sure that this slot actor
The holster if you will the M9 holster
uh which it's going to go through here
and it's going to find which one accepts
the uh slot hip pistol
M9 uh holster and when it finds it it'll
go through here it'll make sure that
there's
um there's an attached slot actor on
it if there is that means that there
that this slot is currently occupied by
another holster
and so I keep track of it right here and
at the end I drop the one that's there
and then I and then I attach the new
one so that's basically what's going on
here if there isn't one there then I
just go ahead and attach
it yeah and see right here we're getting
that item from this array and we're
assigning that slot at actor to the
attached slot actor so that's how that
works maybe that'll give you some uh
clearance uh or clarity as far as how
the slots are handled in the item slot
array so this right here this holster
socket name uh this is just an U it's
for the the socket that we're going to
attach the slot to
or the items to on that slot actor and
you don't have to have one if you don't
have one it'll just attach it to the
origin so this right here is fired when
we try to holster an item that he has in
his
hand and what's that what that's doing
is it's going to pass that socket name
to the holster slot I really didn't need
to do that uh I guess like that the way
I did but anyway I decided to just do it
like that and have it passed in but yeah
that's what it's getting attached
to
so so the item mesh would be like your
pistol skeletal mesh or uh static mesh
and then the
Target would be if I can go
back interesting it's not letting me go
back oh right never
mind yeah
so the target would be the slot
actor and this is in the BP slot
Master that's why I have it passed in
okay right
that allows us
to let it know from another place which
socket uh Which slot name it wants for
the
socket and theoretically I could have
just stored that on the slot Master but
it makes it more flexible if you can do
it that
way so I kind of got
ahead of myself right
there so let's just go
back so that's basically what's going on
with uh the setup starting slot
actors the assigned slot actor is also
called Somewhere Else let's see the
pickup held objects
function so when you go to pick up a
held object it will get the item
uh Char data on it if if it exists if it
doesn't exist that's because it's a slot
actor and Slot actors don't need U item
chart data so if this variable is
invalid and it'll do it'll just run this
assign slot actor on that uh slot Master
pickup
item if not it'll pass all that
information on to the pickup
items which goes through here and picks
up the item
and there's a lot of different ways that
you can handle pickup
items and you can go through here and
read uh this stuff but basically
we need to free free the hands in
different ways under different
circumstances we need to handle that a
little differently so that we can
holster the correct item and the correct
slot and then we can uh equip the item
that we're trying to pick up and then
right here you'll see I call this event
dispatcher right here on hand state
change and these uh I'm actually only
using this and this uh I have not made
use of this but it is uh set up inside
of here but these two right here are
both
basically uh just calling the same
function in here but I kept them
separate since they were being fired
from two different or from different
places if you go to the character
blueprint and you go to the event
graph you'll see that we have this slot
manager setup right
here and this is actually where it's
happening so you'll see both of these
are actually really uh being
bound and then this is calling this
event this one right here
and in actuality we could have just had
both of these done like
this we could I could have did it like
that and just had it fire that
directly in fact I'll probably do that
in a later update but I left it here
like this just in case there's maybe
something else you want to do on this
but anyway I'll probably fix that in the
next update it's not a big deal but
[Music]
anyway so whenever we pick up an item we
need to update the uh hand state change
or change hand state of hand because on
the character
blueprint you have
to load the whenever an item changes in
the hand you have to do a couple of
things so you need to
to you need to update all items at hand
on the server so the server keeps track
of the items that he has in his hands
and he only has a left hand and a right
hand so this is just a struct and I
chose a struct because it can be
replicated unlike a map I was using a
map before but uh
anyway so this just holds a reference to
the item blueprint that the character
currently has attached to the left or
right
hand and that's what uh this is updating
right
here now as far as the uh set held
object state that always needs to be
updated after the items in the hand are
updated and
that actually changes the
state of his of the item in the
hand and whenever this gets whenever
this value gets updated let's
see yeah
so right here we're keeping track of the
last one we uh track we set that one
before we update this one and when this
gets updated it'll call this uh this
this on uh rep event
and that's going
to come in here it's going to get the uh
the Char data for each hand and then
it's going to do some stuff over here to
uh figure out how we're going to link uh
the enem set so it's going to link the
enem class for a hand and then it's
going to uh set the primary linked enom
set on that linked enom
class so this right
here it gets it's just getting the link
anim layer instance by
class which gets set right
here and that's getting pulled from the
item Char data
and that's the item uh data for the
weapon so if I come over here and I open
up the gun
blueprint and I come over here
to to this right here this is how we get
the item Char data right here so just
ignore this I might set that to private
uh later so that it doesn't show up here
and confuse you make you think you're
supposed to set it you're not actually
supposed to set this that gets uh set
right here from the
Chooser and so if we open up the Chooser
you'll see it figures out which
character it is and then it comes
through here and it finds their uh data
and inside of here you'll see that we
have the linked animal layer class right
here and that's what it's actually
grabbing and assigning
and that's that's uh what's being
assigned right here to
this
so if it's appropriate if the situation
is appropriate then
uh meaning that
uh that they have a dual welding Anem
set
[Music]
then what we'll do is
we'll set the primary link anim set for
the right hand and then we'll set the
secondary link enem
set and the and these are firing from
the animation blueprint so for example
if you're if you're dual welding it's
just going to do this and it's going to
choose the enem set for either
hand if not though if they don't have
one of those then we're going to assume
that these are two different weapons
maybe a pistol in the right hand and a
flashlight in the left hand and so the
the pistol Anem set will be loaded and
then the flashlight enem set will be
layered over the top of
that so I hope I made that clear
it's a pretty complex uh system I have
running here
[Music]
now so that basically breaks that down
right
there I'll just go ahead and go over the
try
freehand yeah so what it'll do is it'll
go through here and it'll get the
uh item based off of the the preferred
hand uh the reaching hand I I should say
and if the item is valid then we call
the holster
item function that gets the item data
the item id the gameplay tag and it
passes that to the find slot by item tag
which is on the slot
manager and what that does is it goes
through
here and it checks to well it checks to
make sure that the reaching hand is the
preferred reaching hand for that item
slot configuration
on the item slots
array which is actually set from
here so it looks at that right
there and if those are
equal or if we passed in either hand and
you'll you can read this comment to
understand that
then it'll be valid and if it's valid
we'll check to see if it's available
that's assuming that we're
uh when we call
this we have that set to True which is
the default value by the
way so if it's unchecked then it will be
true if it's
occupied if that's
false and it has
to it has to match the accepted items
tab
for that current slot
actor so if we come back over here
you'll see the accepted items
tag that right
there is the item that we'll
accept and if we come back over
here and open one of these back up and
I'll just do this one for example
oh my bad I'm okay yeah sorry I kind of
uh confused myself there so that's in
the item data so if we come over here to
the item data uh this is the tag so if
we if we go back over
there then let's say for this one it
requires uh this one is a gun pistol M9
uh slot and this one requires the held
object State Pistol M9 gameplay tag
which is the gameplay tag of this
pistol so I hope I didn't just confuse
you there I almost confused
myself so anyway if this item type tag
is the same if it's because this is a uh
a gameplay tag container if that item
tag is within this gameplay tag
container and uh and the slot is
available assuming we're picking it
up then
we'll we'll cash we'll store the ACC the
last access slots that is used later on
on the traversal on traversal start and
on traversal end uh that makes use of uh
of that stuff uh so that it can figure
out which uh guns to put away and pull
back out and then it just Returns the
slot actor there so if we go back it
Returns the slot actor reference here if
it's valid we try to occupy the slot and
that fires on the slot master so that's
when the item in your hand gets attached
to the the uh slot or holster for
example the hip pistol M9
holster all
right so yeah that's a pretty it's a
pretty deep breakdown but people have
been asking uh for this so
you can find the pickup functions under
the item handling pickup item and that's
uh this right
here and that's this one's for the items
this one's for the
slots if we're picking it up and putting
it in the character's
hand then the new item that we're trying
to pick up currently it just gets
attached to the
character based off of uh these hand
socket names which are assigned to this
array or this map right
here that map can be accessed from
here so for the character it's weapon
uncore L and weapon uncore R but for
some of the other characters
for example the ue5 mannequin let's just
get Quinn and if we go over here to this
one you'll see it's held objector L and
held objector
R and if we open up the
skeleton we'll see that on hand L we
have held objector L and on hand R we
have held object uncore r
all right so that's the pickup uh Logic
for it picking up items off the ground
if there's not an available slot they'll
be dropped and you can actually see that
inside of inside of here so if that slot
actor was not uh valid then it will drop
the item
and that's actually
the that's the that's actually the item
that they're holding so before we pick
up another item with the left hand for
example we'll have to drop whatever he's
holding in the left hand if we were
unsuccessful at holstering it within a
slot that may seem a bit confusing but
this is the
situation uh if he picks up an item with
his uh right hand and he holsters it in
his right uh
holster then if we pick up another uh
pistol for example and he host he he
tries to pick up a third pistol but
there's already a pistol in his right
holster then he has to drop the pistol
that he's holding in order to pick up
the new one I hope that makes more
sense this right here is basically the
logic that uh that gets fired
whenever uh he picks up a
flashlight because
uh the flashlight does not require a
free
hand but it it requires a specific
hand so right here this is only false if
he requires I if he requires either hand
such as pistols which you want to dual
weld with a pistol you don't care which
hand it gets placed in and so this is
the logic right
here for uh picking up uh pistols or
anything that can be held in either left
or right hand
we have to get the item slot
availability uh when we do that to make
sure
that if
he's if he's got something holstered in
his right if he's got a pistol holstered
in his right hand I mean his right
holster and his left holster is
available we don't want him to pick up
the the next pistol with his right hand
because he has to holster in the left
socket with his left hand and so we need
him to pick it up with his left hand
even if he isn't holding something in
his right hand and that's what this is
for right
here so yeah I had to cover a lot of
different bases uh with this logic guys
uh to get this to work uh properly
that's why there's so much code in here
uh it ended up being a lot more complex
than what I thought it was going to be I
thought it was just going to need
require a few functions and I kept
running into situations that I hadn't uh
uh taken into
consideration so that's basically uh how
that
works starting items right here it goes
through the array it's similar to the uh
starting slot actors but it has to be
handled slightly
differently we have to dis we still
disable the Collision on it on the actor
itself which dis all Collision on it for
everything and that gets re-enabled when
we drop it before the physics are
enabled so if I had one of those open I
would show
you that's under the held object guns
which is the parent of that where this
gets
handled or actually no my bad that's on
the master because all these uh uses
that physics
logic so you'll see how I'm handling
that right
here um
yeah so it gets re-enabled the Collision
does before we uh set the simulate
physics all right
yeah and I I used this again I
repurposed
it and then we occupy a
slot and that just ensures that whenever
they start with the items they're
already holstered uh there's none in the
hand uh if you want to uh if you want
that to be handled a different
way then you can it is
possible
but that's just the way I did it
all right so moving on
um we have these drop uh slot actors and
find slot actor uh helper functions for
you here
and those just give you different ways
to drop or find a slot actor so you can
find um you can have it return an array
of the item slot configurations which is
what this is populated with it stores
all that information I was showing you
before uh so in some situations you
might want some of that information you
know U or all that information and you
can also drop byy slot configuration as
well as uh find item slot configurations
so this right here would be useful for
uh pistols if you wanted to look up the
uh pistol slot actors by their gameplay
tag which uh in this case would be dao.
slot actor. hip. gun. pistol. M9 so if
you wanted to find all of those uh
within the item slots and have all of
those returned then you could do it that
way and depending on how you or organize
things uh inside of here it would
it would determine the order that they
were returned in
so for example with this one if you got
all
the uh Doos slot actor. hip. gun.
pistol. m9s then the index zero would
actually be this one right here and then
index one would be this one right here
so you would already know that the but
you could also test too you could also
check the preferred reaching hand to see
which side of the body it
is so you could use that information
from it to identify them as
well you can also look them up by the
the slot actor reference which would be
a reference to this for
example and it'll just go through
there and it'll uh
it'll check and find the attached slot
actor to this
slot and and whenever it finds it it'll
just uh return
that which you know what on second
thought that makes absolutely no sense I
just realized that um I guess this
should actually
be man I can't believe I did that I was
actually sick that day when I was doing
this
so I'm still not completely over this uh
stuff yet
so so this is actually the item we
actually want this to be the item slot
configuration because it would make it
wouldn't make sense for them to search
for the thing they have a reference to
and then have't returned a reference to
that I don't know how overlooked that
okay that'll be in the next update
so we can also look up by gameplay tag
and we can uh tell it which hand
preference it needs to be if you don't
set a hand preference the default is
either hand and that just means that it
won't even consider hand preference
it'll just have it
true
[Music]
so it'll find the one that has the
gameplay tag and
then if you're using the the hand
preference then it'll only return it if
it's for uh for example the left hand so
if it came across the right hand first
it would just skip that and keep
iterating through until it found one
that had the leftand hand
preference and then the find slot actor
name that you know you could do it by
slot actor if you want I mean the this
socket name of it so that would be this
socket name right here you could look it
up that way maybe some of you guys would
prefer that instead that's why I put all
these functions in here so that you
could just use the one that's uh
relevant for
you this one right here the F slot by
item tag I put some more comments in
here to help you guys understand how
that works better because I felt like
maybe it was a little
confusing uh but yeah this is basically
for whenever you're picking up an item
and you need to find out if it if that
item can be attached to that slot
actor so basically whenever he's holding
an item in his hand and he goes to
holster that item and a holster or
whatever uh then he needs to he needs to
find out if it's available if it can be
attached to it before it gets attached
to it and that's what this is for so
this goes through and it finds uh which
one this item can be attached to uh
which which holster this item can be
attached to and then it will uh let you
know the reference of it it'll give you
the reference and then you can attach
it the drop slot actors basically the
same thing there's one for looking uh
looking up
the or dropping the slots by uh index
dropping the slots by item
configuration we always
uh uh clear this afterwards because if
we don't clear it then uh it'll assume
that there's something still attached to
it and if we go and do this right here
whenever it gets over here to the is
available is it available it'll return
it'll say no it's not available there's
something in here there's something
attached to it currently which is not
what we want obviously because we
dropped it so you have to clear that
before uh or after I mean you drop
it again you can do it by socket
name gameplay tag or
reference and yes so I did that fine
slot actor by reference after I did this
one and so for some reason I just uh I
just uh didn't I wasn't thinking I guess
I mean that
yeah I still can't believe I did that
okay
anyway so I'll go ahead and go over the
cycling uh of the holstered items and
that's just like iterating through using
a current item index uh that it uh
increases and updates the current item
index every single time we go through
here it's going to get the holstered
item by index which is just the item
that's attached to this slot actor if
this slot actor is is valid then it'll
return Whatever item is attached to it
if there is one and then we'll uh store
that into a local variable and then
we'll check to see if that was valid or
not this right here is just a uh a macro
it sends it a depth that depth is just
going to uh prevent it from
uh turning into an infinite Loop because
this right here we'll have to call the
cycle holstered
items and that's just
basically uh a a a fail safe because the
thing is is not all of these array
elements within this item slot actor not
all of these are going to actually have
a gun attached to them some of these
holsters are going to be empty and so if
we don't find uh an item attached to
that holster then we need to keep uh
cycling through until we find the next
one or the previous
one actually this might be the next and
this might be the
previous uh but anyway yeah and then
we're just going to draw the holstered
item and again you know we have to do
things different depending on the
situation which is why I have so many
different things uh versions right here
where we're checking it in different
ways so this item at hand this initially
gets passed in from the character
blueprint and I'll just go ahead and
show you where that's
at so it's going to be in the da Dao
logic
item
handling and that's going to be fired
from the client it's going to call it's
going to tell the server uh to handle it
if they're standing close enough to it
and some people don't like this you can
handle this however you want really uh
this was just a simple uh setup for me
and so I went with
that but each of these if we go in here
you'll see they have this box on the
characters inside of this box it lets uh
it assigns a
reference uh of it to the
character so these items are actually
what's responsible for doing that not
the character and so if the server fires
and and its version of this is
uh is uh not valid I mean is valid I
should say say then we're going to call
the server uh pickup item function on
that item uh which does a little bit of
handling of stuff
here and it'll call
this and have this fired on all the
clients right
here and then it'll call this pick up
held objects on the slot manager
and that's how the items in the hand get
ped
[Music]
around yeah so that looking a
little overla there I don't like that
it's getting on my nerves let
me clean that up a little a little
[Music]
bit all
right then draw item from
holster you know it's going to try to
free it based off the
situation uh
and I'm not going to go into like
extreme depth and explain every little
piece of code in here but you know it's
G the equip item again does the same
thing as You' seen
before uh this is
uh kind of how the Occupy I mean the
free item and all the pickup logic
that's how that stuff was
working and then it calls this which
again I showed you before over on the
event graph
over here we fired that right
here which fires
this and then that updates again it
updates the um anom the linked anom
class layer and it
updates uh all items in the hand
okay so I'm going to have to wrap it up
here here in a bit my uh
uh I'm starting to feel lightheaded
again I think that pretty much uh wraps
it up
though I mean you have this drop item
function you already seen that
you have the try holster item
function and you have the holster
item
function and those get called under
different s
situations yeah so you'll see these are
calling the those those events you seen
earlier
uh so if we go to the event
graph you'll see we're calling these
events right there and those are just
calling those uh other events that I
just showed
you well I didn't really show them to
you but this is just a safety uh a
safety mechanism right here it'll
just it if uh and if this if this
actually fire fire is valid then it's
actually something went
wrong this is for when the hands need to
be cleared actually so that's why I have
this debug
message so if this
enum is either hand then it really means
that we're not going to well we're going
to update both hands uh to be invalid
you can't really update both hands to
for one item uh for a single item and
this function right here is for updating
a single item in the hand so if it fires
either hand it means that we want to
clear both items in the hand and so
we're setting both the right hand and
left hand to be in an unarmed
state which is why I have this uh debug
message right here but then I go ahead
and uh default it to the right hand as a
safety precaution
uh but then I also print this message
onto the screen letting you know
something went
[Music]
wrong updating the both items in the
hand that just allows you to
uh to update both of them if
present or empty both of
them then again we always have to do
this stuff at the end
so I have to get the item data and I
have to get the item ID gamepl tags so
that we can assign those ID uh tags for
the weapons uh to the the held object
state held the held object hand
States all right so um yeah that was a
lot of information I just
covered and I hope you guys understand
how this works now better and I will see
you in the next video

================================================================================
ARQUIVO: Unreal Engine 5_ GASP-DAO (V1.41 Overview) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

GASP_DynamicAdditiveOverlay(1.41)

- 1: Player TakeDown Contextual Anim Scene Added.

- 2: Intro Map Added (This will be expanded on and improved over time)

- 3: Unarmed Overlay State Support Added (DefaultOverlayData is the variable responsible for loading the Data Asset holding the Unarmed State Data)

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Project Documentation: https://unreal-devop.gitbook.io/gasp-dynamicadditiveoverlay

=== TRANSCRIÇÃO ===

all right guys I'm back with another
video so some of you aren't going to
like uh aren't going to like his pose uh
you know I I can't please everybody so
I'll go ahead and let you know it took
me like five minutes uh to make each of
these poses uh they're not hard if you
follow the steps that I've outlined in
previous videos uh then you can make
them too now if I come over to uh one
thing to note is that when you're
switching between these characters like
this sometimes it doesn't always update
properly when you switch back to the Dao
character uh but yeah some of these guys
you might not like uh the way that it
looks on some of them it may look more
appropriate like the way that I have his
arm back like this and that arm forward
looks kind of stylized it probably looks
better on him than any of the other ones
uh the female and yeah I don't I'll I'll
I'll fix that in the next update uh
whenever you switch they should be
destroyed actually but um I just have
them dropping uh but yeah so the females
all have feminine uh poses now and like
I said it takes five minutes to uh
modify these uh to fix them change them
whatever uh so feel free to if you don't
like them I was I made this subtle the
changes a bit more subtle for for the
metahuman Ms due to that complaint uh
after having just posted a uh a snapshot
of the ufn I already knew there were
going to be more complaints so I went
ahead and uh uh swapped or made some
changes to that one uh so here you'll
see the
females and also we have this map here
now that kind of helps you guys that are
new and if you come over here and you
press F you know you'll do perform a
take down
now uh that those takedowns were met and
made for the ufn character so they're
going to look perfectly in sync for the
U between the ufn characters but if you
do on the other ones they may or may not
be perfectly in sync uh it's going to
depend on how close they are to the
other character and how well the ik
retargeter is
performing uh but yeah that's
basically that's basically the rundown
now I'll go ahead and walk you through
uh the logic of how this works
so if you change your character uh look
at the Dao bodies uh blueprint which is
under the Dao character metahumans
folder right here look at this as a
reference guide uh guys because uh you
do need to update this state you need to
refresh it uh Force refresh this held
object state anytime you change that uh
there's some other things in here that
you may need to do as well now now that
we have uh this overlay default overlay
data that's your default overlay pose uh
for your unarmed state so when you're
not holding a weapon it'll automatically
default to this uh so let that be known
that's a variable that's stored on the
parent class and so if I come over here
to the parent class you'll see that I
force update this at the start I have to
force update this uh in order to force
it in in order to force the held object
State because I have to bypass this uh
because it's going to check to see if
it's the same so I bypass that so it'll
just force update it and when it Force
updates it it's going to run this uh on
rep function and it's going to see
nothing's being held in the hands
they're both both hands are free and so
it's going to perform this stuff right
here
so that's basically the rundown on that
you right now I don't have this
categorized I forgot to categorize it
I'll categorize it in the next update uh
but yeah
so that's the rundown on that so you can
go in here and you can look at the uh
you can modify this you know make
changes or whatever or replace it with
your own uh that's up to you probably
best to replace it with your own version
if you want different logic in there on
that
now remember we're just blending between
these poses in here we are not playing
transition animations and blending
between
two really different things where where
where the amount of movement to get from
one point to another is large it's going
to look unnatural uh that's just the
nature of blending blending is
it looks unnatural uh whenever it has to
fill in large gaps uh so uh if you want
those to to look better you'll have to
fill in those gaps yourself with uh with
transition
animations I I I'm I may work up to that
at some point we'll have to see now over
here on the character
blueprint I will show you over here on
the event graph and I haven't actually
uh put notes on this properly yet but I
did do the video that walks you through
what I'm doing here and you can watch
that and this is the take down that I
just
added so that's going to be right
here under the um primary event
graph so that's the rundown on that guys
if you have any questions uh feel free
to comment down below and I'll see you
in the next video s

================================================================================
ARQUIVO: Unreal Engine 5_ GASP-DAO (v1.32 Overview) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

Changes in 1.32:
- 1. Default Look Aim Logic Introduced when not aiming a weapon
- 2. Weapon no longer clips the body when not aiming and Idle or turning in place.
- 3. Yaw AO is partially applied to root bone for more responsiveness which comes at a small cost.
- 4. Logic has been reverted to Pre-OffsetRootBone to simplify the process of performing Aimoffsets as well as reduce the logic overhead.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

=== TRANSCRIÇÃO ===

all right just a quick update guys so
you'll see we have some head looking
motion going on here and then he does
this little idle thing which is part of
the default motion matching
uh uh look logic
so yeah
also whenever we turn in
place you'll notice that the weapon no
longer uh goes inside of
them and we should still have a fairly
responsive I mean considering this is
motion matching it's this is probably
about as responsive as you're going to
get without introducing foot sliding uh
into the equation uh which you know may
may be reasonable for some of you guys
but motion matching wasn't designed for
uh responsiveness it was designed for
Fidelity uh so
um
yeah so also when you look up or look
down the gun will no longer go inside of
them and that just had to do with the
the layering settings themselves
whenever I took a different approach to
the layering settings I had overlooked
that uh State and I never updated it
so okay my there's a bug in Windows or
or an Unreal Engine I don't know but
you'll see that my thing's flashing
right here I can't click on it now uh
it's starting to annoy me I don't know
what's causing it and I don't know how
to fix it if it's a Windows issue then
there's nothing I can do about it but uh
anyway so I was going to show youall if
I can get it there it goes okay
so yeah let me go ahead and uh cover
what I'm doing inside of
here so I moved
everything uh so that it's happening
before the offset root bone now I left
this in here just to explain to you guys
how it works if you apply it post uh I
think they've reduced the jittering
problem that we had before enough so
that it's not really uh an issue however
if you just don't think it's fluid
enough you can reintroduce uh this
method uh it would involve you having to
apply this to both this and
this and it would require this to be
handled differently as well you would
need to
calculate the spine
rotation from a function right here uh
rather than on the anom uh or on the
blueprint thread safe update event as
I'm doing
here so this is where I moved
it for the spine and
then yes so I made a few other
altercations here I renamed this to
univers Universal AO um instead of yah
AO enable ya AO and so I'm using it
there and I'm using it here uh so that
the pitch gets turned off properly and
so does the yah uh whenever we're not
aiming and it will switch over to this
which is the default look
logic
and yeah so you'll see that this is
quite a bit more simplified now inside
of here I still have the legs
disconnected honestly I'm probably not
going to reconnect them I may even strip
this whole leg logic out of here
uh I may do that because I don't really
see much use for it uh I've yet to find
it an actual use for it and it's just
going to add
extra uh interpolating these values is
just going to add extra overhead uh for
no real
reason so this weekend I'll still be
doing another update and what I'll be
doing is I'll be refactoring my approach
to this right here which is how I'm
handle currently handling uh also I'm
going to remove this I don't really see
a use for this either I I I I did have a
reason why I did that but it ended up
not pinning
out as far as uh this though I'm going
to refactor this so that we can get
better
more Dynamic filling reloads and fire
animations and then I'll explain how it
works basically I'm going to go I'm I'm
going to tell you right now I'm going to
go with the the Lyra approach uh because
their approach is is pretty is pretty
good actually so they they
apply they apply the Montage onto the
upper body on a layered upper
body and then they uh they also play it
on on the full body as a local space
additive uh so that's that's a good
approach because if you just play it on
and as a local space additive on the
entire body then the hands will kind of
like move in different in weird ways and
that's the reason why they overlay it on
Only onto the upper body uh afterwards
or at the same time yeah afterwards
so at the at the same time and
afterwards after the first the local
space one is
applied so this is this is still
happening the ik correction still needs
to happen after the offset root bone
because it has the foot placement and
the leg Ike in it uh the hand Ike it
really doesn't matter uh if it's before
or after uh but for the foot placement
it does and also for this right here it
does as as well and so this is just an
extension of the aim offset the yacht
aim offset I simply don't have it in
here because this happens before the uh
offset root bone and if I apply a a root
transform before the offset root bone
the offset root bone will absorb that
and counter rotate to prevent it from
moving and so the point of me doing this
right here is
because uh you know I I have people
complaining to me all the time saying
that it's not responsive enough uh this
is motion matching it's not designed or
meant to be responsive guys it's really
not uh and this is kind of like a median
for me and actually I'll just go ahead
and show you how to reverse this so if
you wanted to reverse this you would
just uh plug this up uh
here so let me just copy and paste that
I would just replace this here
and then I would go
into the update Dao data function which
should be
under functions
Dao let's
see management update Dao data yeah so
under here you'll see this and if you
open it up you'll see the spine count
you would reduce that to five because
you're no longer including the root bone
into that
calculation so I'm just going to leave
that
on but what it does is it
allows the
uh it allows the off the root bone to be
slightly offset uh while you're
aiming
which leads to more responsive aiming
because the offset root bone
is less limited
to how it restricts your ability to
rotate because the offset root bone
prevents you from rotating the offset
root bone prevents you from uh from
rotating so if you apply this after the
offset root bone then this
introduces a a more freedom in rotation
uh at the cost
of uh Fidel it
so uh so you're sacrificing a little bit
of uh Fidelity for responsiveness now
you probably won't even uh
notice
um but he he will uh get just a little
bit of foot sliding ever so slightly and
it probably won't even be uh noticeable
uh not while you're moving but if you're
like turning in place uh then sometimes
it is
noticeable yeah so see right there so
it's a little
noticeable and it only actually allows
you to aim just a little bit further uh
so I mean you can disconnect it if you
want I could have this I could give this
a higher weight than what it
has but the the problem with that is is
that it the the foot sliding would be
really not ible
um but yeah anyway you can disconnect
that it does have a a little bit of a
cost to it because I'm having to convert
from local to component space uh a third
time because we have to convert right
here for this but then we also have to
convert here for the
spine and so doing this over here um
means that we have to convert a third
time
uh and there is a cost converting from
local to component
space this stuff right here the
transform and the
blend it's uh probably not that
expensive this one isn't this one is
only evaluating the root
bone it's not evaluating the entire
skeleton
uh so not like a layered blend per bone
wood it's going to
uh it's going to um look at all these
bones that are attached to these that
are under here whereas this one is just
going to look at the root
bone but yeah that's basically the
breakdown of it
so the reason why I moved everything
back to where it was before the offset
root
bone is because one like I said the
problem doesn't seem to be as bad as it
did before uh and two because it's going
to be more performance friendly and
because handling aim offsets is a lot
easier uh when you do it before the
offset root bone when you do it after
the offset root bone it really over comp
complicates some of the calculations and
it throws stuff off like with this for
example when I tried to get this to work
uh with with all this being a post
offset root bone what end ended up
happening is whenever you would he he
would look up and down correctly if you
were looking forward an up and down but
when you looked left up and down it was
inverted and that's and that has to do
with the way that it was currently being
calculated and the fact that we were
applying it after the root bone was
actually being rotated so um yeah this
makes it a lot less confusing too as
well so that's the reason why I made
those Chang es uh and I will see you in
the next video

================================================================================
ARQUIVO: Unreal Engine 5_ GASP-DAO (v1.39 Overview) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

GASP_DynamicAdditiveOverlay(1.39)

- 1. Slot Manager: FindSlotActorByRef was taking in a Slot Actor and searching for it and returning the same reference, it was also renamed FindSlotActorConfigurationByRef.

- 2. Slot Manager: A Bug was fixed where if a Slot Actor was replaced with a new one it would not be attached to a socket.

- 3. ABP_SandboxCharacter_DAO: Neutral Pose was updated, swapped out with the a pose Neutral to the GASP Idle Pose.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Project Documentation: https://unreal-devop.gitbook.io/gasp-dynamicadditiveoverlay

=== TRANSCRIÇÃO ===

all right guys so we got version 1.39
It's really more of a Hot Patch than
anything but I went ahead and just
labeled it a new version it's up for
direct download and repo
access uh but the bug was is that
whenever we would pick up a slot that
that was replacing a slot we were
already holding it would actually it
actually wouldn't attach it to the
socket like it was supposed to it would
instead it would get attached to the
root down here so I fixed that as you
can
see
[Music]
so that had to do with the slot manager
the assigned slot
actor if there was already an attached
slot actor here where we're trying to
place this one then it would uh it would
cach the index of that one and then
after it went through if it didn't find
an empty one the last one that it found
that matched uh
it
would it would drop that one right here
and then it would attach the other one
but the problem was is that this wasn't
here so it wasn't the socket name was
none so it wasn't actually getting
attached properly that's reason why that
one wasn't
working now there was another slight uh
alteration I made for layering legs you
should be able to layer legs properly
now and when I say properly I mean like
like whenever you layer them it'll do
what you expect it to do but if you move
the legs it you'll still get foot
sliding because there's no transition
animation I don't have any kind of
procedural uh foot correction system set
up in here right now so over here on
the animation blueprint you'll see this
is no longer the ALS in pose this is
just a pose from the ufn it's U fn's
Idol
so that's because uh this pose would be
neutral for their
Idol so
yeah anyway that's that's basically it
that's pretty much it guys
so if you have any uh questions uh feel
free to ask uh and I'll see you in the
next video

================================================================================
ARQUIVO: Unreal Engine 5_ GASP-DAO 1.35 (Dropping Soon) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

As soon as I finish documenting it I'll release it. I would release it now but last time I did that people complained about it not being documented.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

=== TRANSCRIÇÃO ===

all right guys so I'm back with another
video I'm just giving youall an update
on this I'll be doing the documentation
here pretty soon but I am going to call
this
done so you'll see that the Motions are
quite a bit more
Dynamic uh I have a left-handed uh
pistol
here uh sometimes she stops real
suddenly I think that's the animation
the motion matching SL animation uh but
most of the time that doesn't happen I'm
not really sure what causes it to stop
so suddenly uh like one out of every 10
stops
um but yeah you'll see that uh the
weapon is unequipped and then
re-equipped whenever we
Traverse and uh that works
for any
weapon and you'll notice that for the
females the females look more feminine
now um I did just notice that there was
a well I don't know what happened to the
oh it was I had the other pistol
holstered my bad I didn't even realize
it but
yeah so I've tweaked the crap out of the
layering settings to to try to get the
best results um there's a slight little
lug jel I don't know if that's part of
uh gasp
or um or what I'll I'll look into that
later but you'll see we can uh layer two
different layers now um this is actually
being layered on uh 100% on the uh left
arm and it's
blending uh the or so of that pose by
50% and then the layering settings for
this uh arm are being only are only
being applied to this arm so that allows
you to uh stack uh stuff on the left
hand so that you can carry multiple
objects in the
hand and it'll still look good and I've
adjusted the crouching layering settings
too so you'll see they look quite a bit
better now as
[Music]
well yeah and so that's the uh
[Music]
female so I'll go ahead and show you the
other ones I've done this for the other
ones as well
[Music]
and uh the objects are treated as
blueprints now uh so that'll make uh
extending this a lot
easier uh the flashlight only has two
poses it has an Aiming pose and it has a
resting pose so
[Music]
so you'll see all the females have
feminine poses
[Music]
now now I actually spent more time on
the female poses than I did the male
poses so if you see any discrepancies
there like on the MS then I mean feel
free to fix it yourself I'm not trying
to be rude but I just put two weeks of
work into this update so if anybody
complains about it I'm probably not
going to take it uh
lightly so we have this
uh widget this uh editor utility widget
now and uh well I can't uh fire because
this doesn't have a fire function on it
uh but I can switch over to uh a pistol
[Music]
and I can come over
here and it records uh the accuracy here
it only
updates uh these per item per hand so
the item in the left hand will update
the left arm and the item in the right
hand will update the right arm that's
why the right arm is not updating uh so
um yeah so this assumes that there's
zero uh off set so you'll if you have
any offsets on your i r targeter you'll
zero that out uh fire this you can copy
this and um actually I will uh show you
right now so if I go to
the ue5
Quinn M9 this is the left
hand and I'm and I already know where
all this stuff is that's why I'm just
going to go ahead and go to
it um but if I just dock this over here
to the
side and honest honestly I like to fire
somewhere around the Horizon but if I
zero this out and fire the gun you'll
see how inaccurate it is I can contrl C
this and then shift left click there and
then fire again and there you go that's
all there is to it now it's very easy
um
the widget
is well I'll have to find the widget
because I'm not exactly
sure I thought I put it in a uh easy to
find place but apparently
not oh okay it's under held objects
widget yeah so I guess that makes sense
but I'm probably going to move it
actually over into the blueprints folder
yeah
so
um yeah that's
fine it's just it's telling me that
because I have it docked over here so
the next
time I open this it may not be docked
actually it looks like it already closed
it so what you would do is you would go
enter this uh widget folder under
Blueprints and you'll right click and
run editor utility widget it'll open
this up
you can uh dock it off to the
side if you
want like that and then there you
go so that's pretty much it I'll go
ahead and save that even though I don't
really need to but I'll go ahead and
start showing you the rest of these you
got your uh and yeah I don't have it set
up so that those get destroyed
automatically uh whenever you switch
characters um I'm I'll probably fix that
before I uh push this update it's just a
matter of like adding uh the destroy
stuff to uh the on Destroy event for
that
[Music]
character and you'll see how accurate
these guys are and then it just takes
one little click and boom you have 100%
accuracy so this was uh one of the
people that uh they kept that I've had
people complain about a lot so I've uh
fixed his posture uh the best I can now
this stuff right here like uh it looks
real blocky right here that has
something to do with the way they
weighted this character they did a
really whoever waited this character
they did a really poor job on weigh it
um I'm not going to lie that's probably
why they gave it away for free in fact
if you look closely uh some of his arm
is actually sticking uh sticking through
right here and that's because they
layered his clothes uh when they
probably should have removed that stuff
underneath that wasn't visible but they
left it there and that's one of the
reasons why the waiting is so bad uh
because I think they tried to weight it
so that uh they could keep it layered
without it sticking through but that's
almost
impossible so anyway if you see any
problems with him feel free to fix it
yourself I spent four hours fixing his
poses so that you guys wouldn't complain
so like I said if you have a problem
with them anymore then you can fix it
yourself because I I put a lot of work
into fixing that so you guys wouldn't
complain about
it so here's
uh the
uh killing
[Music]
[Music]
guy yeah so I can come over here and I
can show you these guys
[Music]
so I'm not I don't think this updates if
I switch
characters okay it does update I but I
wasn't sure if I had uh uh updated it
set it so that it would update but it
does
so there's
[Music]
the oops okay so it didn't update right
there
so there we go so I don't have it
updating whenever uh it switches from
female to male up apparently I'll
probably fix that before I push
it all right but yeah so
anyway I mean there you go guys I don't
see why anybody would have any reason to
complain
anymore um to be honest with you uh the
females look a little feminine now I
mean they may they may not look like
super feminine uh I mean I don't I think
maybe they they might be border Ling too
feminine uh
so um
yeah that was about as feminine as I
could make them uh I kind of ere
exaggerated it a bit as you can see but
I hope that
uh appeases you
guys but yeah anyway I'm going to get
started on the uh documentation now well
I'm going to try to fix those bugs first
and then I'll start on the documentation
and I will see you guys in the next
video

================================================================================
ARQUIVO: Unreal Engine 5_ GASP-DAO V1.43 (Overview) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

GASP_DynamicAdditiveOverlay(1.43)

- 1. ABP_SandboxCharacter_DAO: Turn In Place Bug - GASP by default without foot locking has a sync issue between the OffsetRootBone and the Turn In Place Animations. Since I have disabled Foot Locking it was sliding for 8 frames during turn in place animations.

- 2. ABP_SandboxCharacter_DAO: Aimoffset - Jerking weapon while aiming, this was addressed by considering the Offset Root Bone (It Still Jitters during the turns so I may end up refactoring this later in an attempt to address that)

- 3. ABP_SandboxCharacter_DAO: Aimoffset - There was an issue with having no control over the Aimoffset in cases where we were linking a layer but we were only layering onto an Unarmed State.

- 4. ABP_SandboxCharacter_DAO: Aimoffset - Custom Aim Offsets have been brought back, you can disable overriding the Aimoffset when a data asset is loaded as a Secondary Layering and you can choose to assign  custom Aim Offset poses or leave it as the Default Universal (Good For Some Cases but not adequate for other's)

- 5. ABP_SandboxCharacter_DAO: Aim Offset Interpolation refactored, still basically the same approach I just made a few subtle changes.

- 6. AC_SlotManager: HolsterItem had it's Item Reference parameter removed since it can be grabbed from the Items In Hand and some people may want to call this from outside the Slot Manager.

- 7. BPI_SandBoxChar_BP: Had an unused BPI Function removed that was refactored during an earlier update and was no longer required.

- 8. CBP_SandboxCharacter_DAO: Bug related to switching by index using the input keys from Rifle to Left Handed Items was fixed, and Replication was setup for them

- 9. Redundant Files Removed: These were mostly unused Poses and Level Sequences (Still in the project but moved out of the DAO folder so that they are removed from the Repo)

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Project Documentation: https://unreal-devop.gitbook.io/gasp-dynamicadditiveoverlay

=== TRANSCRIÇÃO ===

all right guys I'm back with another
video so in this video I'm going to go
ahead and go over some of the changes
that I've
made uh so for one um the aim offset is
by default disabled whenever uh you're
in an unarmed uh state so if your held
object state is set to unarmed then
uh then
you're well your a
animation will be the default gasp
animation uh for aiming
so now the there's three custom aim off
sets in here now and the rest of them
still use the universal one so this is a
custom aim
offet nothing real special about it um
this is a this is the universal aim
offet uh this is the the Dual welding
one uses the universal aim off
set
um uh when he's holding a pistol in his
right hand and a flashlight in his left
hand it uses the universal aim
offset however if
uh if I only equip
the if I only equip this FL flashlight
then it's using a custom aim
offset and if I equip a left-handed
pistol then it uses a custom aim
offset so that's basically uh the
rundown on that now uh I did introduce
um because a one person brought it up in
the Discord and then a lot of other
people started asking about it so uh Liz
morney uh originally was asking me about
uh fixing that problem where it kind
where the pistol jerks a bit whenever
you're rotating like this as you can see
it's it's jerking uh now it's going to
do that on the state machine version
because uh I've only uh actually
addressed this
for uh
the
um motion matching version so this is
the motion matching version you'll see
it doesn't really uh jerk
like it was it does Jitter uh I'm still
not sure why why it Jitters uh this
should have uh done it but it could have
something to do with how the the offset
root bone uh gets updated and uh so the
jittering was worse than this and I
fixed it I realized that the reason why
I was jittering real bad uh was because
uh it was because of the order of
operation so I'm wondering if
maybe if maybe uh the offset root bone
uh that were being fed from C++ on the
back end if maybe it's not a single
frame behind and if it's a single frame
behind then that would ex that would
explain why we get that jittering
uh whenever uh even after having uh
taken that into
consideration because like I said
whenever uh before it was jittering even
worse than this whenever I was uh
turning and that was because I was
actually
grabbing
the the cached rout
offset that was being updated after I
was performing this
calculation so the jittering definitely
has something to do with order of
operation and how old the data is uh so
it does still Jitter a little bit and
I'm assuming that might have something
to do with the way that they're uh
updating the offset root bone because
they give us a
pretty they just give us one way to grab
the offset root bones
transform and that's right in
here we call that off offset root uh
node anom node reference and that's
referencing uh the referencing this node
based off of the tag that we gave it
which is offset
rout and we're and we're calling a a
function that they've exposed to us
called get offset root
transform so this is the latest
information that we can possibly get on
this and this is blueprint thread safe
which means
that this gets updated before the ANM
graph
does and as you can see I've moved my
stuff so that it happens after this
because inside of
here that's where I'm actually uh
caching that y value here and then
performing the
calculation and that calculation right
here is based off of uh the difference
between the last
frames uh the last frame
and the current
frame and I'm still interp interpolating
it so the interpolation it could have uh
something to do with
that that
jittering but I've actually sped up the
interpolation speed to 250 it was
200 only if we're WRA in
around am I updating
this or am I am I changing this to be
200 which is
lower but when we're doing our turn in
place it is possible that this value
actually could be greater than 125 so
that could actually be what's causing
that remaining Jitter I'll have to look
into that guys so moving on um
this I did not mean to push that so I
did push that let me uh fix that
actually I think I pushed that maybe I
didn't push that okay I didn't push that
okay anyway so I was going to take
another route here with that but uh it
ended up not being
necessary I'll explain to you so in your
uh link denim uh set you have your pose
set here now and then you have your aim
offset pitch uh so right here you'll see
I've assigned custom ones by default
these will be filled out for you because
if we come back over here and we select
this you'll see by default it uses that
Universal aim
offset uh so take note of that if you do
not set this by default it'll use the
universal aim offset now there's one
other thing you need to know about is
can secondary override the aim
offset so if you if this was for a dual
uh pistol welding and you wanted to a
custom dual welding uh pistol enem set
and you wanted
to have a custom aim offset for that
then you would want this to be true
actually no no because the Dual ones are
actually loaded as primaries okay there
there may be some use cases for this
right
here I have not yet found one uh so if
we come over yeah so with a pistol left
I have that disabled because I do not
actually want it to override it but you
can override it and by default that's
actually true I should probably have
that set to false by
default the uh
so I'm actually going to set that to to
false by
default so by default that'll be false
but if you set that to True over here on
the animation blueprint on the event
graph
uh you'll see if that is true then it'll
update the aim offset
pitch uh right here and and I'll go
ahead and explain to you how this works
so these are enim sequences and these
should just be singleframe
poses they shouldn't be animations they
should just be single frame poses if we
come over here to the universal aim
offset you'll see I have a blend space
here this isn't a regular blend space
like what you make inside of here it's
not this kind of blend space or the
Legacy blend space
1D uh if I can get my menu to stop
flip-flopping uh so it's not a blend
space
1D this is a an in in graph blend space
1D and so if I open it up you'll see I
can right click and I can add new
samples
here and it actually adds graphs here
much like what you would see if you were
creating a um State
machine so under
our yeah under our animation
layers you'll see under the universal AO
we have the AO pitch and then we have
these here and these look just like the
uh State uh setups on state
machines and that's basically what it is
and so in here I initialize it with a
inertial
blending uh and I set the explicit frame
to zero it should already be set to zero
so this is kind of irrelevant but this
only fires once this right here uh now
the update is what fires on a tick so on
the tick if this
changes uh to something other than what
we are currently playing then we'll
change it
and apply inertial blending we can only
use inertial blending uh from this setup
we can't use regular
blending so that's the only uh option we
have as far as
that and that's basically what we're
doing on all
so uh and now also by
default if we come back over to our
function you'll see I organized this a
little bit better now it's not just one
long thing going across the
screen so I'm cashing our held object
State and our unarmed uh gameplay tag
whatever you've set that gameplay tag to
be that's going to be your unarmed
gameplay tag I don't see why you would
need to change it from the default but I
yeah I don't know I can't predict
everybody's needs
so over here we're just checking to see
if both of these are set to the unarmed
gameplay tag if they are then we're
going to assume we're going to assume
that they are unarmed and if they are
not unarmed then we can enable the
custom aim offset this used to be enable
Universal AO I changed it to custom aim
offset because it made more sense now um
and so so over
here this right here will switch us back
to the default gasp a offet if we're if
we're um unarmed if we're not unarmed
then it'll uh play this one and I should
probably rename this uh right here
to custom aim offset
too but I'll just leave it like that for
now
um actually I guess I could just go
ahead and rename
it I don't know if this will break
anything
though I don't think it
will it will
yeah it broke
that that's
fine all right so moving on okay um I'll
have to push this too before I actually
publish
this so yeah the turn in place uh bug
gas by default without foot locking has
a sink issue between the offset root
bone and the turn and place animation
That's What Causes That jerking uh or
that's what causes foot sliding uh so I
did fix that um it's not noticeable in
gas because I use foot locking if you
turn the foot locking off you'll you'll
see it right away so for eight frames it
slides in place whenever we before we
actually start turning in place uh so I
fixed
that the aim offset jerking weapon while
aiming this was addressed but it still
Jitters a little bit I'll try to look
and see if I can uh address that slight
jittering like I said it could have
something to do with the fact that I'm
interpolating in here uh that very
likely could actually be the cause of it
of that little bit of jerking uh
jittering or
whatever but it looks a lot better I
think than what it did
before the aim offset there was an issue
with having no control over the aim
offset right so whenever we were in an
nonnormed state it was still applying
the universal aim offset that has now
been addressed alongside custom aim
offsets which have been brought
back uh and so yeah some of these like I
said are still used in the default
Universal volum offset some of them
aren't
a offset interpolation was
refactored um if I can find
it yeah and so that's basically the only
thing that changed on it right
here also I'm
interpolating u a float value now not
not an entire
Rotator because interpolating a float
value is most likely going to be
cheaper the hster item on the slot
manager had its item reference perimeter
removed uh right that was a redundant
thing that wasn't really needed per
se uh I don't think it would really I
don't think it was really
saving anything relevant as far as
performance wise to do it the way that I
did it but it was preventing people from
easily calling this from outside the
slot manager which was why I made the
change had an unused blueprint interface
function right I removed that bug
related to switching by index using the
input keys from rifle to left hand item
was fixed and replication was set up set
up for them right so whenever we would
switch from the rifle to the left-handed
pistol he would still be holding the
rifle it wouldn't update that properly
it was also not replicated uh so uh over
here on the character blueprint under
the do slot input you'll see this helper
function right here that I'm calling uh
on these instead so that we can update
these
properly with replication cuz this gets
executed on the server this is basically
the client only the client can can fire
input actions on their machine uh the
server will not uh mirror this and so
the client needs to tell the server hey
you need to perform this
action and that's what this
is so yeah so anything related to the
slot manager it has to be fired from the
server
and that's basically it now I'm going to
remove some stuff in here that I'm
actually no longer need uh actually no
longer
need I hope I wasn't using
that but anyway okay guys I'll see you
in the next video

================================================================================
ARQUIVO: Unreal Engine 5_ GASP-DAO V1.48 (Overview) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

Download the Compiled Demo: https://drive.google.com/file/d/1fEVGe-VowC6pv4cvVsIViT49qtqUXjfE/view?usp=drive_link

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Project Documentation: https://unreal-devop.gitbook.io/gasp-dynamicadditiveoverlay

GASP_DynamiceAdditiveOverlay(1.48)

- 1: ABP_SandboxCharacter_DAO - Foot Locking Reintroduced as well as some code from the Latest GASP Hotpatch which was missing from the Anim Instance.

- 2: Rifle - Attachment was moved to the front, character sockets were added to accommodate it and an animation Montage which makes use of it was created.

- 3: Pistols - Left Hand and Right Hand Equips were Redone for smoother blending in and out.

- 4: Flashlight - Equip Montage was created and setup.

- 5: AC_HeldObject_Master - 
  5A. Delayed Attachment when dual equipping was causing an issue for live retargeted characters using sockets since their held object offsets were being applied after the first attachment but before the second attachment. This causes a stuttering effect when attaching the second pistol. 
  5B. I also fixed a bug with the Montage Interrupt where it was not considering both the secondary item's montage and primary during two item handling.

- 6: CBP_SandboxCharacter_DAO - 
   6A. Fixed a bug related to switching characters which would throw errors in the background, Items are now simply destroyed when we switch characters.
   6B. Traversal Interruptions from external sources such as when reloading during an equip would prevent the Auto-Equip after the traversal from working properly.
   6C. AreItemsBeingHandled Blueprint Interface Function - This is used by the guns to check to see if the items are being equipped before we allow reload and fire montages to play, if it interrupts the equip it will cause them to be re-holstered.

- 7: AC_Gun - Logic to prevent Reload being interrupted by fire montages or by Reload montages, also some logic to ensure it doesn't interrupt equips was put in place.

- 8: Linked Anim Layers - Now cache MainAnim values rather then directly calling values from property access, this prevents log warnings when linked anim layers are first initialized it happens before they are linked, causing Null References to fire from the AnimGraph due to the fact there is no Main Anim BP yet.

=== TRANSCRIÇÃO ===

Actually, let me
see. Oh, I thought it was going to show
the uh frame rate, but for some reason I
it's not. Probably because I'm
recording. Um anyway, so um if we're
equipping and we try to reload, uh it
won't let us uh reload until after we're
finished equipping. I'll go over that.
Uh, also if if we're reloading, we won't
be able to fire until we we're done
equipping. Okay. Uh,
so now there was another bug, too. Uh,
because that was a bug uh I had
overlooked. If the reload or the fire
montage got played uh while equipping,
then it would cancel out the equip and
it would cause the the items to be
reholstered. Uh it would also uh have an
effect when traversing. If you tried to
reload or fire after a traversal and it
was equipping, it would break the auto
traversal and it wouldn't it wouldn't
re-equip the item. So, I fixed that
problem. It'll re-equip it. There was
also another problem where
um where if
uh where if uh you started
uh
traversing after the first re-equip
while the while one of the items was
being re-equipped. Uh and it it only
happened whenever you were uh playing
each of the items uh montages
individually. So, you seen I was drawing
the the gun out. Normally, uh before I
fixed this, what would happen is after
you would get back up to the top, uh he
would not be holding the flashlight,
only the pistol, but his flashlight
layering data would still be applied as
secondary uh layering data. And so, what
would happen would be your arm would be
stiff and down by your side, your left
arm would be. So, that's fixed.
Now, uh everything else has pretty much
been flushed out. So, you'll notice that
we have
uh uh I think there's one little problem
with it looks weird whenever you
um I I may look into that. I'll probably
fix that in the next update. But if I do
this and then I holster, you'll see how
it looks. It looks kind of weird on his
left side whenever he's holstering his
right pistol. I'll look into that uh and
maybe fix that the next update. But
anyway, yeah, so we have uh this uh
flashlight holster and unholster. We got
the rifle on the front now uh because
it's easier to manage for live
retargeted characters which use sockets
uh and I can't manipulate sockets. Uh so
that's the reason why I took that
method. Uh now on your live retargeted
characters, if you don't get the items
placed just right uh for where they're
reaching at, then there'll be a little
pop as it attaches. On my character, you
won't see that because I've got it uh
perfectly placed where it needs to be.
So,
uh some people have asked me why I don't
use IK. I just feel like IK is overused
and if you can get away with with uh
using it uh then you should and in most
situations there's actually better ways
to approach things rather than just
relying heavily on IK as you know like a
crutch. So I don't I like I try not to
use IK as a crutch. Um but anyway, yeah.
So, I think that uh really uh helped the
system feel better. So, now I'll go
ahead and uh go over the changes with
you. Uh you'll find the demo and the
server shared files. I'll start putting
it down in the description as well. Uh
the server file update. Uh this is the
changes that I made. Uh so the foot
locking was reintroduced and there was
one little thing that was missing from
uh the animation blueprint uh from after
they released that second hot patch post
5.5 release. So 5.5 was released, gas
was released alongside it and then gas
we got two uh additional updates after
that. Uh, so
yeah, and one of them I think one of
those post 5.5 hot patches I think
introduced that bug where if you spam
the keys uh the character starts
glitching out. Uh, like I said, it's a
database indexing issue. I won't worry
about it. I'm sure they'll fix it. Like
I said, and when you compile your
project, it won't do that in your
compiled project. So just be aware of
that, you know, don't because there was
this one guy, you know, this was the
hill he was going to die on
and and he he was convinced it was my it
was in my project. I investigated it and
as you can see, I got to the bottom of
it. It is a bug in Unreal. So there's
nothing I can do about Unreal Engine
bugs. Anyway, so moving on. Um, I'm
supposed to be showing you the, uh,
change I made to the animation
blueprint. So, if we come in here,
uh, the foot
placement, this right here, I
disconnected these and reconnected this.
Uh, these have foot locking enabled.
You'll see that right here. The lock
type is pivot around ball. Uh, on
these, it's set to unlocked.
Um
so there's that and then there was one
other
change right in the mm interrupt
mode. Uh this logic right here. So
before it was like this. Uh so what this
does is it allows any time
uh
that our gate has changed since the last
frame and we're moving and we're on the
ground, it will allow us to interrupt on
that database change. So, if the gate
was was run last time and now we're a
walk
um and we're
moving
then then uh it it'll interrupt it
basically. Um, in some cases, if you
don't interrupt your database on uh
whenever you change your database to a
new database from your chooser, if you
don't interrupt it, uh that then it'll
continue playing the animation from that
last one. Uh or it'll just start wigging
out. Uh so that's what that's what
that's
for. It can cause stuttering as well.
So, let's
see. Delayed attachment when dual
equipping was causing an issue for live
retargeted characters using
sockets. Uh, right. Since their held
object offsets were being applied after
the first detachment, but right, this
caused stuttering.
So, right. So on the
AC hellet object master, that's where
that change
uh Yeah. So that's where that change was
uh
done. And sorry, I'm zoning out here a
little bit for some reason. I guess I
didn't sleep well last
night. But basically there
was over here I was uh updating both
items as soon as uh the first as soon as
uh this one or this one was getting
called it was updating this but it was
updating this before the second one
finished PL finished attaching its its
item. So for like one or two frames, uh
this will have already been updated and
the offset on the item in relation to
whatever it was attached to would have
been applied and that would have been
applied before it was actually attached
and that was what was causing that
little hitch whenever it would get
attached to the live retargeted
characters uh sockets. Uh it was because
I was doing that. So now it I'm no
longer doing that. they're updating
themselves on an individual basis as
needed. Uh so that eliminated that
problem. I was doing it that way because
I was trying to save just a little bit
of performance, but um I I might still
go back and refactor it so that I could
still do it that way. Um just to save
just a little bit of performance. It's
probably uh not going to be a lot saved
there, but uh anything helps. So, I may
go back and refactor that uh so that we
can still handle those updates on an
individual I mean on like just once
rather than having it happen uh every
time an item is attached uh during the
dual handles. But for the time being, uh
I'm just going to do it that way because
it was easier uh to do that and I was
trying to get this update
out. So over here on the character, I
made some slight changes to the way I'm
handling uh this right here. I was not
unbinding this from the on montage end
event. Uh so there would would be some
cases where it would keep firing this.
Uh that's why I unbind it right here
after it's done only when it has
finished without being inter a montage
without being interrupted. So
uh I have this boolean here now and this
prevents uh the last items in the hand
from being cleared uh if we interrupt a
uh an equip with a second traversal. So
if we enter, if
we auto holster traverse, and then we
start auto equipping, but we traverse
before it's done, uh, this will make
sure that those items don't get cleared
because they're not attached in the hand
yet, uh, to the hand yet. And so after
the second traversal ends, it'll make
sure that we can still grab those items
and re-equip them. So that's what that's
about. Uh this right here,
uh basically this right here fires
whenever the second one interrupts it
because when the second one plays the
hands will be empty and so it'll play
play this which means this is still
false but we need it to be true. So when
the ons reversal end uh fires this will
still be true and it'll auto equip. So
that's what that's
for, right? And there's one more one
more thing. So I added a blueprint
interface function call uh for the items
or items being
held. And this is going to grab the
references to the objects being held.
And then it's going to check their next
montage, which gets reset after the
montage is finished. it'll clear that
variable on those uh AC held object
masters. And so if this is valid, it
means that there is a montage currently
playing. Uh and that allows me over here
on this AC gun
uh to use this can play montage uh
function which will call that and if
that returns false then it means that we
can play the montage. Um, also I have
this added here now too so that we can't
interrupt the
reloads. Uh, so yeah. So you can't
interrupt a reload with a reload and you
can't interrupt a reload with a
fire, you know. Uh, so that's how I'm
doing that now. And then right here, I'm
just grabbing that reference which is
getting set right here. uh whenever we
run this
check
and yeah so that's basically it. So I
just I just showed you everything. Uh uh
like I said you can find the demo here.
It also be down in the description. Uh
and you can always check the server file
updates right
here. But yeah. Okay. Okay, I'll see you
guys in the next

================================================================================
ARQUIVO: Unreal Engine 5_ GASP-DAO v1.46 (Overview) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

GASP_DynamicAdditiveOverlay(1.46)

- 1: CBP_SandboxCharacter_DAO - Reworked Pickup Logic to use a Trace System. Removed Explicit Actor Casting for Items.

- 2: AC_SlotManager - Removed Explicit Actor Casting and use of Blueprint Interface Functions, we now directly call functions on an Items Actor Component if it's available. Some minor bug fixes were also addressed in regards to picking up items in different ways.

- 3: AC_HeldObject_Master - all logic from items were moved into this but Choosers can't be handled from an Actor Component since I can't reference them, and so that logic will remain in the Item Blueprints for now.

- 4: AC_HeldObject_SlotActor - This was the additional logic needed specifically for slot actors.

- 5: AC_Gun - This was the firing and reloading logic for the guns, making it a component makes it easy to remove or replace and prevents duplicate code between Actors that use Static Mesh's vs those using Skeletal Mesh's.

- 6: BP_HeldObjects_Master - Refactored to use Components and have a specific Primitive Component type as it's root. This was required for both Proper Collision During Pickup, to avoid Attachment Issues, and to Properly Replicate Physics across clients.

- 7: PDA_ItemData - This was removed, the ItemID is now stored on the AC_HeldObject_Master.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Project Documentation: https://unreal-devop.gitbook.io/gasp-dynamicadditiveoverlay

=== TRANSCRIÇÃO ===

All
right, guys. So, first off and foremost,
this is a client on a dedicated server.
Uh you'll notice that the uh physics is
properly replicated now. So, I'm using
the new uh reimulate uh model that was
introduced in 5.5. I believe they
briefly dis discussed that in relation
to Fortnite. So, I think Fortnite uses
it.
So you'll see that everything is being
replicated. Now if I have to put an item
away,
uh then it'll run a second uh line trace
uh right before we equip the the item
that we're trying to pick up uh just to
make sure that we're still within range.
If we're outside of the range because we
kept moving, then it will not pick it
up. If we come back, we can still pick
it up, though.
So, if we pick up a holster, it'll drop
the other holster alongside any item
that was uh inside of it, but we can
still pick it back up afterwards.
So, if I say drop that one and I come
over here and I pick up this rifle, I
can put this rifle away and I can come
over here and I can pick up that other
one. And now that hol that rifle is in
that
holster. So, I'll go ahead and uh do two
clients just so that you can see it
works with two
clients. There are some issues
uh with uh this second client window.
For some reason, sometimes it freezes up
and it stops
updating. But yeah, so I can uh I can
drop an item. You'll see it's properly
replicated. Looks fairly
smooth. Uh and this guy right here, he
can pick it up.
because the other one no longer owns it.
But I can't pick up an item that's on
him. It won't let
me if it's attached to him or if he's
holding
it. Uh the other guy, he he can't pick
it up.
See, it's just not going to let you.
So anyway, so you it's all replicated
now.
Let me just switch back to one client
because it's it runs smoother that way
and you can see it better in the
video. So, right now the traversal
system uh I have to add a two second
delay before re-equipping the item
automatically. But if you want and you
pull pull up, you can go ahead and press
the key to pull it out immediately. Now,
it will be immediate later and I'll
explain to you why. I have a 2C delay
currently uh but that will be removed
later. And the reason why is because we
have this re-equip animation and when we
go to do a traversal it's going to stop
any montage that's playing and if that
happens uh then then it'll uh it'll lock
us out of our slot manager. Now I have
added a safety net for us. So
um after 2 seconds if I think 2 and 1/2
seconds if the
um is busy has not been reset to false
then it'll automatically reset itself to
false. Uh so that'll prevent us from
ever being completely locked out. But
basically like I said if uh the equip if
the unequip I mean if the equip
animation after the traversal gets
interrupted uh then it will cause that
which is why I added uh a 2cond delay.
So uh as soon as I add animation
cancelling to the slot manager system
which will be in the next update
hopefully uh then I'll be able to make
that
immediate. So, as far as the items go
now, uh if you look at the items, you'll
see that these are the root components.
That's necessary uh for a number of
reasons. If we simulate physics on the
item, uh we want the when we go to pick
up the item, we want it to be uh where
it was uh where it actually is in the
world, not somewhere else because we
simulated physics on a child and not the
root. Uh, so simulating physics on
anything but the route, it's really not
a good idea. It causes all kinds of
issues. Um, and I was kind of hacking my
way around it before. Uh, the problem is
is if we add a uh like say a box uh
collision uh
to as the root. The thing is, as you can
see here, the root of these components
are not actually the center as it would
be on a box collider. uh which is why I
it's better to do it this
way because in
reality uh the box collider would be
only covering this much of the item and
the rest of the rest the other 75% or
90% of the item would be hanging outside
of the collision and it would be
sticking through walls or through the
floor during
physics. Uh same with the pistols uh and
the rifle. Uh the pistol would only
barely be sticking out, but the rifle
would be sticking out a lot. This whole
piece of the barrel right here would be
sticking out. Uh so that's the reason
why I moved over to this method. Now,
why is the holsters uh origin way over
here? Well, because I place the origin
at where the origin of the item that
goes inside of it will be. So, if I copy
this and I duplicate this and I paste
that location, you'll see it puts it
exactly where it needs to be inside of
that holster. And that just simplifies
things in a number of areas. Uh, which
is why I did it that
way. Changing
the changing that on an item is
easy. Also, if you need to offset these
uh pickup detection uh spheres, you can.
Uh that's pretty easy. By default, I
haven't done that. So, uh there may be a
little bit of an offset, but it's not
much and it shouldn't cause any
problems. But before I update this, I'll
pro I'll probably go in there and offset
it for those
two. In fact, I can do it during this
video just to show you. But, uh what
what is this pickup detection? So,
that's the thing I'm actually doing the
trace against. I added an object type uh
pickup channel. So, if you go to edit
project settings, as long as you didn't
override uh the config files, and this
is why I tell people don't override
those um because we have this pickup
channel in here, and we have this items
channel. Now, the items channel allows
me to make sure that everything else can
block the items, uh but the items won't
block each other.
So whenever a pistol is in a pistol
holster, it'll ignore the item channel
rather than blocking or overlapping
it. The pickup is only for this pickup
sphere. And you don't need the sphere to
tick. So I have uh the uh tick wherever
it is inside of
here. There's a component tick in here
somewhere. I have that disabled so it
doesn't tick and I have it ignoring all
these channels. Well, I thought I
did. Let
me Yeah. So, let me just go to the slot
master
here and I
can set that so it ignores the items
channel.
Yeah, there we go. Yeah. So, that's
going to ignore all the channels. We
only need it to be of an object type
pickup because when we do our trace on
our
character, we're going to do it on
pickup types on pickup object types.
And you can add actors to ignore them,
but by default, anything attached to the
character currently will be ignored. The
reason why I did this is because when we
go to pick up an item, if we have an
item in our hand and we need to drop it
because we don't have a holster to put
it in, uh then running then uh the
actual equip, like I said, the equip
whenever we go to equip it, we run this
trace a second time just to make sure
we're within range. If this runs and
we're not ignoring the actor that we
just dropped, then it'll actually try to
pick up that actor. So, instead of the
one we're actually trying to pick up,
it'll try to pick up the one we just
dropped, which is why I did
that. Uh, right here, we're just making
sure this item isn't attached to
anything. If it's attached to a holster
or a character, then it will simply not
do anything. it will it'll never pick it
up or or fire the pickup logic at all.
So that's how that's handled. The the uh
gun logic has been moved into a gun
component because for the guns we need a
a skeletal we might need a skeletal mesh
or we might need a static
mesh. So I have uh these templates where
we already have a skeletal mesh version
and we have a static mesh version.
So you'll see we have a static mesh held
gun held object gun and skeletal mesh
held object
gun and then those are uh children of
these SK held object masters and SM held
object
masters. If it's not a gun, it can just
be a child a direct child of this of one
of these.
the logic inside of here is not
duplicated between them which is why I
made those actor components so that I
won't have to have duplicate gun logic
in
both. Now something you need to know is
that unfortunately choosers currently
because they're still new and maybe
they'll add this I don't know maybe
maybe they'll never support it but you
cannot assign choosers from a variable
during
runtime. So they have to be set up
pre-run time. So unfortunately I can't
in implement that into our actor
component. Because of that we have to
have that handled by the actual actor.
So if we go back to the parent and we go
to this interface, you'll see we have
this get item char data. This is the
same interface that we were using before
the BPI items. I stripped all that other
stuff off of it uh because we don't need
it anymore. What I'm actually doing is
I'm actually just having the slot
manager call those functions directly on
the actor
component. But for the item chart data,
we have to call that on the
item. So if we go to this blueprint
interface function, you'll see this is
the same logic as before, except I
actually have it on the master now
rather than the gun uh version.
So that means any item can uh just
override this right here. So you say
override this from char uh from child.
This is the one you're supposed to
override. So you go to this override and
you look for that function in the
override. If it's already been
overridden or implemented, it won't show
up in this list.
only uh things from the parent uh that
are parent functions will show up in in
this.
So on the master you'll see it'll just
print this if it hasn't been overridden.
If it has been
overridden then it'll just return this
from the chooser.
So that allows us to not have to
duplicate that underlying logic.
Instead, we can just override one
function and just drop our chooser into
it.
Now under the actor component, this is
where our item ID is going to go. Now,
so our item ID needs to be under the
item info and our actor
component. That's how I identify
it. You can uh replace
that uh if you want the item ID to be
grabbed from somewhere else. If you go
to the character, you'll see I have a
macro where
um under DAO item get item ID. The logic
pertaining
to obtaining obtaining the item ID is in
this macro so that you can replace it
from one
location. Now the slot manager also has
a macro like this that you can uh do the
same
in the slot. neither the slot master nor
the character
uh will cast directly to an actor
component type I mean an actor type
uh instead it'll just get it'll just see
if it has the actor
component and it'll get that
instead. So that might that might add a
little bit of latency but adds a lot of
flexibility for a system where I can't
determine how you guys are going to need
things to be
done. So it should add more flexibility
on your
end. But get component by class it's not
that heavy especially if you don't have
very many components in your in your
item
actor as you know we don't have that
many even in the gun we we have one
extra in the guns on the guns uh but
it's still not many and you could
actually just take away this contextual
item scene actor I'm not actually using
it right now
uh the contextual example that I had set
up. It's currently not even hooked
up. You'll see this is the uh function
for calling that
[Music]
version. I actually have not tested this
since I refactored things, so hopefully
it didn't break anything.
Uh, but I did
uh refactor this right
here and it's actually just looking to
see if it has a contextual enem actor
component and it's caching
that. So, it should still work as long
as there's uh as long as that component
exists on your actor.
So anyway, that kind of like makes
things less reliant on specific class
types, uh, which I think a lot of people
will
appreciate and it should make
it easier for you guys to like implement
this logic or stack this logic on top of
other systems that you're using if
that's what you choose to do.
Also having this gun logic as a separate
component from this allows you to just
easily discard this uh actor AC gun
component and replace it with your own
logic. So the item data is no longer
needed. We're not using that because
we're setting the skeleton uh the
skeletons or the static meshes
ourselves.
If you look on the AC held object master
though, you'll see by default it'll
automatically set up replication for you
on this
actor and it'll set it up as re simulate
as
reimulation. The physics disable delay
is 15 seconds. You can shorten that if
you feel like that's too much. it might
actually be a little too much. But if
something's under a category called
private, it means that it's not really
important for you and that you shouldn't
worry about
it. Basically, it's it's stuff that I
can't actually make private because
other uh things may need to access
these. Uh but at the same time, I don't
actually want it like confusing you and
taking up a lot of space in here, which
is why I put them under private
categories.
So that's
basically all that actually looks like I
didn't put this under category. Let me
actually do
that. I'll put
under handling.
This is mostly for the aim logic. Uh,
that's what I have that for. It's kind
of like a fail safe actually. I guess I
could go ahead and go over it with you.
So,
uh, get item aim location. That's where
that's being used
at and that's actually I believe I'm
calling that from the
character. So if we go to the event
graph actually the distancebased
function on the event
graph
then right
here this is where uh I'm using that
at. it probably would
be e uh more performant to actually grab
that item location via uh a blueprint
interface rather than the way I'm
handling it right here by get getting it
from the actor
component. Uh but again it's
uh it's I I have to try to make this
system as flexible as possible. I can't
predict like I said before I can't
predict uh people's individual use cases
or
needs. So right now the uh distance
space aim offset is still not
replicated. I have not looked into this
but I believe it's how I'm getting the
player camera
manager. Yeah, this will not include
remote clients with no player
controller.
Um yeah, I don't know. I'm thinking it's
a replication issue. uh in regards to
getting the player camera manager. So, I
I may look into that at a later date,
but basically this right here will fail
uh on on replic on on
uh dedicated servers. I know on
dedicated servers it'll fail. I haven't
tested it on a
uh on a listen
server. Yeah. So, I think that's
basically that's basically it. The way
everything else is handled, it's still
the
same. I do believe I removed all that.
Um, I'm going to move this into this
folder
[Music]
here. I feel like this should be in a
slot actors folder. Yeah. So, this is
I'm probably going to move this out of
this actor's component folder and then
I'm going to put this in that
folder. Yeah. Okay guys, that's
basically it. That's the rundown. Uh,
and I hope I covered everything.
Um, I'll see you in the next

================================================================================
ARQUIVO: Unreal Engine 5_ GASP-DAO v1.47 (English_ASR)
================================================================================

=== DESCRIÇÃO ===

GASP_DynamicAdditiveOverlay(1.47)

- 1: CBP_SandboxCharacter_DAO - Traversal Refactored to accomodate a new approach for Auto-Holstering and Equipping the items. Pickup Montages will now be skipped

- 2: AC_SlotManager - Code Refactored, Stripped, and Optimized. The changes here involved moving logic over to the AC_HeldObject_Master in regards to actually handling things that are based on Montage Timing. This was to Eliminate Timing Issues that kept popping up as bugs. A lot of unneeded things were stripped and removed as a result of this and a few new functions were added.

- 3: AC_HeldObject Master - Item Handling related to timing and multiple Holster/Equips were brought over, dropping them is now handled by them based on if a holster is referenced. They now directly reference the Actors themselves but some of the logic requires some of the functions from the AC_HeldObject_SlotActor.

- 4: AC_HeldObject_SlotActor - Functions were stripped and Item clearing happens when dropped. The SlotActor's will wipe data from the items attached to them when they are dropped, some changes may be made to this later as I am sure I did some things that I probably meant to undo and forgot.

- 5: CharData Choosers - Now store Soft References which will result in Block Loading, this could cause hitching if the packages become large. I would suggest not loading them down with Nanite meshes and things that will bloat their size. If you need to add things and it ends up causing hitches try adding them in as soft references on the Data Assets themselves and then Async Load them. This would prevent hitches when the Data Assets themselves are block loaded.

- 6: Pistol Montages - I made some quick pistol Montages for the Left/Right/Dual Equips

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Project Documentation: https://unreal-devop.gitbook.io/gasp-dynamicadditiveoverlay

=== TRANSCRIÇÃO ===

All right, guys. Uh, so,
um, yeah, I had one little problem and
it cascaded into a series of problems
and I finally resolved it, I think. So,
uh, that's why I'm doing this, though.
So, if you see, we can do um, we can do
a dual weld and, uh, a dual
unequip. If we
switch then it'll do them one at a
time.
So anyway, we can uh cancel these while
they're playing or we can double tap to
skip them. And that's when you're
pressing the uh one for the right
pistol, two for the left, three for the
duel, four for the rifle, and then five
for the flashlight. But we can also
cycle through these. And by default, the
cycling will not have uh these montages
on them.
Now, I'm going to have to do a video
breaking down
the changes that I've made in the
workflow as far as the item handling
system. Now, this primarily
um primarily affects
the AC held object master and the AC
slot
uh master, which is a child of the held
object master. and
then the AC slot manager. So, moving
forward, uh, we should be able to
traverse as much as we need and then
he'll still pull it out and he'll pull
it out immediately. Now, there's one
thing to note is that the tail end of
these uh animations right here, uh they
have a uh somewhat of
a of a saddle on the end of them. So, if
you want to clip that off, then uh he'll
pull the pistols out faster after he
gets up. Uh but you won't have, I guess,
as good of a settle whenever you come uh
out of that. So, just let that be known.
it it actually won't matter anyway if
you start moving immediately after you
get up because there's actually a window
there where they actually allow you to
cancel it. Uh
so if you just start moving when you get
to the top then it automatically cancels
out and help draw those items.
So So also I want to show you you can
drop these and I'll pick up the left one
first.
and it puts it in his right
hand and it'll still
work. And also now this is the bug that
that I kept trying to fix and it kept
causing all kinds of different other
bugs. So if I press the back space or
the backlash uh right above the enter
button
uh it'll drop the right holster. That's
just for demonstration
purposes. If I come over here and I pick
up this and I holster a pistol in here.
Now, that's a right-handed pistol. But
the pistol on the ground is still
currently a right-handed pistol uh until
we pick it up. And then whenever we pick
up the holster, it'll update that so
that it's a left because that holster
got put on the left. And now you'll see
it still works. So that was the bug. I
was trying to fix before because what it
was actually doing is it actually wasn't
updating uh the pistol data properly. So
that was causing as you can imagine a
number of issues and every time I tried
to fix it I would approach it in what I
thought was a good way but and it ended
up not being.
So anyway, there was also a bug whenever
I would do that uh and it would prevent
me from but that was that bug was
actually related to the same bug I was
just describing to you. So yeah. All
right. So anyway, you should be able to
spam these keys all you want and it
shouldn't break it. uh and there and
I'll just go ahead and briefly I won't
go into a detailed overview of this uh
new uh setup, but I'll do that tomorrow.
Okay. Uh I'm pretty burnt out today
because that stuff that kept breaking it
got my nerves on edge. So,
um so yeah, all the item handling
happens right here now. and we're using
an enum called item handling state
uh to keep track of things. It was
either that or I had multiple booleans
and it just made more sense to since I
since I didn't want to be in a dual
welding state if I was in a se uh two
separate handling
state versus a single state and I didn't
need three I didn't want three booleans
so I just went with an
enum and so you'll see all this stuff
here pretty complicated setup uh but at
the same time it also
reduces the
complexity. It just seems it may seem
more complex, but it
isn't. We have that montage cancelling
right there. And this is our uh safe
exit and our montage interrupt, which
calls the safe exit.
So, and that cancels out the montage and
it handles everything appropriately so
that whenever we cancel the montage,
nothing breaks. That's basically what
that's for. And that's also the reason
why if we come over here to this graph,
you'll see we have these dual equip and
dual unequip events. Now, you can pass
the you can call these with or without a
second item and it'll still work. Uh, so
let that be. Now, if it doesn't if the
second item doesn't exist, it'll just
treat this as a single
item. And also, they don't have to be
the same uh the same item. So, they
don't have to be dual welding pistols.
You could call this uh and pass it a
flashlight as the second item reference,
and it'll handle it appropriately. uh if
there's a montage on both of their data
assets, their character data assets
that is the
same then
then yeah, so if both of them have that
same montage then it will play the dual
welding or dual unwelding
uh depending on if they have a dual
welding or dual holster. If there's a
dual holster, it'll just treat it'll
just uh do the holster
logic. So, we don't actually have
holstering montages yet. So, I haven't
thoroughly tested that. I can't promise
you that there isn't any bugs in that.
Like maybe something that I overlooked
right here in this logic. Uh but the
logic is not complex. If you find a bug,
uh maybe you can send me the animation
or maybe in whenever I go to do do the
next update, what I'll probably do is
I'll just assign the equip ones as the
the holster ones just to see if it still
works or if it
breaks. So, um it shouldn't break
though, I don't think. But I can't be
100% sure because I haven't tested it.
So we have these events here and I know
these are a little confusing.
Uh but
basically all this all this data right
here the attach actor the attach actor
socket name and the assigned hand and
the assigned
item which is the holster and the
holster socket name. I should probably
call that assigned holster. Um, and then
holster socket name. Those all need to
be updated and then they need they need
to kind of be cleared afterwards as
well. Uh, if you don't clear them, it's
probably okay as long as you're always
updating it whenever they they get
picked up. But that shouldn't really be
something you should have to worry about
because I've handled all that in here.
So, you'll notice that this looks quite
a bit less complex. Now,
uh some of these events are still here,
but
um they're just sharing this one event
here. And then we have this right here.
This is a new function right here. And
it allows you to pass in two actors. The
first item actor has to be uh a valid
reference, but the second one does not.
Okay. Um and it's going to call this.
And basically what it's going to do is
it's going to uh cache this actor
component. And if it's not valid, if
this isn't valid whenever we go to
equip, then it'll only equip this one.
But if this one is valid, then it'll
also equip that
one. And it works with this too. If you
want to if you want to uh pass them in
by slot item config or slot
configurations, you can do that too. Uh
I'm still using this one right here. Um
but I'm using this one for the
traversal. So, if we come back over
here, you'll see
that on this
one. This isn't
it. Yeah. So, on
the traversal end here, and it looks
like I have some leftover
stuff. Um, I'll delete that before I
push this. So, whenever you get this,
that won't even be in here. It'll look
like
this. Yeah. So, we're just checking the
items in the hand. Make sure they're
valid. If they are, then we pass it into
here. If not, we just don't do
anything. And that takes us over here.
Yeah. But anyway, guys, uh so I'm gonna
get this uh video out to you uh and I
will release the
video going
over
the new workflow of the system. It's not
really hard. Actually, you know what?
I'll go ahead and do a brief little uh
rundown on
it. So, let me just cover
that real
quick if that way you know I don't leave
you guys hanging. Uh, so I've organized
this a little bit better as well. I've
done a lot of clean up in here. But if
you come over here to the handling right
here and you go to the equip and the uh
holster, you'll see that I have a new uh
like kind of categorization for this
stuff right here. Uh, so now it's it's
equip.handr equip.handl
equip.duel. And then if we open up the
this right here and we go to one of
these montages also uh I'll go ahead and
cover this part right here. So I talked
about
uh uh chain dependencies. So these are
being stored as soft references which
means well you can't async load because
uh there's no way of of creating a soft
reference here but you can still have uh
these assets here. You can still have
these assets as soft references. And
what that means is that whenever they
get chosen by the chooser, then they get
block loaded, which means they just
suddenly get loaded and that can cause
hitching if you have a lot of data in
here. But these montages and animations
are fairly small and so it shouldn't be
a problem. Uh, as far as that's
concerned, all this data, it's just it's
it's mostly just uh small uh bits of
data. So, but it adds up over time. So,
at least there's that. If you guys uh
ever have any hitching related to that,
let me know. But these choosers, they
only get loaded once.
Um and they don't get loaded again until
the the character uh
switches. So, until a different
character is holding them. That's the
only other time it gets
changed. So, anyway, um let me see.
If I open this up right here, you'll see
that we have this right here. And this
is the attach hand. And that's what it
needs to be called. Attach underscore
hand. And if you come back over and I
have to do any windows open, let me just
start closing out of some of these.
So if you come over
here, you'll see these are the notify uh
names that it's going to look for.
Attach underscore hand or an attach
handel. So it's going to attach uh the
left hand whenever this one fires and
it's going to attach the right one when
this one fires. It was important for me
to do it that way because whenever we're
dual
clipping. Go ahead and show you
that we
uh in reality people don't grab things
at the same time. So I had these being
grabbed at slightly different
times. So I have an attach event for
each of them. And then that gets handled
on the AC held object
master. So if we come back over
here, you'll see this is just checking
to see which one it
is. Oh, it's checking to make sure it's
one of those events. If not, it's not
going to fire
this.
So over here, it just checks to see
which one it is.
If if it matches the one assigned to
this, then
uh if it matches the hand assigned to
this,
then it'll do one or it'll do the
other. And that's basically it.
So, um, yeah, tomorrow I'll do a more
in-depth breakdown of all
this
logic so that you guys can get a better
handle on
it. Oh, yeah. I have this
filtered. Yeah, these are all the events
right here that you can take advantage
of. Uh mostly on task finished is the
one that that fires after both
items. If two items are being handled,
it only fires after both items have been
uh have finished. Otherwise, if there's
only one item, it'll fire after that
single item is
finished. But yeah. Okay. I'll see you
guys in the next

================================================================================
ARQUIVO: Unreal Engine 5_ GASP-DynamicAdditiveOverlay (Major Changes And Why) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

Due to some bad actors trying to abuse my project I regret to inform you I have finally caved and went with a Paywall, I've been against this in the past. However, it allows me to enforce a EULA which basically prevents reselling this as source code, it allows you to sell it as a compiled build, but it requires you give me contribution by including my CopyRight. However, there is a clause that allows me to exempt you from this if we come to an agreement which both parties sign of on. This could be a simple work contract that allows me to withdrawal this exemption in case you decide not to pay me, requiring you by law to give me credit anyway.

Project Files: https://ko-fi.com/unrealdevop

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

=== TRANSCRIÇÃO ===

all right guys uh so I'm doing a real
quick video to discuss these
changes now a lot of y'all that have
been following me in the past will know
that I've always been against uh locking
things behind the pay wall I've had a
lot of people try to convinced me to do
it before and I've refused but due to
some some circumstances which I'll
explain here in a second I've decided to
do that uh for legal reasons and protect
myself against uh people who want to
abuse this I'll also uh briefly cover
that as
well so the videos that describe my
system will still be up and available
online I'm not taking those down uh the
update videos will still be posted the
same way they have been
before so yeah so you'll see that I have
a repo access and a direct download the
reason why is cuz not everybody wants a
repo access um and repo
access you know it's it's kind of
uh yeah it just kind of complicates
things because I've made it a private
repo
now but let me just cover the direct
download so due
to size constraints if I don't sign up
for for this as a contributor or
whatever to Kofi uh and a grade to give
them an extra 5% then they cap my
download or my upload size in which case
I can't upload the full 2.8 gigabytes of
this and so I have gotten around this
though by putting the link to the full
download right here and if you purchase
this and you don't want to run through
the setup uh and the setup is just like
the GitHub setup and I'll do a video on
that here pretty soon um specifically
for this right here but all you have to
do is copy it over into the other folder
but like if you don't want to have to
copy it over into the other folder and
then add the virtual bones back if you
don't want to have to go through all
that uh all those problems then you can
just request access to this and once
I've verified
who you are make sure that when you
request access you let me know like on
Discord and then you can
uh
um let me know what your username is on
here so I can uh verify who you are and
uh that you made the purchase but anyway
now I'm going to talk about the uh the
YULA so let's just go ahead and uh cover
that I'll briefly walk you through I'm
just going to cover this a little bit of
the this part and a little bit of this
part basically though I'll go ahead and
summarize it for you guys uh you're
allowed to compile and sell this in a
game uh and the only thing I ask is that
you uh give me credit so
this covers my BSD Clause license and
I'll go over that so inside of the
download whenever you download it you'll
see an enduser license agreement that's
what you agreed to and you'll see a
license and the license it's just a
simple BSD 3 Clause license which the
Yola ties uh uh binds you to it's just
an added layer of protection to make
sure that you follow it and that I get
uh credit for my work so inside of
here this part right here that I
highlight this is what you're required
to include you can put it anywhere uh
just make sure that you have it in there
with your uh distributed
copy modified or not that's what this
says if if you modify it or not you
still have to so I was I did have a
clause in here that allowed people
to redistribute derivatives of this but
I decided to take that out because if
somebody else is Distributing a
derivative work of of uh my system then
I can't
ensure that
they've uh acknowledged the terms of
this Yola which is why I set this up
under a pay wall in the first place uh
so that I could say Hey by purchasing
the this product you acknowledge and
agree to the term set forth in in user
license agreement so that's the reason
why I did that guys uh if you feel $5 is
too much just let me know
um so
anyway basically what's going on in here
and I do recommend you guys read this
thoroughly it's it's pretty deep but
it's only a couple pages
long but
basically uh yeah it's just saying
that that you need
to give me credit
and that you acknowledge the BSD Clause
license so anyway you can read over that
at your own Leisure um

================================================================================
ARQUIVO: Unreal Engine 5_ Gasp DAO V1.44 (HotPatch Overview) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

GASP_DynamicAdditiveOverlay(1.44 HotPatch)

- 1. ABP_SandboxCharacter_DAO: Release Root Bone Only if Aiming and Turn Threshold Exceeded a Small Value in order to allow full turn in place when entering aim while looking behind character.

- 2. CBP_SandboxCharacter_DAO: Exposed Bool Based on Look Yaw Input to determine when we should Release the Root Bone.

- 3. GM_Sandbox_DAO: Added to reduce confusion and setup for Repo and Partial Download variants.

- 4. StagingGrounds: Setup a Custom Game Mode that ensures the DAO Character is loaded by default in new projects.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Project Documentation: https://unreal-devop.gitbook.io/gasp-dynamicadditiveoverlay

=== TRANSCRIÇÃO ===

all right guys uh so I'm just going to
go over the Hot Patch so in this one I
fixed uh an issue where whenever you'd
be looking around and you weren't aiming
he would start uh turning in place also
fixed a problem where if you started
aiming and you were looking behind him
or off to the side Beyond 90° he would
uh slide around a lot so now it'll Play
the full animation if you do this
regardless of the
angle
so also if you turn real
slowly he'll still stay grounded
but uh it doesn't take much before it
starts releasing the rout if he exceeds
90° uh but I kept it low enough so that
the wrap around would be like
non-existent uh if you feel like it's
still wrapping around let me know and
I'll hook this back up uh but
basically I'm actually just leaving this
connect uh disconnected uh because it's
more performant not to do
interpolation and I don't really feel
like it's really that necessary also I'm
not doing this
either so I'll go ahead and go over this
so on the character
blueprint whenever you're looking around
I'm capturing uh this yah
value uh because X is when you're moving
the mouse left to right and if the
absolute value of that is greater than
05 then I'm just going to release the
root you can try increasing this uh if
you increase it up to
2.0 uh or around that around that value
then you're definitely going to want to
reconnect uh this right
here in fact I probably should have left
that connected like this so that it was
more obvious how you are supposed to
hook it back up but anyway you've seen
how I did it it'll be like this in the
next update so I also have this
disconnected uh I left it here in case
you want to use it or if you tweak this
in such a way that you need it uh this
is also
disconnected still this is what actually
is using that value that's being
calculated back
here so I created a blueprint thread
safe uh pure function here and if it and
if that should release root which means
basically we should release the rout if
we're aiming and our Mouse movement
exceeds
.5
threshold now this actual value goes up
to like
25.0 uh so I've seen it as high as 25
maybe even
30.0 so that's when you're rotating it
your mouse real fast that's when you're
moving your mouse real
fast
[Music]
so anyway yeah I kept that pretty basic
and if we exceed 889 Dees and we're
moving our Mouse faster than 0.5 then
we'll release the root bone and that is
bound over here to this function now I
did increase the rotation half loock to
0. five because I thought it would fix
the problem but it doesn't it doesn't
really seem to help actually uh I think
it does a little bit so I left it like
it like that at 0 five but the original
value is
0.1 and I just have this Max rotation
error bound to that pure thread safe uh
function so anyway that's basically the
rundown uh I made sure that everything
was categorized in here now so that
stuff that's related to the aim offset
will be under the aim
offset uh right here you'll find that
get Max rotation error and over here I
have it under the aim the one once
release route it's going to be under the
aim and yeah also I set these up under a
context context
anom uh thing as well and yeah that's
basically it that's the only thing I
changed on here so I was just going to
update you guys on that and I'll see you
in the next video

================================================================================
ARQUIVO: Unreal Engine 5_ Gasp-DAO (Distance Based AO) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

Distance Based Aim Offset, allows you to always point at the center of the screen, by default the Control Rotation is simply the rotation and doesn't compensate for the fact that the camera is offset behind and to the side of the character.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Project Documentation: https://unreal-devop.gitbook.io/gasp-dynamicadditiveoverlay

=== TRANSCRIÇÃO ===

all right guys I'm back with another
video so I already actually recorded
this but I thought I was recording it
but I wasn't actually recording it i'
actually stopped recording it uh
so uh by default this is going to be
turned off but this is a uh this is a
distance-based aim offset and I'll
explain to you why that's distance-based
so normally whenever we calculate the
aim offset we just get the control
rotation which is the rotation of the
camera or we get the base aim rotation
which is also the rotation of the camera
if you're player uh but anyway the point
is is that when you get that the actual
aim offset is not 100% accurate so as
you can see right here these two lines
are parallel that means if you're aiming
right here on the ground uh then he's
still going to be pointing straight he's
not going to be pointing over here on
the ground you see so he's not going to
be pointing over here he's going to be
pointing
straight also that means the projectiles
also get shot this way as well instead
of uh down here towards the center of
the screen uh with the current setup
that I have and
so I'm not going to manually calculate
the center of the screen to shoot the
projectiles to uh instead I'll just have
it set up so that the gun aims at the
center of the screen and then it shoots
the projectiles down the
gun and since that's so accurate for
this guy uh it shouldn't be a problem
for
you so anyway so I'll I'll probably have
to work on my debugger uh setup in order
to actually fix that
because right now it doesn't support
that so when you go to zero your
characters
you'll want
to you'll want to uh make sure this is
disabled before you zero your
characters and if I disable this you'll
see what it looks like uh whenever we're
not using this
method and you'll see how you'll see
that there's he's this is the center of
the screen but he's aiming over here you
see uh and that's because uh he's he is
aiming parallel uh to the line that's
shooting from the camera to this
location on the ground but that's the
problem is he's actually aiming parallel
to that he's not aiming at that location
on the ground so uh in order to achieve
that you have to run this on an event
tick uh which is why I'm going to have
it disabled by
default if you want to enable it you can
go over here under Dao aim distance and
right here use distance-based AO you're
going to want to check that also it it
uh you might want to read these
descriptions on some of these variables
too sometimes I leave descriptions uh
for you to uh explain things so this was
the method I almost went with until I
figured out how to uh prevent this
feedback loop right here on this guy uh
there was a feedback loop whenever he
would be aiming down with the pistol
only with the pistol for some weird
reason so what I actually ended up doing
is I actually ended up off setting it
back which is why if I
do this uh print debug thing right here
you'll notice that it actually starts
from behind his
hand oh it's not
enabled my help
yeah so you'll see it actually starts
from back
here and yeah so that's actually
supposed to be offset up here I don't
I'm not exactly sure why uh it's not but
it's still
accurate yeah it's still accurate so the
reason why it's
probably well I don't actually know why
it's not because it's starting at that
hand location
and then it's
ending right okay well I don't know uh I
might look into that later it's just a
small discrepancy there but oh right
basically it's because I'm getting a a
directional uh Vector pointing from the
hand to the hit location that might be
why it's still accurate I don't know
I'll have to go back and look but anyway
uh yeah so if you come over here to for
so this is going to be disabled by
default um but if you come over
here
to the held object guns and you can get
to that by right clicking and editing
this and then going to the parent right
here where this pin icon is and then
going uh into the basic projectile
that's where this uh is but this is
actually what
uh what we're looking for so right here
by default we're going to use the base
aim
rotation but right here the projectile
aim
rotation if you will be this will be
enabled by default which means we'll be
using the base aim rotation if you
disable this then we'll actually just be
shooting down the barrel of the of the
weapon now if you want to replicate this
you're going to have to replicate this
yourself and I'll go ahead and show you
how to do that so I'll just copy
this and then on the event
graph I'll just plug that into there and
then over here I'll plug that in and so
what's happening is the client is firing
this and then he's sending this
information to the server we're doing a
weak server validation just to uh make
sure that the location that he's being
sent isn't too far
away and then if it's not too far away
then we spawn the server will spawn the
projectile so that's how that works
so actually let me just come over
here and I'll make sure that's
disabled and I'll enable this and then
I'll just make sure that you guys
understand fully so this time I'll just
grab the uh rifle
so
yeah yeah anyway uh that's basically the
rundown on uh this update I'm going to
disable this and over here I'm going
to uh enable this
and then I'm going to push this now
there is another bug I'll fix it
tomorrow I'll go ahead and show you what
it
is if I come over here and pick up a
rifle and then I pick up a pistol it
drops the rifle I'm aware of that so
somebody pointed out one bug to me and
when I fix that bug it caused this other
bug I'll fix this bug later uh probably
tomorrow uh but anyway it's getting late
and I've spent almost my entire
uh Saturday on uh trying oh I've spent
half of my Saturday working on this
problem also I'm going to go ahead and
leave that Crosshair in there uh if you
want to disable it you can go to the
character blueprint and go to the event
graph and right here you can just remove
this uh so this is only there for
testing
purposes but I'm going to go ahead and
leave it in
there but yeah anyway I'll see you guys
in the next video

================================================================================
ARQUIVO: Unreal Engine 5_ Gasp-DAO V1.45 (Overview) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

GASP_DynamicAdditiveOverlay(1.45)

- 1: ABP_HeldObjectAnimLayer_Rifle: Modifications were made to allow us to enter into our state machine via Aiming State or Resting State to prevent blending issues.

- 2: CBP_SandboxCharacter_DAO: Modifications were made to the way some functions worked in regards to handling items in hand to better support switching between item sets. Also, better support was worked into weapon switching for the sake of Synchronizing Equip/Unequip Event Driven Systems

- 3: BP_HeldObjects_Master: Modified to support Equip/UnEquip Synchronization, as a result children are also being pushed.

- 4: BP_Slot_Master: Modified so that you could drop items attached consistently and with less overhead involved, it will handle the rest for you.

- 5: AC_SlotManager: Refactored to support Synchronized Event Driven Equip/Holstering. This includes the reduction of code between Pickup and Item Equipping.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Project Documentation: https://unreal-devop.gitbook.io/gasp-dynamicadditiveoverlay

=== TRANSCRIÇÃO ===

all right guys
um so I've tried doing this video
several times and I kept running into
bugs that I had
overlooked this has been a uh pretty
complex refactor so this new system now
is event driven uh for equip and uh
unequip
montages uh so this montage is actually
meant to come out into an Aiming pose
that's why uh if you come out into an
Aiming aiming pose then you know it'll
look right uh I'll probably make one for
the uh resting pose
later but one thing that you need to
knowe about these animation
montages is that for the liary targeted
characters they're going to have to be
uh modified uh for proper hand placement
if you want proper hand plac on those
characters and I'm not going to do that
right now what I'm going to do first is
I'm going to fill out all these mon uh
these animations for the character
because right now the pistol left the
dual pistol and the pistol right and the
flashlight they don't have uh montages
so uh equip montages also another thing
to note is if you don't have an equip uh
an unequipped Montage it'll
automatically play the equi
Montage uh in Reverse so if you don't
have an unequipped animation it'll just
play the equip animation in Reverse now
I didn't set it up so that it uh
supports that the other way around uh
because I only have an equip uh Montage
right now but you'll see uh that I got
this working uh
to
the uh Auto equip Auto unequip and equip
for the
traversal uh and I decided not to do a
synchronized one uh for that one so I do
have on these function well on the
freehand function the safe freehand
function uh I have a Boolean that you
can check uncheck if you want to skip
the
animations and you'll see that it'll
skip
the it'll skip the unequip animation
basically is what it it'll do uh now I
haven't exposed to that for the equip uh
fun functions yet but I may do that in
the next update uh just in case somebody
finds a a use case where they need to do
that uh as of right now I've only added
support for things that I saw we
needed so you'll also see that and this
is a client uh this is these are clients
on a uh dedicated server guys also
you'll see I can pick up right
there and now there is one slight bug
that pops up sometimes and I have not
quite identified what causes it yet
but I think after I drop it and then if
I pick it back up yeah you see so
it'll it'll pop up first I'll have to
look into that uh I tried tracking it
down and I wasn't quite able to resolve
that
also
if I equip this and do the other one
real quick there was a bug where it
was we were going into an infinite Loop
but I fixed
that so
yeah now I did see one bug and I looked
into it and it seems to actually be an
engine bug and I don't know what
triggers it uh but after the editor is
open for so long uh if you stop the game
and then you start it again your
character your character's
uh unarmed linked animal layer may not
ever get hooked up properly and I'm not
exactly sure what causes that but it
actually seems to be uh an engine
bug um
so let me just go ahead and uh go over
this I'm going to explain to you guys
how this works a lot of this stuff
inside of here has been refactored uh
you'll see I have one little function in
here that's
deprecated I also tried to um reorganize
things so that it makes more sense so I
have uh equip stuff under the equip item
category drop item drop stuff under the
drop and Holster Under The holster and
then you have your pickup
also all the stuff that I had to add for
the event driven uh is all under here as
well
so if we go to our event graph you'll
see actually I think I think I should
probably
move this
I think I should probably actually move
this over
here in case you guys didn't know why I
have this delay here it's because of the
way that their widget system switches
characters for you in here it causes uh
timing problems because what it actually
does is it actually spawns the uef in
and then it despawns the uef in and it
replaces them with another actor uh
that's the reason
why okay I don't know why those are
suddenly firing yeah
so um yeah
continue uh sorry so that made me lose
my train of thought
okay so yeah anyway so
um that's the reason why I have that
delay there if
if the character gets replaced if this
fires before the character gets
replaced the character mesh I guess
then this stuff may be
incorrect well actually this stuff right
here it'll cause the items to drop on
the
ground so it's mostly for this okay
sorry sor dra uh drawning on uh so under
the event driven uh freehand and equip
this is where stuff related to freeing
the hands and equipping items uh are
these are event driven systems you'll
see a bunch of calls on uh events and if
you look down here you'll see all the
events in
here and I could probably subcategorize
some of this stuff like this could
be and actually this one is being depr
ated so I'm probably going
to remove
that yeah I guess that would be under
holster on task finished is supposed to
fire after everything is done so I have
a locking system in
here and you'll notice that if you
select some of these basically all of
these are private all of them except
this one right here which is public you
can call this one to just safely free
the
hands uh the reason why is because I
need to uh update the busy
State and I need to make sure that uh
that none of this gets
fired and none of this gets fired if
we're already in the middle of executing
this code otherwise it'll interrupt the
chain of
events and variables will get changed
before certain events are
finished and then next thing you know
you have items falling on the ground and
you have items in attached to the hands
that aren't actually being held in the
hands or the players uh the linked enem
layers and anom sets aren't being
haven't been updated properly so on and
so forth so that's basically the rundown
on why I did
that so later on I'll probably replace
this I don't know I may keep it like
this because it makes debugging easier
and if you guys uh find any bugs that I
happen to miss this will help me debug
it uh so whenever we update the busy
state if it's been set back to false
we're going to call the on task finished
and then we're going to unbind these
events from it only one of these events
will actually be bound when this gets
called normally under normal
circumstances
because also I unbind it again here just
as a safety precaution uh just in case
there's any linger in ones uh and this
hasn't fired for some reason which that
shouldn't be the ever be the case but if
it is this will make sure that nothing
bad
happens
so yeah so I have this firing off of two
different things simply because of the
signatures of my events they need to the
events I'm binding to need to match that
[Music]
and I'll
briefly go over the other part with you
too so over here under item
handling and this can actually be
deleted
here we have our attach and our equip
logic and that gets fired
by events over here on this so if I
double click this one so basically
if we come over here and we say I and
and we have it set to we have this set
to either hand then what it's going to
do is it's going to call this one and
that's going to free both hands and it's
going to free the left hand
first and then whenever the Montage
attach has fired and if we come over
here and I know I'm jumping around but
just bear with me so whenever we fire
the UN unequip or the server equip item
on on this uh on these
items if there's
a if there's a
montage it'll play a montage you see so
it's going to see if there's an equip
montage and for the unequip if there's
an unequipped Montage it'll play that
but if not it'll play the equipped
Montage in Reverse which uh basically
you can do that just by setting a
negative play
rate but if you do that if you set a
negative play rate you also need to set
the starting position to the end of the
Montage which is why I have this right
here but anyway the point
is is that if you play the
Montage
then it'll wait it'll look it'll wait
for a an Montage an anim monage notify
event to fire on the Montage
and if I can
remember where I put that let me just
open this up so over here in the weapons
choosers under our item or character
data under our montages in this data
asset that's where we assign that uh to
the equip the weapon. equip and that's
this right here and so if I come over
here you'll see I have this plane just
like uh I think the reload animation is
is uh set up like this so it's playing
on the upper body as a regular animation
and it's and then it's actually playing
on the lower body and I probably should
have called that lower body ad uh I'll
probably rename that later in the
future uh because it's I'm sure it
confuses people but that's actually the
lower body additive and so we need this
to be applied on the lower body
additively you don't necessarily need to
add this but it make it makes sure that
it looks exactly like the animation but
only if the animation was made properly
it's got to be made properly you'll see
that mine is made from the uh ufn idle
pose I made this one from the ufn idle
POS uh so you'll see this in Montage
notify event right here called attach so
over here on this whenever we get to
that point in the end
it'll fire this and then right here I'm
just checking to make sure that this is
the attach the one that I labeled with
attach that's all we're doing and if so
and this is the server uh if it's a
standalone game uh the client is the
server in a standalone
game actually this it's not even a
client in Standalone you are the server
so um and if that's the case and we are
and this is set to is equipping then
we'll attach the item if it's not set to
equipping if this is false then what
we'll do is we'll clear this item from
the
hand and then we'll uh fire this Montage
event and then unbind everything from it
uh if no Montage was found it'll fire
this attach item for this one for the
equip and then and then it'll uh fire
this fire and reset events which is just
this Montage attach this this and then
it unbinds them now this right here is
probably going to be removed later on uh
at the time at one point I started
passing this around from function to
function because I was having a timing
issue I think that's irrelevant now I do
believe I fixed that so in the next
update this probably won't be getting
passed in through here and back out uh
but for now it will be it's not hurting
anything currently but in order to save
a little bit of you know processing I'll
probably remove it in the next update
more than
likely so anyway right here you'll see I
uh buy the attach item to slot actor uh
event uh to that Montage
fire and then depending on if we're
equipping or not
if if this needs equip is set to true
then we will fire the uh
equip this equip uh function but if not
we'll fire the just free right hand
function uh on Montage attach then we
holster the
item so on and so forth if for whatever
reason we felt a holster then we're
going to fire one of these two functions
uh just to continue
and and if
this returns uh true for whatever reason
it just means that we either dropped the
item because we didn't have anywhere to
put it or it could also mean
that it could also mean that uh there
was nothing in that hand so the hand was
empty and so this is just going to set
this to right hand and then it's going
to go back through here
and then it'll fire this
event which basically does the same
thing this one's has a delayed equip if
this is set to true and that goes back
to if I can get back over
there that's where this
happens and then
we we just want to make sure that this
is Unbound from the Montage attach I was
it was actually causing a problem uh in
one case where this and this was causing
an infinite Loop uh because they were
getting ping ponged back and forth too
quickly before another event was able to
finish them
off and then we're going to grab the
[Music]
item uh this is going
to bind on Montage attack the item
equipped and then it's going to fire
this or this depending on if we're
picking the item up or just equipping it
from a
holster when that event fires it'll fire
this item equipped which will free that
slot
actor uh that way we can put it back in
the slot later the
holster and then it's going to fire this
all items equipped which is going to
fire this as soon as all the items are
equipped so if we're
equipping uh two dual welding
pistols then this will have to fire
twice before this fires but if we're
just equipping a rifle then this only
needs to fire once before this
fires and that's basically the rundown
on
that now this right here is used by the
traversal and this should actually be
removed I won't be using that in here
uh and this was just repurposed logic
from another event because I needed it
to be a delayed uh
event and
uh yeah so this is used whenever we go
to Traverse and we need to put both
weapons away at this uh like back to
back oh actually
no this is used after the traversal and
we want to draw both weapons at the same
time so I actually ended up repurposing
uh that elsewhere as well as well but
you'll
see that this draw item is actually
being used by the pickup logic and the
uh in the other logic as
well so our cycle system uses this draw
holstered item now
and our our pickup does
too oh yeah so our draw draw holstered
item by index uses
that
and our pickup held
object which held objects which is fired
right here that's a public one this
should be a private one it's not that
needs to be private
so yeah so this one right here it was
using different uh stuff inside of here
now it's just using that same event this
is actually deprecated I'm going to be
likely removing this and the next uh
actually I'll probably remove it before
I even push this so uh because it's not
actually needed
anymore so it doesn't serve any purpose
so you'll see this logic is quite a bit
cleaner now it should be easier for
people to understand how this system
works it is a complex system guys I'm
not I'm not even going to lie uh but
yeah anyway that's basically the rundown
on it guys uh and I will see you in the
next video

================================================================================
ARQUIVO: Unreal Engine 5_ Gasp-DAO v1.47 (Item Handling System) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

In this video I'll break down the following:
- Enabling/Disabling Animation Canceling
- Skipping and Not Skipping Item Equip/Holster Montages
- Item Setups and requirements
- How Montages are Fetched from the Data Asset
- IK Retargeted Characters and the Requirements
- Slot Holster Actors and how they are Handled
- Brief Breakdown in regards to the Item Handling Logic

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Project Documentation: https://unreal-devop.gitbook.io/gasp-dynamicadditiveoverlay

00:00:00 Intro
00:00:55 AC_HeldObject_Master Intro
00:04:35 Char Data Chooser
00:09:30 Item Montage Selection & Handling
00:24:00 AC_Gun
00:33:30 Item Actor Setup
00:38:50 Animation Canceling & Skipping
00:47:35 AC_SlotManager Slot Holster Actor Slots & Item Spawning/Attachment
00:56:00 IK Retargeted Character Setup and Handling
01:03:30 AC_HeldObject_Master Brief Handling Overview

=== TRANSCRIÇÃO ===

All right,
guys. So, in today's video, I'm going to
break down the changes that I've made
and how to uh work with this
uh altered version of the item system.
So, the difference is not really that
much. Uh we still use data assets and we
still store the stuff in the data
assets.
Uh there have been a few changes
though. So I'll go ahead and start with
this. I did cover this in the video
where I turned these into components, I
believe. But just to make sure, I'll go
ahead and uh cover it anyway because
there were some things that I discovered
uh while I was working on this next on
this last
update. So for one, the AC held object
master
that's going to
store stuff that's relative to handling
the item itself,
obviously. Now, you'll see that we do
have some uh we do have this auto setup
replication and the replication
mode. It it's probably not really that
helpful. Uh I'll go ahead and explain to
you. There is one prerequisite. You do
have to have replicates uh
checked. And all that is really doing uh
is it's setting replicate
movement and then it's uh setting up the
physics replication uh mode right here
to whatever is uh selected. And the
default is the reimulate
uh which was introduced with 5.5. So
it's uh pretty new. I believe it was
5.5. Uh it may have been introduced in
5.4, but I think that was 5.5 this last
update. Uh
so anyway, the physics disabled delay,
that's how long it'll take before the
physics actually gets
disabled. The item ID is how we identify
it. The display name isn't actually
used, but I have it in there. Uh because
there was one person that I created
u a
custom UI uh weapon selection system for
and he uh was utilizing this display
name uh alongside the gameplay tag. So
that's why I created this item ID with
the gameplay tag and the display name.
So, that was being stored in a character
uh I mean in an item
data data asset before, but I did away
with that. And I I'm just having this
stored here because uh there wasn't
enough it it wasn't being utilized
enough to justify having a data asset
specifically for that information. So, I
moved that over into here. The handling
itself, this is how things get attached
and equipped. Uh so uh you'll see the
aim socket name. That's uh the socket
name of the
muzzle. In fact, I
think that yeah, so that actually exists
on here. So I do have it on here, but
that's mostly for the aim stuff, which
exists on both the AC gun and the held
object master. I provided that on both.
So that's the AO debug tool. Uh so I
went ahead and and added that to this.
That's the reason why you you see that.
So this is mostly uh
for uh checking to see where the item is
aiming. Uh there may be some use cases
outside of guns uh for using this which
is why I included it, but it does
require the aim socket name uh which is
basically just a socket at the end of
your rifle. So, or
item uh that lets us know where where
you want the line trace to be ran from
in order to get an accurate trace. Uh
that's relative to where the gun is
pointing as you can see there. So,
that's what that's
for. Let's if I can find Let me
just do
this.
So, so yeah. So,
um, the only I'll go ahead and go over
the prerequisites here, but you can go
to the actual masters and check out to
see what I'm doing in here. Uh, as I've
said before, choosers, I can't
uh I can't reference choosers,
unfortunately. It's not a feature. So
maybe they'll add that later, but given
that it's not currently a feature, I
somewhat doubt that it will ever become
a feature, unfortunately. So because of
that, I actually need this to be handled
on the actual actor. Um because
otherwise you would need a child of the
AC held object master for every item
that you own. Uh, so I thought that was
kind
of odd. I I thought that would be a kind
of odd way to handle that. So instead I
just have this. If you go to class
defaults, you'll see this BPI
items. It only has a few functions in
here. We are not using the get item
mesh. Uh, but it's there and it's hooked
up in here just in case you ever need to
directly reference the item mesh such as
like for
synchronizing and I might add that in a
later update uh to the AC held object
master where it will be able to
handle the item animations and
synchronize them with the character
animations. So that will be a feature I
will add. Uh so let that be known. Right
now that is uh not actually really
hooked up.
So the get item chart data that's the
that's the character data that's
relative to this item and that's being
grabbed from this pure function right
here. And you'll see over here we have
override this from child. I wanted to
make sure that was clear to you guys. So
I made it in big bold letters. This is
just a child class a child or it's a
function that's meant to be overwritten
by the classes that inherit from this
class. So if you don't fill this in,
you'll see this message and it'll remind
you that you need to add your character
chooser, your character data
chooser. And that will be held that will
be on the actual object itself. So if
you come over here, you'll find this
that char data chooser function in here.
And you'll just select it. It's not
going to show up in here because I've
already overwritten it here. Uh but if I
were to
say, for example, on this one, I did not
override it. Uh this this one's a child
of this one, and this is a child of that
one. And I did that because all the guns
are going to have this AC gun component
and that's where this is at. And it's
just using these events to fire that. So
if you go to the class settings, you'll
see the BPI guns is in here and that
just has a fire and reload function.
Just makes it easier for us
to, you know, trigger those without
actually directly referencing it.
I probably actually could have just had
it uh a function that says, you know,
get AC gun um component and then it
would have just returned to this and we
could have just called that directly off
of it. Um I that probably would have
worked just as well to be honest, but uh
it's I don't think it's really that big
of a deal. uh for one because some
people probably won't want to use this
but they may still re use or extend this
looper interface. That's the reason why
I did did it that way for
this. I'll cover uh that here in a
bit. So if we come over here, you'll see
we have this jar data chooser here and
we can override that. And just in case
you didn't know, by default, it looks
like it uh it's already going to
automatically uh add this. So if you
just did that, then it wouldn't do
nothing. Uh it would actually just print
this. So that's this is kind of
redundant. You wouldn't actually even
include that. You would just uh put your
chooser right here, hook this up into
the uh input, and then hook hook up the
output to this. So, that's all you would
be
doing. You can uh delete
that. So, I'll be reverting this even
though I saved and compiled it. But
anyway,
um so yeah. So, the AC held object
master, what it's going to do is it's
going to look in the data asset
uh under the montage uh map and it's
going to look up the entry for this uh
gameplay tag and it's going to return
the animation that's associated with it.
So, if we come over here to the data uh
the character data chooser and we open
this up, you can come over here and open
up this uh data asset for this
character. And you'll see we have these
montages here. This is a map and it
looks up these montages via gameplay
tag. And that's very uh efficient when
compared to using an array. And with an
array, you would have to iterate through
every entry in this list uh and check to
see which one had that gameplay tag. But
with a map, it doesn't actually iterate
through it. It'll just automatically go
directly to the one with that tag. So,
uh it's going to save a lot of
performance. So, it's important to know
when to use maps versus arrays. In this
case, it makes far more sense to use a
map.
So yeah, so you'll see we have this
equip.handar and that's associated with
this montage. And if you open up this
montage, you'll see that I'm excluding
the weapon bones. Uh, and what that is
for is uh by default whenever we're
playing montages on
uh this animation system that I created,
what it'll actually do is it'll actually
um override
the it normally overrides the gasp like
weapon bone locations with the weapon
bone locations for our overlay. But if
we're playing a montage, sometimes we
don't want that. So, uh, because it'll
actually override the montage weapon
bone locations,
uh, with this as well. If you're if
you're use, this is actually is not
relevant if you're using IK retargeted
characters because we do not attach
things to their weapon bones. Uh, we
attach them to sockets. So, you'll see
this one has uh, a weapon bone right
here. Now the thing is uh why don't you
know like I have it set up so that the
characters that do have weapon bones
that are being okay retargeted why don't
they just retarget this bone and not
have to use sockets well it's simple
actually there's anatomy related issues
uh relative to that which will actually
not place it in the correct location for
that character. it would place it in the
correct location for this character in
relation to the size of his hands and
how he would hold it. But if your
character has if your character's hands
uh like if the if the length of this
part of his hand is different or if his
fingers are different lengths uh you
know or if they're spread out more or
whatever u
then it's going to end up with his
fingers not grasping it right or the or
the grip of the rifle will be inside of
his hand so on and so forth. So that's
the reason why I used sockets for them
instead of uh just retargeting weapon
bones, you know, and for the ones that
had those.
So So that's basically the the breakdown
on the exclude weapon bones. That's why
I have this curve. And you can add that
by adding a metadata. So what is a
metadata? It's a curve, but it has a
solid value of one. Uh so that's what a
metadata is. It's a it's a a curve that
has a solid value of one, a constant
value. Uh so in some cases like
disabling things and excluding things so
so on and so forth, it makes much more
sense to add a metadata. And I believe
that they're actually more performant
than curves because uh they're not keyed
across the timeline. It's just one solid
value. And so I think Unreal Engine is
smart enough to know uh to just like
only evaluate it uh as a solid value
rather than trying to like maybe
interpolate. Um I'm not entirely sure
the details of that, but it's probably
something along those lines, but yeah.
So anyway, going forward, the disable
hand I what is that for? So, uh,
normally, uh, like when we're layering,
we want to we want the the characters
offhand, uh, to stay positioned on the,
uh, on the item.
Um, if we don't if we don't disable
this, then when we start blending into
this animation, it can cause issues
where we're blending between the hand IK
locations, which is the virtual bone uh
locations. And so where the virtual bone
would be on this animation versus the
overlay animation, it would blend
between those and kind of like uh slowly
move it from uh from one target to the
next. So for example, if if his hand is
if his left hand is right here on this
animation, but on the other animation,
his hand is over here somewhere. Then uh
when we start blending into this uh into
this animation, uh that virtual bone
location would start interpolating this
way. You see during the blend depending
on how long the blend is. So if you go
to the asset details, that's 0.2. That
means over uh 1/5 of a second it would
be uh blending. So that's the reason why
I disable hand IK on that because it's
not actually needed uh not if you have
things done properly. So if the hand
placement is proper proper for this
animation uh in relation to this item
then you don't need hand IK.
So it also reduces that. So anyway, so
we have this attach uh and if you
rightclick that's a montage notify if
you move over it. If you go to add
notify and you scroll down, you'll see a
montage notify. That's a built-in uh
feature of Unreal Engine. And it gets
fired when you play a montage using one
of those
uh uh timer nodes. I forget what they're
called. Um, let me go over here to the
AC held object. Let me close all these
tabs. There's so many tabs open here.
So if we come over here to the montage
cancelling, it's a latent yeah a latent
uh
function which basically means uh you
know that it's you know it's time based
uh and these events will fire at
specific times
uh during the animation. So, if you use
this play montage latent function, uh
then right here off of on notify begin,
this will fire whenever that and uh
montage notify
starts. So, yeah, this is kind of like a
tutorial, too. So, this is just a
oneoff. It'll fire one time, but if you
go to notify states and you say montage
notify window, well, now it has a
beginning and it has an ending. You see?
So, it'll start here and it'll end here.
So, if we come back over here, when it
starts, this will fire and when we get
when we uh move P beyond that last part
of it, it'll fire this one. And it'll
return the notify name right here. So,
if you come over here and you select it,
this is your notify name right here for
this
notify. And it also displays it right
here after you uh name it and then save
it. If you name it, it won't change
automatically. you'll have to save it
and then it should change uh right
here. So that's what that's for. So if
we come back over, the reason why I say
that is because if we come back over
here and we select this, you'll see that
we have an attach hand notify name and
and an attach hand l notify name. And
this is what I named them. But you may
decide to change the these names, which
is why uh I had these exposed. Also,
with the gameplay tags, you may decide
you want to use your own gameplay tags,
and you may wish to change
these. So, as I said before, these
gameplay tags uh are just looking
up the montages within this map uh right
here based off of the key that you gave
them.
[Music]
So, um, one thing to note is that we
have a dual, um, one, and I'll go ahead
and show you that. Let me just close out
of some of
these. If we come over here to the
pistol, the pistols have a duel
And you'll see they have a hand, a hand
L, and a
duel. So if you open up the duel, you'll
see it has two notify events. Now, these
can be these can happen at the same
time, but normally uh when you're doing
stuff like this, uh your hands don't
actually reach the same place at the
same time. Not in re not in real life,
even if it's just a subtle offset. Uh
there's normally uh some amount of
offset between and
uh you know, so it it just makes it feel
a little bit more realistic if they
don't uh both arrive at the same time.
That was my uh perspective anyway. But
you'll see this one has the attach hand
L for when the left hand uh this one or
this one right here for when this one uh
meets the target. And actually it
reaches the target on frame 13. Uh but I
put the attach one frame later because
that's when he his hand actually starts
moving up. Um, and
then right here on uh frame 14, you'll
see I have the attach
hand. Same uh concept. And you'll see
I'm disabling the hand I in that. So,
you'll also notice that I'm playing this
on two different uh layers. Uh, and this
is an approach that allows us to
additively apply apply it on to the body
and then override the upper body. So
what and that that prevents the lower
body from feeling like it's out of sync
with the upper body uh by allowing the
and this should have been called lower
body additive. I think I said I was
going to
um rename that and I
may let me know if that's confusing to
you guys. But this is the lower body
additive right here. So the additive is
applied on the lower body. Actually it's
it's applied on the entire body. So and
then we just play this on the upper body
and mesh uh with a mesh space rotation
blend.
So that makes that's a technique I I got
from Lyra and it's a very good approach
to uh getting good
uh good fidelity in your and blending in
your
montages. So how did I do that? It does
add some extra memory footprint. Uh
you'll see this is 185 kilobytes. And so
I actually just duplicated it. And I
made this
one. I made this one additive in local
space. And I chose the frame. I didn't
just randomly choose a frame. I chose
the frame at which he was in the uh the
idle stance. Uh, so normally when you
make animations, you want it to start in
the idle in your in your animation's
idle pose because that's the pose he's
most likely going to be coming out of in
a lot of situations.
So moving forward that that basically
covers uh the AC held object master and
how that
works. These these are the events uh
that are handled by this component right
here. The on task finished will will
fire after it like if we're handling one
item, it'll finish after we handle that
item. After the item is attached and the
montage is has finished, it'll fire the
on task finished. If we're handling two
items uh one after the other, then it'll
fire after the second
item has finished its montage.
uh otherwise it'll also fire if we
cancel if we cancel out of it
early. So I'll cover the uh animation
cancelling and the act of uh skipping
animations or not skipping them. I'll
cover that in a little
bit. The AC gun.
Um so I'll go ahead and cover this. So,
if you enable
this and you go back into the
game, and I actually haven't tested this
in some time, but yeah. Okay, it still
works. Then you'll see it'll it'll show
you the
offset. So, the green is actually
pointing down the barrel of the rifle.
The blue is actually pointing towards
where the projectiles are. Uh, I mean,
my bad. The blue is pointing down the
barrel of the rifle. The green is
pointing towards the center of the
screen. So when we shoot, we have a
recoil animation. And that recoil
animation will throw that accuracy off a
little
bit. Uh the numbers you see printing in
the upper left, that's the offset.
That's how inaccurate uh the gun
is uh in relation to the center of the
screen.
Now I have this enable. I'll have to
look into this cuz I don't think that's
uh supposed to be hooked up. I don't
think that's even hooked
up. And I Oh man. And I said I was going
to improve that so that it was more
readable for this update and I forgot.
But I've already pushed the update. So
I'll have to cover I'll have to do that
in the next
update. Those ignore those missing
things. It's because I removed code and
for some weird reason it's hanging on to
some of that data
somewhere. So if we go into the
uh basic projectile
function, you'll see we're firing this
right after here. So, um, anyway, yeah.
So, this is the camera rotation stuff,
the camera base projection. It's not
even hooked up, uh, because it you can't
replicate that, uh, easily.
So, I currently have that
disconnected. I'm a little conf I'm not
going to lie, I'm a little confused as
to how you're supposed to handle things
in relation to the camera uh, during
replication. I have not actually had
time to look into that.
Um I'm not sure that data is actually
replicated. So you'd have to replicate
it
yourself. So the projectile aim uh
rotation. So if we look at this, this is
the parent mesh. So this is uh the
parent mesh is right vector. And so
this like these items, these like the
pistol and the rifle I have in here,
it's their right vector is actually
their forward vector. Um it's because I
oriented them uh kind of like in the
same way that normally you'll see items
uh in Unreal projects oriented. Uh which
actually ends up meaning that their
right vectors or their forward vectors.
Kind of weird, I know. Uh but the same
thing applies to character meshes in
here as you'll see right here.
Uh
the forward vector and and this is a
little confusing to me. I'm not ex I
think I had I think I knew at one time
and I kind of forgot. I'm not 100% sure.
But uh the X vector is actually the
forward vector. Even though that like if
you're in a preview and you're looking
at the mesh, you're looking at it uh
from this angle. Uh which and it's
actually facing the Y direction. Uh so
if we open this up, you'll see that its
forward vector is actually the Y vector.
Uh
but inside the the game, it's actually
the X X vector. uh which is it's kind of
confusing. Uh it's it's mostly because I
guess there's a lot of uh legacy code in
Unreal Engine and I guess they never
actually reached a uh an agreement or
something on what should actually be the
universal forward vector or not. But
anyway, yeah, it's kind of an oddity in
Unreal Engine.
So yeah, so what I'm doing is I'm
getting the rotation of that in world
space, which actually indicates the
forward uh rotation of it in world
space. And that would be the rotation of
that, which means basically that if we
disable projectile aim rotation, then it
will mean that we'll be shooting down
the barrel of the gun. It'll the
projectiles will go straight down the
barrel, not towards the center of the
screen. However, right here, it'll go
towards the center of the screen. Oh,
somewhat it it'll it'll follow the rot
the rotation of the camera, but the
camera is at an offset, which means that
it's not distance-based. Things that are
close up, it'll it'll look offset. So,
if you want to add that
distance-based stuff, maybe I'll add
that later. At the time that I made the
distancebased, I didn't really feel like
going in here and adding it to this one.
I'm not going to lie. I was
uh I stay pretty busy, so I don't always
have time to, you know, go out of my way
to do stuff like that for you guys. But
I I'll try to remember to do that and
I'll add that into here. If you go over
to the character blueprint, you can go
to the event graph and you'll see that
on this tick, we have this
distance-based aim offset. And yeah,
it's a monstrosity, which is why I
didn't actually feel like uh bringing it
over to the uh to the guns whenever I
made it. Um but yeah, this is how you
get accurate aim. Uh that's based on
distance, not off of a world rotation of
your camera, which is offset. Um but
yeah, you shouldn't actually need this
if you're if you have a first person
shooter game. But with a third-person
shooter game, the camera is offset
behind him and off to the side, which
makes which adds a degree of error. So,
uh, when you're just simply using the
control
rotation.
Okay.
So, moving
forward, the aim socket name. That's how
we That's how we calculate
the facing direction of the barrel
itself. Like where the barrel is
pointing. That's how we uh calculate
that. The projectile offset, that's an
offset uh for forward in front of the
muzzle that we will offset this
projectile when we spawn it.
I offset it because I didn't want it to
look like it was coming like I didn't
want it to be clipping the barrel
whenever it came out because the bullets
are actually the projectiles are
actually
uh they have a larger diameter than the
barrel. You could scale them down,
but yeah. So
anyway, these action tags right here,
uh these are just uh related to
um the action that we're going to be
taking. Uh so if
we come over
here, you'll see that we're just
grabbing this montage via that. And
again,
That's uh that's just
uh grabbing that from a map using that
key which is a gameplay
tag and that comes from here comes from
the same data asset.
So, if we come over here, you'll see we
have that weapon fire and this is the
fire montage uh for
that. And yeah, that's a Lyra uh
animation and I have not modified that
guys. Uh so uh he doesn't actually hold
it the same way, but it still looks it
doesn't because of the way it was
designed. uh you can still play
additively like and that's what I'm
doing and it'll still look
right. Ideally I would like to make
custom animations for everything and
maybe eventually I will but uh you know
it's going to take time. I I don't have
infinite amount of free time on my hands
on the side. So that basically covers
that. So, I'll go ahead and cover some
more of the basics. So, if we come over
here, you'll see on the on this uh actor
right here, I've got a static mesh set
as so the uh the root of this of these
actors, they need to be either a static
mesh or a skeletal mesh. And the reason
why is if we come in
here, if I can find Oh, let me go back
here. So on begin
play, it's going to get the owner, which
is uh this actor right here. It's going
to get that and it's going to store a
reference to this. That's the first
thing it's going to do. And then it's
going to get its root component and it's
going to cast it as a primitive uh
component. A primitive component. Uh the
the two things that inherit from the
primitive component that I'm aware of
are skeletal meshes and static meshes. I
don't think anything else inherits from
that. And so it'll store a reference to
that
mesh. And that's going to be whatever
you assigned as uh the route. And why
does that need to be on the root?
Well, uh, Unreal Engine has, uh, physics
replication, but the physics
replication, in order for it to work
properly, the physics has to be
replicated on I mean, it has to be uh
simulated on the root. If you simulate
physics on a child of the of the root
component, it won't replicate it
properly. it'll look choppy uh which was
what you've seen in earlier versions.
That's the reason why I had to switch
over to this method. Uh so ideally I
would like I would like to have a way to
swap this out dynamically via like a
data asset or something and I did try
that but there were all kinds of
problems with that because in in reality
that is a limitation of Unreal Engine.
It does not want you to dynamically
alter this stuff. The way that it's
designed is in C++ there's a C++ con uh
on construction event and that fires
before the blueprints uh construction
script
uh
event and Unreal Engine uh expects you
to have assigned any uh components to
this before the blueprint is executed.
which is why I can't dynamically change
the route. Um, unfortunately, because it
it causes serious issues, trust me, you
can try it if you want, but uh, good
luck. So, anyway, we have this pickup
spear. I've kind of covered this
already, but I'll cover it again. You'll
see that the object type here
uh, is just pickup and and it's ignoring
all the trace channels. So we don't need
to actually trace against it. What uh
per se what we're actually doing is
we're doing running a trace for an
object uh type and we're just looking
for an object of type pickup.
So you'll notice that the uh static mesh
if you check the collision settings on
it, it's an object type item. And the
reason why I have items and the reason
why I do that is so that we can tell
tell it to specifically ignore other
items. Why do we need to do that? Well,
if you
attach uh it it was it was the easiest
approach to solving a problem. There may
actually be a better way and I may look
into that later. Uh but at the time this
was the most obvious way to approach
solving that problem. So this is how I
solved it. So when we holster these a
pistol in uh a pistol holster and then
we drop the pistol holster and it
simulates physics. If we do not ignore
that item's collision that's uh attached
to it, then it'll cause problems with
the physics and it'll cause it to start
spiraling out of control and floating up
in the air uh and shooting off into the
stratosphere. Uh so I don't think that's
what you want. That's the reason why I
have it set up like this. By default, I
also have it set up to ignore uh the
pawn. Uh, and the reason why I do that
is because, uh, there's some kind of
quirky problems in relation to player
object
collision. And in order to just avoid
that for now, I just have it ignored cuz
I don't actually know how to resolve
that. I don't have a lot of experience
messing with physics in Unreal Engine.
Uh, it's not something I do every day.
Okay,
so we've got all that out of the way.
Now, let's talk about uh montage
uh cancelling and skipping.
So, if we come over here to our
character uh our sandbox
character and we select the AC slot
manager, you'll see we have this
animation cancelling check box right
here. And by default, it's
checked. And if you uncheck
it and then come into the
game and you can spam your keys,
uh, you can't skip the animations. So,
you'll see it's not skipping the
animations. You
see? So, if you don't want the
animations to be skippable,
uh, or can't you don't want to be able
to cancel the animations, then you can,
uh, just check that right there. The
problem with that is too though is
um, it creates more problems uh, other
than uh, just
that. Well, actually, no, never mind.
Okay, I have that set up so that it'll
bypass that. I forgot. Sorry. Yeah. So,
it'll still work.
Okay. Yeah. So, you can un uncheck that
and disable animation cancelling if you
want and it shouldn't cause any
problems. If it does, let me know and
I'll look into it. But, uh I have not
seen any problems relative to that. I
thoroughly tested this without animation
cancelling after the refactor and fixed
all the bugs that I found u before I
introduced animation cancelling and then
fixed all the bugs it introduced. Uh
so right here you don't need to worry
about this chart tag right here. It
fills that in automatically. Uh that
should be actually Oh, I wanted to make
it private. Actually, I should put it
under a private thing. Yeah. So, in the
next version, it'll be it'll still show
up in here, but it'll show up under a
subcategory under management, it'll say
private, and if you extend that, it'll
say chart tag.
Um, that just means that you don't have
to worry about that uh about setting
that from here. Uh, but I need it to not
be private because
the uh metahuman uh blueprints, they
actually have to change this dynamically
during runtime, which is why I don't
have it set as
private. All
right. So, animation skipping. All
right. So, I'm just going to close all
those and I'll I'll go over
that. Okay. So if we come over here to
the
traversal. Yeah. So there's uh this auto
equip function
here. And you'll see that by default it
does not skip the equip montage
uh after we come out of that. But if you
uh if you uncheck play available montage
then it will not play the available
montage.
So, if I do that, you see it didn't play
the
montage. But if we come back in
here and we check it
again, then you'll see he he plays the
montage. Okay. So, somebody was
complaining about that. I guess they
didn't understand what I was what I was
getting at as far as animation
cancelling. It's going to depend on you
your the style that you want for your
game. And like, you know, if if you want
the character if it's okay for you to
have the character wait on an animation
during certain events, then that's fine.
You know, just disa you know, just uh
enable play available montage if it's
disabled in here. In this case, it's
already enabled. Uh, but if we go over
here to the DAO logic and we go to the
pickup, you'll see by default I have
this disabled. So if you come over here
and you pick up uh a montage uh I mean
an item and you have an item in your
hand, it'll just it'll just holster that
item in the holster and pick up that
item. and it won't play an
animation. But if you check
that and you have an item uh
drawn, then you're going to have to
wait. The player is going to have to
wait for them to put that away. Like I
said, it's going to depend on the style
of your game. Now, the problem with that
is is if you come over here and you
press F, oh, he put the item away, but
guess what? He He's no longer close
enough to that item to pick it up
because we were waiting on the
animation. You see? And I do a check
after he puts the item away to make sure
that the item is still within
range. However, that's not a problem if
you just skip the
animation. See? So, like I said, it
depends on the sacrifices you want the
player to make. So, if you think your
players are going to get aggravated by
the fact that that they can't pick up
items while they're sprinting, uh, then
leave it disabled. if you think it's
okay for them to get aggravated over
that or if you don't care or or if you
know if it does if it just doesn't fit
the narrative that you're trying to push
for your game. If maybe that's part of
the feel you want for your game. You
want them to feel like they have to do
things properly. Uh then you can just
check that you it's it's it's just like
that. It's just a switch. Okay. So it's
not that big of a deal. Somebody was
like really complaining about that. Like
I don't know. I guess they just didn't
understand the fact that it's it's just
a switch. You don't have to, you know,
it's it's not hardcoded, guys. I I made
this as flexible as I as I could
possibly make it. I tried to please
everybody, but in the end, you can't
please everybody. It's just that simple.
You're never going to please
everybody. It's impossible. I wish I
could please everybody, but I
can't. So, the holster string, it looks
like I actually didn't uh make that uh
exposed for this. I need to expose that.
Um, in the next version, I'll have that
exposed for this right here. Uh, guys,
it looks like I didn't expose that,
though. By default, it's it's just uh
set inside of here.
So, oh yeah, never mind. No, it's
exposed. Okay, I'm just calling this
function. Yeah. So, if you if you want
it to skip whenever we holster, if you
don't want the unequipped montage, just
uncheck
that. And then whenever
you're whenever you're pulling the items
out, if you don't want the montages to
play, just uncheck it. You see? Fully
customizable, guys. like make it fit
your style. I don't I don't care, dude.
I just like I set it up this way because
I thought it felt right, but I made it
such that you can change it. So, I hope
that doesn't bother
you. Apparently, it bothers some people
for whatever
reason. No. Yeah, this item handling
system turned out to be far more complex
than what I thought it was going to be.
So anyway, that's the rundown on how
like to work with uh with this system.
If you come over here to the AC slot
manager, you'll see we have these item
slots right here. And I've gone over
this in in a previous video, but I guess
I may as well go over this in in this
one as well. So you have this stuff
right here. Now, what does all this
mean? Well, these are the slots that we
can attach slot actors to. This is the
socket name we can attach it to. This is
the hand we want to to use when reaching
for something in that slot actor. Uh,
this is the allowed slot gameplay tag.
Uh this what this
means is the slot actor has to have this
gameplay tag in order to be attached to
this socket. Uh otherwise how are we
going to know what sockets go where? You
see? So that's our identifier. I should
have called that slot ID. I'll probably
rename that if I remember. uh but I get
distracted by other things and I often
forget little, you know, intricacies
like that which would improve
readability, but I do add tool tips
here. So, I think maybe the tool tips
will make up for that. So, if you if you
move your mouse cursor over that, you'll
see the tool tip. If you go in
here, you'll see
uh Okay.
So, yeah. So, this tool tip is actually
on the structure entries themselves. If
you go to the structures and you look
for the tool tip entry, that's uh or the
description or whatever it's called,
that's where you'll see that text.
Yeah. So, ignore this stuff. It keeps
showing this. Um, this seems to be some
kind of weird
serialization issue. Uh, where it's just
caching stuff that was removed and it
thinks that it's supposed to still be
there, but it won't break anything. So,
don't don't worry about it.
So where does this get
set? If we come over here to the slot
actor here, we open up this slot actor
and we uh select this AC held object
slot actor. If you find this class,
you'll see this is uh the class and
you'll see that this is actually a child
of the AC held object master. It just
has a little bit of extra code in here.
It doesn't have a lot. So you'll see all
that code right
here. So if we come over here and we
selected
that then you'll see right up here at
the top we have the slot actor item info
and uh the slot tag which is the slot
ID. Um that's how we identify the slot
actor and where it can be attached to on
the AC slot manager. So you
see so this one is hip gun pistol M9 and
this is a hip gun pistol M9.
Now the accepted item tag tags this
these are the tags of the items that are
that we allow to be attached to this
slot
actor and that's basically how it
works. So no mystery there.
So before you go to the starting section
and the starting section is where you
actually add these. These are the items
that will be spawned and attached to
these item
slots.
So these are the actual slot actors
themselves. And you'll see I have
contextual anim scene actor in this one.
I should probably remove that. It's not
actually needed.
Um, I must have forgot to remove
[Music]
that. All right. Sorry. So, uh, anyway,
I kind of zoned out there for a bit. Uh,
this is a long video. I tend to zone out
whenever we're on these long videos.
Yeah. So, if you compile it, those
messages will go away. It's a
serialization issue. it'll just pop back
up the next time I start it again until
they fix it.
Um, so the so the starting items, these
are the items that will be attached to
these slot actors.
Uh and so if you go into the AC slot
manager and you go to the event graph
you you'll see that after some delay and
that's because the reason why is because
if you go to this and you select one of
these what will happen is once you start
it you'll start with the UEFN but then
it'll remove that UFN and it'll replace
it with one of these. The widget itself
will do that. Uh so uh because of that
uh for this project and because I'm not
changing any of the gasp stuff, I'm just
adding a a half second delay before
actually assigns the owner gets the
character data and then does this stuff.
Now right here I'm adding a short delay
between spawning these and spawning
these. And that's because during
replication, if you have these fire back
to back, then it doesn't give the
clients time for these things to
actually be attached to them on the
clients. And so these will end up being
like on the ground or something uh
underneath or something like that. I
don't know. Uh I think I had issues with
that which is why I added that little
delay there. Uh timing issue is all. So
right here you'll see we assign the slot
actors and then right here we
uh search the available slots and then
we assign that information to the item
and then we attach it to that item.
Otherwise, if there's not one available,
then we drop it. But you could just have
it destroy the item instead if that's
what you prefer.
So yeah, that system turned out to be
far more complex than what I had
originally intended on it to be. I know
I I know I wanted and I said it was it
was just going to have a few functions,
but it ended up having a lot. Uh
unfortunately, I guess that's just the
way that things go. Now, the holster
socket name is the socket name that you
actually want uh these items to be
attached to. If you don't have that
socket on the item, it's not that big of
a deal. All it's going to do, if that's
the case, is it's just going to attach
it to the root uh origin of the item
instead. And in actuality, uh this
little holster socket name is more of a
formality for these uh because I've
actually offset uh the origins of these
here so that if they were attached
directly to the item, they would
automatically be inside. And so I'll
demonstrate that uh for you here. So if
I just copy the location of this holster
and I move this to that location, you'll
see because I offset the origin of this
uh this holster, it'll just
automatically place it perfectly inside
it and I don't have to worry about
manually offsetting it. That's the
reason why I did that.
I'm going to undo all all these changes
after I'm done with this video. So, you
can ignore all the changes I've made in
here. So, the hand socket names, you
know, that's going to be the socket that
we're going to attach the item to when
we're attaching it to the character.
When he's equipping it, it'll attach it
to the weapon L on this character.
Otherwise, it'll attach it to the weapon
R. Now, if we go into
um so if we go into the DAO folder and
we go into characters and we go into say
echo and we select the AC slot manager,
you'll see that the hand socket names
for this is held object L and held
object
R. And so if you open this
up and you look
through you'll you'll
see the held object L and the held
object R on and it's set up on the
hands. Now I don't have offsets to these
and the reason why is because
um the IK retargeter data actually
stores uh some stuff in here.
My
bad. Somewhere in
here. Oh, it's okay. Yeah. Let me
see. Yeah. So over here you'll see we
replicate this with the notify.
Now in the last version or in previous
versions we were just uh executing this
after assigning that but I felt like in
order to reduce error on uh you guys
part I would just have this inside of
the notify that way always gets updated
after that gets
updated. And if you go inside of here,
you'll see right here we have our held
object offset. And it's just getting
that offset from that uh PDA which is on
that data asset. And it's uh offsetting
uh the relative transform of that actor
by that
amount. Now this does cause a slight
issue uh because of the way I'm doing
this. And so let's
see if I switch to this, you'll see. And
I'll look into this. Yeah, I want to
make sure I wasn't in replication mode.
So yeah. So you'll see that just for a
single frame, sometimes uh the
items uh will kind of uh rotate and then
correct over the course of one frame.
And it may be hard to see in the video.
Uh, I'll try to fix that in the next
version. I I was uh I know what's
causing it, but I'm not exactly sure how
to address it yet. Basically, it has to
do with uh the timing of this in
relation to
um in relation to the attach event. So,
when this gets uh attached to the
character versus when this right here
gets updated, that's what's causing
that. I'll look into it. I mean, I like
I said, I just explained it to you, so I
know what's causing it. I'm just not
exactly sure how best to address that
currently, but I will fix it. That only
happens on them because they're the only
ones that have this offset being
applied. the actual UEFN uh doesn't uh
utilize this and so it's not a problem
because it's using the weapon bones on
the actual animations and they're
already in the correct place whenever
that attach event fires which is why it
doesn't happen on them. So what I
probably need to do is
uh is perform this offset before it gets
attached and that should fix it.
Something else you need to know is
whenever you're creating this, you need
to pay close attention to how I did
things in these uh template actors. I'm
setting the IK retargeter on begin play.
And then I'm updating the held object uh
state on begin play as well. And by
default, this is the held object unarmed
default uh pose state. And this will
cause the unarmed linked layer to be
loaded. uh
initially and that's uh that's an o an
unarmed overlay uh which gives her you
know which makes her arms look a little
bit more feminine. That's the reason why
uh she looks
feminine. So and that's stored on her IK
retargeter uh data settings.
So if we go to get character mesh, this
is an overwritten function inside of
here. Just like I showed you before, you
need to pass in that character's IK
retargeted mesh. Uh otherwise, it's
going to uh apply everything and attach
everything to the base mesh. So this
allows me to accurately get the actual
mesh of the character and attach things
to it. rather than attaching it to the
base
mesh. That's why we need to override
that. None of these other events do that
you need to actually worry
about. Now, as far as like where that
car data for that character is stored,
again, if you come over here to the
items and you go to their character uh
data, that's where I'm storing this. And
it just allows us to localize that to
the items uh rather than having all the
item character data stored on the
characters. Um I think it just makes a
little bit more sense to handle it that
way.
And you'll see she is using the linked
animal layer class uh that is the same
one that the UEFN
uses. But you'll see that we have uh
this enom set data here. And this over
and this is what gets loaded into that
linked enum layer whenever that linked
enom layer is
assigned. And so these are custom poses
that I created for that
character and custom aim. Oh, I think
these are the same aim offsets I'm using
on the other one, but you can swap these
out for with custom ones as well. I made
all this
customizable. And these are the overlay
settings. And I'm sharing these with all
of them, but you know, and I've already
went over this stuff in another video,
so I'm not going to uh cover
that, but I just wanted to re touch base
again on how the characters are
handled. And I think that pretty much
sums it sums it up for uh this video,
guys.
Uh, I'll do uh I'll do another video
that like really dives into all of this
uh stuff on the AC slot manager and the
AC held object uh master, but I'll just
briefly cover it uh with you real
quick. So, we have the drop item data.
Uh this is going to
uh make sure
that that this item is being held in the
character's hand uh before it clears
that item from the hand when it's
dropped. Otherwise, if we didn't do
that, then what would end up happening
is he would still be holding that item,
but it wouldn't be in his hand.
And then we just call these events. Uh
this one's just a fail safe uh right
here just in case you tried to handle
something and it got dropped. Uh if you
bound to on task finished, it'll still
fire. And then uh this data right here
gets reset. And then this data only gets
reset if the item is not if if the item
is not attached uh to uh this holster
actor that it was assigned.
the owner is cleared. We don't want the
that character to own it because during
replication, if so, then it can still
fire functions on
here and functions that are fired on
here will affect that character. It'll
cause it to be attached to that
character even though it's it's on the
ground, which is why I clear it when
it's dropped.
inside of uh the item handling right
here. This is where all the item
handling happens. Our attachment and
montage and cancelling, and then our
pickup, equip, and holster logic. So,
when you pick up the item, you'll see
that we attach uh we need the new owner,
which will be the character actor, the
attach socket name, which will be the
socket on the character that we're going
to attach it to, and the hand that's
associated with that socket name. and
then if we want to play the montage or
not. Now, currently for the pickup item,
I don't actually have montages uh and I
probably won't be adding that directly
into here. Uh the pickup uh montages
will probably be played directly from
the character blueprint and it'll be a
generic one which will be added later.
So that extra data that we're passing in
here, that's so that we can update the
item owner and stuff uh whenever it
first gets picked
up. And then we reset the item handling
state. And then we attached it to the
player. And then we fire the on task
finished whenever the on montage equip
fires, which fires right here after
we've attached it to the character.
the the hands the hand state on the
character doesn't get updated unless
we're handling a single
item at least from right here. If we're
dual, if we're handling two, then it'll
be uh then this will fire after the
second one is fired and it'll and that
will happen
from the montage cancelling stuff over
here under handle handle
attachment and it'll uh update it for
both the items.
So if you come in here, you'll see I'm
just creating uh an items in hand strct
that holds both of
them. Yeah.
So going
back, you know, we we handle this stuff,
this stuff, and this
stuff, and this stuff, and inside of
these right here. You'll see how I'm
handling that for the
unequipped. And you can change this if
you want, but for the holster, I
mean, if they don't have a uh a dual
holster, then we'll see if they have a
dual equip. If they don't have a dual
equip, we'll see if they have a single
uh holster. And if they don't have a
single holster, we'll check to see if
they have a single equip. And then we'll
handle all that individually based on
those circumstances.
[Music]
So, I think that basically uh covers
everything I I feel like I need to cover
for now. Uh I'll do a more in-depth uh
video on the actual breakdown of this
event driven system and how this logic
works uh later, but feel free to come in
here and look at it yourself. I've
littered comments around. Uh I probably
don't have enough comments, but I don't
think the logic is too difficult to
follow. It's some pretty It's still
pretty complex, but I've reduced uh the
work the logic in here as as much as I
could. I'll end up having to uh recreate
uh my flowchart for you guys so that you
can look at it. I've uh got one up there
on the Discord now, but it's kind of
outdated because I've had to refactor
this stuff.
So, yeah, there's a lot of logic in
here. This is the animation, the primary
animation cancelling that you'll
normally see whenever it gets canled. if
you have animation cancelling enabled.
And this is how it's
handled. And then whenever uh this on
task finished events event fires, it'll
fire this which
is right
here. And this is just going
to ensure this gets fired, which does
the same thing as this. I'm just caching
those values so that we don't have to
have those running all the way down here
or all the way over
here. All right, guys.
Um, I'll see you in the next video. Uh,
let me know if you have any questions.

================================================================================
ARQUIVO: Unreal Engine 5_ Interactive Contextual Anims (Series Intro) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

An Intro to this series which will revolve around making animations using Ai, cleaning them up, and setting them up.

QuickMagic PromoCode: https://www.quickmagic.ai?code=l50rd1 (copy the entire link and paste it into your address bar YouTube ignores the last part of the link)

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

0:00 Mocap Intro
4:10 Series Breakdown

=== TRANSCRIÇÃO ===

[Music]
all right guys
so I'm just uh doing a uh an intro right
here for this uh
Series so in this series I'm going to be
showing you how to uh do some Ai moap
and I'm going to show you how to clean
it up now I tried a few and the
best
um the best amimo cap I could find was
quick
magic and I also have a pro code you
don't have to use it it's up to you uh
but I'll leave that down in the
description uh if you just want to uh
support me uh with the promo code but
anyway so this is the result I got and
yeah it's not the best but it's better
than most of the ones I've tried so and
I'll show you how to clean it up so
you'll see right
here um the results I got in the end
were decent you know probably not the
best but also you'll notice
that you'll notice some uh wrist issues
that's uh that has to do with the
skeleton I'll show you how to fix that
uh there's two ways to fix it we could
either add a control for the twist bone
and uh just fix it for the animation
itself or we could set up a postprocess
uh n MVP and I'll I may just uh show you
how
to how to do that method
um so there are there is one trick that
I used in getting uh the hand uh
placement uh like this and it's it was a
bit it was a bit uh tricky to figure out
but it's not that difficult to uh re uh
create on your end so I'll show you how
to do that and basically what I did was
I added a control
uh and I constrained the control to the
doors and then I con I constrained
the uh ik goals here the I the ik
controls to those controls that were
constrained to the door and then I just
animated the control that was con
strained to the door and then I baked
all of that so that's how I uh managed
to do that
um it's a method that I've been meaning
to look into for quite some time uh
because of the way that the hands have
to rotate as the doors are opening it
can be difficult if you if you don't use
this method so I devised that method for
uh that purpose so I did kind of uh mess
up a little bit and I made the ending uh
a little too slow as you can see when
he's pulling his hands away but I think
the beginning is uh uh sufficiently
quick enough but this was really just
for demonstration purposes to show you
guys what kind of results you can expect
after the clean up process now the the
clean up process it it may take several
layers upon layers upon layers baking
and then layering so I'm just going to
let you know now uh cleanup is not
simple when it comes to map uh you're
fighting the animation the underlying
animation itself in some cases but
that's easily
uh uh dealt with using the curve editor
and I'll show you guys some tricks that
I know uh to uh uh fixing that by via
the uh the curve editor so uh that can
be a little tricky and it takes a lot of
uh experience and practice uh to get
good at uh manipulating the curves on
the curve editor but it's not a
difficult concept to understand and I'll
show you how you can uh utilize some of
the uh some of the fil filters that are
provided by unreal for dealing with the
curves on the curve editor and during
map
cleanup so uh the purpose of all of this
is to set up uh interactive contextual
animation scenes which are like scripted
acts uh or scripted plays uh where
everything is already uh aligned and
positioned uh but this doesn't mean that
the things have to be static that you're
interacting with they can actually be
moving so it could be uh an enemy that
you're sneaking up behind and then
you're stabbing uh they're good for that
kind of thing uh contextual animation
scenes are also good for things like
zombies attacking the player I've uh
helped people set up uh set set them up
for that as well they can also be used
for getting in and out of vehicles in
multiple different ways uh as
demonstrated in The Matrix City demo uh
so I'll be showing you guys how to do
stuff like that in this series as well
this is going to be an ongoing series
and it's going to uh take some time for
me to completely fill all that stuff out
uh as uh these kinds of uh setups are
somewhat complex and uh really though
the hardest part is getting the
animations and uh getting the animations
looking right so this animation right
here that I created
uh is actually in the uef in pose so I
modified it so that it was in the UF ufn
pose when I recorded the animation I
made sure that I was somewhat in the ufn
idle pose whenever I did it that way the
cleanup uh would be easier and simpler
so there's going to be a lot of
techniques that you're going to learn in
this for in this series for getting
animations uh prepped and game ready uh
so so uh yeah I look forward to doing
this series it's going to be a complex
series it's going to take a lot of my
time to create this series and uh I hope
you guys uh appreciate it so I'll see
you in the next video

================================================================================
ARQUIVO: Unreal Engine 5_ Motion Matching Ai MoveTo (The Proper Way To Do It) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

Easy Method for Getting Proper (Not Hacky and Manual) Movement of the Ai with Motion Matching Systems.
TROUBLE SHOOTING VIDEO: https://youtu.be/H8H1IxI9P58
WARNING! If you Duplicate the Character Blueprint your Character WILL not Motion Match because the Motion Matching Animation Blueprint is Casting to a DIFFERENT Blueprint.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

=== TRANSCRIÇÃO ===

all right guys so I'm doing a video real
quick just to show you guys how to get
AI uh to work inside of here I know some
people have been trying to tell you to
use to manually move the character like
you would a player uh in order to get
them to follow you and stuff like that
that's not the proper way to do it I'll
show you the proper way to do it it's
actually really easy
so I believe uh this guy on x
Delta 55 or something like that had
pointed this
out and I just happened to across it uh
before I even started setting up my own
and so it saved me the trouble that some
of you went through so under the
character movement component you're just
going to scroll all the way down until
you get to nav movement and you're just
going to check use acceleration for
paths right here just check that
and then all I did was I went into the
class default
settings and I searched for
AIC uh you can create an AI
blueprint by just typing in AIC and
selecting AI controller and selecting
that and then you can set that as the AI
controller
class inside of here I just did a begin
play AI move two you can use any of the
uh move two you can use any of those if
you want but I just use this one and I'm
just tell him to go to the player and
then of course I drug a Naf mesh balance
volume into here and you can press P to
show your nav mesh to make sure that
it's there if there's no nav mesh he
will uh fail to move to because we need
a nav mesh for the AI to move to
him and that's pretty much it I'm not
doing any of that hacky stuff like some
of them guys were where they were
manually adding movement input towards
the direction they wanted them to go
it's not that comp complicated you're
just making it harder on yourself if you
do that all you have to do is go under
nav movement and check that one box and
I will see you in the next video

================================================================================
ARQUIVO: Unreal Engine 5_ Motion Matching Ai MoveTo (Trouble Shooting) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

In this video I will try to clear up any confusion you may have in regards to AI Setup with Motion Matching.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

00:00 Intro
02:00 AnimBP Related Issues
05:30 AI Controller Setup
08:50 Character Setup
10:26 GASP PreCMCTick
12:40 Level Setup
13:48 Testing 1
14:15 Duplicating GASP Char
16:10 Duplicating AnimBP
17:55 Fixing AnimBP Char Ref
18:40 Duplicating Choosers
22:25 Testing 2
22:45 Spawning Child AI
27:44 Testing 3

=== TRANSCRIÇÃO ===

all right guys uh so I am back with
another video and today's video I'm
going to be uh showing you guys once
again the proper way to set up an AI
move to for a motion matching
system now this information I originally
got from Caleb Longmire he was the one
that retweeted this on his X
page so I wish people would stop saying
that it doesn't work I've done this like
numerous and numerous times over and
over again uh and it always works for me
so I don't know why people are saying it
doesn't work it definitely does work uh
and it doesn't just work for the game
animation sample project uh it works for
motion matching in general it's it's not
specifically for gasp uh
either so I'm going to go ahead and
create this
all right you see that's
5.5 that's right here I've already got
the folder
open this will only take me a second to
uh set up but because people keep
messing it up I'm going to have to go
through and try to recreate all these
problems that they keep creating uh for
themselves that makes it not work uh
because
basically it boils down to a lack of
understanding uh and experience uh
setting up AI stuff and that's the
reason behind uh people getting this
wrong
also well also because
uh a lot of people don't have enough
experience to know that they should
check the animation blueprints to make
sure
that that uh they're they're not C ing
to the character and 90% of the time
they are and the reason why is because
animation blueprints uh normally you
want things to be thread safe so that
you can take advantage of the worker
thread if things are not thread safe for
example if you're using a blueprint
interface then you cannot take advantage
of that worker thread everything has to
be executed on the game
thread so I'll go ahead and cover that
real quick for you
so this right here everything that's
running on this event graph right here
everything that runs on this event
graph it all runs on the uh on the game
thread
okay right here this blueprint thread
safe update animation event this is the
only uh one that does not it runs on the
worker thread alongside the enm graph so
the ANM graph graph also work runs on a
worker thread the enem graph will only
ever run on a worker thread but the data
that's being updated it can run on a
game thread but you can choose to make
it run on a worker thread which will
free up your game thread a little
bit
so yeah so the thing is is in order to
run things on a game thread you actually
have to have a direct reference to the
character in this case it's the CBP
sendbox character so if you duplicate
that
character this cast will always fail
because that character that's using this
animation blueprint is not a CBP sendbox
character it's a different
character even if you didn't change
anything in the character it's still not
the same character it's a new character
it will always f L okay so you'll have
to uh duplicate the animation blueprint
too and cast to that character uh on
that one that's the only way around that
if you want to use uh the blueprint
thread safe update animation
event otherwise you could just run
things on this right here and you can
you can call blueprint interface
functions from here that's fine you
could also go in here and find out uh
where they're actually calling data from
the character and only call that from a
blueprint interface on the event graph
you could also do that uh in a lot of
cases it's not going to hurt to do that
but you would have to move this entire
thing right here to the game thread uh
not just this because this has to come
has to be set before this is set or else
it'll be the uh the current one not the
last one
there there's also a few other things uh
floating
around mostly in the update state if you
come over here you'll see they're
getting the character gate right here
that's also something they're uh using
that
for but anyway I just wanted to point
that out because if you're duplicating
the character then you need to fix
that so anyway getting
started I'm just going to go ahead and
uh create an AI
controller I'm going to call
AIC move
to and inside of here I'm just going to
create a custom event I'm going to call
it move
to I'm going to call move
two and then I'm going to do a an AI
move
to and then I'm going to get get the
controlled uh
pawn and I don't actually need to do
this uh but I'm going to get the actor
location and I'm going to save that as
my home location
and the reason why I don't actually need
to do that in this example is because
I'm actually just going to get a random
reachable Point within rad uh within a
radius and it's only going to search the
nav mesh for a reach aable
Point get random reachable point and
radius if you plug something into the
target it'll ignore the destination and
only go to the Target so just let that
be known the reason why I use the ao2 is
because it has an on success and an on
faell and so I can whenever this is done
it'll call one of these and then it
it'll just call itself
again so the origin is going to be the
home location and I want to set that the
radius to 2,000 if you don't set the
radius he will not move guys so just set
the radius make sure you don't forget to
set the radius also if you don't call
this move to on begin play he will also
not
move uh
so I'm going to go ahead and put a delay
in here and I'll go ahead and explain to
you why if I don't put a delay in here
if I spawn this character and there's
not a delay uh what happens a lot of the
time and a lot of people don't realize
this is is that whenever you have the
character autop possess when they're
spawned into the game what ends up
happening is the AI controller get
spawned and this fires
before
uh before the
character uh has
actually uh fully been assigned to the
AI
controller so I'm just going to put a
short delay
there uh before the move two fires and
you can make it longer if you want but
Point 2 seems to work
fine you just need enough time time for
the character to fully spawn in before
this starts
firing so I'm going to go ahead and
duplicate this character and I'm just
going to call him SC
copy actually before I do that I'm I'm
going to go ahead and finish setting up
this
character so what we're going to do
first is under the character movement
component we're going to do we're just
going to go to the nav movement nav
movement properties and under here
you're going to see use acceleration for
paths the reason why is because uh
motion matching uh makes use of
acceleration uh that's the reason why we
need to enable use acceleration for
paths so after we've done that we also
need to assign the AI controller so
we're going to type an AIC here and
we're going to assign the AI controller
here if we don't do that he will never
move because he doesn't have this AI
controller that's moving him assigned to
it uh something else that we might want
to do actually let me just uh come down
here under Pawn uh right above AI
controller class you'll see autop
possess AI set to placed in world that
means he only gets automatically
possessed by the AI if he's been placed
in the world before the game was started
so what we want is we want placed in
world or spawn in this particular case
uh for you it may
differ uh you can
uh I believe control the possession of
the AI on these actors I'm just not real
familiar with that to be honest with
you
so when we change the character it's
going to cause this pre uh CMC tick to
misfire and the reason why is because
this prec CMC tick component right here
um yeah it's actually casting directly
to the
player so I'm not exactly entirely sure
why they did that but you could actually
create a blueprint interface now this
was this did seem to cause problems
before uh if you give it the same name
so you have to be careful when you do
this so I'm I'm just going to name uh
the actual function inside of here a
little bit
differently I want to call CMC pre- tick
instead of prec CMC
tick and on here what I'm going to do is
I'm going to have him implement
it this will allow me to share
this component between two different
characters without it throwing errors
because it will throw
errors and then under here you'll see we
have the CMC preck I'm just going to
bring this up
here until I find it here it
is and then under
here I'm going to call CMC pre pre- tick
I'm going to call the one with the
message that has the parentheses and the
message inside of it that's the
blueprint interface uh function
version and now we actually don't need
this anymore
but so that's fine
so now we have we should have everything
set up and everything should be working
I'll go ahead and show
you so if I if I drop him out here and I
don't have a nav mesh in here he's not
going to run around because he the AI
needs the the nav mesh in order to move
around all those AI move to functions
they require that because that's what
they look for for a point to move to so
I'm going to type in nav
mesh uh and you'll see the nav mesh
balance volume now if you drag this out
here and you press P it'll draw a dark
square right here and that's where the
nav mesh actually exists at if your
character is not inside of that area
then he'll never be able to reach any
position inside of that area so your
character actually needs to be inside of
that area or else he will not be able
ble to move around inside that area
he'll never be able to get to it he has
to be inside of it in order to reach
it so I'm just going to uh scale that
out and now if I do this you'll see he's
running around just fine now I keep
having people and and that was without
any problems at all
now I keep having people tell me that
this method doesn't work but it
definitely does work I've recreated it
hundreds maybe even thousands of times
uh so for somebody to say it doesn't
work I'm sorry but you're doing
something wrong if it's not working on
your end you're missing something uh
remember I told you if you if you
duplicate this character blueprint right
here and I'll go ahead and do that
now and you don't re if you don't uh fix
if you don't uh fix the uh animation
casting problem now I did fix the one
for this one but the thing is is like I
told you before uh inside of an
animation blueprint if you want it to be
thread
safe uh you can't use a blueprint
interface
function you can call that from the
event graph if you want if you're okay
with that running on the game thread but
in most cases you want to take advantage
of the worker thread because it will
reduce the load on the game thread and
that actually scales too so that'll save
you a lot of uh if you have a lot of
characters in your uh game it'll save
you a lot of uh
[Music]
frames so let me just go ahead and uh
dump this guy out here so that you can
see that he will not
work so you'll see his legs are moving
now this is what people are seeing and
when they see that they just
automatically assume that well use you
know acceleration for paths well that
that obviously doesn't work because look
my character isn't moving but the thing
is is he's moving like that because
you're missing something not because it
doesn't work it definitely works
so I'll show you how to uh I'll show
I'll show you one way to fix that so I'm
just going to duplicate
this and I'm going to call this SC
copy and I actually don't recommend
doing this I recommend just having all
your characters a child class of one
master character and you can reparent
the CBP sandbox character to some other
character and move some of this logic uh
move some of the logic that's shared
between this and the AI over to the
other one and then just keep all this
input stuff over here on this one now
that's going to be somewhat involved so
I'm not going to show it in this video
but it is something that you could do uh
and it would allow you to share this
between this character in your
AI but
honestly like these move to functions
and stuff like that you could just as
easily just create a child of this one
and just move this stuff over into that
that child and then make all your
characters a child of that child so you
could just do it that way instead of
trying to reparent this one that would
actually make a lot more
sense so you would just move anything
out of here that you didn't want to be
shared with the AI over into another
child which would be your player uh you
know CBP sendbox character player and
then player underscore character a
character B so on and so forth those
would be child of the CBP sendbox
character player uh and then your AI
would be uh would just Branch off of
this one
so you could do it that
way so now that I've copied uh this I'm
just going to come in here and I'm going
to recast
this
to this guy
here but then I also need to change
this so I'm going to change this to the
SC
copy and there'll be a few errors we'll
have to
address because uh they're calling
they're directly calling uh variables
like gate and stuff like that
uh so we'll have to fix that so when we
compile it it fails and it tells us what
why it's failing and it's because of
this is valid
check now something I should warn you
about doing this is when you compile the
game it's going to suddenly stop working
uh at least for my own test and that's
because of a a problem in relation to
the
choosers they're supposed to technically
uh be
they should technically be causing a
compile fell uh but you'll see it's
saying we're good to go when we're not
and the reason why is because if you
open up this
Chooser you'll see
that the class that it requires is is an
ABP sandbox character but this is not an
ABP sandbox character it's an
absc copy uh so just like uh yeah the
choosers they need a direct reference
just like a blueprint thread safe
animation update event
would
now I'm
wondering if I do
this yeah so see now you'll you'll see
that it's saying uh it's not
compatible and I can't even I can't even
do it from
here you see now I can't plug it in so
the only way I'd be able to uh fix that
now and that'll show up when you try to
compile the game it's just that chers
are still new right now and so they're
going to uh uh have these
problems and so I'm just going to create
a new folder here and I'm going to call
this SC
copy and I'll go ahead and just delete
this and I'll
copy all three of these into
here and I'll replace
those with this one and you could rename
these uh
copy
copy copy just so that you can move your
head hand over here and you can say okay
yeah that's a copy cool uh that's what
we want and then on this you're going to
want to go into your table settings
parameters and you're going to want to
change this over to
ABP
SC
copy and your these sub ones that you
just replaced you're going to want to do
the same thing on on those
and so now we should be good to
go we just need to uh replace this one
with the new one and now it's asking for
the
correct copy Jesus Christ there's a cat
out there dying or
something Jesus Christ I don't
know all right
so there you go now we completely fixed
it and you will you should be able to
comp you should be able to compile this
now like compile the actual game and it
should work so now we just need to make
sure because I'm not actually sure if I
actually replaced the animation
blueprint in
here uh so no I did not so I'll go ahead
and uh oh okay I already showed you how
that doesn't work so I'll go ahead and
replace it now
then and now you'll see it's the S copy
variant and so now you'll see when we
play this now they both run okay so this
is the original and this is the copy so
now what we're going to do is we're
going to actually spawn it in because uh
some people are are under the impression
that motion matching doesn't work when
you spawn it in but it
does so I'll just name it
that so if you remember I added a delay
here I'll actually disconnect that so
that you'll see what happens if we don't
do
that and then on begin play I'm just
going to uh get random reachable point
and radius
um 200 and I'll just
get haor
location and that'll be the location of
the
spawner and remember you have to you
have to give it a radius 200 is a is a
somewhat short radius but anyway so
we're going
to spawn actor from
class and I'm going to spawn
um I'm going to spawn a child of this
one
actually just so people uh don't think
you know that that for some reason
uh for some reason it it only doesn't
work with children you know uh I don't
want nobody uh saying that so um I'm
just going to go ahead
and and uh bypass that and you'll see
it's working that's a child you'll see
it says SC copy child that's the
child so I just wanted to verify that
for you guys I want to make a
transform and also I need to uh assign
it a class so I'm going to have I'm
going to assign it that that child class
of that
copy and that should be all I need
so I'm going to delete that and I'm
going to drop this one out
here and then I'll I'll go ahead and do
that so you'll see he's not moving
around this is what a lot of people they
see this and they think uh that it's not
working but but they'll get
errors and they'll just ignore the
errors because obviously the errors
don't correlate to that right no you're
wrong they definitely do correlate to
that as I told you before if you uh do
the automatic uh like possession when
they responding uh there's a timing
discrepancy between the AI controller
spawning and the AI controller actually
being attached and assigned the pawn
which it's supposed to be controlling
and so what ends up happening is all
this stuff right here will end up firing
before the
um before the AI controller is actually
assigned so if you just give it a short
little delay here
then it'll prevent that also you could
just not have that firing from begin
play and you could actually just
manually call this uh from the actual
character or from some other source
whatever spawning it you could have the
spawner actually call that function so
in fact I'll go ahead and show you how
to do that
instead so I'll just do
this so on the
spawner I'll call the start
let me go back
here yeah the the start move to so I'm
going to have to oh
right so this is uh
okay I I could get the AI controller I
guess
and then I could call the start move to
on
it and that should that should
work
uh we'll see yeah it worked so that's
one way of uh dealing of dealing with it
without having to actually add a delay
on begin play and have it called from
begin play you can just manually call it
but you'll see this works you know I've
set this up in every just about every
possible way that you could set it up uh
and I've showed you what you could do
wrong and hopefully this gets you guys
through because
uh it's it's kind of it's kind of weird
man whenever people they'll just come on
there and they'll just say uh your
method doesn't work well it's not
actually my method
uh it's not actually my method guys uh I
got this from Caleb Longmire so maybe
you should go tell Caleb Longmire the
guy who made gasp and ALS maybe you
should go tell him it doesn't work
because he's the one I got it from so
anyway I'll see you in the next video

================================================================================
ARQUIVO: Unreal Engine 5_ Pistol Pickup Part 1 (Quick Magic Cleanup) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

In this video we will prepare an animation using QuickMagic @QuickMagic_AI , clean it up inside Unreal Engine and make it Game-Ready, and in the next video we will set it up as a Contextual Animation.

Part 2 (Contextual Anims): https://youtu.be/tUX9dv3eMRI

QuickMagic PromoCode: https://www.quickmagic.ai?code=l50rd1 (copy the entire link and paste it into your address bar YouTube ignores the last part of the link)

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

00:00:00 Quick Magic Video Prep
00:06:30 Quick Magic Anim Creation
00:15:00 Unreal Setup
00:19:00 Unreal Anim Cleanup

=== TRANSCRIÇÃO ===

all right guys so I'm back with another
video in this series I'm actually just
going to be showing you
guys uh how
to work with these motion
capture I mean uh the how to prep for
the motion capture so I'm just going to
delete this one uh this is D viny
resolve
uh I do not recommend uh actually using
hand bre for this uh I've actually tried
using handbrake for that and it actually
caused problem the compression that they
use in there uh I don't know why but for
whatever reason I get bad results uh
from uh the compression technique or
whatever maybe it's just those default
settings uh so let's
see first off
uh let me actually just do
this so I'm going to open up a new
one and the reason why is because I
actually changed my uh perspective on
this one to kind of match what they uh
show in their examples now whenever you
uh drag one of these videos into here
it'll ask you if you want to change the
projects frame rate you're always going
to say
yes that'll uh match the project frame
rate to the video and it it should also
match the resolution as
well and so you'll
see we have this here I'm doing a t pose
on mine uh if you're using the free
version it's not necessary but it's
probably a good idea to do it anyway um
now the thing is though is the act of
adding a t pose in there is going to
extend the
animation and and if we go over here to
the quick
magic uh the AI Avatar is going to be
the one for the free guys it should be
the same yeah so for both the free and
the paid uh prescription uh models you
get 60 seconds in length 200 megabytes
Max
size maybe that's not what you get for
the
free I think it is
though it's saying monthly
subscribers but I think the free one you
can do that too because now they they've
given me some uh credits here for the
month but I tried this I tested it
before I accepted uh this and I believe
it was the same 60 seconds 200 megabytes
now this has to be MP 4 which is going
to be uh it's going to take up more
space than
aov uh which is what the iPhone records
it in and they want you to use the h264
encoding now this uh should be the
color the correct color for mine so what
I'm going to do here is I'm going to
scrub through here
and I'm going to you can press uh
control backspace to trim or you can
come up here to timeline and you can do
I mean contrl plus b uh to
razor and I'm just going to clip that
part out because I want this to be as
small as
possible and I don't need that last part
and I'm just going to control B right
here as
well and so this one is going yeah and I
went I went to Walmart and got a uh prop
pistol it's just a little Nerf gun uh
just for this
video and now you don't have to put
anything up behind you but if you're
wearing light clothes like I'm wearing
then you don't want to be up against a a
light backdrop because it is going to uh
blend in and it's probably going to
confuse the AI so I'm going to call this
[Music]
uh pick up
pistol and this should all be
correct this isn't correct this needs to
be MP4
h264 is h264 is the default codec for
these but quick time is the default
format this right here the resolution of
frame rate will be set whenever you drag
the video into there and and uh change
it like I showed you
before and now you can also if you if
you have if you've uh broken this up
into multiple uh Clips you can actually
say individual clips and it'll render
each one of these broken up Clips out
into a uh individual files so you could
uh make several takes within one video
uh razor it uh and you could come over
here I'll just go ahead and show you you
could right click and add a new track
and you could drag uh that one right
here so it spins across here or it
doesn't have to uh come after this one
it could just be parallel to it actually
I think that's what I've done in the
past and you can add as many tracks as
you need to and whenever you come over
here and you say individual clip it'll
render each of those out as an
individual clip so I just have a single
clip
so um I'm going to put this into
here and render it out now I haven't
tried the wide uh the WID screen one
like this before so uh we're about to
see I've been doing uh the narrow uh one
now even if you have a p uh prescription
you can do the free one still and you
can do the uh the paid one which is this
one now the paid one takes about five
minutes the free one takes about 15
minutes I've timed
them and if I come over
[Music]
here this is where I saved
it and it'll show this every single time
unless you say don't show again I don't
know why I never do that but I don't it
take I think it takes a little bit
longer to analyze the video for the free
one um that's what I've seen you just
you only get one output format so I'm
just going to click and drag this one
over into here now you will have to
import Port this guy and then retarget
him inside of unreal if you're using
this one uh if you're if you have the
paid one you won't have to do that you
don't have any options in here either
this is all and you'll see this takes
zero credits it shows down
below now this automatically captures
finger movement too uh and it doesn't
charge you anything extra for
it now uh I did not actually expect this
it take so long my video upload speed
for whatever reason it's taking a while
um so I may end up cutting this out but
the paid one for whatever reason they
charge you extra for capturing the
fingers and stuff like that uh the
facial uh expressions and stuff uh and
I'm
not
really sure why they charge extra for
the fingers because the free they don't
charge you for that
so whatever um I think the output
between the free and the uh paid is the
same also this does not update in real
time you'll have to refresh your browser
for this to
update just so you
know and you can uh run the free one and
the paid one this is the paid one you
get all these different things to choose
from I don't know what the anim is this
is a a generic like map thing I believe
um this is only for face
obviously and then you have all these
you have these other ones right
here now the boy I think the I think the
the boy and maybe the mixim one are
probably going to be taller than unre 4
One the unreal 4 is kind of short uh so
uh that could cause uh some foot sliding
now whenever you do the paid one you
have to select hand right here if you
select upper body you it's only going to
record the upper body I'm going to
record the full body select the first
key frame of Animation that's the T pose
and this is a static camera it's not a
moving one and you'll see it's going to
charge me nine uh credits
I think they're pretty lenient with
their credits uh guys and the free one
uh as well you can always use the free
one uh
they're a lot more friendly towards
actual like developer use cases uh and
people that actually want to use this uh
for like videos
animations games uh this is the only one
that's going to be suitable for that
move. a I don't know what their deal is
I don't know what their problem is
you'll you might be able to with a paid
prescription a month a $35 monthly
subscription with move. a you may
squeeze eight animations out and that's
assuming that every single one comes out
perfect exactly how you want it and my
uh
in my experience especially when you f
you're first getting
started it's probably going to take you
like four or eight tries before you
before it comes out right so if you were
using move.
a you'd probably only end up getting
like two two actual animations out of
that per
month that's why move. I don't know what
their deal is it's it's [ __ ] it's
really it's really ridiculous anyway I'm
going to cut this out and and I'm going
to restart the video after this is done
but
yeah all right guys so I'm back uh first
off I'll go ahead and show you the free
one the output that it
got you'll see the fingers are are being
captured
don't look
bad in fact I think that one the lower
body might have actually came out
looking better than than it did for the
UF
4 it's hard to
tell to me it's hard to tell but let's
see it happens pretty fast yeah I think
this one actually I think the lower body
actually ended up getting captured
better and you know I've noticed this
too uh
but I'll just go ahead and download both
of
these okay it downloaded the video I
don't know why I did that
um I do not want the video uh thank
you uh so if you open this up and then
you download
that okay something's okay this is weird
um
yeah so I obviously don't want the
video okay
so that's interesting can you not
download the free ones maybe you can't
download the free
ones
o okay
okay I never actually tried to download
it so apparently you can't actually
download the free
ones I was not aware of
that yeah okay well I apologize guys uh
it looks like you actually do have to uh
purchase it see I had tried uh seeing
the output of them was would be but I
never actually tried downloading it so
apparently you can't actually download
the free ones that's
interesting because I want to say that
the free ones uh sometimes come out to
look uh sometimes look
better that's unfortunate okay so I've
got this pickup pistol Onre uh for
unreal I suppose I will just import that
into my game uh Dao
project so I'm actually going to import
it into
here no I'm going to import it into here
because I actually don't want it on the
repo I'm going to create a new
folder call it anim I'm not going to
create any subfolder for that I'm just
going to drag this over into here it's
going to open this up import only
animations and the skeleton will be the
ue4 I'm going to uncheck import skeletal
mesh probably not really important if
you if you have this checked it probably
isn't going to import the skeletal mesh
but I'm just going to do that anyway
just to be
safe and then import it
and now you see we have our animation
here so one thing to know is that I'm
actually going to need to uh rotate this
I'm going to I'm going to put snapping
on
here I thought I did 90 but no I didn't
um okay let's do it this way
then it probably isn't really going to
matter but the thing is is if
you let's see let me go back to the
video okay
that's let's
see so it's actually facing this way
yeah that would be correct okay if we're
standing here then we then it would be
facing that
way now this can be problematic you know
if you're coming at it from different
angles
um that's the only bad thing about uh
about this but I mean if you want to be
100% Fidelity then you may just need to
have multiple different animations where
you're grabbing it from different angles
or you could have
uh there's there's another way uh to
handle that as well I may go into that
in another video but I'm not going to go
into that in this video this is mostly
just uh to show you how uh you can do
stuff like that
so first things first I'm going to save
this and
then I'm going to retarget this
animation I'll just go ahead and use the
autogenerate retargeter
um I think that should be okay and we're
going
to retarget this to the
ufn and you can retarget it to you know
whatever character you're going to be
using you you can retarget it to
that
so we can copy this uh right here and go
back into the retarget asset and search
for that directory and it'll filter uh
out everything but that
directory and then export
animation and I'll put this under here
um I'll just call this quick
magic for
now and you'll see there's uh some clean
up to be
done little bit of foot sliding that's
okay
so I'll edit uh I'll bake this to the
control
rig we could actually do we could
actually uh H we'll just do this so I'll
bake it to the control
rig what I'm going to do though is I'm
going to duplicate this so we have a
back back
up I'll call it a rig as an
original and so what I'm actually going
to
do is I'm actually going to
oops I'll I'm going to start dragging
that so start moving it and then press
alt and you'll see it duplicates it
okay so that actually needs to be like
this yeah that's probably going to be
good enough for now
so I'll go ahead and add this to the
sequence
[Music]
and we'll go ahead and do
that and what I'm going to do
yes I'm going to come in here I'm going
to make some marks right
here I'll just go ahead and make a mark
right
there and you can rename these by right
clicking on them
down
so you probably don't need a whole lot
of frames uh to come before that I'd say
maybe 30 frames before the uh bend over
but remember the more frames you have uh
the longer it's going to take for the
entire action to happen so you could
actually just limit that and also i' I
made these animations kind of slow so if
you if you mean for this to be a game
animation then you're probably going to
want it to be a bit
faster so this is uh seven and
seven I'll just go with
uh 15 frames I believe that's about 15
frames
so right here this is where he's going
to pick it up
and I'm holding control and moving the
mouse whe to zoom in and out
[Music]
that's
230 so 245 we can make this the end
and really the start and the end you
don't really have to label
those now the thing is is if you don't
want any problems uh whenever you're
modifying these you actually need to
delete these extra key frames right
here um from the beginning and the end
if you don't it will the thing is is
those frames even though that they're
they're out of uh the actual frame it's
itself uh they're still influencing the
curves
uh they're still influencing uh these
Curves in here so just keep that in mind
whenever you're doing additive layers if
those are still there it will still
influence things and it can H it can
cause problems which is why I'm deleting
that those
yeah I'm wondering yeah okay I thought
so yeah so I'm just going to leave that
there because I have those and honestly
whenever you save this uh the start
frame is actually going to be frame zero
so it might have made more sense to
shift it over so that the first where
you want it to start at was at frame
zero but
H I could I would have to go through and
uh reset these I wish there was a way
that like you could have those uh
markers follow it there may
be okay there we go you you can so if
you if you lock those let's
see
well that's
interesting okay you have to shift
select them okay
so if you do that then you can bring
them all with
you there we
go because it might benefit you to
actually handle it that
way oh that's just for your
selection so I'm trying
to uh let's do it this
way sorry I'm having some technical
difficulties right here it seems that
the that this is that the start and end
is locked
now I can't grab them uh let's try this
let's save this which is going to to uh
really destroy this animation but we can
open level sequence again this might be
a
bug uh yeah so I think this is a bug
guys I don't know how to fix
it crap um oh it's because I have it
locked sorry okay I I never used that
feature before I thought it was going to
do something else
sometimes I experiment whenever I'm
making these
videos yeah so you can lock it for
safety reason so that you don't
accidentally offset those by accident
okay so anyway uh I don't know if you've
seen me do this I didn't I don't think I
even uh mentioned it I do it by default
but basically I always right click on
this and I add an additive section
that's just what I do
um so this is the base you can rename
these so that you can understand what
uh what they're
for so the first thing we're going to do
obviously is we're going to uh uh fix
the we're going to fix the
uh feet movement
here now one thing to know is that the
feet shouldn't be be moving at all so
they actually don't need
any uh keyed frames so
if what you can do is you can actually
rightclick on this and mute this uh you
can also press this button here to mute
that right
there and then you can select this one
to make this the active
uh track
and you could open the curve editor if
you want and you can do it like this
with the Curve
editor you have to be careful when
you're highlighting these
because uh sometimes it'll select uh
ones that you didn't mean to select and
I'm just going to delete all
those you could also do this from the
actual uh track itself
and so I don't need uh any of that
motion right there on
those so I'm just going to delete
that and the reason why is because I
don't want to be fighting that movement
whenever uh um whenever I lock the
feet and you'll see you'll see that we
get some we still get some movement even
though that the control isn't moving and
that's because the leg is locking and
this is ik and so the pelvis is too high
so we're going to have to adjust the
pelvis on the additive track that's
fine obviously there's a lot of other
stuff we're going to have to uh make uh
selections on so I already have a bunch
of uh junk in here as you can
see it looks like I can't can I not
delete that folder no I can't okay yeah
so be careful in here because you can't
actually delete these folders
uh I don't know why I think that's a
little weird maybe they'll fix that in
the future save often guys because
there's a lot of bugs with a sequencer
that's going to make it
crash also I should warn you I I'm
actually more familiar with doing this
stuff outside of Unreal Engine than I am
with uh control rig and sequencers so
you'll have to bear with
me so the first thing we want to
actually do is we actually want to we
actually want him to start in the uef in
idle pose because that's where he's
going to be com that's the pose he's
going to be coming out of when he's
performing these animations so we're
going to do is we're going to go to the
idle folder for the
ufn and we're going to uh search for
Loop and he's going to be uh doing this
out of the standing idle Loop so what
we're going to do is we're going to open
this up
and we're going
to we don't actually need to do that
from
here I've already got the auto pose but
I'll go ahead and show you how to do
this so we just need to open this up uh
and bake it to the control
rig and then what I'm going to do
is I'm going
to control a I'm going to select
something over here one of these
controls and control a and that's going
to select everything in here and then go
to poses it should open this control rig
pose right here I've got mine docked
over here you can dock it over here if
you don't see this animation window here
uh oops I didn't mean to do that I'll
show
you so normally this is what you see if
you press this button here it'll show
the tab and then you can dock it over
here if you want but that gives you a
lot less space to work with which is why
I normally dock it over
here so with all these controls selected
we're going to create a first of all I
want to actually create a new uh folder
in here and I'm going to call this
uh quick
magic and we'll see if that works no
that doesn't work okay so so I don't
know how I ended up creating that new
folder you're going to have to create it
under the
poses and I wish I didn't have all these
POS all these folders under here it's
kind of clustered so this is going to be
the
ufn idle pose and I wish that dog would
stop barking I know it's really loud on
the uh
recording but anyway so you don't have
to save this you can just exit out of it
and we're going to go back over into
the folder where we put our animation
and this is the one that we're actually
modifying we're going to open up uh this
level sequence it's going to uh pick
back up where we left off and you can
select key make sure this is selected uh
this is highlighted too guys but be
careful when this is highlighted because
when it's blue it means that any change
you make is going to key and with this
and this is something I don't like about
uh unreal engines sequencer but
sometimes when you key a frame it
actually doesn't show you that it's
keyed so be really careful with that
also never key something on the base
where you have all these keyed frames uh
because it will not propagate across the
entire uh animation which is why we
create these uh additive uh
sections so I'm going to unmute this one
now and with this one selected I'm going
to select controls and
paste and now you'll see he starts off
in uh the uef and auto
pose and it looks like we're going to
have to actually adjust the positioning
of this now uh due to that
change and you can also go into the top
uh down mode
here and adjust
this like
so something like
that you can also go into wireframe mode
uh if things if you get too close and
you're not in wireframe mode it can
actually clip it's not doing it right
now but I've had problems with the
clipping where things disappear because
you're getting too
close they I wish they because they have
orthog true orthographic now in Unreal
Engine uh five I wish they would uh
switch this out with a a true
orthographic maybe this is orthographic
I'm not entirely sure to be honest but
it doesn't act like orthographic because
sometimes like I said if you get too
close to something it'll actually
disappear from the
viewport so we're going to have to fix
the fingers obviously we're going to
have to make a whole lot of other
adjustments too now this is the hens are
in ik right now uh so I'm just going to
go ahead and save this this may cause
problems this is another reason why I
don't like uh doing things in unreal is
because it's just so difficult to switch
between FK and
ik but also it bakes all these to every
single key frame and you and you always
want to when you delete those key frames
zoom in and make sure you didn't miss
one because if you're zoomed out too far
there may be two keyed frames right here
and you'll miss
it and what will happen is uh you'll
have ik enabled on this one but on the
next one it'll be disabled and so it'll
be disabled from this Frame all the way
to the
end and so and you have to uh make those
changes on the base Global under the
base Global control here you can't
actually make that change from the
additive which is another annoying
thing because it means you have to
continuously switch back and
[Music]
forth and it looks like things have been
displaced again
[Music]
let me just put that right
there yeah things have been displaced
again
okay so I'm going to put that back right
there
okay so we got a lot of cleanup to do
with this this is a pretty complex one I
probably shouldn't have chosen this one
for the first one uh yeah so I'm going
to go ahead and roll with it though guys
uh all
right so we've got this base frame
altered and I'll call this ufn
idle
pose and I and I want to create another
additive
track and I'll just go ahead and key
that first
frame and actually what we actually want
to do here is let me just
uh let me just go back to this and what
I actually want to do is on this last
one I also want him to be in this idle
pose because I want him to start and
finish in the exact same pose so you can
press this two end button
here and you can select the controls
again and paste and this will make sure
that he starts and ends in the same pose
uh and also like I said if you if you
didn't delete those extra key frames on
the end uh then what will end up
happening is if you're trying to make
this a looping a perfect looping
animation it will not be a perfect
looping animation uh which is why I
deleted those key
frames also with the additive uh track
you'll notice that when you go to the
end and you key it it actually Keys the
second to last frame which is not what
you want so I'm going to drag that and
I'm going to make it the last keyed
frame so just to make sure I'm going to
go to the first
frame uh I'm going to go to the and also
the last frame is actually the second to
last frame it's a bug it's
they they've they've almost fixed this
but there's still that little issue
where when you go to the end it's not
actually the last
frame so it looks like it might have had
a slight alteration when I did that um
let me oh no it didn't let me just
select to these controls and just to be
safe I'm going to do it one more
time and I'm going to unselect this and
I'm going to go back to the first okay
there was no movement if there's no
movement when you're on the very last
frame in my case it's frame 103 not
102 uh if I go from this Frame to that
frame you don't want to see them move at
all and that's that's what we're looking
for you don't actually have to mute
these by the way if you uh change uh if
you mute it it just means that you're
not going to see any changes you made on
it on that uh section so you actually
may just want to select this one and
then make your change and then go back
just the active selecting changes the uh
the active
uh the active track which one's
active so this one's active right
now all
right actually this isn't the oh yeah
this isn't actually the pose we actually
want him to end in
okay now the now the the problem is
is I didn't
actually now now I just brought the ALS
uh animation uh poses over I didn't
actually make these from scratch which
is what I actually should have done
because these poses should have been
made from the uh ufn Idol
pose if I'm to be perfectly
honest and so this is actually
the the upper body part of this is
actually the pose that we actually want
them
in but I can show you something that we
can do is I can come over here
to take a recorder
it's already open right here
apparently okay it's about to crash
[Music]
nice it's probably because I had too
much stuff docked over on the
side that might have triggered that
bug yeah so this is going to be a really
long series guys so I apologize uh for
that but um
not much I can do about
it so I'm going to close this
tab actually I'm going to close a lot of
these
tabs I'm going to leave that one
docked I'm going to reopen
that oh my God don't tell me it's
GNA undock that okay there we go yeah
probably don't dock take recorder it
looks like there's uh some kind of weird
bug with it so actually what I'm gonna
do is I'm gonna come over here and I'm
gonna I'm I'm just gonna pick this
up and I want to select him and go to
source and add
him and then I'm just going to record
this
[Music]
you only have to record a couple of
seconds um you should actually stop the
game beforehand you can't save this
while the game is running you have to
stop the game and then save it it'll
give you an error it'll uh saying that
it can't save it if you do
that and then you can browse to this
folder and you can open this
up and open this
up and then what I may do is uh I'll
just unlock this and pull this over here
because I don't want it to be real long
and I'm just going
to bake this animation
sequence and I'm going to call this the
UF pistol
ready pose
and then I'm going to click this to open
it up and you see we have that pose now
with him in the okay it's about to crash
again
nice like I said save save often guys uh
sequencer and all that stuff related to
animation and Unreal Engine it's
extremely buggy uh constantly going to
crash while you're doing this this is
the reason why I I actually don't like
handling this stuff in Unreal Engine but
since it's the only actual free software
uh Without Limits or restrictions uh
that's the reason
why so I should I believe I saved that
so if we go back into the characters
folder ufn animations and quick Magic
yeah okay uh
let's
redem Okay it didn't save that it
crashed before okay undock that it'll
crash if you have that docked
uh and we'll open that back up and we'll
rebake
that and hopefully I can uh
manage this before it crashes again
ufn pistol ready
go go ahead and save it in case it
crashes it probably will and it crashed
okay at least I saved it that
time thankfully
[Music]
let me let me guys know if it crashes on
YouTube I'm just wondering if it's
uh something to do with uh my
project
so I can just exit out of that now I've
saved that so I don't have to redo
it now I'm going to come over here to
bake to control rig I wish I could
extract poses without having to bake it
to the control rig but whatever
um so with this first frame selected I'm
going to do the same thing contrl
a oh it looks like it created that
folder it's just it just wasn't showing
it okay I'll go ahead and use this one
now then um
[Music]
so now that we've done that we can go
back into this
one open that level sequence come back
over
here oops
undo
that and it looks like it didn't save
that additive track that I made
okay wow that's fine
though so what I'm going what I actually
want to
do is I'll
actually keep a frame right
here and then and actually I
might I might just key it right here on
this pickup let's key it right here on
this pickup and then on the very end on
frame 103 not not this end the actual
end I I hope they fix that
eventually I'm going to select that and
paste that pistol ready pose because
that's the pose we want to end in in and
the reason why is cuz uh when when we
are about to pick up the
pistol uh I'm going to assume that
you're not holding a
weapon and whenever
we have picked up the pistol we're going
to
transition uh into the pistol holding
state in which case we'll end up in the
pistol ready
state so it looks like that actually
caused some conflict there as you see
right there the way his uh wrist is
bending right there is funny so I'm
going to undo that and you'll see it it
kind of does that right there too
doesn't
it we could try this too we could try
having
him a lot of this is context sensitive
uh when you're adjusting things uh
sometimes you're fighting the
animation and so you may have to uh more
strategically uh do
things so he comes out and then he
recovers and goes into that pistol ready
pose so that's where he starts that's
where he
ends I'll
probably adjust
that actually I think what I'll do is
I'll try this I'm going to uh select
that control C
it and then select the last one and
control V it
I'll also select his head
control
yeah all right
so what I'm going to
do is I'm going to delete this key frame
right here since it's not
necessary and I'm going to call this uh
ufn idle to Pistol
ready I'm going to create another add
another additive drag go ahead and save
it and
uh uh control shift s or press this
button down here or come up here and uh
save all whichever you want to do uh but
yeah yeah so I may end up having to uh
make some adjustments to this uh pistol
ready pose that I have in here the
layering settings has the uh hips uh
Twisted a little funny which is why I
had to fix it in here and I had to lower
as well uh because it was sitting too
high uh so I may end up H I may end up
replacing the actual layered pistol uh
pose with this one after I get
everything all uh situated as far as
that
goes now you'll see that
his let's see
we're going to select
this and right let's
see how why does it keep
shifting H let me see
okay that was weird that was obvious
that was apparently a uh a bug so I'm
just going to undo that and you'll see
it fixed it okay lot of bugs guys
um
attach we're going to attach this right
here to the weapon R
bone um
so let's do that and let's
uh let's go to
attach and preserve
current I think preserve current will be
enough
okay there we
go
cool there may actually be another way
to do this
yeah because that's going to as you can
see
[Music]
there so I think what I actually want to
do is I actually want to move this right
here
okay let's undo that I don't know what's
going on
there we could also just delete
that
nope let's do it uh again but we're
going to do it right
right
here because the pickup is actually when
his hand is supposed to be touching
it so we're actually I think going to
have to modify this animation so that
he's grabbing it
better first and foremost so let's just
go ahead and skip that part for
now what I want to do
is I actually want
to uh lower his body
more and this is where things can be a
little
tricky so let's just go ahead and let me
uh look at my reference pose
here and actually let me open this up
with key frame
Pro if you guys are interested in this I
can put a link down in the description
let me see if I can zoom in can I zoom
in uh I'm not sure I can actually zoom
in there we go I can make it bigger but
I I have no way of moving around okay
all right uh let's just do a r
okay that's not good is this a bug in
their
software it's looking like
it so I'm going to just do this no I
don't windows I don't want to do that
thank
you all
right so I actually want want this to be
like
this that's too
low okay I'm making a mistake here let's
see
yeah okay sorry guys so I messed up this
is why I use additive
tracks so that's fine you'll get to see
how certain things will mess stuff up so
I didn't key my frames that's why you
key your
frames so key the first
frame uh and key the last
frame and
also I want to actually I want to key
the frame when we start to bend bend
over and
then when we're fully back up after
picking it up and now right here on the
pickup this is where I'm actually going
to adjust
this I'm just going to lower a little
bit o
I think uh I just need
to rotate this and I'm actually going to
rotate this in World
space because I want it to be aligned I
just want it to go straight
down I think that's about right
actually but it seems a bit
off right here
now and we want this to
be picking up and it looks like we we're
hitting our Max here so I'm going to
have
to maybe Bend oh so
watch out for
snapping we just want a little bit of
rotation
here and we're reaching our Max
again so yeah we're going to need this
to be
I don't want that to be too far down
actually I want him to be able to reach
it without it well my arm is extended
right here so that's probably
good but this needs to be
adjusted like
so and out
slightly it actually looks
like yeah so my feet are actually uh too
uh too too close together right there so
my pose actually didn't match uh very
well uh with the ufn it's it it's
probably because I didn't actually check
and look at the ufn pose before I
actually took my pose uh you know and
you actually really do want to uh match
your pose as closely as you
can see
I'm
wondering yeah I think that's probably
good so
so those are the
modifications for
that now right here we're going to want
the fingers to be
in a grabbing pose and I probably
already have that in here
I can use this one actually but I need
to grab his
fingers now I can actually just
uh do this because uh I already have
that set up and what it'll do is it'll
automatically select all of those bones
and then I can come over here to this
one and without selecting the controls
just paste it onto those controls
and you'll see he he does a grabbing uh
motion but obviously that's not going to
work out too well for
me so actually I'm just going to undo
that and I'm going to paste that pose
there instead
it looks like I can actually loosen that
up a
bit so what I'm going to do is I'm going
to uh select to these so that I can curl
the fingers
and you can actually do it from over
here I don't want I don't want the thumb
included I just want
these and when you do this make sure
that you're actually on local space I
didn't check that first you don't want
to curl the fingers in World space
yeah you might end up having
to curl some of these
individually I think that's good
and I'm going to rotate this in World
space
and I'm going to reset
those also uh sometimes whenever you uh
copy
these or a paste to these poses guys uh
it'll it'll create locational offsets
and you do not want locational offsets
so I always press the reset button on
those uh just to make sure and if the
reset button still shows up that's fine
it doesn't mean anything it's just that
sometimes it does a negative zero and
negative zeros will trigger that reset
button but if you re if you reset it it
won't show that uh and you won't be able
to like completely reset it but negative
0 is the same as zero so I wouldn't
worry about it now with this in local
space I'm going to oh I'm going to
rotate
this like
so and what I'm going to actually do is
I'm actually going to
now this might be a little tricky so
we'll
see I'm going to constrain
this
to the
pistol and I'm going to right click on
it and I'm going to say no Dynamic
offset do not maintain
[Music]
offset and so when we come down we go to
pick this this pick this up on frame 52
we're going to attach this to this
weapon bone and then this weapon bone is
going to be
animated and that's what we
want this is where weapon bones can come
in uh
handy so I'm now I'm going to do another
additive track and I'm going to call
this one
uh hose
[Music]
adjustments and let's
see yeah so that actually needs to be
fixed let me go come back over
here and I'm going
to let me see
I need the left
one okay that selected the oops I don't
want those I just want the
fingers make sure nothing else is
selected just the
fingers and then I'm going
to paste
that there we go
so we want him to be in the pistol
holding pose by the time he gets up up
here and that's the pistol holding pose
for
him and that's
fine but I might rotate this in because
it looks weird having it rotated
out and also it looks like
it's too locked so I'm going to uh give
it a little bit of slack there
[Music]
I think that's good for that uh
layer now this uh one right here we're
going to key
that we're going to key
this I'm just going to key the start and
last
[Music]
oops I'm going to key the start and last
frame just to be safe I like to do that
even though even when it's not necessary
uh just you know to be safe
so and we may end up not wanting that
bend right there
or we
could make it so that it's not so bad so
what we'll do is we'll find out where it
starts to bend
at and we can come back over to this
pose
adjustment and select that control and
key
it and then right here where it's at its
peak
we
can in local space make sure you're in
local space let me just expand this I
don't need that uh on the side
anymore and I'll rotate that
out and now this is where I hate these
UF these uh ball and sock uh ball and
socket style joints because it makes it
difficult to see but if you look at the
arm and you look at this box if you kind
of uh make that box so that it's evenly
distributed amongst
uh amongst uh this arm then you'll
notice it's aligned so right there it's
aligned
so it may not be aligned this way
though that's probably about aligned
and so you'll
see it still does uh something funky
right
here and so what we'll do is I'll create
uh some temporary
markers where it's doing that weird
thing
and then what I'll do
is I'll come back to this base track
here select
that select that and then go into the
sequence uh
curves and we're looking at the the
rotation
only and we're looking at uh the
curve between a and b and you'll see it
Peaks right here it dips right there on
the uh the roll and it Peaks on the yaah
at least I think that's
yeah and what you
could what you could do right here
is you could
actually select all of
these right click and
filter and do a smart
reduce and then
do a ging on these
[Music]
yeah this uh gazing it it's
uh not that
great maybe something like that
and I'll just do the same thing here
uh yeah okay
interesting
so we did make some adjustments to that
on
uh sorry one second uh these like to
expand every time you do something which
is it can be rather
annoying let's delete that right there
and so you'll see it's offset so what
I'm going to do is go back to the base
now select this again go back over here
and select the
yah and
now there we
go so you'll see the finger doing
something fun funny too I think or maybe
it's just the perspective I think it may
actually just be the
perspective oh no the fingers are moving
okay
so in order to fix that problem with the
fingers you have to basically do what I
did before where with the feet where I
deleted those uh tracks for those
along that
[Music]
area I'm not really worried about the
metacarpal
okay you can only reduce them so much
let me see if I
can zoom to fit there we go
and then you can just delete all of
those and you'll see it it still moves a
little bit but once we uh uh set the
pose for the fingers
again it
should fix that we may actually want to
yeah I'm
thinking we might just delete those
too yeah that'll give us more control
and you'll see the fingers aren't doing
uh funny movements now
but right here we'll have
to uh repaste that pose on our additive
track so right here on the pose
adjustment right here on this Frame
right
here let me just do this
control shift control shift control
shift and control
[Music]
shift and I'm just going to save that
so what we actually want is we want this
to pause there for a
minute so I'm G
to two
so right here I'm going to create
another key
frame I don't think I can copy and paste
right here which is quite annoying in my
opinion uh I wish copy and paste worked
but you'll see it doesn't work and you
can't copy for example you can't copy in
World space and paste in World space and
then turn around and say you know maybe
you want to copy in local space and
paste in local space you can't do stuff
like that uh in fact you can't copy and
paste at all which is rather annoying
because most animation softwares you can
do that it's not difficult so this is
what we can do instead we can use the
Snapper tool which is it it's annoying
to me that we would have to use this but
I'm going to keep
offset snap position and
rotation and then right here we want the
last frame to be
57 and we want the first frame to be the
starting frame or reference frame to be
52 and we're going to say all frames and
then we're going to
snap and you'll see we have have these
key frames right here and so
now you'll see the hand stays in place
and then it'll start moving
again so right here what we actually
want
is for his fingers to close in around
it
better oh well I mean I guess his
fingers are already closed in around it
yeah so that's kind of
like wrong
okay so what we would want
is we actually want this to be out
further for
so right
here I want
to detach that
okay that might crash
it I'm not going to lie that scared me I
thought it was about to uh crash it it
did bake it though which I don't want so
I'm going
to I'm going to delete those key
frames we're in the
world that's
weird yeah so that caused some weird
problem with that weapon bone so I'm
going to undo
that what I'm actually going to do
instead
where is
that yeah that's weird okay well I'll
show you how to fix that so we're going
to
bake all frames
[Music]
I just want that to be from 52 to 57
actually and then right here I'll
just have that
and in actuality right here what we want
is we want
the we want it to be in that pose
yeah so I'm going to
actually remove those
this needs to be fully
on no
I'm going to have to adjust the fingers
here I'll just temporarily adjust the
fingers for
that
[Music]
okay and then right here I'm going to do
this
actually
again let's
see let's go ahead and save it and then
I'm going to delete that and I'm
actually going to reparent this
again I don't know what what just
happened it just created two of them
okay so deselect that select that again
I must have had two controls selected
when I did
that I'm going to uncheck Dynamic offset
Dynamic offset means that the animation
can offset
it uh where
needed which is not actually what we
want and actually I'm going to delete
these and we're going to do this again
but we're going to make it 55
to
55 we're going to bake this from 52 to
55 and so you'll see right
there actually I don't think I need that
baked uh right there because we're going
to attach it right here on frame 52 so I
think that'll be okay all right
so back over here we're going to need to
attach this on frame
52 and we want to PR preserve current by
default it's set To None we want to
preserve the current uh
transform and then right here we're
going to attach it to weapon
[Music]
R yep there we go nice
and we're going to drag this out
actually
oh okay I see
now I never took that off I don't think
that would have an effect on it but
let's just do this
paste paste
paste there we
go actually I guess we could paste it
right here too
I think I want to say that's a little
bit too
fast or maybe it's a little too
slow let's try this
that might that might look a little
weird yeah so I think what we should do
instead is adjust the uh
finger placement okay
so let
me do this we're going to and this goes
back to the whole thing where we can't
copy and paste our only option is to
create a uh a pose which is stupid in my
opinion but hopefully they'll improve
this over time and other so animation
software this this isn't required it's
really easy it's copy and paste but with
Unreal Engine they don't have any proper
copy paste stuff
so anyway
I'm just going to save this and the
point of this is is to maintain that
that position uh for a few
frames oh crap okay that's not going to
work okay we're going to have to do this
a different
way oops I don't know what I just
deleted okay I don't think I deleted
anything delete this key frame and what
we're going to do actually is we're
going
to do this we're going to bake this
we're going to constrain and bake
this so we're going to reparent
[Applause]
this to this uh to this right here this
body one we could have done it to this
one we just need something that's not
actually moving
currently we're going to uncheck Dynamic
offset and then we're going to bake this
from frame 52 to 55 all
frames and then we're going to have to
repaste that because it obviously messed
it up
there we
go that I think that looks
fine uh we could delay that let's try
deleting that no
let's just delay
it we might drag it
out let's try dragging it out a little
bit a couple more frames let's just try
this yeah that looks
fine I just didn't want it to be
clipping into the ground as he picks it
up it clips into the ground a little bit
still so we could try frame
[Music]
67 and that that'll still I think happen
pretty
fast so if we if we try
this I think that looks
fine yeah okay I mean it's going to be
up to you guys how like detailed you
want it to be I mean uh I want to go to
overboard with it guys uh people aren't
going to be like oh that's not realistic
oh the pistol is floating into his hand
over the course of three frames like I I
don't think people are gonna be I don't
think gamers are going to be that picky
guys I mean I mean most of your gamers
are probably going to be like Minecraft
players so I mean come on I mean let's
be honest uh people that people that
want hyper realistic games they're not
looking for indie games because they
already know that inding games aren't
going to be hyper
realistic um you can try to be a first
in that regard um and just know though
that you'll probably fail like everyone
else that tried that
has so I'm going to
there we
go starting to look like an animation
guys and I've barely even done anything
now I mean it granted this is probably
going to be like two or three hour video
I mean but this one alone it looks like
I'm not going to end up need Del in this
so I'm just going to delete it and it
caused all kinds of problems I'm just
going to undo that so uh I don't know
what I did on that track to I don't
think I did
anything so let's just do that let's
delete that
yeah that's unfortunate you can't
unfortunately uh you can create these
layers but you can't actually flatten
them uh like you can a layer inside of
Photoshop for
example so if you make adjustments like
that it may be that
you and that's probably a bug to be
honest uh an Unreal Engine I it
shouldn't be doing that when I delete
that track it shouldn't have any effect
on that underlying track that's not how
layer layers are supposed to
work but unfortunately it looks like
that's exactly how it works now don't be
alarmed when you see stuff like this
outside of the frame uh that's because
if we come up here uh that's
not keyed right there if I move that
over you'll see it it extends out
further
and so I'll just do that and save
it so I seen some stuff right there I'm
not really worried about that because
this isn't going to be a dual pistol
animation uh he's not going to be
holding a pistol in this hand over here
I might go ahead and fix that anyway so
I'll just say weapon L
here so let me
just I like to know which track I'm
actually on when I'm doing this stuff
I'm just going to do this on this one so
I'm going to select that
and I'm just going to paste
this so it wasn't really necessary but I
went ahead and did it anyway
[Music]
there's still an audity I see right
there his hand
locks right
there I want to put this in local space
kind of
weird yeah there we
go that's much
better so when you're moving the hands
uh if you're not trying to grab
something in the world then most of the
time we going to be moving these in
local
space and man this animation actually
ended up coming out pretty good uh and I
didn't actually have to make a whole lot
of modifications to things uh
thankfully now I don't like how his
shoulders move right
here okay that's that pose now that pose
has some problems as you can see that's
why I was saying I'm probably going to
end up redoing that
pose
um I didn't realize how hunched over he
looked whenever he was in that pose but
coming out of this pose into this one
you can see how hunched over he
looks so yeah I'm probably going to be
uh changing that pose in this one
in fact I think this pose right here is
probably actually more suitable so what
I'll probably just
do is let me just select
this
this this and
this and I just want to lower that a
little just so his legs aren't quite as
low
locked I think that's
good what I'll do is I'll just go ahead
and call this the last frame
instead it'll also make it
shorter and so what we'll
do is we'll do
that and I'll unlock
this
okay and remember to delete all
those yeah
okay I'm going to uh
oops um
delete that
Mark so that's the last
frame and that and that I'm probably
going to replace uh that pistol ready
pose with this one
[Music]
that's actually more
appropriate now let's see
here is that really how his fingers were
on that pose I don't think it
was no it wasn't okay so over here on
this pose adjustment right here what
we're going to do is we're actually
going
to select the fingers and we're going to
repaste this for the fingers
yeah okay that fixed
it now his thumb is a little bit inside
of there
but we could fix that I
guess since I'm going to be replacing
this pose I may as
well that's good
and this will actually be the uh pistol
ready
pose I just want that to be a little bit
more level here
let's just go ahead and watch this again
I want to see how that hand
moves okay I guess that looks
fine well there's a little aity right
here where it right
here that that's where the curve editor
comes in again so we need to go to the
base we need to go to this curve
editor select this and you'll see this
uh curve motion right
here that's going to be the row and the
once
again and same thing
that softens
it okay that looks a lot better I
think and we could
select these fingers
here and we could do
this you'll see a lot of motion right
here a lot of odd motion near the center
we don't want to affect the first or the
last
frame you have to be careful with the
gine uh it's not very good to be
honest
um yeah so it can cause problems because
it doesn't take into consideration the
ones that aren't selected uh before or
after so so it can actually cause some
issues that softens the finger movement
up a little bit on that
hand I think this animation is good guys
I've beat it into
the I've beat it into the ground okay so
in the next video and uh I mean if you
appreciate this video man give it a like
you know thumbs up whatever uh I know it
was a long video uh this isn't going to
be for
everybody animation authoring is not
easy it can it is timec consuming uh
most animators actually end up spending
eight
hours at a minimum they they spend no
less than eight hours per
animation I did this in a lot less time
than that uh so you can kick this uh
horse uh until it it it turns into a
puddle you know I mean it's up to you uh
but I think this is good enough for us
and in the next video I'm going to show
you how to uh I'm going start showing
you guys how to set this up so stay
tuned for that and I'll see you in the
next
video all right guys uh so just one last
thing I'm going to uh just go over
cleaning this part up right here there's
also a wrist a weird wrist twist right
right here we're going to fix that as
well that's over the first 10
frames I believe I'm still on the
base
yep you'll see that curve right there on
the blue and the red same exact thing
the roll and the
A and we're going to do this
oops let me just do let me just do these
separately actually because they uh drop
to the very
bottom at different times
and so what I'm actually going to
do is I'm actually going to delete
those just like
so so it still it still rotates but it
looks a lot better I
think and you could probably
you probably manipulate this a little
bit by selecting
this and I don't like that
so that's
the the red
then you're going to get
that yeah let's do
this I'm going to do
this there we go
you could
probably yeah that's
good all right that's it guys I'll see
you in the next video

================================================================================
ARQUIVO: Unreal Engine 5_ Pistol Pickup Part 2 (Contextual Anims) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

The intention of this setup is to introduce you to Contextual Animations and how to set them up. I'll be demonstrating this by showing you how to setup a Pistol Pickup, which is a bit unorthodox but can still make good use of Contextual Animation Scenes.

Part 1 (Quick Magic Cleanup): https://youtu.be/2X46CWvOF8Y
Part 3 (Setup): https://youtu.be/vabTTxb8ux0

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

00:00 Intro To Setup
04:25 Project Breakdown
15:00 Contextual Anim Scene Intro
19:00 Project Setup
20:30 Creating Contextual Anim Scene

=== TRANSCRIÇÃO ===

all right guys so welcome back to new
video in this series so this video will
be uh picking up off of where I left off
in this one uh I'll have a link down in
the description in case you missed it
but I made this animation using quick
magic and then I I show you how to clean
it up inside of Unreal
Engine so I want to cover a few things
uh here first this is what you're going
to be able to expect from the results
that you
get so you'll see uh that I have made
this so that you can approach the item
from any direction and uh he'll be able
to uh to somewhat pick it up uh and make
hand contact now the hand contact won't
be perfect using this method but the
method that I show you in the beginning
uh will be the method that you normally
use for status objects that
don't move so these objects right
here because they're going to be
simulating physics when they're dropped
they could be uh at they could be
rotated like this or they could be
rotated like this or they uh could be
rotated any other direction like this
and
so um having him approach it from a very
specific location
kind of ends up making things a little
awkward uh which was pointed out to me
by one of the users in the Discord he he
brought that to my attention because he
was asking a question about it smart
Kool-Aid uh so
I spent probably about six hours beating
my head against a wall because I'm not
good at Vector math trying to figure
this out so at the end of this video
after I've showed you how to make it how
to set it up as a
static uh approach where you have to
approach it from this location right
here and you have to be looking in this
direction right here uh at the end of
this video I'll show you how to make it
so that you can approach it from any
direction as shown here so like I said
when you approach it from any direction
you won't have perfect hand contact but
in my opinion it doesn't really matter
that much uh
in fact I don't think I've ever seen a
game where they always make perfect
contact with the weapon games like pubg
they just they don't even uh bother they
just have them kind of sem semi bend
over and then it just pops into his hand
uh so anyway this is probably a more
sophisticated approach than what you'll
probably see in most video games even
aaa's so just keep that in mind uh
whenever I'm teaching this anyway so um
you'll get get another intro right after
this one because I'm not going to go
through and edit things professionally I
just don't do that if you've been
following my videos now I will tell you
that uh if the gun is hovering in the
air like this obviously this isn't going
to work I'm not going to uh for now I'm
not going to actually uh uh show how to
use ik for uh proper hand contact this
doesn't use hand ik it just uses Vector
math
so uh it assumes that the weapon is
laying flat on the ground as shown here
so if it's not laying flat on the ground
then it'll look like what it looked like
here but if you want to incorporate hand
I you can feel free to I might even do a
video later uh not right now not but
later I may do a video on setting up uh
ik I may come back to this and show how
to set up ik because uh contextual
animation scenes actually do support ik
they do have built-in support for ik
targets and stuff like that but anyway
uh
so I
will uh see you uh in the next part of
this video which will be coming up right
now all right guys so I had started
doing this video before but I ran into a
bunch of problems so anyway I'll explain
uh the approach that I took to this so
one thing you'll notice is that right
there uh the contact wasn't actually
perfect and that's because I was
actually rather close to the gun now the
rotation itself uh the way that I'm
handling the rotation is actually I'm
just letting the uh movement component
rotate it uh by setting the ai's focal
point uh so that it's pointing in the
correct direction uh so if you're that's
the caveat I Wasing talking about if he
was watching the uh preview videos on
the
uh uh Discord that I released uh if it's
because I'm actually and this is quite
messy actually right now but it'll be a
lot cleaner whenever uh we set it
up so basically I'm
uh un I'm disabling input that's not
really necessary but I'm doing it as a
safety precaution I'm unpossess the
character
I'm setting his camera to be back on
this camera because automatically uh
Unreal Engine will disconnect the player
controllers camera from this one uh and
so I don't actually want that I actually
want it to follow him as he's
rotating over here I create an uh just a
dummy AI controller I have that possess
possess it why do I do that you might
think well because I can set the focal
point easily for one uh and also uh that
mitigates the need to actually manually
rotate it which presents quite a a
problem to be honest um this part right
here is actually wait yeah actually I
think that is necessary this is some
weird issue with uh the motion matching
he he wants to start running in place
after he stops uh so this makes sure
that also the reason why I'm having an
AI controller possess it is so that I
can use the move to location uh the
simple move to for the player it simply
doesn't allow us to uh change the way
that this stop on overlap uh handles
things by default he'll stop on overlap
which will cause a an amount of error in
positioning
so I
may yeah let me
actually just bypass this and I'll do a
uh
simple simple move to location here just
to show you how that how that
works the problem is is is that if we
did do that then
uh
yeah so what I'll do is I will I'll just
set the actors rotation and this will be
real Snappy but uh that's okay just
ignore the fact that it's that it
snaps I'm just doing this to show you
the the error that we get and
positioning when we use the simple move
too that's not disconnected so it
shouldn't be throwing
errors and that's not connected no it's
not okay it should
still work no okay it doesn't
weird I not have it disconnected
I definitely do have it disconnected and
bypassed
okay let's just do
that okay let me just delete it I don't
know that's a bug that's
obviously
bug oh no
okay I see what's going on
so it's because I have that using
it sorry about that so if I just do
this yeah so it didn't actually move him
interestingly
enough oh yeah it does okay but it's not
actually rotating him
yeah
um let's
try and the reason why is because this
is
actually yeah see it's still not still
not wanting to move him
properly uh I think it's because I
needed delay
here so let's just add
a add a 1 second delay or let's put it
let's make it 1.5 second delay and what
we'll
do is we'll actually rotate the mesh
and this is kind of nuanced uh I won't
go
into that right now but it has to do
with the way that they handle the
movement component and stuff in
here but you'll see you see that air so
it we'll probably do it over here on
this one as
well
yeah so
the reason why I played it twice is
because I pressed it
twice yeah so you see the you see the
amount of error now uh what's actually
causing that I believe it's the it's
either going to be the stop on overlap
or it's going to be the acceptance
radius the simple move to location it
may actually have a built-in acceptance
radius I'm not 100% sure so uh that may
be something have to look into if
anybody else uh knows then let me know
but yeah that's basically the reason why
I did this the way it that I
did and I was just wanting to uh inform
you guys as to why I made the choices
that I did now I may end up having to
come back here and look at some of this
stuff I know this is kind of somewhat of
a mess I'll try to make it a lot cleaner
during the the tutorial guide
so anyway let me just make sure this
still works proper properly
now let me
see yeah okay I just wanted to make
sure like I said if if you're too close
to it then it can't rotate them properly
uh and if it can't rotate them properly
then there will be some offset there uh
the best way I could I can think think
of to handle that for you guys is to
actually you could actually make it so
that they have to be like within a like
a certain area uh in order to interact
with it for example like like you could
make it a lot of people do this they
make it so that you actually have to be
looking at it it has to be uh your mouse
has to actually be or your cursor
actually has to be over it uh before you
can uh pick it up and if you did if you
did it that way that would prevent the
problem because it would make sure that
uh that they were far that they would
have to be far enough away from it uh in
order for the move two to have enough
space to move and ensure that he's
rotated
properly so I hope that makes sense and
now I'll just go ahead and explain to
you how I'm actually moving moving it so
the and this will differ depending on
your setup and how things are handled L
but in the motion matching setup where
he's looking actually determines where
he where he rotates to while he's
moving uh so if I'm moving and I uh turn
my mouse you'll see that he turns to uh
face in the direction that I'm looking
you see so with the AI or the NPCs their
focal point actually determines where
their cursor is you can think of you can
think of it as their cursor so that
focal point is actually where they're
looking and so what I'm doing here is
I'm actually uh getting the rotation of
the syc uh transform and the reason why
I didn't use the entry transform is
because I I think there's some amount of
error with the entry
transform
um I'm not 100% sure I was I was kind of
flip-flop and back and forth between the
two now the entry transform doesn't
require any setup for you to use it uh
so what I might have been seeing I may
have been misinterpreting because I
didn't realize that at first that if I
was too close that it simply wouldn't
have enough movement to for the
character to correct his
rotation which was uh fixed this way
okay yeah so the entry transform there's
there's no error it's just as accurate
as the sync transform which means we
don't have to actually set up the sync
transform I'll discuss the the sync
transform though basically what the sync
transform is is it's uh basically the
warp Target uh
position and if you come in here if you
create a warp Target uh it does require
motion warping to be set up on your
animation but you have to remember
though that motion you can actually
motion warp things unless your animation
has root motion my animation does not
have root motion and therefore
um because he has no root motion I
cannot motion warp into this animation
unfortunately so that's something to
keep in mind too uh you could have a
couple of Step leading into this
animation and if you did that then you
could also you could one you could
motion match and you could motion warp
at this same time uh so that would give
you a much better
uh a much better
outcome but if you do that you you only
you want to keep it real short like
maybe he moves from right here to right
here the the problem is is that if
you you can't actually motion warp into
the beginning of the animation uh if
it's like out here for example because
you're going to walk over here and
you're going to try to interact with
this so you would have to have your
character walk all the way back here and
then you'd have to motion warp and uh
motion match into it you could still
kind of achieve that but you would need
to make sure that he's uh that specific
distance away
beforehand uh because there is a way to
handle it in such a way but it requires
the distance to be approximately the
same which kind of makes motion warping
uh a kind of edge case so where it's
kind of difficult to have
him seamlessly like go from a move a
running into uh the actual
animation uh this can be handled more
easily on animations where they're
actually standing in place like this
where they start from an idle uh that
makes it a lot easier because you can
just redirect the character to walk over
to this uh starting position uh and like
you know you could use the the method
that I used where it makes sure that
he's also rotated in the correct
direction also if you if you notice uh
if you notice some uh foot swimming
right here that's actually
the game animation sample project
responsible for that uh so just keep
that in mind uh this is the previe anom
instance uh that's causing that I have
the previe anom instance right here
which is why he's in uh well it's not
why he's in an idol yeah actually it is
because you'll see he's not actually
playing the animation so he's actually
supposed to be playing the animation but
there's a bug in here see now it's now
he's playing
it and you'll notice uh
yeah it's still doing that but that's
like I said it's the game animation
sample project that's responsible for
that little bit of foot sliding but
you're probably not going to have the
camera ride up on his feet like that
anyway so anyway uh yeah I've already uh
spent a lot of time discussing this so
let's go ahead and get
started the first thing we need to do
and I've already uh
migrated this animation over into this
new project what you're going to do is
you're going to go under
animation you're going to scroll
down until you see contextual animation
and you're going to check that it's
going to say all the stuff say yes and
then just
restart so this is a contextual
animation scene asset right here there's
only two assets that you need a
contextual animation scene and a
contextual animation rooll uh data asset
which only stores the uh role the roles
that actors are going to be playing
within the contextual animation scene so
you can think of a contextual animation
scene as a
choreographed uh act within
a within a uh show for
example so somebody had like uh if
somebody was putting on a show at school
or whatever maybe you would have two or
three uh Acts or scenes or whatever
you'd have dozens of scenes I don't know
I was never I never did stuff like that
in school but
um anyway all that stuff would be
planned out ahead of time you would
rehearse it all that and so everybody
would know where they needed to be uh
what they needed to do what they needed
to say so on and so forth well that's
basically what that's basically how
contextual animation scenes work so I'm
going to create a new folder here and
I'm going to call it context and I'm
seeing
and I'm going to rightclick and go to
animation and you'll see a contextual
animacy here I'm going to call it
C uh pistol
pickup and then we need a roll so you
could try to generically uh label this
stuff and share the this Ro data asset
across all of your contextual animation
scenes if you want it's probably more
appropriate to do it that way depending
on the situation you may need different
roles
uh but anyway so I don't think these
data assets are really that big so what
you're going to do is you're going to
create a data asset right up here at the
top you'll see Contex item rolles asset
you're going to select that ignore this
one you'll never make one of these I
don't even know why it's what shows up
in here but basically this is that
without its actual wrapper in place uh
which is why you would never want to
actually create
that and so we'll call this C and I'll
just call it pistol pick up I'm not
going to go for like a generic naming
convention and I'll just uh call this
pistol and I'll call this uh
player and this is going to be a
character and so what we actually want
to do is we actually want to make sure
that this matches uh the character
settings so I'm going to come in here
and I'm doing this in my project don't
have to do the senior project guys but
uh anyway it's actually going to make it
a little bit more difficult doing it
inside of here but I decided to do it at
least for this one I'm going to do it
inside of here some of the other ones
that I do I probably won't do inside of
here and then and all honesty a pistol
pickup is kind of a a difficult one to
do I probably shouldn't have chosen this
uh to do at the beginning but of the
series but I did I wasn't thinking
straight when I uh selected this one I
just thought it'd be cool so anyway
you're going to copy your capsule half
height here and you're going to come
back over here you're going to paste
that here and your capsule radius you're
going to copy and paste that
here
so I don't believe we actually need to
rotate that but I'll discuss this mes to
component uh stuff uh later on
what we need to focus on now is browse
back over here and open up this
contextual animation scene and we need
to assign this roll asset here so you
can just click and drag it or you can
select it and press the back button it's
up to you you have to update the rules
afterwards it does not do that
automatically there uh you need to
select your primary R now the primary Ro
is always going to be the thing that
something is interacting with so if you
need a player to sneak up behind a NPC
and stab them in the neck or or choke
them out or whatever then that NPC is
going to be the primary role not the
player I know it sounds a little
backwards but that's how it works if
it's if your player is going up and
opening up a drawer a cabinet a window a
a refrigerator uh or whatever or picking
something up off the ground those things
that he's interacting with will be the
primary
role the override preview data this
allows you to actually see what's going
on in here if you don't do this you
won't see crap inside of here um unless
it has an animation and you've added an
animation on your track for
it so actually let's just go ahead and
do that first so to to do anything
inside of here you need to add a new
Anem set and this actually creates a
section for you so you have to choose
your section name and that'll appear in
this drop- down uh menu right here so
you can name it whatever you want I'm
going to call this uh
bottom
pistol pickup and the reason why I'm
doing bottom is because I'm actually
picking it up picking it up from the
bottom I might actually say bottom l so
I'm picking it up from the bottom left
or you can think of it that the p is
pointing to the left of uh when the
player is looking down at
it so right here you have your data and
you don't have to actually fill this out
right now you can wait and fill it out
later after you press
okay so you can uh set the movement mode
so you can change the movement mode of
these things if it's not upon you don't
have to worry about the movement mode
you can just say none or whatever or
just simply don't change it
you could I guess you could say optional
for this one because it doesn't actually
have an
animation but the optional it might
actually refer to the role itself within
this context uh so you may or may not
want to do that I probably wouldn't
touch it uh simply because there's no
tool tip here letting me know what the
hell it actually means so I I can only
guess what its purpose is
so I've not gone through the C++ for
this to see if there's any tool tips in
there that describe what they're uh for
but normally if you don't see a tool tip
when you move your mouse over it
probably means that there isn't one in
C++ either because those tool tips
actually get drawn from the
C++ but that also depends on how they
how they comment them and stuff like
that so it could it could have a comment
explaining it without there actually
being a tool tip showing up in here but
it's hard for me to say I don't mess
around with C++ much if you're using
motion uh warping for an animation then
you need to change it to flying mode
because motion warping is affected by
gravity uh for this one it's just going
to be walking in actuality I'm just
going to uh shift rightclick that to
copy that because I forgot to do this I
do it every time so the first thing we
actually need to do is we actually need
to make a
uh uh an anim
monage and so now I'm going to go ahead
and create this and I want to shift left
click and paste that back in
here and I'm going
to uh select that pickup pistol unreal
Montage now the random weight I believe
that is like in case you have several
different uh anom sets uh and you want
so let me just uh explain this to you so
you have your different sections those
different sections are like for
different situations for example uh one
section might be for getting uh in the
car from the left the other might uh
from the driver door for example the
other might be uh where you're getting
in the car from the passenger door and
then you climb over the seat and get in
the driver's seat uh kind of like how
they handle it in GTA also if you go and
you look at the uh The Matrix City demo
uh it they do they do it like that and
there
so one thing uh to note though is that
you can actually add multiple anom sets
under the same section
and so that's where this random weight
comes in if you have like five different
uh animation animations in here for your
player uh role then you need a random
weight that determines which one of
those gets randomly chosen actually I
believe they have something like that
set up in The Matrix City demo too uh
where there's different like animations
it can choose from for getting in the
car I could be wrong
um and then it randomly selects one of
those every time that you get in the
vehicle but like I said I could be wrong
I probably am I I may have seen that
somewhere else um maybe on the bench
example that they were setting up I
don't think that was filled out though I
think those assets were blank so it was
probably the vehicle one anyway so if I
just say okay if I come over here and I
do this again uh let's just say I do
this
uh oh that wasn't a uh
so for one I added that under a
different section okay so I'll go ahead
and uh do this
again and so now you'll see that under
this section uh we have uh we have um
two indexes index zero and index one and
one is for a hurdle low stand and the
other is for a hurdle High stand okay
and so that's where the random weight
would come in and I can delete that and
you'll see it goes back to only having
one Anem set for the player and I can
remove that enem set again and now I
don't have any for that player in fact
that section disappeared because it no
longer has any inem
sets so that's how you can you can also
say remove section and it'll just delete
the entire section regardless of how
many animations are in it so once you're
in a section you'll notice that you have
work Point definitions for each section
you have a name and uh you have this
sync animations check
box so this sync
animation stuff I'm not going to show
you that in this one uh this is just a
kind of introductory uh to contextual
animation scenes and how they work
so so for this
one we're not going to have to actually
worry about that in fact we could
uncheck it and it's not going to make
any difference if you select uh an
animation for a rooll on this timeline
then it'll show this selected anim track
category where your animation is you can
change the Mac start time the movement
mode
uh you can set it to be optional or not
and then uh there's other stuff in here
as well so you have your selection
criteria and your mesh to scene right
here so in the actual roll asset you
have your mesh to component but in here
you have your mesh to scene so your mesh
to
component is going to be its
orientation to the component at
s yeah so that this would be how you
reorient it relative to
itself its position in the scene and
then right here this is how you would
alter its position within the scene I do
believe that's how it works I I can tell
you for sure though that the mesh to
Scene It does reorient it inside of here
but this right here can be a little
confusing which is why it's a bit
difficult for me to explain so you'll
see that we can't actually see him in
here but we need to actually add some
override preview
data I'm going to set this to be the
player it's going to be an actor and I'm
going to say um
CBP sendbox character Dao I'm going to
select my character for this one and
this is going to be an actor 2 it's
going to be the pistol roll and this is
going to be the
BP oh let's see
p oh it's going to be the
M9 the BP gun
M9 now after you change this it won't
show up right away you need to reset
your scene
and
also this is buggy guys so you'll see
that this character is actually sitting
right in here
um let me see if I can figure out how to
get it
to uh sit right it doesn't look like I'm
going to be able
to let me
see nope okay yeah so by the way the
Behavior Uh this is ignore channels I
believe is active as long as uh this
infection animation scene is has been
started and it's running uh so by
default it won't if you the way I'm
using setting it up in this uh example
guys we're not actually going to be able
to make use of this so if you need to
disable col you'll have to do it
yourself this is a soft introductory and
then in other videos I'll go into more
uh detail on making use of the stuff
that's built into here such as workpoint
definitions uh Collision Behavior ik
Target prems uh so on and so forth so
the ik target parameters uh can Aid you
in uh using ik to you know reach
targets like actually grab things and
stuff like
that so
now I'll probably do a follow-up video
where I show you guys how to uh set up
an ik Target definition after we do the
initial setup for
this also you have these attachment
prams I'll go into detail on these as
well you can select a role in a socket
name and a relative
transform uh which allows you to offset
it or its locational rotation or even
its
scale the radius itself like I said
there's no tool tips in here uh I do
believe that this has to do with
autoactivation which uh would fall under
the selection criteria you would need a
selection criteria set up uh in order to
for the radius to have any
effect
so so
yeah anyway I'll go into this in another
video so it does look like maybe we
might end up having to I might or I
might end up having to re do this so
this is a bug and the only I don't think
there's any way to actually fix
that so I'm going to actually
let me see yeah I'm going to actually
delete that make a new one
I've added these
and you won't see anything yet because
we haven't actually added an Anem set
yes so it looks like it's still not
going to actually show up in
here which is
unfortunate it does this sometimes uh
guys this thing has a lot of bugs in it
so just let that be
known so after we get our animation in
here how do we actually like make this
work
so the way that we uh make this
work is that we need access
to the actual way we did this stuff in
here so it looks like it looks like
uh when I copied this over didn't uh
this didn't register so what I'm going
to have to do is I'm going to have to
come back over here to this other one
where I originally made
it and going to open
up well if I can get this
to so this is a bug as well
um you'll see that there's nothing
actually showing up in
here so let me try this
okay it's still not showing
up uh let's
see
okay so what I'm GNA have to do is I'm
gonna have to close that and then reopen
it I wish I didn't have to do that but I
can't do anything about the five billion
bugs inside of Unreal Engine 5
Unfortunately they L off a bunch of
staff and so the odds of bugs like that
getting fixed
is basically none
so uh don't be expecting stuff like that
to get fixed anytime
soon so let's
see now that I've got this back open I
should be able to access that if I can
uh get this load up so now you'll see
that stuff is uh pulling up like I said
it's a bu not much I can do about it I'm
going to open up the uh level sequencer
that I created and I set this up in as
shown in the video this is also a bug it
doesn't actually look like that as you
can
see and so what I actually want to do is
I actually want to find out what the
offset is of the
item and this is my offset right here my
rotational and my locational offset I'm
going to copy this rotational offset and
I'm going to come back over here to this
I'm going to open up the uh I'm going to
open up this I'm going to go to the
pistol mesh to scene and I want him to
be rotated like he was in that other
one and so I'm going
to reset the scene and you'll see he's
rotated properly now I need this guy
right here I need his Arrow to be
pointing right so what I need to do is
add a 90 de offset to him
and now what I'm actually going to do is
because um this is something important
that you need to note the primary rle
should not be offset uh
locationally um unfortunately there's
not much I can do about the rotation
itself uh because of the way that I
designed these
uh these pickup items unfortunately so
um I'm going to add the locational
offset to the player Itself by selecting
this and then adding that to the
location I'm just pasting it and now
you'll see that he's in the opposite
direction he's over here but he needs to
be over here and so what I'm going to do
is I'm just going to invert these values
and now he's over there in the correct
spot so this is where he was in relation
to the pistol inside of
the inside of the uh scene whenever I
was making the
[Music]
animation and that's where we want
him
okay so we want him to have the same
offset
now
Granite because in this game we have
physics so
the pistol might be facing this
direction or it might be facing this
direction
um in other words it might be
uh this this side might be on flat on
the ground or this side might be flat on
the ground we can't determine that so
what you would actually end up needing
is two different animations and then
you'd have to determine which side uh
it's on and then you'd have to to
play the proper one for
it as far as uh rotated this way or
rotated that way or offset this way or
offset that way uh you don't have to
worry about that because the contextual
animation scene will always make sure
that he's uh that he's in the right spot
and so the reason why I kind of did this
one first is because I thought it would
be a good way to actually
uh help you understand how contextual
animation scenes work before we start
setting up more complex ones um that's
the reason why I chose this
one also if you made the mistake like I
did and you named your section default
you can always come over here you can
select your section and come over here
to your active section and you can
actually rename it right here
I thought I uh named
that so now you'll see it has that
name so I'm not going to worry about
that bug that's preventing him from
actually showing up in here um yeah so
I'm just going to ignore that uh you
know what you could do actually is you
instead of doing the type Factor uh
which is probably the reason why it's
showing up like this you could actually
just do a skeletal mesh um and you could
say
ufn and then you could say in fact I
think I think this is what I did in the
other
one now the problem with this is that
um it's actually going to be looking at
the skeletal mesh itself but that's okay
because the skeletal mesh component
within the actor should normally be
facing the same direction as the actor
now the character itself may not be uh
at least not in the motion matching
system because the motion matching
counter rotates the root bone okay uh so
that's something you need to consider
which is what actually made this setup
more complex than what it would have
been in a normal animation with a normal
animation system uh because of the way
that the offset root bone handles things
uh it kind of over complicated a lot of
things so you'll see now that he
actually shows up in here like this
um let me
see so if you take them out of the uh
the little capsule component
then you'll see now he's in the uh
correct position now I don't know oh
this is the generic one sorry guys uh
this is needs to be the sendbox
Dao okay so now he looks he looks proper
now he is floating a little bit but
that's because I accidentally uh copied
the Z make sure you don't add that Z
offset just the X and the Y
and there now he's uh now he's sitting
properly in fact I think that um let me
see I'm gonna actually copy this zero it
out I'm actually going to add that to
the
pistol there we go now everything's in
the Pro proper position because this is
offset by 2.8 uh in
there but you don't actually have to do
that um I did it because that's how I
made it for the
animation inside of here in fact that
was probably a bad ideal for me to do it
like
that but I mean I don't really know how
El to handle that
um it means that you would have to make
sure that it always has this offset from
the ground otherwise it would cause
problems um now because this has physics
whenever physics is enabled it'll be
relative in the same position except
it'll be flat across against the ground
so it looks like there would be a small
air there so that was my fault whenever
I was making this animation I kind of uh
created that error there on
accident so I'm just going to roll with
it and maintain the same offset and
everything inside of
here okay so
now we've we've completely set this up
inside of here now we can start uh
actually handling this uh outside of
here remember if you use the the
character settings in in here uh
then okay so yeah like I was saying
before that was a bug that was causing
it to do that this is actually how it
should look so if yours does that you
can disable this reset it and then
enable it back and then reset it again
in So yeah so now anyway you'll see that
he comes over here and he he picks it
up now we could probably actually have
it attached uh at some point inside of
here uh I might have to look into that I
haven't actually messed with the
attachment parameters or the ik target
parameters I'll uh I'll look into that
and we I'll consider doing a video on
that at a later date where we uh cover
that stuff
so anyway that's the
setup so there's one thing that you need
to be aware
of I'm going to go ahead and
uh pull
this I'm going to go ahead and
uh pull some of these out
here I'm just going to pull pull one of
those out
and I actually think I only
[Music]
need think I need a 90 on this or maybe
negative
90 and then a 90 on this
let's
see
no yeah like that so that's that's
basically how we need it we just need it
to be rotated 90 like that and I can put
2.08 here offset which I believe is
basically what we had over
here or or we could just copy that but
we don't need it to be that
accurate
2.08 so
anyway so I'm just going to actually uh
leave it like that for the purpose just
to demonstrate that it doesn't actually
matter it's orientation in the
world because of the contextual
animation scene so the first thing I'm
going to do uh is
I want to show you the
prerequisite so for this to actually
work for us to actually be able to
perform a contexual animation scene like
query and stuff like that uh and and
make use of it we need to actually add a
contextual animation
scene to the
actor and actually what I'm going to do
in this case is I'm going to add it
under my ma master
since all my items will probably
eventually be using
them and then over here I'm going to set
this to be the one that I made for this
pistol
now in in not in this one but in the
future whenever we do more advanced
contextual animation scene setups we'll
actually also need a contextual
animation scene actor for the character
and that's for actually starting uh the
scene joining the scene stuff like that
which I'm not actually going to cover in
this video because right now I'm just
showing
you um there's actually multiple use
cases for contextual animation scenes
and you don't necessarily have to use
them um in one particular way there's
multiple different ways you can use them
and and this is a good intro I believe
to it now on the character itself you
don't actually need to fill out the
scene asset that Cene asset only needs
to be filled out on the item that is the
primary role that uh fulfills the
primary role within the contextual
animation scene that's the one that
needs to be assigned to this textual
animation scene which is why I only
assigned it to this uh
pistol so what I'm going to do is I'm
going to go to my event graph and I'm
just going to set this up on my event
graph so I want to create a uh actually
I want to create a hotkey here I'm going
to say keyboard and you'll see these I'm
just going to press one and I'm press
this little keyboard icon and I'm just
going to press G on here I do not think
I've assigned G to anything so it should
be
safe now you could go and and set up an
input mapping action and input action
mapping uh if you want but I'm not going
to do that
so let's see
let me
just close all those and I'm going to
open up this one in a new tab I'm going
to go to item
handling and so this interactable item
ref is actually uh how I interact with
things uh in my
project um some people don't like the
way that I handled that but I just
handled it for Simplicity sake uh this
way so what I'm going to do is this is
the actual held object Master which was
why I put that on the held object Master
also because all my items are going to
be using it so I'm going to uh search
for
con
contextual
anim
scene scroll down to the bottom I'm
going get the contextual anim scene
actor I probably could have named it
something else like
C CA
Casas actor uh I could have named it
something like that it would have been
easier to search for but
anyway so I'm going
to get the
scene asset from
this and I'm actually going to store
this as a variable
and I'm going to call it C CN
asset want to make sure this is
valid and uh give me just one second
I'll be right back

================================================================================
ARQUIVO: Unreal Engine 5_ Pistol Pickup Part 3 (Setup) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

In this video will follow through with the actual Setup process for getting the Pickup Contextual Animation working in the game.

Part 2 (Contextual Anims): https://youtu.be/tUX9dv3eMRI
Part 4 (Relative Offset Setup): https://youtu.be/Wjzii27Zs9I

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

00:00:00 Querying Context Anim
00:07:10 Me Making A Mistake (Skip)
00:12:00 Setting Up Query
00:15:45 AI MoveTo Setup
00:20:55 Setting Up AI Focal Point
00:32:40 Playing Animation
00:34:38 Pickup and Repossess
00:37:54 Debugging (Skip)
00:42:22 Adding Timer Handle
00:34:05 Debugging (Skip)
00:45:05 Adjusting Move To Settings
00:45:59 Destroying AI Controller
00:46:35 Debugging (Skip)
00:47:06 AI Navigation Setup
00:49:43 Testing/Debugging (Skip)
00:56:52 Contextual Anim Scene Fix
01:00:00 Testing & Unreal CAS Bug
01:04:00 Smooth Focal Point Fix
01:05:04 Repossess Tweak
01:09:35 GASP-DAO Montage Setup
01:13:57 Outro

=== TRANSCRIÇÃO ===

all right sorry about that I had to use
the bathroom and get something to drink
real
quick all
right so we made sure this was valid
what we want to do is we want to uh
perform a
query I see an asset query right here
and our players we want to query for the
Player's role we want to get his
information this is going to actually
give us uh information as as in relation
to the player uh where the player should
be stuff like that so if I come over
here and I break this you'll see it
stores the animation the entry transform
the sync transform the enem start time
and the enem set index so I'll go ahead
and explain that to you guys what all
this stuff is so the entry
transform is
actually the position where he is right
here uh in relation to the origin of the
contextual animation scene so if you get
this it'll return this as the world
location of
this the sync transform uh is going to
be the work War point definition Target
so if you set up a warp uh Target name
on your animation and I'll actually show
show that to you what I mean by that let
me
see so if I come inside of
here and I say I want to create a motion
warping window right
here and I come over here and I give it
a
name let's say uh pick up
pistol copy that and I come over
here and I say pick up pistol and I
update the warp
points let me save this first I might
need to save
it okay so
I've never actually had this not work
um now I know this is an actual
um just in case you weren't aware this
isn't an act root motion animation so we
can't actually perform motion warping on
it but this doesn't know that and
neither does uh the animation so it'll
still create one of these but for some
reason right now it's not either that or
it's putting it in a it's putting it
inside of his body
somewhere it doesn't look like it's
inside of his body it normally puts it
at at his feet right where the root bone
is
okay anyway so that's not working for
whatever
reason so but that's how it would work
basically and then it would
uh wherever this uh wherever this starts
at this motion warping uh notify State
that's where that point would be at so
that would be your sync transform
also what we could actually do
is we can
actually did I actually name that pickup
pistol yeah
this might be another bug guys uh the
reason why this isn't working I can't be
100% sure I had i' actually had that set
up in my other one so I can actually
show you in this one let me go ahead and
show
you so you'll see I created a oh it's
probably because I I I think I'm
supposed to I think I'm supposed to
create the motion warping window on the
actual animation it's
little no never mind ignore that I
created it on here as
well but yeah so if I come in
here you'll see that right
here uh we have this little Diamond here
and that's actually where the uh warp
Target resides or it's where it starts
at the motion warping
oh I don't have do I not have sync
animation I I think I
do I do have sync okay never mind all
right anyway so for whatever reason it's
not showing up in here but yeah that's
how it works um so that would be your
sync uh that would be your sync your
sync point so it would I'm assuming that
you need sync animations checked uh for
uh that to actually output
anything you you're in a start time you
know that's that's this uh
Point what time at what time the
animation actually
starts uh at the beginning of the
timeline right here which I don't really
understand that too much
because you can't actually offset these
you
see I think maybe if this if one
animation is longer than the other I
think you might be able to but don't
quote me on that now the enem set index
is
actually uh I showed you that before so
I'll just go ahead and show you
again so if I add two of these to the
same track the same section and I go
over here then you'll see this is index
zero this is index one for the players
role he has two of them so
so that's how that works that's what
that's what it means by that oh that's
why okay okay so uh you see this little
uh character right here so if you're if
you're trying to set up motion warping
you don't want this uh the character
skeleton to be like this you want it to
be aligned with him uh I'll actually
yeah that's I'm glad I I seen that
because I gives me an opportunity to
show you if you if not then when you do
the motion warping it won't
actually it it won't work right also
don't forget if you do use motion
warping uh on your contextual animation
scene your contextual animation scene
can handle that for you
um but you can also handle it
manually but just know that you need to
put them in flying mode
so I discussed that with you before you
could set your movement mode here to
Flying so right here uh this is where uh
the problem is right here and it's
because I rotated this
pistol that's part of the
problem and let me
see you as I rotate that in here it
rotates it rotates it in relation to the
component
this seems to be some gimbal locking
going on here basically we want it to be
negative 90 here and let's see about
this
one okay that didn't have an effect on
it yeah so this one's acting really
weird because uh let's let's add
this to it and
see no that
didn't uh this is acting really
weird this shouldn't be right here it
should be over here
let me just disable
that now for this one it it for this one
it really doesn't matter um guys not for
this one it
doesn't and this is the reason why you
don't actually want to
offset the actual primary rule because
it it can cause these weird problems s
if I un rotate it you'll see now now
it's ight but it's not actually supposed
to be at the origin it's supposed to be
over
here and I'm just trying to figure out
how
to get
this yeah I didn't think that would have
any effect on it
interesting you would think this would
have a similar effect on
it but it
doesn't yeah I might have to revisit
that at a later uh date whenever we get
into the other ones I'll revisit this
problem right here but yeah that's not
supposed to be there it's supposed to be
where he
is so I'll have to I'll just have to
look into
that
later because later on whenever we start
setting up one of these with motion
warping this right here will this will
cause problems but in this setup right
here it's not going to cause problems so
I'm just going to go ahead and skip it
all right so yeah that's basically all
you need to know the two World transform
this should be the contextual item SC
actor transform so if you want to get
the world transform of
this and the reason why we need uh to
give it the world
transform of the contextual anom scene
actor is because we want these
transforms right here to be relative to
the contextual anom scene actor
um that way the entry transform will be
the correct transform it'll it'll Place
him right here in relation to the the
weapon so that's the reason
why so I'm going to go ahead and uh save
this as the query
results and so there's not much else
that we need to do
with this contextual anim scene other
than that right there we just needed to
query it for those results and now
everything else we can do without even
touching that stuff
so the first thing we need to do
is we need to relinquish control of the
character wait what's this
oh my bad let's uh make
a make one of these yeah so I forgot
about this part of it
sorry so this right here the query prims
is we want to know what who the querer
is uh so the querer should be this
player uh the one that's fulfilling this
role is the one that should be the
querier so if this was the if it was the
primary uh the pickup items roll uh in
here or the the pistol roll I should say
if it was the pistol that you were
wanting to query then you would want
this barrier to be the
pistol so I'll just
uh get a reference to
self and so I'm actually handling this
from the character but you could
actually handle this from the item
itself as well have the item handle all
this stuff but I think for this
situation it's easier if I just handle
it from the character
so also this would allow any item that
I'm interacting this would allow my
character to do this perform the same
functionality for any item that I'm
trying to pick up
and then I'll just give it now the the
actual query uh qu transform right here
I don't believe that's actually really
relevant uh but I'm going to pass it in
anyway complex
query um I'll have to look into that but
I do believe that's important that it's
checked uh I don't really understand the
difference like I said there's no tool
tips
here so that's basic basically that's
all we needed right there so what we're
going to do now is we're actually going
to
[Music]
um get the
controller and you could just get the
player controller but I'm going to do it
this way I'm G to cast to player
controller so I'm going to unpossess
I'm going to unpossess this and you
don't actually need to you could could
have just called that off of the
controller um but the reason why I cast
this to controller is because I actually
want to set VI Target with blend the
reason why is because when we unpossess
this uh player the Char the player
controller's camera automatically uh
disconnects itself from this character
and I actually do not want that there
may be a setting somewhere that you can
change maybe on the player controller
that changes that
but uh it it's just as easy to do it
this
way so what I'm going to do is I'm just
going to blend back into the character's
camera afterwards I'll say uh I'll give
it a point you could do a0 five blend
time but it's probably not needed for
you to do it that way and I normally use
an the EAS in out
function so we've unpossessed and we've
uh set the view Target back we don't
need to disable input because uh we're
no longer
possessing uh the player the
character so I'm going to actually
create a blueprint here for an AI
controller it's just going to be a dummy
AI controller just for the sake of
calling an ai's move to function the
reason why is because the the character
simple move to function doesn't give us
enough flexibility to change things so
I'm going to search for AIC and you'll
see AI controller here and select to
that and I'll call AIC
uh and it's Autos saved
nice uh item picked
up and that's all I really need so
I'm going to uh spawn actor from
class I'm going to spawn that AI
controller and again I'll just go ahead
and get the actors transform I'll spawn
it
here and
then we're going to have this POS uh
actually let's just go ahead and save
this as a reference variable
T AI
controller and then we'll have this uh
possess this
actor and then we'll have it call a move
to location or actor
I called this
one because it gives us this on move
finished so that we can have something
execute after it's after it's finished
moving now one thing you need to know is
that by default with this one there is
no acceptance radius which is good we we
don't want an acceptance radius
acceptance radius means that for example
if it's 10 centimeters that tells us hey
we can stop when we get 10 cmers from
the target uh and that's not what we
want we want it to be at the Target we
don't want it to stop on
overlap because it'll overlap with the
with the the the pistol collision and
then it'll just stop uh and so it'll
never get exactly to where we want it to
go you can project the goal onto uh the
navigation mesh if you want uh it's
probably not a bad idea but I don't
think really need to it might do that by
default I'm not 100%
sure we don't want it to accept partial
pass and so what we need to do now is we
need to actually get that those query
results I'm just going to recombine that
and I'm going to break this
and we'll break
this and I'll pull up my details and
hide those pin it looks like I can't
hide those
okay so let's just do it this way since
I can't hide those
anyway that's uh the location that we
want it to go
to now I want to set a
timer um my bad set
timer see if I can spell timer set timer
by
event I use almost always only use this
one because you can use it for both
functions and events it doesn't matter
and you'll see I went to uh event
dispatcher and I created an event and
now I can select one or I can have it
create a matching event and I'll call
this uh uh set focal
point actually I might call it uh
interpolate focal
point I pressed to hot key let's see
here yeah I was I was trying out the new
uh the chat G PT's uh deep thinking it
seems to be a little bit
better than normal responses but not
much which I didn't really expect it to
be I'm going to set the time on this to
be 01 you have to set a time on this
guys if it's less than or equal to zero
it'll clear uh setting a timer to less
than or equal to 0 seconds will clear it
if it is
set which means that having a time of
zero would just clear it it wouldn't it
wouldn't do
[ __ ] my bad it wouldn't do it wouldn't
do anything uh I shouldn't have said uh
that I might have to beep it
out um YouTube might not like that um
so all right
so now I just need
to set the focal
point I'm G to actually move this out a
little
bit so how do we know where we want to
set our focal point it's not actually
that
difficult so I'm going to move this over
here and so a rotator we can get a
forward Vector a right vector and an up
Vector based off of Rotator since this
is a world uh rotation it gives us an
orientation in the world and so actually
for whatever reason we actually need to
get the right Vector uh well let me just
go ahead and explain it to you it has to
do with uh this actor
itself so this actor's right Vector is
actually it's it's up Vector it's the
vector that's pointing this this
direction uh and and that's the one that
we want uh and actuality we're looking
at this this point right here and that's
pointing this way uh it's right
vector and the reason why is
because this is actually the forward
Vector which makes this the right Vector
if that makes
sense so we also
uh want to get it get it up
Vector we want to get base I height and
that it's just a rough estimate as to
where the eyes are uh you can let me see
if you go over here you can search for I
uh under the class defaults and it
should
pull up Base eye height right here and
that's set to 80 and you can adjust that
to be approximately where the eyes
are and so I'm going to multiply this up
Vector by
that because I actually want him I just
want him to be looking
forward so if we come over here I want
him to be looking forward uh in in that
direction
so yeah I just wanted to be looking
forward like
this and so I'm going
to
multiply
this I'm going to right click on this
and I'm going to set it to a float
single
Precision a single Precision
float I'm just going to choose some more
value like 1,000 uh 500 would probably
be just as good it it just needs to be
somewhere in front of
them so actually I'll just SCT 1,000
that should be
good and then I'm going
to add this up off this offset up Vector
this Vector that's been offset upwards
I'm going to add that to the one that's
been offset forward and that's going to
give us a position forward and
up and now and that's going to be from
the world origin so we need to add that
back the
location and so now this will it'll find
out where this
is in the world it it'll uh it'll find a
position forward and up
uh in relation to
this that makes
sense so what I'm actually going to do
here is I'm actually going
[Music]
to just do this real quick and I'm going
to collapse this and I'm going to call
this uh
uh look
position we actually only need to do
this one time so let's actually because
we're interpolating this right here uh
on a tick so what we actually want to do
is before we even call this we want
to we actually want to store this as a
ver
now it would be easier if we did this in
a function we could actually make this
this entire thing a function so that we
could have a local variable that uh
caches this that way it wouldn't have to
be a global variable that's up to you if
you want to do
that now the reason why I want them to
look in that uh direction is so that
that uh he'll he'll naturally rotate
towards that direction as he's
moving uh as he's moving right
here and so in actuality we could
actually probably have that fired before
the move to function so let's actually
just do that
not that it really matters that much
because this happens immediately after
this
fires but yeah it's probably more
appropriate
so what I need to do is over here on my
tick right
here let me just drag this over
I'm going to rename that Delta seconds X
so that I don't get confused because
there is there are variables inside the
engine that are named Delta seconds so
or Delta
second so that's the reason why I named
it renamed it so I'm going to do
an two I want to do a constant in two
you could do a uh a non-constant
interupt to it dep it's up to you with a
constant though your interupt speed is
going to have to be significantly higher
uh so that might actually be a little
confusing to
you and we're going to get the focal
point and that's going to be the current
focal point every time this tick this is
the current focal point this is the one
that we're trying to get it to
and we need to give it the Del seconds
and we actually want it to be rather
fast so I think a a speed of about 120
might be good but you could try 60 240
is going to be really
fast UH 60 basically is going to be
like um it's going to happen over like a
second
maybe uh 120 is going to happen over a
half a
second so it's up to you so that's what
we got
here
so so what we want to do is we actually
want the AI controller
to unpossess
after we've moved after we've finished
moving we want it to unpossess
it then we want
to play montage
we wanted to play this
Montage all right
actually we want the start time too just
in case probably not important
but sorry I get a little L CD
sometimes all right so let's see
after after
the after this is complete or it's
interrupted or whatever or we're
blending
out actually we can do it on blending
out so on blending out we just want
to I'm just going to get the player
controller
and also what you could
do if you're trying to replicate
this you could actually save this as a
varable e
oh we need one thing right here
so so I already know that on frame 52
that's where he actually that's where in
my animation I'm actually
attaching the pistol as you can see
right here on frame 52 this is where we
attach the pistol to the weapon AR
bone so back over here what I'm going to
do is I'm going
to um first off I'm going to delete this
motion matching because we're not using
it and then I'm going to right click
here and add a
notify and you're going to see Montage
notify and you can actually right click
on this and type in 52 and it'll put it
exactly at 50 frame
52 we're going to call this
uh attach
pistol and back over on this guy we're
going to say is this equal
to um attach
pistol and if it
is on notify
begin so when it Che the notify it's
going to say okay is this the attached
pistol notify uh Montage event
it is okay so we need
to
call we need to call
this pickup item and this right here and
my system what this does is it just it
attaches the weapon to the proper
hand
so on complete we just want
to re we want the player to repossess
and this may be a point where I have to
go back and look to see to see what I
missed so we'll
see maybe I got lucky and I didn't miss
anything so this is going to be self we
want to we want the player controller
player controller to repossess this
actor
okay that was a
lot like I've told yall before these can
be quite complex found a member variable
with a conflicting name
okay let's call this player controller
ref let me actually see
no it's just that some that there's
other things that are called player
controller right
okay engine stuff yeah the actual player
controller in the engine is called
player
controller
okay I set my hotkey to G
okay so it's not actually doing anything
let's see
why I obviously missed something here
somewhere
oops meant to Al go a break point let's
go ahead and save this in case I get a
crash
oh you know what I think something else
is assigned to the G key that's why so
I'm going to set this to
H okay
um am I in the wrong blueprint or
something let me see let me just let me
close this so it doesn't confuse me
oh
crap oh okay my bad okay so I created a
new project and I never assigned my
character to be the spawned character
that's the reason
why there we
go so it wasn't actually this character
being spawned I'm going to set this back
to G
okay so obviously I missed something
there see
you yeah I missed something let's see
what it was I'm going to have to step
through this
[Music]
let's go back here
and seem to be right
H okay so it has something to do with
this
let's just
see okay so this right here is never
actually this right here is actually
never f
firing let me let me go back to the
other
one sorry
uh this is what I was talking about I
figured I'd probably missed something
there's a lot of moving Parts in
here actually I should have uh yeah
let's uh so what we're going to do all
so here is we're going
to store this handle because we need to
stop this uh timer afterwards so I'm
going to call this the
uh uh the focal
point
handle oops
what we could do is we could
say
this minus
this is nearly is nearly zero
then we're going to
clear clear and invalidate the timer and
what that does is it stops the
timer it'll stop this from ticking
basically because we don't want this to
continuously tick forever we want it to
stop at some point
so let's come in here and see what I
missed here
right
so I disabled input like I said though
that's not relevant I did the view
Target the
unpossessed oh
wait okay yeah I did unpossessed okay
just making sure um then I had the
AI uh possess I spawn to the
AI
controller I had it possess
it I did the same thing the move to
location or
actor let's just take a look at these
again because this might actually have
something to do with
it no no I did say yes on this
one and I said no requires now aable L
location
uh that may not be a good ideal but
we'll just roll with
it I did this one before whereas over
here I did it
afterwards I did this Stu immediately I
had it
unpossessed destroy actor oh I never
destroyed this one either let's destroy
this
actor so I'm me just goe and
yeah so I'm not really quite sure why
it's failing right
here on the Move two
oh my bad okay guys I know what I did
wrong sorry uh so this is motion
matching and it requires uh you to
handle things a little bit differently
with AI so what we need to do is we need
to come over here to the character
movement component the reason why it's
not moving is the same reason why people
have problems trying to get the AI to
move in the motion matching system
so near the bottom over here you'll see
a nav movement uh category and under
here you have your nav movement
properties need to enable use
acceleration for path uh and that has to
that relates to how motion matching uh
uh relies heavily on acceleration
so well I shouldn't say that is the
reason why
but oh also
also I never placed an nav mesh guys
sorry so you will need a nav mesh bounds
volume or else this will not
work so you're going to have ai in your
world anyway so you're already going to
have nav mesh a nav mesh in
here and the player will only use it
when he's trying to pick up something or
interact with something
so let me just go ahead and show you
this though if you come out and you
press P it'll show you where your nav
mesh is laid laid
out okay
so for one uh there's a slight problem
with the motion matching whenever you
come out of the move to he likes to run
in place so what we're going to do is
we're going
to call a
stop move stop movement immediately and
that'll stop the the movement so it
doesn't think he's moving when he's not
that still doesn't solve our problem
with him not
actually rotating or not and not also
not actually moving and to position
properly
okay so
actually okay so I might have done
something wrong on my uh focal
point don't think I did
let me
see so the up Vector multiplied by the
base height offsets it upwards the right
Vector multiplied by the one you know
1,00 or whatever and then added to the
up Vector that gives us a vector forward
and so on right and that's our Target
Vector yeah that should work now I set
mine pretty slow
but H I'm wondering if
maybe maybe I should just have it
executed afterwards
yeah so I didn't change anything else I
just set it to looping and set the timer
to
0.1 which is a slow tick
really I mean that should that should
work let's
see it doesn't look like it's like he's
actually
no he's not moving into the correct
position that's the
problem okay let's
see I doubt that storing caching this
would have any effect on it it should be
cachable uh as far as the focal
point and yeah that doesn't seem to
matter if it comes before or
after because it's happening basically
at the same time either in either case
so that shouldn't be a factor
maybe it's because I did that I know I
didn't do that on the other one I don't
see why that would have an effect on it
given it the querer
transform no let's
see no the move to is not working
okay well it's not working
properly
oh okay I see what's going on all
right so yeah that wasn't part of the
problem but we probably don't need that
anyway I've never had to hook that up
personally so that's probably not
something I should be hooking up now all
of a sudden
and the world transform that's
fine we just double check that
though I mean I used I got the item
meshes World transform but I mean it
doesn't
matter it's not going to have any
uh any relevance
here why can I get the
item okay I don't know why it's
oh right
I seriously doubt that's going to have
any
relevance
no okay something else is causing that
then
[Music]
I don't know how how enable disabling
and enabling input would be would have
have any
significance so I'm just trying to
wonder I'm just trying to figure out
like where could I have messed up on
this one
okay
so I'm wondering if it had to do with
this I'll be right back guys all right
guys sorry about that so there was two
problems actually one of them was a
mistake I made and then uh another
is uh related it's it was a bug so I'll
explain both of
them I believe I showed y'all the stop
movement immediately I'm pretty sure I
did uh so the first problem was the
compal animation scene was bugged out I
don't know why I ended up having to uh
remake it from
scratch uh
so let's see I want to make sure I I get
the right one okay so in here this is
what I ended up doing and remember what
I told you about
uh and and I believe this was this is
just related to some weird bug inside of
here so whenever I was setting this up
uh with this one as as you recall it
showed this uh skeleton right here at
the center the the world origin or the
uh scene origin uh and that's actually
not where it's supposed to be it's
supposed to be where the character is so
I ended up making this one and I don't
know why I ended up having to do it this
way but I'll go ahead and explain to you
uh what I uh did to get this to work
properly so it's not actually working on
this one uh for some reason and
let's
see so I did end up adding this uh read
addding this motion warping one and I
set it to idle and let's see actually if
I can get this one to work the same
way remember before I tried to show you
guys this and it didn't work okay now
it's working all right uh okay
so so that might it might actually need
a warp point definition I don't know why
it would though uh because the entry
location uh okay so maybe I
misunderstood the entry location maybe
the entry location does require this so
you may end up having to add the add to
your
animations uh you may end up having an
add of motion warping window even if
you're not using this in order to get
this things aligned properly
um so I mean you could just disable this
stuff right here just so that like uh
for the sake of this and I'll just see
if that messes it up it's not messing it
up okay good
so so yeah I didn't change anything else
in here just that
and let's see if this will work now
yeah okay
cool but the camera was not supposed to
do
that it probably has to do with where it
ended up
at okay so that's working now so I ended
getting this one working so I made a
second one so the I basically did the
same thing with this one in order to get
it to work for whatever reason I
couldn't get it to work without doing
that so this one's messed
up now uh interestingly enough okay I
don't know why that one's messed up now
that doesn't actually make any sense to
me um okay this one seems to okay I
think that's a bug
so I've seen it do weird stuff like this
before so I don't really know what's
causing that I think it's a weird bug
yeah so if I close that and reopen it
you'll see it's it fixed
it
okay yeah so you don't actually need to
do anything different it's just that
it's for whatever reason uh I need to
create
a war Target so what I'm thinking I
probably
misunderstood before as I thought this
uh I thought the entry transform and the
sync transform I thought the entry
transform was just
uh was just the location of the
character uh where the character is
located at in the scene that's what I
thought that was and I I assumed that
the sync transform was actually going to
be the warp point
definition
now now this right here doesn't actually
work work without a motion warping
without motion warping being set up on
your monage now motion warping will not
work if your animation doesn't have a
root doesn't have root motion uh that's
just because motion warping is only
designed to
work
when your root is actually moving or
rotating and if if your root bone is
only rotating then you can only motion
War
rotation if your root bone is actually
moving though then you
can uh motion Warp the
location
so anyway for that entry transform to
work it seems likely that you're
actually going to have to add a motion
warping notify
State and you're going to have to uh set
it and then you're going to have to
label
it and then when you come over here
you're going to have to uh for this
active section you're going to have to
give it that Target name and then you're
just going to have to update the work
point and then it should correct the
skele this green skeleton's location and
it should add one of those little wide
diamonds there with the transform under
it so or in
it but once you've done that it that
should fix the problem if anybody has
any uh issues with that let me know
um so that was the first thing now the
second thing is I actually made this a v
inter to
constant um I made it inter to constant
that was my bad uh so I actually wanted
it to be an inter to I'm not sure
exactly why I thought it was going to be
a constant uh for this one now you can
use a constant but the values are going
to have to be different because it wases
at a constant rate whereas uh this one
it moves at a variable rate it speed it
starts off uh slow speeds up real fast
and then slows
down uh and eases it eases in and out
basically so that's how a regular inter
2 Works which is why the values on here
need to be different for a regular
interp opposed to a
constant okay okay so there's one more
problem that we
have is
whenever let me just go ahead and um do
this so I'm going
to make sure that if it's blending out
or if it's inter if it's interrupted or
it's blending out or for whatever reason
it's completed then we're going to
possess repossess it and that also will
allow us to get an early out on this
that we can gain control of our
character
again uh
afterwards yeah there we
go yeah so that was a bug uh I'm not
exactly sure what just caused to that
I'll have to look into that it didn't
actually drop the other one it was
supposed to drop
it maybe it's because I was not
possessing the character and then AI was
possessing it
instead I might have to look into that
that may have something to do with my
logic and the way that I structured
this I structured this one a little bit
differently than the original that I set
up for demonstration purposes when I was
troubleshooting the issues with
it so I did I did
disable uh input online whenever I
unpossessed
it I may have done that before and it
would matter actually if I did that
before versus after so I did disable the
input before I unpossessed it so that
might have been what prevented that bug
where he where he's still moving what we
can
do is I can stop movement
immediately or let's just do it this way
there we
go all
right yeah that seems to have fixed it
now the whole thing with him not
dropping it I may have to look into that
for some reason it didn't do that in my
other one but it did this one which I
find somewhat
odd because this is supposed to handle
all of that on it so I'm not sure
exactly why it
uh why that didn't work why I didn't
drop
it but yeah anyway guys that's basically
uh the video now the oncompleted doesn't
necessarily need to be connected but I
connected it anyway honestly I would
rather them uh immediately start getting
um uh be given control back over uh as
we're blending
out and in
actuality you could probably give them
back control immediately after the move
to location or actor
but it it may not be a good ideal
actually after they actually pick it up
that could be when you give them control
back so I could leave this as a uh fall
back and then I could have them get
control right here and I think that
would make sense
so there's one more thing actually I
want to show you guys uh for this
project in particular you actually don't
want to play it on the default slot like
this I'll show you how to do it on mine
so this one is going to be the upper
played on the upper body
slot then what I need to do is I need to
duplicate this one and the reason why is
is it goes back to a
limitation uh you could handle this
without duplicating it like this but
it's a bit difficult so we're going to
go to the asset details of this additive
one and we're going to make it an
additive and local space frame from this
animation it'll be frame zero so th this
will all be additive uh assuming that
they're in this pose right here which
they will be
because um we're actually going to be
playing that on the upper body slot and
then we're going to
be uh playing this one additively on the
lower
body so and since our legs are not
actually moving it won't affect them
whenever he starts
running um oops okay that's not what I
wanted to do I don't know why my
computer's running slow here lately
seems like sometimes it just starts
running slow for some weird reason
maybe about time to upgrade my
[Music]
PC I'm actually going to delete these
off of here I don't know why they're
even on
there because I have I have it on the uh
on this one right
here so I don't need them on the other
what does it mean pick up pistol unroll
Montage what do you mean uh it doesn't
have a a
valid okay this is some weird freaky
bug okay let
me dude I'm telling you man they need to
get their act together and start fixing
these bugs stop focusing on new features
and just start focusing on fixing these
bugs man especially now that they're low
low on staff because they laid off like
what 25% of their staff had the uh near
the beginning of last
year let's see oops this is the wrong
one is
it yeah okay let me close that one I
just this is the one I wanted to open
sorry guys I got too much stuff going on
here and then these bugs are just
driving me
crazy I know this is a long video if you
made it through congratulations for
real this is quite the intro
video oh nice now it's not
working let's see
oh no it works okay so that was the that
one bug I've told y all
about well it's not a really a bug it's
an edge case you're you're going to have
to uh handle that and I I discussed how
you can handle
that um actually so I guess I'll go
ahead and discuss it with you again
so basically you could have your pickup
system so that they have to actually
look at it and then pick it
up and that'll prevent that problem
where like if you're not positioned
properly then then uh there won't for
example this is close to the starting
point so if I'm uh like this and I say G
okay it it actually worked
surprisingly um so you'll notice that he
looks funny the way he's holding the
pistols right now so I'm going to go
ahead and show you guys how to fix uh
that now I'm going to fix this in my
project so you guys don't have to but
I'll go ahead and show you anyway uh if
we come into here I told you before that
the uh that my my poses actually need to
be modified so that they're actually in
the idle the uh
unroll or the ufn uh idle POS for this
animation
system so if I go to the open level
sequence and I come over here to the
last frame you'll see that's the
modified pose I made for him for
whenever in the uh the idle uh
pose and in actuality I should have
straightened out his uh hand right here
but I didn't notice that because when
you're in here I'll show you why I
didn't notice that and I don't know why
they have these but they have these big
old balls right here that block you from
being able to see his wrist I don't know
why they have those there I don't know
what purpose they even serve I should be
deleting them or at least hiding them uh
but for whatever reason I don't um it
looks like it's some kind of stretch
modifier or stretch control I don't know
what it's
stretching uh it's stretching
something I don't know exactly looks
like it has some effect on it but anyway
so what we're going to do is we're going
to come in here we're going to select
this and control a to select all we're
going to create a pose I'm going call
the ufn
P pistol ready
pose and this is the this is a proper
pose because he's actually in uh the ufn
idle uh
pose it looks like maybe it's tips could
be adjusted a little bit and like I said
his wrist but I'm not going to worry too
much about that I'll probably fix that
like I said and I'll fix this for you
guys but I just wanted to show you how
to do this so so that you'll see that it
looks proper whenever everything is done
proper uh it'll look really smooth so I
want you to see what the end result
looks like after I've done
that I need to go to where the right
right-handed idle ready poses you see
this he's not in the proper pose we're
going to put him in the proper POS by
baking this the control
rig and I'm going to scroll all the way
up here and collapse this and then I'm
going to click and drag and delete that
last frame I'm going to add an additive
track so I can undo it in case I want to
or make modifications to it I'm going to
select all the controls enable key and I
paste the
post and so now I can just save
it and exit out and then come back
in and now you'll see
that whenever I uh pick up the pistol
you'll see he comes out of it
flawlessly and that's what we want
so again you see whenever I'm too close
he may not have enough time to uh rotate
properly and yeah the two-handed idle I
mean the two-handed pistol ready pose
also needs to be fixed but yeah okay so
anyway that's basically it guys uh as
far as that one problem like I said you
can uh you can make it so that they have
to actually look at it right now I just
have a box that all they have to they
just have to be inside the box I may
actually change that in my project just
for the sake of uh dealing with that one
issue but
yeah but yeah you'll see that uh in
these poses you'll see his leg is locked
and his uh you'll see we have this
problem right here around his feet and
that's because his uh these poses
weren't designed uh for uh
layering on this idle pose but I'm G to
fix that come next
update uh so anyway I'll see you guys in
the next video

================================================================================
ARQUIVO: Unreal Engine 5_ Pistol Pickup Part 4 (Relative Offset Setup) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

As mentioned in Part 2, in this video I'll discuss how to make the Starting Position relative to the player and not the item. I will also discuss and break down the math involved in rotating a vector based on the players approach to it.

Part 3 (Setup): https://youtu.be/vabTTxb8ux0

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

00:00 Intro
00:30 Understanding the Math
12:00 Calculating Pistol Location Offset 
18:50 Calculating Focal Point Rotation

=== TRANSCRIÇÃO ===

all right guys so um as I promised in
the beginning of the series
uh I'm going to show you guys how to
make this so
that his offset from the item is
independent of his
approach
and that way you can get somewhat good
hand contact uh from any direction and
I'm going to explain to you in here how
the math behind this works works and
then I'm just going to show you how I
did it in
there so I'm going to delete these
because these were uh I was testing
different approaches to
this
so right here
um this
is this uh Arrow right here and I'll
just actually go ahead and simulate it
this red arrow represents the forward
Vector of the actual
item and this blue arrow represents
uh the direction to this uh
location the Pink Arrow represents it
represents the actual rotation of the
entry point on our contextual animation
scene actor and the Green Arrow
represents the starting uh
position so let me just explain to you a
few things
here so when you inside of here you'll
see one of these will uh stay in place
one of these purple arrows will stay in
place and the other the other one I'll
be moving and rotating independently of
the sphere so none of these are children
that means they all uh that means what
the uh the way that this moves right
here
the way that this purple Arrow moves
right here uh will represent the
rotation it'll represent the the entry
transform rotation here
okay
so let me just show you what it looks
like in
action and so you'll see
that the that the
offset of that entry
location is not based off of the player
forward Vector it's actually I actually
created a vector that points from this
item right here to the
player and it's based off of that
vector and so if I come over here you'll
see uh if I if I'm in the correct
position then the starting position and
rot
will be exactly what it was in the
contextual animation scene but if I'm at
any other point then it'll be Offset you
see uh so that it's at a relative offset
to it which is actually what we want for
the best hand
contact uh
so I'll go ahead and uh break down the
math here
so this right here was irrelevant um but
this location and this
rotation will represent the entry
transform location and entry transform
rotation okay that's what that
represents so th those are the uh the
starting position and rotation of that
transform now what I'm doing right here
and I have this commented too so you'll
be able I'll be able to explain it to
you better over here as
well what I'm doing right here is I'm
getting that original uh trans uh the
original
location and I'm rotating
it
by a vector that's pointing that's
pointing from the items location to the
player's
location I'm using that as a I'm turning
that into a rotator and I'm rotating
this by
that and I know that's kind of hard to
understand but you can think of it uh
like this so so
vectors they don't just have a position
in space they also have a direction okay
they have a magnitude a
length their location is relative to
something so in this case the actor this
item's location is relative to the world
origin where whereas uh a
relative a relative
position would
be would be relative to something else
it it its origin would be something
else so right here what the inverse
transform location does is it gets a
world uh position and it turns it into a
local
position so it's taking this world this
taken this the world position of the
sphere and it's making that local to
this actor right here and so if I select
this sphere and you see this local
offset this is a local offset this
offset is local to uh to the root the
scene root of this
actor now why did I do that you might
think uh why didn't I just say okay why
don't I just get the
relative location of the
sphere well you can do that if it's an
actor but if it's not an actor you can't
get it because this is a world a world
transform right here this is a world
transform this is relative to the world
world and not an
actor and that's why I treated this the
same way so I got its relative offset
right here and we actually end up doing
this inside of there too and I'll
explain to you why there is a way to
actually get this uh to actually get
this transform and relative space but I
chose not to do it that way and I'll
explain to you why uh here in a little
bit
so yeah so so I got a
vector and in
fact you can you can think of you can
think of this blue arrow as that Vector
that I just created uh actually no
that's not true
um this blue Vector you can think of it
as a vector like for example if I
subtracted this items loc World location
by this spher the sphere sp's World
location it would give me this blue uh
this blue arrow it would give me a
vector that exists right here at this
item's location but it would be pointing
to the
sphere and so if you if you get a
subtract node right here you can think
of this if this the result of this will
be this pointing to
this and if you turn it into a rotator
then it it just means that it's getting
the uh the direction of this and it's
just turn in that direction into a
rotation I actually you uh used that
somewhere else too uh we'll approach
that here in a little bit so now that I
have a a relative
uh well right here let me explain right
so this
rotation I'm just rotating this
Vector
uh by that
rotation so rotate Vector let me explain
to you how rotate Vector
works
so let me just drop a sphere uh into the
world or I'll drop a cube into here
that's
fine and I'll set that to the world
origin so this is the the world
origin if I drop another sphere I mean
another Cube into
here okay it's bugging out and not
letting me see the transform for some
weird reason uh that's really weird let
me just restart this I'll save it yeah
that's fine oh it's because I was
playing sorry uh yeah so you can't do
that when you're running the game
so what I'm going to do is I'm going to
get this and I'm going to parent this to
the other
one and
so if I call if I call
rotate uh rotate uh Vector on this cube
right
here if I just call rotate vect VOR on
this cube right
here and I and uh as this Rotator I just
enter some arbitrary uh number let's say
I enter 90 on Z
okay then that would basically be uh
that would basically be like this so if
I called rotate uh Vector on this
location on the location of this uh box
Bo and I used a rotator with 90 on Z it
would place it right here in the
world so if I called un rotate uh vector
and I gave it uh a rotator of 90 degrees
it would rotate it in the opposite
direction it would invert that Rotator
and turn the positive 90 on the Z into a
90 uh causing it to be rotated
90 so that's how that
works so I'm getting that uh I'm getting
a vector that represents the rotation
and I'm rotating that by this and since
this is a a local relative
uh relative offset like this then I can
add back to the actual items location
and it'll be a
location that's been rotated around this
item and instead of the world
origin so yeah that's it's really
confusing I just figured this out today
guys that that's how that works
uh uh so yeah nobody's ever actually
taken the time to properly explain
rotate un rotate Vector it actually
ended up being a lot simpler than what I
thought it
was so as far as the rotation
itself what I'm doing is I'm getting uh
now remember vectors have
Direction uh in games in in Vector math
vectors actually have Direction uh so I
get the uh old I get the original
spheres location and I get the new
sphere's location and I can get the
difference uh between those two uh
directions and I can add that by using
the combine it's like it's just like
adding a rotator to another Rotator it's
the add function for rotators uh so I
can add that
rotation uh to the to the entry
transforms rotation for
example and it'll it'll let me rotate
that by that amount to keep it
relative and so if I if with all that in
mind when I show you this now then it'll
make more sense
uh how this
works so I had to figure this out on my
own guys and I really beat my head
against a brick wall I think I probably
spent six hours trying to figure how
figure out how to do this because like I
said I'm not strong at Vector math but
I'm a lot stronger now than what I was
um and I figured this out without
watching any videos either I just just
reverse engineering I seem to be really
good at that so um anyway with that in
mind now I can explain to you how this
works right here so everything else
everything is should be basically the
same as I showed you
before I'll go ahead and kind of uh move
over this so that you can pause the
video to see if in case I changed
something and didn't mention it
but right
here you'll see I'm doing things a
little differently and so I'm going to
explain to you why I'm making all these
decisions so I'm actually calling the
center a get Center of Mass on the item
NES and now it does say that uh objects
that are not simulated return 0000 Z as
they do not have uh coom uh Center of
mass that's not exactly true so Center
of mass still works I'm not sure exactly
what what they even meant by that or
maybe if it used to be like that or what
but it's definitely not like that now
so why am I getting the center of
mass um
so so the origin of this is not
centered the origin of this uh the way I
did this in here and so this may
differ if you're not using my project
and and and yours is set up differently
but this blueprints origin is actually
the handle which is where he needs this
to be attached in order to have it in
his hand properly um which is why I did
this the way that I did
it so the center of mass you actually
want it the center of mass would be
actually the center of the Collision for
that
object so if in order for you to
actually understand that I'm going to
actually need to uh show you that yesr
okay
so if I come over
here uh so this is a a static uh yeah
okay so this one is a static
mesh if I come over here to show simple
Collision you'll see there's a box
around this now the center of mass would
actually be where the uh origin of this
box is which is in which is dead center
it's dead center of the Box okay and
that's and the reason why did I need it
need a
centered uh position well because if I'm
going if I have an offset that's over
here for example and it's relative to
this then I actually don't want to
rotate it around this I actually want to
rotate it around the center otherwise
it'll it'll uh it'll be Rota like like
like
this instead of like like this you see
that's the reason why I made that
decision you don't necessarily have to
make that decision I think it probably
makes it just a little bit
um a little bit more uh accurate which
is why I made a transform where the
location was actually the center where
the location of the center of mass is
rather than the ual actor's
location but I kept the actor's rotation
obviously because the center of mass has
no the center of if I used it the center
of mass uh Vector as the Rotator then it
would be wrong because it would
be it would be pointing it would be uh a
a rotator pointing from here from here
to
here but the items Vector uh the items
forward Vector is like
this you see it's along the Y so that
would actually be a slightly offset by
probably about five degrees or so which
is why I didn't do it that
way
so again just like I did over here in
this
one I made that World location relative
to the
item uh location in this case I made I
made this uh entry transform location
relative to that Center of mass location
for the
item and that's going to be our source
relative Lo uh relative
offset and then the same thing I'm doing
the same thing right here I'm getting a
vector pointing from the uh the item
Center of Mass to the uh the player
and that's uh our Rotator that's our
rotation that we want to rotate this
by and that's going to be our Target
relative offset and then I'm adding that
Target relative offset to the center of
mass
location and then that's our Target
location for the move
to I'll explain to you this right here
so this is optional guys right here this
part right here is optional uh but I'll
explain it to you it makes it a bit more
accurate
so right here actually I don't need
this right here I'm getting a vector
pointing from
uh pointing from the actor to the item's
center of
mass I'm uh using that as a directional
vector
and I'm multiplying that by 1,000 which
gives us
a let me just uh do it this
way so if I approach this item right
here and I go into top down
mode then what that does is it gives us
a vector pointing from this guy right
here it pointing outwards uh pointing to
this
guy
okay and then it actually it's the
center of mass uh which is around the
handle right here but I'll just do it
from here so we end up with uh so
whenever we scale this out
1,00 actually I'm going to need to zoom
out then it does this number
so it it'll it'll be a position out here
somewhere
okay and then what I'm doing what I'm
going to do is I'm going to get the uh
um approximate eye height of the
character which is set as a variable
I'll show you that here in a minute and
I get that Vector that's that's uh
somewhere that's somewhere out there and
I move it
up by his eye height that way he's not
looking that way if
uh that way he's not looking at a
slightly downward angle he's looking
straightforward so that's what I'm doing
right here so I'm getting the worlds up
Vector I'm not getting the items up
Vector and the reason why is because the
items up Vector will be relative to the
item so the item is on this side its up
Vector might be this
way uh
or actually if you go into relative mode
you'll see it's up Vector actually this
way and Its Right Vector is actually up
but if I were to rotate
this 180
degrees now suddenly his up Vector is
this way and his right Vector is
pointing down you
see so that's why I get the the vector
up which is a constant unreal up Vector
that'll be the world up Vector that's up
in the world basically and I'm
multiplying that by the base height to
offset it from zero uh upwards by that
base height I height and that is
actually stored on the in the class
defaults right here and you can change
that number to be relative that won't be
as true eye height though there's also a
uh Crouch eye
height for when he's crouching so those
are just approximations of where the
eyes are you could actually get that
from the actual skeleton but it's likely
a lot more performant to do it that way
um
also yeah anyway uh
so I'm adding I'm adding that to uh this
Vector that was offset forward so now
this Vector is offset forward and up and
now I'm getting the Target
location which is uh our calculated oops
oh it okay I'm gonna have to re restart
this okay it's okay this is one of those
bugs where you have to actually exit the
engine and come back in let me see Norm
playing it okay playing it will
sometimes fix
it so if I calculate uh the offset which
might be over here and I rotate that
around here then it'll probably be like
right
here uh so this is the Target
location and we're adding that uh Vector
to that Target location so that makes
sure that from this Target location
we're looking uh we're looking this
direction and
up so that's how I did that so right
here I'm just uh doing a uh interpolated
focal point here so I'm setting the
focal point for the AI uh character uh
so that he's looking in that direction
in this direction
here and that's what I'm doing
here so right here I'm just clearing and
invalidating invalidating that timer
whenever uh the difference between his
act his current focal point and the
target focal point is nearly zero
whenever it's nearly zero that means
that they're basically the same Vector
now and we can just go ahead and clear
and EV validate
that I'm I'm uh storing a reference to
that right here for that purpose and
that's basically it guys that's the
alteration that I made to
that
so yeah that's the one I'm going to
stick with so I'll probably keep this in
the actual project and I'll clean it up
uh obviously that's insane so uh yeah
I'm going to clean that up and I'll will
see you in the next video

================================================================================
ARQUIVO: Unreal Engine 5_ Player Take Down Part 1 (Intro) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

Intro to a series on Setting up a Contextual Animation Scene for taking down another player/npc

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Part 2 Preview: https://youtu.be/BlpEJRfUS6Q
Part 2 Setup: https://youtu.be/7wpHzo5axmc

=== TRANSCRIÇÃO ===

all right guys so starting off these are
root motion animations these are just a
little simple test setups here it starts
I'm going a pose it plays the Montage
and then it uh uh changes the end pose
as it's coming out as it's blending out
of the Montage so I'll just go ahead and
show you what it looks like
here so this is the final animation here
the cleaned up
animation and I'll go ahead and show you
from a different angle
so I'll be providing these animations I
put a lot of work into uh into this guys
it was a doing these were actually
really difficult uh the cleanup was
insane uh so anyway as you know mixo
animations don't have root motion so I
had to add the root motion I had to
clean up hand placement because of hand
placement and nothing was aligned
properly uh
so uh that was the reason why I chose
not to cover the clanet process on this
one uh because the cleanup was just so
atrocious it would have taken like six
to eight hours for me to cover that in a
video so um yeah it was it was pretty
bad this is by far the worst cleanup job
I've ever had to do uh but I think it
came out looking pretty good so yeah I
had to Clan a pan contact and I had to
get everything placed in uh properly I
had to constrain the hands of both
characters uh and then I had to
uh I had I even had to constrain the
elbows uh for the
attacker uh and I had to constrain the
pelvis as well while he was on his back
but yeah so it was a pretty pretty bad
cleanup job I had to pull off there but
yeah anyway these are root motion
animations uh so this is playing it as
as though you were playing it in a game
this is how it would look and this is is
how it would uh turn out
so yeah I'll just go ahe and show you
one more
time and yeah just in case you uh want
to
see I can unhide this so that you can
see
it
so I matched I after an iclone uh like
I've told people before iclon has a
tendency of offsetting things uh pretty
badly uh whenever it retargets it really
really offsets things the pelvis and the
feet and the hands as well those all get
offset uh so after I brought them in I
had to do some minor clean up on the
starting and ending poses uh just so
that they matched perfectly with the
actual starting and ending poses that
they were going to be starting from and
going out out into into or blending out
into but yeah anyway I'll be doing uh uh
in the next video I'll be showing you
guys how to uh set this up with a
contextual animation and then we'll get
it working in the game

================================================================================
ARQUIVO: Unreal Engine 5_ Player Take Down Part 2 (Setup) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

In this section of the series we will be setting up a synchronized two-player interaction.

Animation Files: https://drive.google.com/file/d/1SyBIo9tfQneY7F-wjEhp5ZWq0sEkl8FX/view?usp=sharing

Part 1 Intro: https://youtu.be/YibNuD69wxw
Part 2 Preview: https://youtu.be/BlpEJRfUS6Q
Part 2 Anim Update: https://youtu.be/muexSLnAMXk

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

00:00:00 Intro
00:01:40 Take Down Overview (Flying)
00:09:40 Take Down Overview (Flat Root)
00:14:00 Project Setup
00:18:00 Contextual Scene Breakdown
00:25:00 Animation Setup
00:39:00 Contextual Scene Setup
00:53:30 Blueprint Logic Setup
01:12:30 Testing
01:14:50 Revisiting Flying Take Down

=== TRANSCRIÇÃO ===

all right guys uh so I'm back with
another video in this video I'm going
toh show you guys how to set up a
contextual animation scene uh for
synchronize synchronizing uh two
animations now this one uh I have two
setups here uh one of them has the root
coming off the ground which is actually
probably more appropriate but it's it's
more difficult to get that perfectly in
sync uh because you're entering flying
mode and things can off set you when
you're in flying mode uh
so it's a little bit more difficult and
in actuality the other method that I
used is
probably actually more appropriate for
something like this uh so I'll discuss
the problem that I ran into when trying
to set up this flying mode one it was a
really big problem and it was confusing
uh and I had to figure out a work around
for it but I believe that it may be a
limit uh an oversight by the developers
of and I I'll report this as a bug just
in case it is uh and maybe they could
fix it uh but
basically it it's related to how the
motion warping Target is done and the
fact that you're in a Crouch when you go
into flying mode it resizes the capsule
instantaneously and there's no way to
stop that the character movement
component does not give you the option
to override that feature uh and so it
yeah so anyway I had to find a
workaround for it I did find a
workaround I'll just go ahead and show
you guys how it looks so from behind it
actually looks perfectly in sync and
yeah I did disable foot ik because uh
something I I just did that temporarily
because something was overriding it and
uh causing it to
not have foot ik um I'll look into that
but this isn't actually going to be the
one that I'm primarily going to be
showing you guys how to set up although
I
will uh show you I I'll discuss how I
did this one uh
later
but actually thought I had the rewinding
bug rope and I guess I turn turned it
off so I'll go ahead and do this again
so you can see it from the other side
so let me just go ahead and pause that
now and if I scrub through this you'll
see it's it's actually pretty in sync
but it in truth it's a little bit off I
believe so I may have to look into why
that
is but you probably can't even tell
unless you look real close but it is a
little bit off uh
uh especially like right right here it's
supposed to be farther
forward and in actuality I think it's
supposed to be a little bit farther to
the uh to the right
here but let's go ahead and uh look at
the other one that I did and now on the
other one this one is actually easier to
synchronize uh and it's easier to
synchronize perfectly because you're not
putting him into flying mode so when you
enter flying mode that's what causes uh
the
problem
so I don't think I need this right here
for that but anyway so this is actually
the fix that I had to
implement because when you go into
flying mode it automatically resizes the
capsule
instantaneously and when it does that uh
I believe that the character movement
component I believe it interpolates the
offset of the of the mesh right here and
relative space as the capsule is being
resized uh Now by default the game
animation sample project that I'm in
right now it actually by default has the
mesh set to 88 but the capsule size is
86 now that actually causes a serious
problem because um when you play a
montage and you motion warp into
it and the capsule gets
resized uh it causes a 2 cm offset so
just be aware of that that if your mesh
is offset by a different amount than the
uh than the capsule's half height right
here then it can cause problems whenever
you uh whenever you're trying to motion
warp on a
montage of in situations where the Caps
where he has to leave the ground where
you have to enter flying mode and he has
to leave the ground uh it will cause
problems blending out of that where uh
where when he Blends out of it he's for
example in this situation if this was 88
negative 88 steel then whenever he would
blend out of it he would be blending out
of it from his root being too ctim down
and so the character would pop up
instantly because it would just be reset
uh and the reason why that is uh in
regards to the contextual animation
scene is because it actually
automatically handles uh your movement
mode for you and it'll put you in flying
mode for you so that you don't have to
uh but anyway the fix was is that I had
to set him to uncrouch and the reason
why I needed to do that is I needed him
to be set to uncrouch so that his so
that the character movement component
would release his capsel half High
otherwise if I tried to uh reset to set
this to 60 after entering flying mode
with him in a Crouch State then the
character movement component would just
ignore that change on the capsule half
height at least from my understanding
whenever I tried to do it that way
that's that was the results I got is it
seemed like it was ignoring it so I had
to uncrouch uh reset it back to 60 which
is the
crouching uh the crouching half
height and then I had to uh this cached
World value for the mesh the skeltal
mesh I had to reset that back to the
world location because when I uncrouch
and I change the capsule half height
back it actually incorrectly offsets the
skeletal mesh in relative space uh
well I don't think it
actually does it might actually be
offsetting the
capsule maybe not
anyway doing this actually prevents the
problem where he suddenly
instantaneously pops up uh at the end of
the
animation so this corrects that
offset so anyway
[Music]
and of course if you do if you do this
you either need to reset this back to
the uh the default capsule half high at
the end or you need to put them back and
Crouch because if you don't and and you
C you entered this from a standing
position he didn't get uncr crouched
then when you get back to the end of it
your character will suddenly pop down so
that his legs are dangling under the
floor uh
so that's uh something to take note of
as well so anyway that's the basic run
down on that hacky method I had to use
so I'm just going
to overwrite that and I actually don't
need this
here and I don't need that
either now the setup for this itself in
this situation is actually going to be
fairly simple and we're going to do this
from scratch I actually already have uh
the project open and ready to show you
guys just bear with me because I'm
trying to get some information out to
you before I uh commit to showing you
guys how to set this
up so I'm just going to set this back
to this other
one okay this one needs to still be in
walking
oh no this this one does need to be in
flying okay I was looking at the wrong
one so this is the one that has the
flattened root so on this one
uh let me just open this up again so on
this one you'll see that the root
actually leaves the ground you know and
it moves around up here and stuff like
that and then he comes back down onto
the ground now that was the one that
used that you was just seeing a minute
ago now on this other
one if I can open it up
here on this other
one I have a version of this where I
have flattened the root out now this is
actually going to be much easier uh to
set up and to synchronize between two
actors uh than one where he has to come
off the ground but in some situations
you're not going to be able to cheat
like this
[Music]
uh whereas in situations where it's
player vers like uh two characters
interacting and they're both moving uh
that's going to be it's going to be far
easier to accomplish that with this now
he doesn't go that high up off the
ground the character doesn't so he does
mostly still stay inside of the the
capsule
now granted that I probably should have
made sure that the root bone stayed
underneath uh the pelvis and I may
actually uh fix that
and and uh re-upload these animations
later for you
guys
but it's only it he only uh it's only
kind of out of sync there there at that
one little part when he first starts
sleeping off the ground so I don't think
it's really that big of a deal and in
fact right here it's actually a little
bit forward from the
pelvis so anyway so with this
one uh you'll see that we still get
decent results but you'll see the
capsule never leaves the ground and this
one is going to be far easier to set up
and uh it's going to be far easier to
get perfectly in
sync
yeah yeah so
maybe yeah I think that other one was
off because you'll see right here his
hand is like almost perfectly on the
back of his head there's there's a
little bit of DC synchronization there
but I think that was my fault because
when I brought these animations in I had
to make some modifications them and I
probably
overlooked uh the fact that I created
that
offset uh while U making some
modifications to their uh initial
poses because I did have I did have to
uh correct their starting and ending
poses slightly well the attacker I had
to I had to Mo uh modify his starting
and ending poses because there were some
slight offsets on him uh and then I had
to for the victim I had to uh modify his
starting pose because there was a slide
offset to it so when I did that it
probably actually caused this problem
where his hand is just a little bit
further into his just a little bit into
his neck and uh head slash jaw and his
hand back here is just a little bit
inside of his head so that's probably
what caused of that but the animation
happens so fast and most of the angles
that you view this from you won't even
be able to tell so anyway it's basically
perfectly in sync there's just a few
problems that I may have caused when I
was modifying these inside of
here so
uh but I could have also overlooked them
before exporting this from uh iclone I
didn't look at it that closely uh I
don't think but I don't remember seeing
his fingers inside of his head either so
that could have been something that
caused when I was exporting or importing
or modifying but anyway let's just go
ahead and get started so I've already
exported uh uh these animations right
here the flat ones with uh the flat root
so I'm going to go ahead and show you
guys how to set that up because it's
going to be the easiest one to pull off
and I'm going to show you how to do that
in a a blank gasp
project now I have not rehearsed this so
and I'm going to create a different
folder there's too many folders in the
animations
folder I'm just going to call this take
down and I'll import those animations
let me see if I can remember where I
exported them to yeah here we go these
right
here I named those buffer because I
added some buffer frames to the
beginning and ending of
them oh and I didn't actually show you
that so let me just go ahead and show
you this I designed this in such a way
that you don't actually have to be
crouching uh to do this and if you don't
then you'll see he kind of like starts
to crouch and then he and then he jumps
which actually I think is a good thing
because it makes it actually more
believable that he's actually jumping
from a standing
pose but
anyway I may or may not have to uh look
back at this if I run into any problems
but I don't think I
will so let's just go ahead and uh
select import only animation and select
the
ufn I'll explain some issues and some
problems and some uh some uh slip ups
that uh you that contextual animation
scenes can cause you when setting them
up now sometimes they do bug out and you
have to if you if you're having weird
problems with them when during the setup
and if things just look really
wrong it could possibly be that you're
missing something uh or not
understanding something but it could
also be that uh it's bugging out on you
and I've there have been a few
situations where I've actually had to
recreate the contextual animation scene
itself in order to fix that but they're
still fairly new so uh just keep that in
mind as well I'm going to call this Cas
as in contextual anim
scene and then uh I need to actually
enable a plugin so go to edit plugins
and under animation if you scroll down a
little bit make sure you have animation
warping enabled uh we're going to need
that I'll go over that as well and then
you need contextual animation
experimental uh so it is still
experimental and I believe that means
that you may have issues trying to
compile it with this plugin enabled so
just keep that in
mind you will need to restart
it man it's been pretty hot around here
this past week There's been two days
this past week where it was like uh
around 85 86 degrees
outside which is crazy because it's
supposed to be
winter uh and normally it stays pretty
cool in the win I mean not like cold
like up North but it stays cool like
nice comfortable weather down here in
the South but anyway so after you've
restarted it go to animation go to
contextual anim scene right here this is
what you want I'm just going to name
mine
Cas uh Tak
down and now you need one more asset for
the rols we need to go to miscellaneous
a data asset
and then you're going to choose
contextual enim roll asset ignore this
contextual enem scene asset right here
that shows up in here I don't believe it
serves any purpose I believe that's
actually what this is but if you try to
create this this way uh in fact I'll
just go ahead and create it just so you
can see what it
does uh let's see maybe they fixed that
okay the last time I did it this way it
actually opened up without this window
right here uh this viewport window and
it also uh yeah it opened up all weird
so so maybe you can't actually do that
that's weird and I know in 5.4 it you
couldn't actually do it that way but it
looks like maybe you can
now so yeah we just need a contextual
enim rolls asset I'm going to call this
one CR take down rolls
rolls and now in
here I'm going to create two
[Music]
rolls and I want to make this I want to
call this one the
victim and then I going to call this one
the
[Music]
attacker and now I'm actually going to
make the attacker uh a
character maybe that's not NE
necessarily a good idea if you're doing
uh it could
be I don't know I may have to go back
and experiment with
that because I I tried this yesterday
but I was having a whole lot of problems
trying to figure out how to fix that one
that one problem I was telling you
about uh that this fixes but I only
actually just uh figured out that this
actually fixes it I only just now
realized that you could fix it this way
so uh I may go back and and experiment
with
that so let's actually just uh if you do
is character you can set this and I'll
just go ahead and do 86 I'm going to
show you how this works and I'm going to
set this to 30 now why am I choosing
those values if we come over here to
our blueprint folder and you'll see the
CBP sandbox character
if you come over here and you choose
your uh capsule component you'll see we
have 86 and 30
here now I'm going to show you something
here real quick actually so that you can
understand something uh that's specific
to this project if I come over here to
developer and I go to Bones you can see
the
bones and now if I actually select this
guy select his capsule component and
scroll down uh let's see where is it
under rendering if I uncheck hidden in
game now I can see his his capsule so if
I come down here you'll see his capsule
stops right here but his root bone is
right here uh
now the reason why his root bone is
right is right down there is actually
because and this is the problem I was
telling you about that you have to watch
out for if I come over here to the right
View and I scroll in here you'll see
that he's actually below the capsule so
if we select this mesh component you'll
see his origin is right there 2 cm below
I'm not sure why they did it that way uh
but it can cause problems as I was
telling you before you'll see that this
is 88 not 86 so I'm going to say 86 and
that'll put it right there now if I come
in here and I do the oops uh if I do the
same thing I
eject and if I unhide that capsule
component
again now you'll see that the root is
actually right there at the bottom of
the capsule uh so why is that important
and why is his feet still on the ground
well his feet is still on the ground
because we're using foot ik so it
corrects that
uh and the reason
why uh this needs to be at the bottom of
the capsule is because if you do do use
that motion warping along uh well if you
put them in flying mode and you do
motion warping that way then when the
animation is playing it's actually going
to the character movement component is
actually going whenever it gets resized
well actually put it right here uh
rather than uh 2 cm down uh at least
from what I saw so that's why I'm
warning against that against uh having
the offset anything but uh the caps half
high so it can cause problems in
different situations so just uh you know
take
heed if you decide to do it that way it
can't cause problems so anyway that's
why in here I would do
86 uh because this is the mesh to
component and the component is actually
the capsule in this case and
so I would do 90 there and so if I come
back over here you still won't see
anything uh but that's fine it'll
automatically add this stuff right here
uh whenever we uh set up a new Anem set
so the way that this works is you have
your roll asset in the rle determines
which character belongs to which
animation or which animation belongs to
which character so on and so forth uh it
it's also important for determining who
the primary role is the primary role is
always always going to be the thing that
is being interacted with by something so
if your player is opening a drawer your
drawer is going to be the primary uh
role or if you're opening a door the
door is going to be the primary role or
if you're attacking a character from
behind uh then your the character is
going to be the primary role uh
so there may be ways to get around that
by having a median as a primary role uh
but one thing to note is that everything
revolves around the primary role so your
primary role cannot actually be offset
within the scene it has to be at the
origin of the scene uh so that's the
reason why the primary role is so
important so that's something that you
need to take note of uh right now
because um if you want to have two
characters like
uh interacting in here then you need to
be careful how you set it up if you
don't have one of them as the primary
role if both of them needs need to be
offset in the scene then you're going to
have to have a median as a primary role
and I may show an example of that later
on I'm I'm going to keep doing these uh
sections for this series uh so just
watch out for that okay so starting off
you cannot have an animation sequence
within a contextual animation scene they
have to be animation montages because
they play them for you as montages on
the characters whenever the scene
starts so we're going to have to create
uh anim montages now it's going to go
ahead and uh set this up for me by
default because in the game animation
simple project your full body slot is
actually your default
slot so I won't actually need to come in
here and check change the slot not on
this one you'll see it's set to default
slot if we actually go over to the
character and we open up the anim
animation blueprint we go to the anim
graph you'll see right here we have the
default slot and this happens before the
offset before the offset root bone and
that's important because when you're
coming out when you're blending out of
this default slot and needs to start
accumulating the uh root bone offset
right here so that it can keep the
character grounded otherwise your
character may snap uh from looking this
way from standing this way to standing
facing this way uh that's if you didn't
have this right before the offset root
bone then that's what you would
see so anyway that's how that works so
something else we need to actually do is
we we need to actually come back into
these animations and we need to enable a
root motion for them uh and when you
enable root motion you should see this
little line on the ground uh this is
your actual root Bone Trail this is H
the path that your root bone takes over
the over each frame so each of those
little dots on that on that path
represents a keyed root bone uh
transform so we need to browse to this
and we're going to open up the
victim and I'm going to set this to have
root motion enabled as
well on this one I want to motion
warp
[Music]
so so this is where that part I was
telling you about like where I don't
really have a whole lot of frames to
work with for motion warping here uh
because like I could I could have a
longer reach during the jump to motion
warp
uh but because I made the animation like
this where he immediately starts
wrapping his arms around him as he gets
up there uh that kind of causes a
problem because if you motion warp
during this part right here uh then his
arm will go right through the back of
the characters the other character's
neck
depending on how far away you
are or how close
so that's why you need to uh take uh
note of that I may go back and alter
this uh if you're seeing this now then
you may see an altered uh version where
the arm doesn't wrap around until after
he's fully on his back
um I may do something like that we'll
see what anyway from what we're going to
do is we're going to right click and go
to add notify State this creates a
window that we can uh dictate where it
starts and ends at and if you have
motion warping enabled you should see
this motion warping one here we're going
to add that and you'll see these two
diamonds here and you can drag those out
and those determine where it starts and
ends and now on Unreal Engine 5 you get
this neat little visual that shows the
path along your root bone
where your motion warping is going to
occur so we might actually want uh this
to start right
here let's
see okay is it bugging out on
me oh no it's just it was a little bit
further out than what I thought I think
there's a
delay right right
there yeah so I think it's actually safe
to put it right
here if you motion warp right here where
he's standing still and you enter this
animation from a moving
then it could cause foot sliding
now in the one I showed you earlier I
actually did have this from from here
out uh to some somewhere around here I
think uh so you can try doing that if
you get foot sliding and just move this
out about five uh well about eight
frames because I added eight buffer
frames to the beginning of
this and that's actually where it starts
at frame
eight and you actually don't want this
so far out so you actually want it to
stop motion warping when his arm starts
starts to wrap
around so something like that but that's
a really tiny window there from 8 to 13
that's only five frames that you get so
that's the reason why I went ahead and
just uh matched it across that entire
thing there but maybe I could add a few
frames where it actually is sitting
sitting
still
[Music]
so that should
work now something else I want to uh do
is whenever he gets on the whenever he
touches the ground and he's starting to
come uh to let go of the player I
actually want to fire an event
here so right about here frame 98 I'm
going to add a notify event I'm call I'm
going to call it uh on ground
uh you can call it whatever you want um
leaving Target maybe I'll rename that to
leaving
Target let's
see okay it won't let me rename it okay
I thought you could rename
those let me just call off
Target now I forgot to do this so on the
motion warping go to the config and
expand the root motion modifier and I'm
going to call this On
Target and we actually don't need to
change anything else there we're good to
go now on the other
character the
[Music]
victim on the victim whenever uh what
we're going to going to do is we want to
go to the blend out and we want to set
the blend out time to zero and I'll
explain why that is so this is something
a lot of people don't actually know and
they'll do they'll come in here and
they'll try to add a notify to the end
of this and then the if the animation is
blending out when this notify
fires well it'll never actually fire so
you have to fire your notifies before
you start blending out of your
animations uh well not necessarily
actually I think they'll still fire but
in our case what I actually want to do
is I actually want to pause the Montage
uh so it never stops so we never leave
this Montage I want to pause it uh and
in order to do that I need to fire as
close to the end as I can otherwise I
can't pause I can't pause the anim
Montage if I'm blending out of it so set
your blend time to zero and then we're
going to add a notify here called dead
and so if he's dead we want to uh pause
the Montage whatever montage is playing
we're going to pause
it so over here on the animation
blueprint we're going to go to the event
graph and we're going to right click and
and say
death let's see uh dead I think it was
dead so you'll see an an notified dead
actually let me read name that I can't
rename that so I'm going to delete it
and then I'm going to create a new one I
actually want to call this on
death let me just call on
death on
death so on
death we want to uh do Montage
pause and so if you move your mouse over
this and read the tool tip it says
pauses The Mont the animation Montage if
reference is null meaning it hasn't been
set then it will pause all active
montages so this is what we
want we don't have to do anything else
that's handled now now for the
attacker I actually want uh to handle
that event as well and that event is the
offt target event
so off
Target so I'll get the
sandbox uh character and we'll have to
create an event over there so over here
on the character
blueprint uh somewhere in here wherever
you want I'm just going to put it at the
top I'm going to create a custom
event and I want to call this
uh on off T
Target now let me just call it of Target
yeah it'll probably be easier to seems
weird to say on off so I'll just call it
off Target and I'm going to call off
Target and basically what I want to do
is I want to give the user control back
of the character as soon as he uh starts
stepping off the player uh because I
want to reduce the amount of time that
the charact that the player has no
control as much as possible
so I'll say enable
input actually I could leave input
enabled what we could actually do is we
could just
uh
see yeah I think maybe we'll just uh for
now there's other ways to handle this
oh that's moce warping let me
see yeah let's uh oh okay no okay so I
actually don't want
to uh use that method so you
can you can set
uh I'll just show you you can set the
movement mode to none and if it's set To
None then movement is disabled but in
this in this case we don't want to do
that because that means
that uh our root motion animation won't
work so we'll just use disable and uh
we'll use enable let's
see enable
input and we may not actually have
uh access to on mine I already have uh
the player controller cached but I don't
think they're caching it here as you can
see right here so we could just do use
this method uh or you can cach it on
begin play so that you have a reference
to it if you want it's up to
you so
I don't know if if the regular
controller
okay
okay no it needs a player controller
okay
yeah that's fine okay
so for an NPC you probably have to
handle that differently but you could do
that off of the cast Feld in this
situation so moving on all of that
primary stuff is taken care of let's
finish setting up the contextual
animation
scene I think I've spent enough time uh
talking about that so I have actually
assigned a roll asset so over here we
need to assign the roll asset and we
need to choose the victim in this case
as the primary role and you can update
roles but it it doesn't matter right now
if you update it or not now you have
this override preview data uh but you
actually don't really need to uh set
this up but it will allow you to choose
a victim and choose if it's a skeletal
mesh an actor and it gives you a better
visual if it's an actor you can use
choose the actor class if it's a
skeletal mesh you can choose the preview
skeletal mesh in the preview enem
instance and it'll play that enim
instance on the skeletal mesh and then
uh the Montage you'll see how the
montages Play Over the Top or on that
enim instance from this preview so that
could be helpful so I'm just going to
close or delete that because I don't I'm
not actually going to use
it then I'm going to create a new anom
set now something that you need to take
note of is the section uh name if the
section name already exists it'll add a
separate enem set for each of for each
Ro uh with
the with uh the assigned animation and
movement mode settings so you'll end up
seeing that Ro right here and then
you'll see section zero and section one
if you have two animations for each of
them and it'll show that on both of
them so in this case I'm just going to
call this uh take down B
[Applause]
[Music]
behind and I want to type an assassinate
and I'm going to choose the victim
animation for the victim and for the
attack attacker I want to choose the uh
attacker one I'm going to leave this in
walking because I don't have any uh Z
root motion on this one it's just moving
those the root on the X and the
Y and now the I'll explain to you how I
got how I got it to work like this but
you'll see that the character is already
in place and everything is already in
sync and it's because I designed and did
my animations a very specific way if I
if I didn't do my animations in this
very specific way then he he would be
standing in the same place that the
victim is right now and I would have to
manually offset them I'll explain to you
guys how I managed to do that uh in a
video after this one I'll go over how I
did the animations so in this video I'm
just showing you guys how to set it up
and I'm trying to explain everything to
you
so we can go ahead and play that and
we'll see how this will actually look if
it's perfectly in sync inside of the uh
inside of the
game so any flaws that you see right
here is actually
uh yeah is a result of
the uh change oh of some errors that
occurred when I was bringing them in so
I may go back and fix uh these errors
well remember I changed this starting
pose after I brought these in and iclone
these were perfectly synchronized but
iclone has a tendency of offsetting
things uh and so I had to correct those
offsets for the starting poses of each
character and because this character is
in a slightly different starting pose
now that's the reason why we have this
offset where his arm is actually inside
of them and in fact whenever he moves
his foot around uh here I believe it
probably also caused to that right there
I did that or I overlooked that in
iclone whenever I was synchronizing
these but
yeah so there you go so when you see
this these problems may actually already
be
fixed just a heads up now if you scrub
to the very beginning of this uh
animation you'll see this little green
guy here now this uh is showing uh the
orientation of this character the true
orientation of this character and offset
from this guy right
here he'll be at the origin until you've
uh set up motion warping uh so he'll
only be offset whenever you've set
motion warping targets
up so in our animation if you remember I
set up a motion warping and I gave it
the uh warp Target name on target that's
with the capital O and capital T if we
come back over
here and I select the attacker right
here I just click just click him on this
timeline here it'll open up this uh
selected anom track uh category right
here and if you don't have anything
selected then you probably won't see
that until you've clicked on something
and then you can expand it and you'll
see this stuff right here you can change
the change the movement mode you can add
selection criteria I'll go over that in
a separate video uh and you can create
additional mesh to scene offsets inside
of
here so for this setup we don't actually
need to use this mes to scene offset
stuff uh I think in another one one I
did but that was before I realized this
trick for getting those to just come in
here perfectly in sync which like I said
I'll explain how I did that in the next
video um next part of the video for this
so now what we need to do is under our
uh actually over here you'll see that it
automatically added uh override preview
data for us uh and that's the reason why
I didn't actually make it earlier it'll
make it for you uh if everything works
out right it will make it for you now if
you've already added some to this then
it will not make them for you and it
will not change the ones that you made
uh if that's the case you may actually
have to recreate this in order to
correct that uh because if you change
that I think it might be
permanent the radius right here I
believe is for a activation uh we'll
probably use that in a later video and
this one we're not going to uh the
Collision Behavior we need to set this
to ignore channels you can set ignore
actor when moving but it'll only ignore
the actor the other actor's
Collision while this character is
actually moving uh so I actually want to
just set ignore channels and I'll add a
collision channel for
each roll and this will be the victim
and this will be the attacker
and I'll just tell it to ignore the
pawn and that's
it now the problem with this is uh is if
you do this and there's something in the
way between you and the character then
you will collide with that and it will
stop you during your motion warping uh
it may not stop you outside of the
motion warping but I do believe it'll
stop you and Offset you during the
motion warping so just keep that in
mind I have not experimented with the
attachment prems but the ik target prems
are very useful I'll probably go over
that in another video as well uh I'll
experiment with the attachment prems to
try to see if I can figure out how to uh
utilize those but I already already have
a good idea as to how to handle the ik
target definitions for each rule we're
not going to need those in this one
though
you can change the sample rate but I
wouldn't recommend it uh 15 is probably
good you could probably even set it
lower than
that but uh this is just basically the
frame
rate like how often it will update the
uh
alignment uh positions because something
to note is whenever we set this up and
I'll show you so let's go ahead to the
active section uh you need to have this
section right here selected if you don't
have any animations down here it's
because you need to select a section
sometimes when you create a section it
actually won't select it and so you
won't have any tracks down here and
you'll have to come up here to sections
and select it
manually
so under once you've selected a section
and you have an active section you'll
see the active section section and you
can expand it go to war Point
definitions and add one war point
definition if you have two warpo uh warp
points in your animation you can add you
can add one for each so if I was motion
warping from frame 60 to 70 and from
frame uh you know 5 to 15 then I could
have two different uh motion warp
definitions in here and the thing is is
once you filled this out and you play
this like I'm going to show you how to
play it then it will all Auto
automatically handle all of this stuff
for you which is why this is so cool uh
that's why I really like these
contextual animation
scenes so I need to set the work Target
name to the same one I assigned to that
workpoint uh on the animation which is
on target we're for now I'm only going
to show you guys how to do this for the
primary actor I'm not actually sure what
use case uh the customer the socket one
will be but I'll try to find a use case
for it and then go over that in another
video with
you now sync animations
um I'm not actually 100% sure but I
believe that it just simply ensures that
they both start at the same
time also in case you weren't aware
there's also some new nodes I'm not sure
if there are actually new nodes but I
believe they are or you can actually uh
sync uh
let's
see I
believe okay well I ran across that at
one point it might not be called sync
I'll look for it later and I'll update
you guys on that in another video but
there's actually a built-in way to play
two animations on two different actors
uh
synchronously uh inside of Unreal Engine
now
I actually it actually may need a plugin
to be enabled but I don't think so I
believe the all the main plugins that
would probably affect that in this
project are probably already
enabled anyway once you've uh done this
update the work points It'll ask you if
you're sure uh War points should be
updated while previewing the scene with
the meshes the animations were
originally authored for are you sure you
want to continue so I'll so yes now
you'll see that little green guy is
actually where he's supposed to be and
if we scrub through here you'll see this
little Diamond here uh and that diamond
is actually showing you where the
attacker is going to motion warp to
uh so let me save this real quick
because what I'm about to do might
actually crash it and the other project
it kept crashing it it may do that in
this one so if you double click on this
uh animation down
here okay it's going to crash it yeah
okay so I've done this before and what
what it's supposed to do whenever you
double click on that animation and maybe
I can get it to do it in here on one of
these uh that aren't you that isn't
using the buffer uh one let me see if I
can oops let's
see okay come on
so if I come over to this one let me see
if it oh that one's using it too okay
let me see if I can find one that's
using a different
one let's try this
one yeah
[Music]
so okay I don't know why it's suddenly
doing that now I've done this before and
it's actually worked but for some reason
now it just wants to keep crashing uh
basically though if you whenever they
fix this hopefully in the next update if
you double click this it'll actually
take you inside of that track and it'll
actually show you a separate track that
represents where the motion warping is
on this timeline uh for this animation
and you can actually adjust the motion
warping inside
uh the where the motion warping begins
and ends from inside of here so it's
currently bugged out and it causes it to
crash for some reason but I've actually
just yesterday in fact I actually had it
working so it may be working on your end
uh for some reason with mine it's just
not
working so anyway now that we've got our
motion warping uh targets set we're
pretty much good to go that's all we
have to do on this now we just have to
set up the logic inside of the character
blueprint so I'm going to right click on
here and I'm just going to
say uh keyboard I'm going to say zero
and then I'm press this button here and
I'm just going to say
f so when I press F it's going to
activate
this now what I'm actually going to do
is create a function
here and I'll I'll actually uh say call
this
the
start contextual an see actually before
we do that one thing you need to note is
you need a motion warping component in
here you just come up here and type in
motion warping and if the plugin is
enable you should see this under the
movement category right here and then
there's one more thing that you need to
do is select the mesh and I'm not
actually sure if it's necessary but I
believe it is so if inside of your
contextual animation scene if one of
your
characters uh one of your actors in this
if they are not a uh if they are not
marked as a character then I believe
it'll actually look for their
skeleton so that's why we need to
actually have this as a child of the
skeleton because I believe it probably
walks up the chain and gets its owner to
see if its owner is a skeletal mesh I
could be wrong there but if you just
type in context contextual anim scene
actor you'll see it and we're just going
to add that right under
here so the first thing I need to do is
I need to do a line trace and then after
that everything else is really simple so
I'm going to do a uh line trace for
objects I'm going to do it for objects
not okay I don't want to multi line
Trace uh for
object line trace for objects
and on the object type we're just going
to say make make array and we're going
to say Pawn so if we select this capsule
component we scroll down you'll see that
this is an object type Pawn so that's
why we're uh doing a line trace for
object types Pawn that are marked as
Pawn um so you can't add a list of
actors to ignore we don't need
[Laughter]
to and so what I actually want to
do is I'm I'm actually just going to and
there's two ways to do this because in
actuality the root counter root the root
does not necessarily represent the
direction that the that the character is
facing so if we come in here
and and I look
around let me just uh do this here if I
come over here and that made it lag for
a second
so you'll see that my capsule is
rotating as I look around but the the
character is
nine
okay uh now the reason why is because
the offset root bone inside of
here uh is actually counter rotating it
so until I press my right Mouse button
uh he won't actually turn in
place and that's because the offset root
bone is accumulating the the offset of
my capsule and it's rotating the root
bone in the opposite direction
so if
you the mechanic of this is going to
depend on how you want to handle it but
I'm just going to get the actor the
actor uh
location actually just let's just get
the actor
transform and I'm going to say
break you could also uh do this let's
see I don't know if
they've
cached I don't think they did in mine I
cashed a reference to the enim instance
no yeah that was something I did so if
you get Anam instance
and I'm just going to cast uh for now
I'm just going on mine I used a
blueprint interface function but on here
I'm just going to cast to it the
ABP uh sandbox
character if you were to do that and
then you get off of here and you say
root
offet
um okay maybe they no root
transform root transform if I get the
root transform that will actually be the
direction that the uh car that the mesh
is actually facing uh getting this uh
transform will not be correct because
the root is actually be count is
actually being counter rotated and
relative to the mesh
component so the mesh
component uh the mesh component could be
facing this
direction but the character is facing
the is facing this direction because the
me
is actually rotating with the
capsule so if you wanted it if you
needed to actually get the direction
that your character is facing that would
be a root
transform that that would represent
where he's actually at because it will
offset him in location and in rotation
relative to the skeletal mesh
component so in this situation I'm just
going to have the line Trace ran from
where I'm actually
looking from the direction my capsule
component is
facing so I'll just get the uh forward
uh Vector of my
rotator and since the actor transform is
actually the
center is is actually right here where
the arrow is not down here I don't even
have to really offset it you could
offset it up if you want but I'm not
going to if he's crouched like uh if my
character is actually crouched down here
then it'll be shooting it out from his
you know the
center so I'm actually going to
add right here and I'm going to start it
at the actual location of my actor and
I'm going to multiply this by a value
and what this is going to do is it's
going to get the direction uh let me
actually show you from the
viewport it's going to get the direction
that my character is actually facing and
If I multiply by 100 it's going to uh
choose a location 100 cm in that
direction and there and the reason why
is because the forward Vector is going
to be
uh well it's going to be a unit Vector
uh which has a magnitude of one so I'm
going to right click on this and I'm
going to set this to a float single
precision and I want to uh set this to
cm now in actuality this animation was
actually designed for being if we come
over here and we select the rout for
being a this he's supposed to actually
be 85 almost 86 CM behind the target
whenever this activates uh
but because we're using motion warping
we can cheat a little bit and and allow
it to happen further
back so the further back you put this
the more odd it may look so uh within
reason motion warping can help you
cheat so that's basically it for this
I'm just going to do a branch here to
make sure that we actually hit
a character a
pawn and then I'm going to break break
this my hit
results and I'm going to actually get
the hit actor
here and I'm going to cast this to a CVP
sandbox character
and if it's a CBP sendbox character then
what we want to do is we actually want
to get this contextual animy uh actor
off of
it right here under variables defaults
so if I were to scroll all the way down
to the bottom and go under variables and
look under
defaults then we should see uh
get contextual ANM scene actor along
with all these other
components and then I'm going to get the
scene ass oh I'm going to set the scene
asset and you could also create a helper
function for this so if you see a
variable entry where the target is below
the actual thing you're setting uh then
that probably means you should use a
helper
function uh I think it's considered best
practice but it's not actually going to
hurt anything to do it this way it's
just a little less
safe so we want to set that to our
takedown and in
actuality since this is a function we
can actually have that as an input
[Music]
and let me rename this
[Applause]
and now down here under variables you'll
see get C ref and this is
a function parameter the function
parameter in case you didn't know that's
a function
parameter and you can identify it by
this little icon it puts above it which
is new to 5.0 before there was no way
for you to
know if it was a function parameter a
local variable uh or what uh but they
added that which is really nice to have
and I'm glad they
did so now that we got our we got a
reference to our scene ass or we've set
our scene asset I should
say now what we need to do is we need to
off of
this if you scroll down you can see
contextual animation scene uh I mean
contextual Anem and scene asset and you
you'll see all the stuff that the scene
asset itself has and what we actually
want to do is we want to create a
contextual Anem scene binding for two
actors and that's just going to set
these guys up for this contextual
animation scene it's going to register
them with it so that we can so that the
contextual animation scene can force
these actors to play these things
uh I'll go ahead and explain so it can
it'll change their movement modes it'll
play the inim
Montage uh it'll also it'll even go so
far as to change the capsule half high
so if we come over here into our roll
and and we go over here to mesh I mean
uh to the preview capsule half high and
we set this to
60 as long as they're not in flying mode
it it will actually resize their capsule
so if we're in Walking mode it'll
actually and we set this to 60 uh if
it's at 86 when when we play this it'll
resize it to 60
so I
believe I did some testing earlier and I
thought that's what I was interpreting
but maybe I'm wrong uh
so I may have to go back and check so
maybe take that part with a grain of
salt anyway so we're going to make a
contextual Anem scene bonding just
remember guys that everything I know
about this I figure it out on my own so
keep that in mind because I'm the only
like I figured it out on my own and then
I made videos on it uh so yeah so we're
going to make a uh a contextual enem
scene binding and these just need to be
uh to the actors so the secondary role
is going to be this guy who is trying to
attack the other one and this guy is the
victim and he's going he's going to be
the primary actor
so if you come back in here if you
remember we have a primary role well the
victim is the primary role and so the
attacker is the
secondary or if
whoever whichever role is not the
primary role will be considered a
secondary
role so I'm going to make sure that this
returned uh true and if it did return
true
then I'm going to
actually
grab
this let's
see yeah this this is a getter node so
I'm going to actually do another one
here under contextual anmc asset
no no I believe it's off of this one
start so we're going to start the
contextual enim anim scene so this one
has separate options so if we scroll
down and look under contextual enem
scene actor component we have early out
get bindings get ik Target by goal name
get ik targets we have a lot of helper
functions here on left scene uh
on joined scene don't worry about those
two I'll explain those in another video
uh start contextual anom scene
transition so on and so forth so we're
just going to start the contextual Anem
scene and that's all we need to
do and these out bindings are going to
be the in bindings for
this and I'm going to
corrected
that and I think I'll just move this one
up
here and then we're going to do another
branch and maybe I'll do a return here
as well
[Applause]
we don't actually need to do anything
off of this right here but I'm going to
do that
anyway and so I'll actually do this as
well
so that's all we need to do for that so
back over here what we want to do is we
want to call this but first we actually
want
to
uh do
this like I said you can cash this if
you want it really makes more sense to
cash it but for the sake of this
video I'm not going
to so I actually want this to be
like like
so and so we actually want to call this
off
Target if this returns
false like I said we could we could have
done that from inside of here but I'm
I'm going to handle it right here that's
going to be personal
preference uh actually this needs to be
on false
sorry so if this fails for some reason
then we want to actually uh give the
player control back of his stuff
so now we need
to set this to the takedown
and
now we'll see if I missed something so
I'm going to put another player out
here I'm going to
start yeah and so there you
go and if I uh if I crouch which I'm
actually supposed to be Crouch
in then it'll look more accurate but I
did it I designed it in such a way that
you know you'd be able to do this when
not crouching
so yeah guys uh I hope you uh enjoyed
this video hope you appreciate the
animation because I made that myself
well I didn't make it completely I I
corrected it I retargeted it and
corrected it so and synchronized it so
uh and made a lot of altercations I made
a lot of modifications to that and this
is driving me nuts right here this thing
right here so let me actually show you
guys how you
can uh remove this so if you go into
editor editor preferences and under
viewports right here and you scroll down
you should
see maybe I went too far down
let's
see there should be a preview oh yeah
preview selected cameras so this is the
the camera preview size I don't know why
it's set to five I think it's
ridiculously large takes up like like
60% of my screen but yeah now you'll see
it's really tiny or if you want to save
performance because you don't care about
looking through the cameras you can just
disable that entirely and now it won't
do that because when you're looking at
the viewport and it's rendering five
cameras over here now you're rendering
the scene five times and it'll really
slow stuff down
so I normally just disable it because it
gets in my way and it's aggravating and
it slow stuff down but yeah anyway guys
that's basically the rundown on it uh
so
um yeah so I actually went over the root
motion did I go over no I don't think I
did so so let me actually I guess it
looks like I've already
closed uh this
one I'll go ahead and uh go over it with
you real
quick I kind of went over the the hack
that I used for it but I'll go ahead and
kind of explain to you the differences
and the setup that I uh
performed for that
one and I'll actually I guess go ahead
and uh
I'll
provide all of those animations the ones
with the the actual root offset and the
one with the flat
root
so let's come over here so yeah I have
it I have it set to flying mode whenever
he uh plays this animation on this one
because he needs to leave the ground uh
if we are in Walking mode he will never
leave the ground the capsule will never
leave the ground
so if this happens from a Crouch State
then we need uh the the problem is
is
that when the
capsule gets
offset it screws stuff up which is you
know I explained that part to
you but on the motion warping I actually
have ignore Z AIS turned off and that
makes sure that it motion warps not just
the X and the Y but it also motion warps
up along the Z and that will keep things
in
sync so in actuality this animation is
actually uh perfectly in sync the
offsets that you saw uh were actually a
result
of it was actually a result of
that of something that happened when I
was trying to correct the starting the
starting pose right so whenever I was
making those modifications the starting
pose I think it might have offset some
things so I may go back and uh correct
those so when you get them you may not
even have those offsets so anyway I'll
I'll actually add both of these but yeah
that's the only difference is ignore as
the access is disabled uh right here on
this one uh everything else is still set
up the same exact way uh inside of here
I have it set to flying mode and I had
to use uh this hack right here where I
have to uncrouch them first I have to
set the Caple half height to 60 back
back to 60 uh you could probably also uh
get that
by uh get crouched half height you could
do it this way as
well and then you can uh oh you have to
cach its actual World location not its
relative offset so you have to cash its
World location because the relative
offset I'm not I'm still not entirely
sure why that's the case I'll have to go
back and look at it a little closer uh
but we have to get the world the world
location and then set the world location
back and I use teleport just to be safe
uh after we uncrouch and then we set the
capsule half height back to what it was
when we were crouched and then we
teleport him back to where he was
so I'll go ahead and show you what
happens if you don't force it back into
Crouch afterwards so um actually let
me let me uh I have to set this back
up yeah and I don't think that delay was
necessary
there so if I set this back up and I'll
just temporarily enable that just to
make
sure so if I come over
here you'll see
looks fine for the most part no real
serious issues with it but if
I if I start from a standing position
and I don't do
that yeah so he kind of jolts actually
before I actually saw him go back I
actually saw him go under the ground uh
so I don't know why that didn't actually
happen that time which is kind of weird
but
yeah oh huh yeah it's still doing
it if you do it from my standing
okay maybe I did need that
delay until next tick or you might need
a a longer delay than one
tick uh if you do it from a
standing let me
just yeah that is okay I just want to
make sure that
was oh yeah so his his feet go under the
ground yeah
okay well this fixes it if you do it
from a Crouch but it seems like maybe it
didn't fix it uh from a stand I thought
it did so maybe I accidentally changed
something somewhere uh on this because
before it was not doing that even when
you were
standing but yeah anyway that's this was
the reason why I didn't go with this
method uh because there's problems
whenever you're going in into flying
mode from a Crouch uh I've I had to use
some weird hacks but anyway I'll go
ahead and uh
include uh those animations as well
anyway so and I'll see you guys in the
next video

================================================================================
ARQUIVO: Unreal Engine 5_ Post Process Corrective Bone Pose Drivers (English_ASR)
================================================================================

=== DESCRIÇÃO ===

In this video I'll explain to you what Pose Assets are, how they work, how to create them, and how to set them up on Pose Drivers. I will also briefly explain Post Process AnimBP's and what they are mostly used for as well as some things to watch out for when using them.

QuickMagic PromoCode: https://www.quickmagic.ai?code=l50rd1 (copy the entire link and paste it into your address bar YouTube ignores the last part of the link)

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

00:00:00 Breakdown
00:30:00 Creating Pose Asset
00:53:00 Setting Up Pose Driver
01:00:30 Outro

=== TRANSCRIÇÃO ===

all right guys so I'm back with another
video in this series so in today's video
I'm going to be talking about pose
drivers now I'm by no means an expert on
POS drivers but I'll at least be able to
help you understand them more than
anyone else has attempted
to uh
so so we'll go ahead and get started
first off uh yeah there's only like been
five videos uh released on pose drivers
over the past like seven or eight years
uh which is why I decided to go ahead
and do a video on this to show you guys
how to do it now as far as metahumans
you really don't need to do that uh I'll
actually explain to you why uh he he
looks like he needs one um but that's
basically because I do not believe by
default these are even assigned POS
drivers there is a posst driver in here
uh so if I open this up and I go to
asset details and I search for pose uh
let's
see oh postprocess my bad yeah so you'll
see that uh there's no nothing assigned
here but if you go to the uh and I think
that's
because I think that's uh actually
because of uh
the fact that these are the game ready
ones I don't really know I haven't
messed with the game ready ones that
much but this is a uh uh this should be
a game ready one and it has one okay so
I guess it's just these templates these
templates just don't have them assigned
to them by default now there's one thing
to uh note with these post-process
animation blueprints once you've
assigned them they're always on unless
you disable them and that can be a
problem when you start making animations
like this
because if you don't key this to be
disabled right here on this mesh on the
skeleton mesh if you don't key that to
be disabled then it'll bake that into
the animation and when you have that in
game when you have that being applied in
the game uh those bones end up
getting uh offset
twice because it was offset when you
baked it and then it got offset again
when you applied It postprocess
Animation
blueprint so why do they call these uh
postprocess and on blueprints uh and why
are they assigned inside of
here they're assigned inside of here for
convenience they're called postprocess
enim blueprints because they get applied
after the main animation blueprints are
processed and so in your character
let's just go over here and we'll we'll
open up
uh a character blueprint so in this
character blueprint I have an animation
blueprint uh right here assigned and
this drives The
Locomotion now every animation blueprint
has an output
pose so when this uh finishes being
processed the final pose is
output uh is output right here
here so the post-process uh animation
blueprint that's assigned to the
skeletal mesh will get executed after
this one is
executed and the input pose right here
is where that other one's output pose uh
comes in and so this input pose will be
the actual animation blueprints final
output pose
so that's basically how that works I
hope that uh helps explain it to you now
when you're setting up these postprocess
anim blueprints you can plug in an
animation for testing to see how it'll
look and you'll see in this one uh when
we're applying a post process you'll see
it fixes that problem now like I said
for the metahumans you're not really
going to need to do this uh and I can
actually show you how to assign this so
if we go over to this uh this mesh this
this is the actual skeletal mesh not the
skeleton under the skeletal mesh we have
an asset detail and it'll probably be uh
docked down here on the bottom or up
here somewhere I have mine docked on the
side and if we just press that and we
assign that you'll see that it's already
running if we come back in here you'll
see he he kind of bugged
out yeah so it had a negative effect on
this
but if I close that and reopen it it
might fix
it no it doesn't Okay so for whatever
reason it did not like that but I can
disable it right here and you'll see it
automatically starts working
again um
yeah okay
that might be that might have something
to do with
uh with these template versions maybe
maybe that's why they didn't have one
assigned uh to
[Music]
them let me just
uh let me actually see
here before I uh dis aable
that oh yeah so it's working this is the
postprocess oh my bad okay I understand
why it wasn't working now uh yeah so
that was totally my fault so there's
nothing wrong with that there reason why
it's not working is because I don't have
the input pose
here which means it can't receive
anything it's just going to stick them
into this pose and override whatever it
was last
processed so now that I've done that I
should be able
to if I can find the animation
again it's up here
so if I open this now yeah it should
work that's just a bug you'll
see and so now with this postprocess uh
and on blueprint you'll see that looks a
lot
better now not all of the characters are
going to have uh sophisticated
corrective bones like this does uh for
example the Character Creator it doesn't
have these wrist support bones right
here uh it only has has these twist
bones and they're not as effective at
correcting these wrist problems as
actual dedicated wrist bones would
be
so I've never actually weighted those
bones before so I don't actually know
what the best way is to uh go about uh
creating corrective Bones on an actual
skeleton when you're creating the mesh
or waiting it or rigging it or whatever
uh but I can uh explain to you how you
can make use of them and set up pose
drivers for
them so starting off if I just select
this pose driver here and I scroll down
you'll see it has a pose asset assigned
to it right here you might have
accidentally graded some of these before
in the past and you were confused as to
what their purpose was uh well this is
what the purpose is you'll see a bunch
of pose names down here and that might
confuse you and they have weights but if
you go to the asset details you'll see
there's a source animation so the
additive section and the source section
are the only two sections you should
really worry about there's not much
going on here other than that the source
animation is actually the animation that
we use to create this so if you go to
create asset pose asset and current
animation then it'll create one of those
like what you've seen and right now I
have this set to step by default it was
set to linear if you set it's a step it
won't interpolate between zero and one
it'll just snap from one pose to the
next which is why uh we see
this so if I come over here
to um if I browse to this and I open
this up in a new
window you you'll notice something here
you'll notice that there's four frames
here you see this is frame four the very
last
one and you'll see that there's uh
five right
here so actually there's five frames not
four uh zero is the first frame so frame
zero is actually the default uh that's
this one
frame one is clavical L forward 30 frame
two is clavical L back
30 frame three is clavical L down 20 and
frame four is clavical L up 40 and
you'll actually see that the that the
clavicle is rotating up and down in each
of these so this is the default pose
right here where it's in a neutral
position uh one you'll see it uh if we
come over here to the side you'll see it
rotates 4
30 uh back
30 down
20 so you'll see it's up and then it's
down 20 and then it and then it's up 40
so that's the default and that's up uh
let's see that's the default and that's
up
40 so that's how it works uh they named
these themselves you can press f2 and
rename them to whatever you want
and so if we come over here that's uh
the up
40 and I come behind it and if I start
giving that one weight you'll see it
goes up
40 and for this one right here which is
down
20 if I start uh giv this weight you'll
see it rotates down
20 and the same applies to all these
other ones too so that's how uh those
post drivers
work now let me explain to you how uh
they actually work when they're being
driven inside of a POS uh driver or a
postprocess mmvp on a post
driver so you'll see we have a pose
asset you can assign the pose asset if
you come up here these pose targets uh
those are the actual things inside of
there that I was showing you a second
ago if I just uh double click that
you'll see that's what you were looking
looking
at let me just put that right
there uh by default it doesn't
automatically fill these out for you you
have to go to tools and copy all from
POS asset and then you'll see all these
uh names right here with the numbers in
front of them and then uh one of them uh
may or may not have
weight now I wouldn't worry too much
about this right here you can you can
change these uh so that zero goes to
this one so on and so forth but you're
probably not going to use that I don't
really see much of a use case for it
there may be one somewhere but
anyway so these are the PO targets and
these are the actual Target
angles all right so sorry about that
okay so let's see where we at yeah so
these uh these are like local rotators
uh which will rotate it around
uh the source bones
uh the source bone it'll rotate it
around the source
bone
um if I just undo that let
me there we go
there we go yeah so um
anyway let me just copy this and then
I'll show
you yeah so you'll see that uh we can
rotate it around
that and
uh the
scale I think the scale is Contex
sensitive
so in some cases the scale can actually
uh make the cones themselves uh smaller
at least I've seen I've seen that
before but for our general setup what
we're doing is we're uh we're going to
be uh driving these corrective uh these
corrective
[Music]
bones so how does this work you have
your Source bones that's the bone that
it's going to
be that's going to be driving these
bones so these only drive bones these
are the bones that are being driven so
for example with uh let me give you a
better
example a sampler example so if I go to
the hand you'll see
that if I come over
here you'll see that the hand right here
it's got these two uh it's got these two
uh bones right here that help support
the uh the structure or the volume of
the of the
wrist uh during extreme
poses
and those are the bones that are being
driven by the hand so based off the
hand's actual rotational angle uh it
will offset these wrist uh outer and
inner corrective bones now not like
character creator characters they don't
have those I don't believe I'm pretty
sure they only have twist bones
unfortunately but I'll show you how to
set one up for those uh it's they're not
as effective at preventing volume loss
in the wrist uh as these uh wrist
corrective
bones but uh there's not a whole lot I
can do about that unfortunately that's
something that character creator will
have to they'll have to upgrade their
skeleton if they want
uh if they want better output like these
metahumans
have so these this RBF prems these this
is actually for the solver this is
actually what solves uh the positioning
for
those and so there's two different
solver types there's an interpolative
and an additive so the additive it'll
apply a percent of these additively over
the top of this but it kind of snaps
it's real Snappy uh things can kind of
snap into place uh if you don't uh set
it up just right there's probably some
examples in here uh but um let's
see this guy's video right here ask a
Dev he's got a video uh that that covers
that solver that attitude solver type if
you want to go and check that out I
highly recommend that video it's the
only useful video I've actually found as
far as foes drivers um none of the other
videos I've ever found helpful there's
only a handful of
them so for corrective bones you're
mostly just going to use interpolative
you can read these uh tool
tips uh to get a better understanding of
that interpolative it has a higher
computational cost because we are
interpolating the values additive does
not interpolate the values and so it
requires a normalization step to be
performed for smoother
results so the radius um that's the
default radius for each
Target and the targets I
believe uh are these right here yeah
these are the
targets uh so that actually
that this radius right here actually I
believe it may actually influence the
radius of those uh so let's go back over
here and we'll just I'm going to copy
this
[Music]
one and while we're at while we're
looking at this cone right here yeah
okay so you'll see that's how you can
actually uh give the cone a wider
influence or a smaller
influence uh like I said when this uh
green line right here is at the center
of this cone in all three dimensions
then it
will that uh then then that Target will
have uh this target right here which is
this cone it'll have uh 100% weight
right
now it doesn't have
that and in actuality that may uh be a
little misleading because these can
actually still have high uh a high
weight
or somewhat of a somewhat of a way
without that green line actually being
inside of the
[Music]
cone and I I believe that has to do with
your distance
method so your distance method
uh uh I believe
is what
dictates how like the
angle of the source bone influences that
Target so the swing angle and the twist
angle yeah and so I've seen one with
that uses querian in here too but I'm
not familiar with that yeah so the
fingers use the querian uh
method
uh most of these other corrective bones
are going to use the swing
angle if you were setting up a Twist
bone it would more likely use the twist
angle so the twist axis I believe is
only taken into account when our
distance method is set to swing angle I
don't think it actually affects the
twist angle uh
method but I could be wrong when I set
up my twist one as I'll show you guys
here uh in a little bit at the end of
the video I didn't have to mess with
that twist angle axis so I mean the
twist
axis let's
see yeah so you'll see all these are
ging and and uh swing angle also
something else to note is this uh
function uh type right here uh this is
how it interpolates uh this affects the
interp potion itself gajian and linear
are the only two I've ever seen used I
have not seen quitan cubic or quintic uh
used uh the default um I don't know
exactly what the default function
is yeah I'm not familiar with
that weight threshold probably will
hardly ever be touched normalized method
it'll depend on the circumstances
so in this case it's always
normalized uh and that's going to be
most of these regular ones here you'll
see all these are set to always
normalize
yeah uh the
fingers are set to only normalize above
one so I'm not familiar with their
approach for the fingers I may
investigate this and do videos on it
later I will tell you this though uh as
far as in game for the most part unless
you're going to be getting up uh close
and personal with the camera on your
fingers I would bypass this for your
metahuman characters and not always do
the finger one because that is going all
these little pose drivers here are going
to have a performance impact which you
probably don't want so you could bypass
it like this or you could set up like a
blend uh so that
uh these are only blended into uh
whenever you're doing a cinematic where
you get close to the fingers uh that
would be my suggestion but you guys can
you know handle that however you want
but that's just my thoughts on
it let's
see I'm trying to think if there's
anything um I'm missing yeah so your
drive Source uh for the most part it's
almost always going to be rotation even
for the fingers you'll see it's rotation
uh and drive poses is the output but
there are uh other use cases for this as
well you could actually drive the
translation of the uh Drive of the bones
that you're driving rather than the
rotation and you can actually uh Drive
curves instead of poses so those are
your options there that's how all that
stuff
works
so I think I've pretty
much okay so the eval eval space
okay now for the most part you're not
going to be using this evalve space bone
as you can see here on all the all
theirs uh they're all using the EV valve
from ref bow so they're evaluating uh
this based off of the difference between
the current pose and the reference pose
but you can also evaluate the uh
evaluate these and other
spaces uh I'm not going to go into that
in this video either I haven't really
messed around with that and I can't
think of a good use case for that right
off hand but I'm sure there's probably
Alternatives alternative use cases for
that outside of uh say corrective
bones there's probably a use case for
the outside of corrective bones but not
corrective
bones so let's go ahead and uh get
started on setting one of these
up so you'll see I've already applied
this to him by default the these
template metahumans don't actually have
these assigned uh this was actually
assigned to uh the Kellen uh M medium
normal weight body so if you go into
this you'll see that under the PO if you
go into asset details and search for
post you'll see this is the postprocess
and a blueprint I'm not sure if I've
mentioned that in this video I've
restarted this video twice already but
I'll go ahead and discuss that basically
the postprocess and a blueprint it gets
applied after the character's blueprint
so this character right here it has a
blueprint right here after this
blueprint is
processed it'll output a pose when this
postprocess an a blueprint gets
processed the last pose that was output
by the characters animation blueprint
will come into here and then we'll start
offsetting that based off of the the
current pose he's in okay now you don't
have to have these posst drivers set up
on a post-process anim blueprint you
could have them set up on the main anim
blueprint it would probably be a little
bit cheaper because running a second
animation blueprint will have a will
create a h
on the game thread because it the game
thread has to has to
uh initiate all the worker thread work
uh work so if you have other threads and
they're and they have to do work the
game thread has to has to initiate that
work on those threads uh I'm not sure if
you guys are aware of that but basically
that's how it works so anything that
happens is going to have some effect on
the game thread even if you are
offloading it to a worker thread in such
a case as an ANM graph uh so keep that
in
[Music]
mind so what I did actually with the
with this guy right
here why am I in oh so with this guy
right here I went into his asset details
and I search for post and this is a
skeletal mesh guys not the skeleton it's
a skeletal mesh that's where you'll find
the postprocess and blueprint I assigned
the Kellen one to this guy this template
right here that's the reason why he now
looks correct in this pose whereas
before uh I'll just go ahead and show
you before it looked like this
oh so the reason why it looks like that
why it's messing up right
there okay I thought I had disconnected
okay maybe just recom all that yeah
there we
go so there's something you should know
is when you assign one of these
postprocess anim blueprints to a
character and you go to modifies
animation if I were to save this like it
is it's going to cause
problems why because this post-process
and a blueprint is offsetting these
bones and when I save this it's going to
save those postprocess offsets to this
animation and then when the postprocess
gets applied to this animation it will
have been applied twice which will cause
the arm to stretch out like out here and
it'll look really weird uh you'll have
some weird deformities where the elbow
looks all pointy uh stuff like that so
if you have one applied to your
character either remove it from his
skeletal mesh while you're doing this or
when you go inside of here you're going
to have to go to like you're going to
have to go inside of here and you're
going to have to disable the postprocess
and a blueprint and key the frame and
you'll you'll now see that we have a
frame here key where this is uh disabled
and so you'll see that it looks it looks
bad right here but when this postprocess
and blueprint is applied during game uh
during runtime it'll correct it to look
like that okay but you don't want to uh
bake those offsets into the animation
because it'll cause
problems so with that said let's go
ahead and uh get started so I know that
was a long explanation uh but anyway
so we're going to go ahead and come out
of here and what I'm going to
do let me just do it this way so what
I'm going to do is I'm going to come
over here to this guy right here here
I'm going to come uh browse to his
skeletal mes right
here I'm going to drag that out actually
let's not do it like that let's do it
this way I'm going to uh go into the
skeleton mesh I'm going to go to create
asset create animation current pose this
is going to create a pose this is going
to create an animation where he's in
this pose
okay so I'm just going to go ahead and
put this under uh I'm going to create a
folder
actually uh pose
driver and I'm going to call
[Music]
this okay so now you'll see
something looks wrong
here okay so yeah let me uh explain let
me go I'll fix this so you'll see
there's uh this weird problem around
here and you'll see that uh these
corrective bones are all uh in the wrong
place and it's causing
deformities uh so I'll go ahead and
explain that to you basically goes back
to what I was telling you about
disabling that when modifying it
animations if you do not disable that
and you modify the animation you'll get
problems like this during runtime when
these are applied a second time so when
I created that pose it baked that
postprocess offset for each of these
corrective bonds into the pose and now
whenever uh this postprocess and a
blueprint is active and running you'll
see it's running uh it's going to apply
it a second time and it's going to cause
these problems so if I disable this this
is what it would normally look like if
these corrective bones were in their
default poses and then we applied the
postprocess and a blueprint but because
we baked it in now you'll see they get
applied twice and it offsets things in
funny ways so I'm going to have to
delete
this and I'm G to have to I'm going to
have to disable
this and we'll
try creating it again
[Music]
oops okay it still did it let's
uh let me let me uh pay more attention
to what I'm doing here
[Music]
yeah so I think we're just going to have
to clear this for
now it may actually be because he's
sharing the skeleton with uh the the
medum base skeleton that might actually
be what's causing
this let's see we're about to find
out yeah okay that's what it
is sorry guys
uh metahumans are they have a lot of
oddities when you're working with
metahumans but basically the anatomy
right here differs so let's I'll show
you how to do this instead in of doing
it from the skeleton mesh do it from the
skeleton and in order to uh prevent
those well actually I don't think you
have to worry about that with their
control rig because I believe when
you're baking stuff through their
control rig I think it automatically
corrects that stuff uh for
them but in this case I need to do this
from the actual skeleton
I keep doing that for some
reason and so now you'll see that it
looks right and if we come over to the
preview and we change this
to say m medium normal we and we choose
this
guy okay I still think it looks weird um
maybe that's just me
[Music]
[Music]
yeah maybe maybe it's just
me no I don't think it's me I think it I
think it actually looks weird I think
something went wrong here
yeah so now it looks
right this these translation retarget
settings guys
um that's what's causing uh that problem
I'm not going to get into that but yeah
these translation retarget
settings uh I don't like them uh these
default ones that they have set up in
here they're really not optimal uh for
getting the best results as you can
clearly see it's causing all kinds of
weird Oddities um now when you're doing
the ik live retargeting uh it the live
ret the ik retargeter ignores the
translation retargeting settings in case
any of you are wondering it actually
does ignore
those
so yeah I'm just going to leave this
like uh like
so I want bake this
to the
uh
actually no I don't want to bake that to
this okay I'll explain to you why it's
because there's no controls for these
corrective bones in there so I'm going
to unlink that and I'm going to bait I'm
going to edit with FK control
rig yeah cool so you'll see that uh
those translation retargeting settings
don't uh affect this negatively right
here which is a really good thing uh
because that would have caused all kinds
of problems so I'm going to create an
additive section right here to this um
and in actuality I'm actually going to
expand this
out uh three frames so I'll just leave
the first one as the
default I'm actually going to I'm
actually just going to delete that for
uh that frame right there because we
actually only need that first frame on
the Bas track
and so what I actually want is I'm just
going to say
hand now you'll have to create one of
these for each uh for each side of his
body you could also uh you could also
save these as poses and then mirror uh
paste them onto another
one or you could probably just mirror uh
you could probably just create a mirror
of this
animation uh and use that but I'd
probably recommend doing each of these
separately just to be
safe so the first thing I might
do is uh first off I want to do snapping
because I want perfect angles on this
so I'll just
do let me do uh 45
degrees
so let me actually do this first sorry
guys I I'm uh losing it first off you
want to key the frame on frame zero
otherwise because this is an additive
track anything that's not keyed will be
reset uh will be influenced by that key
so I'm going to create a key there too
and so on the first one I'm going to I'm
just going to rotate at
90° along the
Z and then I want to say
twist lower
arm lower arm twist one is likely going
to be the one that we want this probably
won't have uh this probably won't help
much no okay so that's not actually
going to help in situations like this um
what it will help with
though the twist bone it will help
with let me just reset
that it will help with this
so we'll do
90 yeah I'm just going to I'm just going
to do a pretty basic one here you can uh
add more uh rotations and Corrections in
here if you want but I think uh just
having two in here is probably going to
be
enough or we could do it we could rotate
it in the opposite direction too yeah so
we'll have four poses here so I actually
want to extend that one more frame
and I'll go ahead and key these
frames and so that's
90 that's 180
and we'll
do 90 this
way not sure what's going on here with
these
fingers was that was were this thing
okay that's a waiting problem on the
actual uh on this actual
mesh that's not something I did
actually those twist bones can actually
help with these two these angles so I'll
do a 45
okay that should be
good so now I just need my
twist lower arm
twist and so what we're going to do
is we're going to
key these as
well same
reason also the reason why I'm doing on
an additive track is because I can
always delete the additive track if I
need
to so I'm going to want to rotate that
45° right there that's probably going to
be about as close as we're going to
get I can try reducing
this but you'll see as we twist you'll
see the middle of the arm starts losing
volume so we have to find find a good
median I think 45° uh on the twist for a
90° turn on the wrist is probably good
it's probably going to be
good
[Music]
so let's go back to 45
snapping let me try going back down to
five yeah so you'll see the limitation
we have right here with
this you know there's only going to be
so much you can you can actually do
here so I'll keep that at at a a 90°
rotation for that let me see if uh if if
modifying this one will
help for this situation
there we
go that's probably going to be about as
good as we we're going to get it that's
15 right there that's that's really
pushing it you can see that's starting
to
collapse if you do this too much though
you'll see we we'll start getting some
Oddities around the uh around this right
here
it's probably about as good as we're
going to get it for such
[Music]
a I'll go ahead and push it to 75 but
we're really pushing it now because
you'll see it's starting to do some
funny stuff right there and right there
and so this is the 90 de in the opposite
direction um and that one should be easy
to
recreate so we'll just
uh rotate this
45° I'm not sure if I'm going be able to
uh to correct this at all right here to
be honest uh with you just using the
twist
bone yeah it doesn't look like we're
going to be able to
no
okay you'll see if you try to rotate it
along any other axis it does some pretty
funky
stuff yeah so it looks like
uh it looks like for Stuff like that
it's just yeah there's nothing we can do
about that not with a Twist bone now
honestly if you have these these wrist
bones right here use those uh don't use
the twist bone I'm only uh showing you
how to do it with the twist bone uh
because
uh because that's just
uh uh well with character crter
characters that's you don't have those
wrist uh corrective bones and you don't
have these corrective bones right here
either uh which is why with the
character cretive characters you'll end
up having to
uh you end up having to
um use the correct uh the twist bones
and you only have The Twist 01 L and the
twist O2 L on the character creat
characters so yeah anyway so you'll
see that's how that works I kind of
overdid it on the 180° twist uh it does
look noticeably bad right there if you
compare them to the other ones
um I
mean you can kind of try to dial that
back and allow some deform deformity
right here
uh to try to prevent that but I mean
I don't know what to tell you so I mean
there's limitations to what you can do
here with
this uh with these twist bones that that
is so I'm just going to go ahead and
save that and that should be good so we
have our
uh default pose and we have these other
angle angled poses and that should be
good enough that's going to be the only
uh corrective stuff that we'll be able
to do using only twist bones
so I'm not going to do it for the other
hand I'm only going to show you how to
do it for this
one
now uh I'll have to look into this I
don't know why it's baking these uh all
these curves but you can go all the way
down to the bottom and shift click and
then uh Delete or press delete on your
keyboard you don't want all those curves
in there it will have a performance
impact just having those curves in there
causes them to be
evaluated and it has a really big
performance hit so I'm going to go ahead
and uh let's
see I'm just going to copy this right
here I'm going to go to create
animation uh create pose asset current
animation and then I'm going to set i'm
G to
you can also do this paste to that in
there and now you
have this and I'll call this the
mill and so now you'll see
[Music]
this let's see
yeah so there's a problem here because
of that translation retargeting stuff
that they have on there it's causing
this right here uh whenever this gets
applied but it's it's working
[Music]
properly I probably I probably shouldn't
have made that for this guy specifically
uh like I did to be honest with you I
probably should have just made this for
the base uh skeleton uh
yeah but I think it would have had the
same Pro I think it would have caused
the same
[Music]
problem I think I need it to be
reference pose let's
see okay no that worked works so that's
the good thing about having a default
pose is I can make an
additive based off the default pose and
now you'll see it doesn't cause that
problem this is
uh this is actually wrist right
180 actually I I don't guess I don't
guess it has a uh a direction does
it and then this is rest uh
[Music]
left so now what we'll do is we'll
create an animation
blueprint we'll create on the base
skeleton I'll just call
nbp twist
[Music]
correction and if I go into the preview
IET I can change this to the m
medium normal
weight so that we can see the entire
body not just the
skeleton I'll drop uh an input
pose and a pose
driver and add the bottom here
we'll assign this pose
asset and let me just
actually let me copy this one this is
that uh cabinet pose and it's at the
correct time on that cabinet pose so
I'll just uh copy that over
you'll see right now it's not it's not
correcting anything that's cuz I haven't
set it up if we go over to after you've
assigned the uh pose asset you can come
over here to tools and copy all from
pose asset and you'll see all these
right
here and you'll see we're getting a
warning because we don't have any Source
bonus uh Source bonus signed the source
bone is going to be the hand L right
here
and we're going to evaluate from the
reference
pose now we don't want this to be
additive and we don't want it to be
swing axis we want it to be a Twist axis
and we want it to be
interpolative and you can probably try
the automatic radius but
[Music]
it it'll depend sometimes the automatic
radius isn't going to be very useful
and we're going to always
normalize and you'll see right now we
don't have any weights right
here yeah so I'm going to have to do
this manually
I think we want that to be gine yeah
yeah we want it to be gazing with linear
you uh you have to treat linear a little
differently that's why we're getting the
error
there oh I don't have the Drive okay
that's why it was okay my bad so we need
these uh twist bones
here because we're driving both uh the
twist bones we're only driving the
second one and one of the poses
but okay so there this I think is a
bug I may have to recreate this
yeah I'm pretty sure that's a that's a
bug actually let me try this before I do
that let
me yeah
[Music]
huh is an invalid or duplicated
Target yeah I think that's a bug guys um
so let me
just do this again
sorry always in
normalize twist access we want to keep
this at
gajian if you switch at to linear it may
do what you just seen it do and where it
throws a an err and it thinks things
have been
duplicated okay um you may have to give
me a second on
this because
I'm not exactly
sure why it's doing
this yeah I might have to get back to
you uh on this for some reason it's uh
[Music]
I shouldn't
be doing
this okay I'll be right back guys sorry
okay that was short uh I don't know why
but so I did this before I I deleted
these and then I uh recreated them and
then compiled and it didn't work but
this time it did for some
reason so yeah
anyway it's that has to be some kind of
weird bug hopefully they fix
it
eventually now I'm might actually just
leave that at the uh setting that it
chose the 72 I didn't choose that I
don't think I chose 72 you can watch the
video you you'll probably see um but
yeah so now you'll see that
you'll see that the wrist looks uh it
doesn't look bad now uh even though that
we're only using twist
bones now you'll see this one still
looks bad because we we haven't made any
corrections to that
one but yeah if you need to you can uh
rotate these uh rotate these uh these
cones around and adjust uh the
radius but the two times I've said set
this up so far uh for Twist bones I have
not had to do that it did it for me and
I think that has to do with the pose
asset I think if you do the pose asset
right I think you won't have to but I
could be wrong you know there may be
situations where you still have to
manually rotate those so you know take
that with a grain of salt you'll see
here though I set this up and it's
working so
yeah and so we'll just go ahead
and turn this into this and and I'll go
ahead and hide
the and you'll see look it doesn't look
bad it's maintaining its volume pretty
good now when it bends now when the hand
bends backwards it still does that that
uh it still looks bad on the back side
of
it like right here but that's because
I'm only using twist bones I'm not using
those wrist corrective bones like I said
those wrist corrective bones are going
to be more appropriate uh but if it's
the case that you only have twist bones
to drive then you know it it'll help uh
you know as you can see here it helps
quite a bit um as far as this side of it
goes but there there's limitations so
just keep that in
mind um anyway you guys uh I hope you
found this helpful and I will see you in
the next video

================================================================================
ARQUIVO: Unreal Engine 5_ Retargeting vs Live Retargeting_ (English_ASR)
================================================================================

=== DESCRIÇÃO ===

In this video I'll discuss the problems associated with Retargeting as well as some solutions to avoiding the Live Retargeting solution I used in my GASP-DAO Project. I will then show the difference in performance between the two across several different tests for 25/50/100 characters.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

00:00 Intro
01:00 Retargeting Problems
04:30 Retargeting Solutions
06:10 Why I Used Live Retargeting
07:00 Retargeting Solutions
08:45 Alternative Offset Correction Approach
11:40 Live Retargeting vs Retargeted Performance
13:30 25 Chars Test
17:39 50 Chars Test 1
22:00 100 Chars Test
29:00 50 Chars Test 2
31:00 Live Retargeting Unreal Insights
33:40 Outro

=== TRANSCRIÇÃO ===

all right guys so I'm going to try to be
uh as clear as I can with this video and
as unbiased as I can we're going to
evaluate live retargeting and I'm going
to explain uh some misconceptions in
regards to retargeting animations uh to
try to clear the air with that for you
before I start on the differences and
performance between live R targeting and
not that way you have a clear picture as
to what to
expect uh so in this example I have
actually changed any of the default
settings on the
metahumans uh this pose right here was
specifically uh retargeted and modified
for this guy right here which is the
medium height uh normal weight
Mill um and as you'll see the hands are
all offset now that's not a realistic uh
uh setting you won't actually want these
default settings and I'll go into that a
little bit but I want to try to make
this quick because this video can become
pretty long pretty quick so this uh pose
right here is actually just a retargeted
animation it has not been modified or
fixed for any of the characters and so
you'll see right away that none of the
characters are holding this properly and
their fingers look all funky every
single one of them uh and that's because
uh that pose was not made for these
characters
so there's a large there's a big
misconception about retargeting people
think that you can just retarget
animations and the hands are all just
fall in place uh like they're supposed
to some people are under the impression
that they can use the uh hand iade to
force the ends into position and that
that will just magically fix the problem
for them uh that's not actually true
that will not fix the problem and it
definitely won't fix the fingers so
um either way you're going to have to
modify things just so you know so you
could uh use ik to try to get the gun
level so that he's not pointing it up in
the air like he is right now you could
use it for that purpose but uh for the
most part on your characters the stock
of the rifle would probably still be
inside of his uh body if not like
sticking out of his back so uh and
that's if you're using the hand I so
even under ideal condition
uh with ik retargeter settings you're
still going to have to modify those
regardless of how perfect you get it for
the retargeting
purpose so I wanted to point that out to
you because that's a big misconception
people
have so even with these default settings
you can somewhat uh mitigate the problem
with the hands but the aiming will still
be off and the fingers probably uh still
won't be perfect now remember I
retargeted these animations but after I
retargeted them I modified these
animations and uh an animation software
so that he would hold the rifle properly
uh it didn't just magically retarget
like that I had to make I had to fix it
to look like that after the fact so I
want to I want to really stress that
because that's uh something that a lot
of people are not aware of
so this right here is a is a me one
method that you can use to almost get it
right and it works pretty good
actually so you'll see the hands are uh
almost perfect on all of your characters
but you'll see that some of them are
still pointing too far down and others
are pointing too far
up but they're all pointing relatively
straight now so there's that at least
so moving on I'm going to close this one
out and I'm going to open up this
one and then we'll uh briefly discuss
another
setup so basically it's the translation
retargeting settings that are actually
causing those really bad offsets those
are the default settings that the guys
that epic or Unreal Engine uh chose for
the metahumans in this project I'm not
really sure why uh but they're not ideal
for precise hand
placement so on this one you'll see that
my translation retargeting settings I
chose animation for the rout I chose
animation scaled for the pelvis for
everything else it's
skeleton and with those settings uh and
let me disable that other
thing I'm just going to disable
that that won't affect it outside of
here but yeah so so even with that
you'll see that we're still having hand
problems so even doing it like that now
he now they are pointing straight they
are pointing straight so there is
that as you can see they're pointing
straight Dead Ahead uh but their hands
are not properly placed and that's just
Anatomy guys uh Anatomy differs between
your characters and so
uh the hands are going to end up in
different locations uh hand Precision
doesn't just happen uh it's not magic uh
it it takes uh like it takes you
actually making it happen so let you
know now you can still implement this
and it'll correct the hands and now what
I'm actually doing here is I'm actually
creating virtual bones pointing from the
spine to the hand uh the reason I'm
actually doing that in this situation is
because of uh this setup which I'm about
to show you it actually requires that
they be on the spine if you do them off
of the hands it causes problems for that
method and that method is basically an
alternative to what I'm doing with my
live R targeted setup in my project so
just so you guys know the reason why I
did live R targeting in my project was
because um my project is a public
project and I was trying to minimize the
amount of custom animation people were
going to have to do in order to get it
right so if I were if I was not to offer
that liary targeting approach then
everybody using my project would have to
modify those poses and animations for
their own characters so and they would
have to uh retarget the entire animation
system as well and so that's the reason
why I used the liary targeting approach
in my project because it made it
accessible to all the people people who
wanted to use
it so as you can see here after I uh
Implement that uh method with the
virtual Bones the hands are almost
perfect on the
MS the only ones that are having issues
are actually the short mes and they're
having issues with their pinky and so
you could actually go back and modify
that and rotate that pinky out just a
little bit more and that would prevent
these issues where some of them have
their pinkies cutting into the
rifle with the females though this
doesn't uh mitigate it you'll see that
on all the females the the fingers right
here are actually inside of the gun and
they're not actually holding the gun
properly right here either and that's
because uh the females have smaller
hands uh in general so that's the reason
why
so
so sorry
so
anyway the
uh what I would recommend in that
situation is you could still use this
method but you would want to retarget
that pose to the female and the females
would need their own anim
set and that would allow you to fix the
fingers for the females across the board
just like it fixed it for the males
because remember uh this pose that I
made I made it for the medium height
normal white male uh and the females
actually have a significantly smaller
hands and their Basse pose is actually
different as
well so I wanted to get those uh
problems out of the way for you guys uh
before I started but I'll go ahead and
show you something else that you can do
as
well so as far as uh what I'm doing with
the liary targeting approach where you
can have different offsets uh for how
they're holding the weapons and stuff uh
per item
this is one solution you could uh
Implement uh in regards to that outside
of outside of live retargeting that
wouldn't require an ik retargeter now it
won't do anything for the fingers but it
will allow you to control the offset of
the hands as you can see here I've
actually uh set up a way for you to do
that
here and so you can see I can rotate the
hand
and I can offset things and these are
local offsets by the way guys uh that's
the reason uh why this wouldn't cause
problems is because they're just local
offsets and so I intentionally rotated
it over here and reposition the hand
just to show you how that would
work now if I had uh made these virtual
bones pointing from one hand to the
other hand uh then this method would not
work and I'll explain to you why so if
if I had a virtual bone pointing from
the right hand to the left hand and I
was using that as my left-and Defector
and I was doing the two- bone ik on the
left hand and then the right hand where
the right hand is using an affector for
uh that would be a virtual bone pointing
from the left hand to the right hand
then what would happen is when I move
when I try to offset how that left hand
is on the rifle the right hand would
move with it so the only way to get
around that would be to actually have
the virtual Bones on the spine which is
the chest and that would make it
independent of each other so that you
could offset each of them
individually so that's how that that's
why I did it that way for this
setup and then on the actual character
blueprint right here is an actual
example as you can see what I'm actually
doing is this offset is actually in
World SP oh it's in m space component
space if you will and I'm converting
that from component space to Bone
space I'll I'll eventually implement
this into my project so that you can
offset the hands in relation to the mesh
and it'll be less confusing and easier
to adjust hand
positioning in fact I'll probably have a
trigger where you can trigger where you
can flip-flop between uh the two I don't
know we'll see but anyway I just wanted
to get that out of the way because
there's a lot of misconceptions in
regards to that so with that being said
I'm going to go ahead and show you guys
what the difference is so I went ahead
and put this in a uh an actual
environment now this environment is
actually very very uh performance
friendly it was actually originally made
an Unreal Engine 4 and they really
optimized this landscape so ideally in
an actual heavy l scape uh the numbers
the difference in performance between
liary targeted uh characters and non-li
targeted characters in a heavy
environment heavier than this uh that
the difference would actually be smaller
so also I'm looking from top down uh I'm
not looking from like this area right
here and if I were looking from this
area then the performance difference
would probably be even smaller
so as you can see right here I have a 17
or about an 18 millisecond
draw and right here I only have about a
about a 15 millisecond
draw so what I could actually do uh
for this camera actor for testing
this is I can actually copy that
and I can actually
rotate
this like
that and that would probably give it a
more realistic uh
okay that was so
weird all
right let me actually launch this
outside and
Standalone I don't know why this uh
launching it in Standalone has been
having a delay here
lately yesterday it was a delaying like
this
so let me just um maximize that so right
here uh with a full screen and a low uh
resolution scale because I'm not going
to go through and uh try to make this
like really highdea or anything I'm just
going to leave the settings as default
when running and St alone but you'll see
that the frame rate is about 86 and the
hit on the game is actually about
5.4
milliseconds 86 and 5.4 and that's with
25 live targeted
characters and so these are all the same
animation blueprint with different
animations assigned uh to some of them
and I tested this and the performance
hit is exact same as having just one
animation blueprint where they all share
the same animations but ideally in an
actual game you would have different
animations the performance does not
differ between those two the memory cost
does but I won't be going into the
memory cost today you can go and look at
that yourself if uh you're interested
but the memory cost for doing it that
way versus Library targeting it will
require more
memory since you'll be having more
unique
animations did
I okay yeah I was wondering I was like
okay are you going to launch
[Applause]
uh so right here I'm getting about
93 frames per
second about a five millisecond hit on
the
game so that was 93 and I don't even
remember what the other one was now I'm
starting to zone out today I've had a
long
day let me go back and look so 93 and5
millisecond hit I think I think the
other one was like 5.4 5.5 millisecond
hit and it was 80
something so
about about
86 so that's a 4 5 6 7 that's a 7 frame
difference and about a 2 millisecond
difference on the game so actually the
draws are actually higher with li
targeted characters for some reason
um or the draw the draw I think seems to
be higher I'm not sure that it's
actually the liary targeted characters
that are responsible for the draw to be
honest with you I don't think that's
what's responsible for it so something
else might actually be causing that um
but I don't know maybe I'm wrong I I
don't know all the technical details but
I can show
you uh the
difference so we'll go ahead and uh
investigate 50 now the 50 that's the
worst case
scenario uh for some reason uh around 50
characters that's where the performance
differs the most at 125 the performance
is closer to uh it the difference is is
less as far as
performance and that's just because
other things end up becoming the
bottleneck and not the uh not the anim
graphs
themselves so under ideal conditions
yeah you might your game thread might
actually end up waiting on uh on your
live R targeted stuff to be returned
from the worker
threads and that could be a bottleneck
under certain circumstances if your game
is CPU
heavy but in my experience because
everybody wants a hyper realistic game
and their Graphics are so uh out there
what ends up happening is their
bottleneck ends up being uh the draw or
the
GPU and so the game thread ends up being
free uh
it ends up being the lower of the
two so I think for for most uh uh games
uh for most indie games uh this probably
isn't you know this is probably not
going to be their their M their main
concern so right here with a uh with 50
characters in the scene and this is
about the size of somebody's
yard uh also I'm not using LOD uh stuff
so I'm not uh under normal circumstances
what you would do is after so after they
get so far away you would actually like
have them skip so many frames um you
would reduce you know certain things uh
maybe disable ik foot ik stuff like that
and that would all save you a lot of
performance uh also a lot of people what
they do is they end up bringing uh a
bunch of characters into the scene to
stress test it uh test it but what ends
up happening
is uh they end up thinking that it's the
animation system That's Heavy but it's
actually their characters because their
characters have like 50 material slots
uh or they have eight material slots but
their materials are real heavy and so
they're generating like 50 draw calls
per character and you have like 50 in
there so you have like you know like 800
draw calls uh being added uh to your
draws over here and that adds up and
ends up being the actual bottleneck and
not the animation
system so right here you'll see that I'm
getting about 11 uh millisecond hit uh
76 frames per second
[Music]
so 76 and this is uh
90 so that was actually higher than last
time maybe it's because of the angle
that I'm at uh with the landscape
but yeah that's actually a 14 frame uh
difference that's worst case
scenario I think it's because I changed
the camera angle for some reason that
seems to have something to do with uh
the
difference but I'm not really sure why
that would be the
case because they're both in the same
location on the map but anyway so yeah
so 14 frames per second
difference that's that's a pretty
significant hit actually
we'll go ahead and uh test the 100
characters that way you can see
that yeah and I think the millisecond
over there was like 10 point
something so I think the difference in
milliseconds was probably it was it
could have been around 1 millisecond I'd
have to go back and look but it was
probably around 1 millisecond
difference maybe 1 and a
half from my previous testing uh in some
situations it was as high as uh 2
milliseconds uh
difference okay is this going to load
did I press the
button I need to give me some kind of
indicator if it's loading or
not I was pretty sure I pressed the
button I'm going press it again
hopefully it doesn't open
twice okay I was fixing a say dude I was
like I know I pressed it that
time all right so with 100 characters in
the scene we'll just give it a
second all right so with 100 characters
in the scene we're getting about 57
frames per
second and the game thread is hitting at
about
17.4 and that's definitely the
bottleneck in this case as you can
clearly
see but our draw calls have obviously
increased as well it's up to 2,000 draw
calls
now so some of the performance is is
actually coming from the draw calls some
of it's coming from the Char character
movement component uh but the difference
and performance will be coming from if
it's using live targeting or not so
that's 57 frames per second with 100
characters and you can look at the Mill
second difference
yourself I'm a bit zoned out so I'm not
exactly I don't have pitcher memory
right now
so let's see now I know I I know I
pressed it okay there it
[Music]
goes yeah so this is getting about 52
frames per second with a 19 millisecond
hit
[Applause]
52 what was the other one I don't even
remember I'm so zoned out right now so
52 19 I think the other one was a 17
millisecond
hit also recording has an impact on uh
the performance too so 52 and it looks
like
I'm going to be lenient and I'm going to
say
58 so that's a sixf frame difference
with 100 characters in the
scene but the millisecond hit on the
game it's about 1 and a half to 2
millisecond
difference so as you can see there is a
uh a performance hit to using Li
targeting but it's not like a game
killer it's not going to like in some
situations depending on uh the
circumstances depending on the build of
your game uh what your bottleneck
is uh it it's a it it could it could be
a deciding factor or maybe it won't be
so it's going to be up to you and your
game how much extra time you're willing
to put into uh like things how much
you're you do or don't want to mess with
animation if you don't want to mess with
animation then maybe live R targeting is
the better option for you if you're not
afraid of Animation then uh you know I
say go for the alternative uh and I
showed you an Al a good alternative uh
to using live R targeting uh it just
requires a little bit of uh extra work
on your part but even with the liary
targeting uh uh setup if you want
fingers to look right you're still going
to you're still going to have to modify
the animations and if you're going to
modify the fingers for the animations
then I mean why not uh just go ahead and
do the rest and I'll be honest if I if I
make a project of my own I'm probably
not going to use live R targeting but
for my project that I'm making public I
do need to uh have that as an option
because uh for a lot of people uh
they're not going to want to go through
and have to modify those
animations so I hope that explains to
you guys why why I chose to use liary
targeting in that project and maybe uh
maybe some of you are a little bit less
scared of live R targeting now as you
can see these are some pretty extreme
cases right here uh where live R
targeting the difference isn't really as
big as what some people might think so I
mean if if the difference in frame rate
was like 20 or something like that I'd
be like yeah dude don't use live R
targeting uh but it's less than 20
frames per second
uh with uh you know 50 to 100 charact or
25 to 100 characters in the scene the uh
the difference is less than um is less
than 10 in most cases so earlier you
seen it it was it was 14 with
50 but I don't actually know why that's
the case when I was actually testing it
before and I wasn't recording the
difference was only about seven in that
scene with 50 characters so for some
weird re maybe it was because I changed
the angle of the camera I could actually
change that back and run it
again yeah so let me not do it that
way let me just do it this way so before
I go I just want to actually do that
real
quick so this is with 100 characters in
the scene this is with uh oh no let's do
the 50 that's where the the big
difference was that was where the big
dip was so we're going to do this one
once again but we're going to do it back
how I had it
before also my previous tests uh they
were done from a fresh boot uh this one
is not this wasn't done for my fresh
boot this video I've had my computer
running for a while now
and yeah that can actually make a
difference believe it or
not all right so the frame rate right
here is about 94 I'm going to say 94
with a 10.5 millisecond hit we'll say
10.6 so 10.6 of 94
so it was 10.6 and 94 now it's uh 11
we'll just say
11.1 and
86 yeah so that's 10 frame difference
that's what I expected uh
before so you'll see the angle actually
did make a difference I'm not really
sure exactly why but it did make a
difference having it down here like this
I'm not really sure because they're both
in the same exact
spot uh but anyway yeah so the the
context of the situation is definitely
going to have an effect on uh the
difference and
performance but yeah so I hope that
helps you guys I'll go ahead and come in
here and I'll show you a few things as
far as the this was an unreal Insight I
ran on it
before and uh this right here is mostly
where the live R targeting stuff happens
so you have the skeletal mesh component
uh this is the complete parallel
animation
evaluation and then inside of here this
is where the library targeting is
actually being offloaded onto the worker
threads uh right here so if we come in
here and we look you'll see
that that the library targeting right
here is only 4.2 or it's 4.4
microseconds uh so there's um there's a
th000 micro seconds in a millisecond and
1,000 milliseconds in a second so one
microc is one well it's 100,000 micr
seconds in a
second so this would be 4 1 100,000 of a
second and this is 2.9 4 3 3.5 so it
I've tested this before and it the range
it ranges in varies between like 2.2 and
6.5 so right here this first one for
whatever reason is always higher than
the uh preceding ones after
it but yeah so if we go and we look at
this right here you'll see that's not
even uh 900 microc seconds so it's
almost one millisecond hit on uh the
game thread
so yeah even if you do have things being
offloaded onto the worker thread they do
they do still affect the game thread
because the game thread has to uh send
them to the worker thread and then it
has to wait for them to return so if you
see this right here this is where the
game thread is waiting for it to return
before it can
continue and you'll see this all across
here so anyway that's basically the
rundown on it guys uh it's ultimately
going to be up to you I'm not a strong
advocate of Library targeting I just
happen to use that in my project if uh
some of you guys are opposed to that or
if it just doesn't suit your game or
needs then you know you could go with an
alternative method it's going to be more
work uh and that's okay you know if if
you're okay with doing more work then I
say go for it um I don't strongly
Advocate Library targeting and there are
more performant ways of going about
handling this and I've showed you some
alternatives uh but all in all you know
you're at least for the males and the
female metahumans you're going to have
to have at least one anom set for each
of those uh to get their to get both of
their fingers looking right uh across
all the Ms and then to get the fingers
looking right across to all the females
and that's basically all I have to say
on the subject uh guys uh and I will see
you in the next video well I'll actually
close with this uh hand Precision is
only important when you're aiming a
single hand handed uh weapon or if
you're holding a two-handed weapon
anytime you're holding a two-handed
weapon hand Precision is always going to
be important regardless if you're aiming
it or not so that's all I have to say on
the subject and I'll see you in the next
video

================================================================================
ARQUIVO: Unreal Engine 5_ Take Down Part 2 (Anim Update) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

Just informing you of some final changes I made to the animations and how you would setup the Flying one if you chose to use that one.

Animation Files: https://drive.google.com/file/d/1SyBIo9tfQneY7F-wjEhp5ZWq0sEkl8FX/view?usp=sharing

Part 2 Setup: https://youtu.be/7wpHzo5axmc

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

=== TRANSCRIÇÃO ===

all right so this is the root motion one
uh where the root actually comes up off
the ground uh so he does go into flying
mode I'll explain that to you but if I
just uh uh if I just play it from a
jump let see uh it works fine now I did
have to extend the blend uh for him to
come out of the jump well uh but it
caused that weird like foot settling uh
thing right there
so I extended the blend Time by to 0.5
seconds in order to prevent a weird odd
foot sliding problem and I'm not exactly
sure why but it only did that when if
you did it from
the uh standing
position but it doesn't do it whenever
you uh start from the
Crouch so I'll just briefly uh go over
what I did here I just cached whether
rather he was in Crouch mode or not and
the mesh offset and if he is crouching
then I
uncrouch I reset his capsule halflight
back to what it was when he was
crouching I set his mesh location back
to what it was when he was
crouching and then at the end
I uh reset the capsule half height
uh back to the original capsule half
high and then if he was crouching I
crouch him again so that's the rundown
on that that's the only thing I actually
really changed in
here uh for that one
but uh this one right here is the
new the new version without Root motion
go or without the root going up on the Z
and so this one works
uh works
well as
well and if I record that actually
then you'll be able
to see it from the
front and so I did is I just uh baked it
to
sequencer and
then I removed the Z locational offset
on the
rout now this problem right here this
hasn't isn't actually in the animation
it has something to do with the foot ik
system in here it doesn't do that if the
foot ik is
disabled uh
it's kind of weird
uh yeah so I'm not exactly sure I
haven't really looked into that
but the feet won't be further down than
the hands and head if I do it without
that
checked as you can see so it has
something to do with the foot
ik uh but yeah anyway I was just giving
you guys an update on that

================================================================================
ARQUIVO: Unreal Engine Copy Motion Intro Part 2 (With Project Files) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

A correction on my last video where I had noticed a problem with the setup.

Part 1: https://youtu.be/Rrbf-DW4y0I
DISCLAIMER: This is just my take on it and I am not claiming that this is the proper way to set it up or use it. I very well could be making some mistakes here.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

Project Files: https://ko-fi.com/unrealdevop

Original Code Release: https://eoshelp.epicgames.com/s/article/Using-Copy-Motion-node-for-layering-with-Motion-Matching?language=en_US

Plugin Version Provider (IamMe @STK_Oxy): https://forums.unrealengine.com/t/copy-motion-node-questions/1948708/2

=== TRANSCRIÇÃO ===

all right guys so I'm back with one more
video this is probably going to be the
last video I do on this for a while I'm
kind of burnt out on uh this whole thing
but I'll show you what I have here so it
may not be apparent but if I turn it off
uh you'll see yeah the arms do still
move now I'll explain to you why the
arms are still moving so whenever I'm in
the relaxed state right here I'm
actually
dynamically I'm a creating a dynamic
additive and applying it only on the
upper body but I'm excluding the arms so
the clav the spine the clavicles the
neck and the head are included in that
Dynamic additive overlay of The
Locomotion onto this uh pose which is
why it gives the illusion that the arms
are moving back and forth and the reason
why is because the shoulders are moving
back and forth on The Locomotion
animation during the running and I'm
carrying that over to the shoulders on
this pose however the upper arm the
lower arm and the hand are unaffected uh
so if we do copy motion you'll see it
adds motion back to the upper arm lower
arm and hand and so it looks a little
bit more
Dynamic I'm thinking this may have
been uh the particular use case
that
they may have used this for now I made
some changes for one you'll see that the
rotation scale is disabled if you turn
rotation scale on what happens is the
virtual bone you're copying the motion
onto will be rotating uh and so you'll
get some uh funky movement and the
reason why is because the hands are C
the hands are following the virtual bone
and since the virtual bone is rotating
now the right hand is also rotating and
of course the left hand is following
because I'm using ik uh which is
affected by the right hand
so you could introduce some of that into
it and you'll get a little bit of a
different uh movement more maybe you you
feel that's a little bit more Dynamic
and you like that so you could turn that
up a little bit now as far as the
translation Offset you doing it in this
way the translation offset uh isn't
really going to have any effect on it
from what I can tell so I don't really
know why maybe it's because of uh the
setup I have in the copy motion um like
I said I I don't really understand
what's going on in here guys as far as
uh that what what they're doing on the
back and I am not very uh sure about so
I can tell you though that basically
what's happening
is well I had it set up as the L pose
for both the component space and base
pose reference that was an oversight on
my part uh that's why I'm redoing this
video so in there's it was actually the
uh it was actually the pre- layering uh
catched pose cached pose right here that
they were
actually using as the base pose
reference and the reason why the l pose
causes the arms to go way up here and
then you have to scale it down and and
reorient it and stuff like that is
because the uh L pose so I'll show
you so for example in this situation the
L pose is right
here and the osee is back here and so
when we're copying
from
uh one space to another the dynamic
additives get calculated based off of
the uh based off of the copy space right
here from my understanding this is how
it works so whenever you assign a copy
space say spine five this is spine five
bone and this is spine five bone on this
guy and
so uh the hands are way down here on
this one but they're uh but they're way
up here on on this other one and so you
can ignore the fact that the spine is
farther forward and rotated at an angle
because it's not going to translate like
that it's going to translate based off
of the orientation of the bone so if
this is Ford and this is Ford
then uh
yeah I'm not going to go into it it's
going to be confusing for a lot of
people uh but
basically the fact that the arms are are
way out here instead of way down here on
this one is the reason why they end up
way up here whenever we copy it over uh
to this one because it's basically
getting where this one is right here and
then it's applying that difference uh to
it again which puts it way up here
so the reason why it doesn't do that
with the motion matching pose is because
the uh motion matching uh pose has the
arms in
a uh similar position and so this is a
neutral pose and this hand is going to
be passing in and out back and forth uh
from where that neutral poses during the
motion and it's hard to tell because of
the blur but if I do a uh
[Music]
slowmo say 2 uh then you'll be able to
see it a lot
clearer and so if you just consider the
offset of that during
uh offset of that red from the green
during the uh or from the spine
orientation itself then it's not
actually a lot of movement and it's
happening locally so whenever we apply
that offset locally it'll apply
it uh from where it is right here and if
we come in here and we scale this value
down then that amount of offset that's
applied is lessened uh to a
usable uh extent
so so that basically it just allows you
to uh copy the motion over and scale it
down so that it's actually suitable for
your
situation and it adds more Dynamic
motion back into say the arms uh whereas
before if you uh the arms would be a lot
stiffer like you can see that right arm
especially I'm not actually applying
this to the left arm I'm only applying
it to the right arm uh so if you watch
that right arm you see how stiff that
right arm
is now you'll see how not stiff it is so
it makes a big difference uh here it is
uh not stiff and here it is stiff so it
makes a big difference in that situation
where you're overlay
or where you're layering and you lose
some Dynamic Motion in that limb this
allows you to add that Dynamic motion
back into it uh better and in a more
controlled
[Music]
manner so yeah I Bas I believe that's
basically how they were using but I I
may still be wrong I don't completely
know but I will if you go and redownload
that project you'll have this updated
version uh I'm going to go ahead and
leave this here and I'll probably put a
little note here
uh I don't know maybe I won't put a note
there but yeah you're not supposed to
use that one right there because of the
fact just because of the way it gets
applied
additively it affects it in a negative
way whenever you're using it
uh as an
additive so anyway guys that's
basically uh the rundown
on on it uh I'll go ahead and show you
so I'm getting the hand r that hand R
right here is being uh grabbed from the
collected bones let me turn off
this this fan because it's like really
loud
so I'm actually not using that anymore
I'm just using the handar so I was
experimenting with spine with the spine
bone and I realized
[Music]
something
if if the bone is included in this
collected bones
list and that's your Source
bone
then it actually acts
differently
the for example if I exclude this from
the collected
bones then the translation offset will
start working I don't know why that is I
think it's
weird but if I do include it
then I get better results I think
uh but the translation offset doesn't
work so I don't know I'm I'm a bit
confused by the results that I've gotten
uh none of it really makes a lot of
sense to me U maybe because I just don't
understand what they're actually doing
on the back end
but yeah I'm sure somebody will come
along and uh probably uh make some more
progress on the work that I've done here
and that's the reason why I'm doing this
video I'm hoping that somebody else uh
is able to make more sense of this than
me this is my understanding of it and
you'll see right here that I'm just
switching this if we want to aim I'm uh
loading in the aiming pose and if we
don't want to aim then I'm uh applying
the resting pose and you can apply
whatever logic to this you want you can
make it a layered
uh a layered based system or whatever
but this was just uh to Showcase how you
can get some results out of this and
I'll see you guys in the next video

================================================================================
ARQUIVO: Unreal Engine_ GASP DAO (Setup v1.40) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

Latest Project Setup as of v1.40

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Project Documentation: https://unreal-devop.gitbook.io/gasp-dynamicadditiveoverlay

=== TRANSCRIÇÃO ===

all right guys uh welcome back to
another video so in this video I'm going
to show you guys how to uh clone this
project it's uh this is going to be an
updated version for
[Music]
1.40 so anyway so the first thing is if
you come over to the repo if you have
the repo access then you can copy this
to the clipboard or you can open with
GitHub desktop if you already have a
cloned version of this project in your
GitHub desktop app then uh doing this
will not add will not pull up a menu
inside of here asking you to clone it
again so if that's the case you you can
go to file clone repository URL and you
can paste that or you can go to
github.com select the uh repository that
you want to clone which in my case I
already have it locally so these are
local projects right here uh for me I
think
because I'm signed into this account
maybe probably so anyway you can do it
this way and choose your local path and
clone
it once you've done that you'll get a
folder right there this is uh a game the
game animation sample project I'm going
to copy all these files and I'm going to
paste it's going to ask me if I want to
overwrite Dao files I'm going to say no
you do not want to overwrite my files
because my files have things in them
that are important to my project so if
you replace these files just know it's
going to Break Stuff guaranteed so
what's inside of here inii files uh
because I've changed I've added some
game uh T gameplay tags to the project
file uh so this includes the gameplay
tag so that you don't have
to uh it also includes the skeletons
with the sockets and virtual bones
already set up on them if you overwrite
these then you'll have to recreate those
yourself for all the characters uh also
I have uh the contextual animation uh
scene plugin enabled which is why I
include the U project file now so I'm
going to uh skip these files and then
also I renamed this to game animation
sample so that it'll prompt you to
overwrite that or not uh so that you
don't say no and then end up with two
and decide hey I should just open I
shouldn't open the Dao one I should open
this one instead uh so to reduce
confusion that's the reason why I did
that so now I'm just going to go ahead
and open it this will be a very easy
setup and I've taken some measures to
make it a little fa proof for example
with the contextual animation
scene uh for the pistol pickup animation
that I I've recently added if you don't
have a nav mesh in here then it will not
work because you can't move your
character to a location using an AI
controler if there's no nav mesh so even
the simple move to for the player
controller has uh requires an nav mesh
so anyway the first thing we're going to
do is we're going to go to the do floer
character data Char data we're going to
select this guy here expand this select
game mode under the world settings and
press this back button now if you hover
over it should saycore Dao at the end of
that pawn class name and now we can play
it and we should be able to switch over
to our pistol by pressing e press L on
the keyboard to drop it and then press F
and it should pick it back up now it
still does that little camera thing and
the reason why is because uh uh by
default inside of the project setting of
the characters uh set settings I
actually have it right here so that um
it runs the setup
first uh and it um it unpossess the
character and then uh sets the character
back as the view
Target and then it runs some other stuff
so we actually won't know if there's no
nav mesh until we try to run
this uh there's no other easy way to do
that unless I do do a get all actors of
class uh so I could do that but I'm not
going to if you don't want to use this
then just bypass this like that that's
all you have to do and it simply won't
play that animation and a lot of you
probably won't even like it so that's
the reason why I'm letting you know uh
now that's how you will handle
that so if you do want to use it you can
come over here to the place actors and
search for nav and you should see this
nav mesh bounds volume drag this out
into the world and press r on your
keyboard and scale this out press p and
that'll show you where the nav mesh is
okay so you can also scale it up like
this so anyway now that I have this in
here I should be able to come over here
switch to my pistol drop the pistol and
then I should be able to come over here
and pick up the pistol and it'll play
the
animation so it actually uh tried to
pick it up with the right hand but
that's because I don't have no left-and
uh pistol pickup
animation um yeah I I may I may make one
later okay uh
so
yeah but that's fine some of you
probably won't even care anyway so
anyway
that was mostly to show as an example of
how you can work with contextual
animations to get uh proper placement of
things now that's not really ideal
for um so I'll show you it's not really
ideal
for for a pistol pickup but you'll see
it works and in actuality this animation
was meant for uh him to approach it like
this but with it on this
side
see but I added some uh logic in here
that allows uh that that offset which is
supposed to be right here to be swiveled
around here to orient to be oriented
with uh the player as the player
approaches it from different
angles so I did that uh because you know
because these have physics on them it's
kind of hard to predict like uh where
the the player might approach approach
it
from so anyway that's basically the
rundown guys uh that's how you set this
up as far as the other characters you
can go to the widgets open up the game
animation widgets folder and you'll see
these are all the uh base game animation
simple project characters if you go to
the Dao folder the characters folder
under each of these you'll have uh these
here you can't just click and drag them
there unfortunately you have to select
them and then you can click and drag
them over
here
so that's how you would do that once
you've uh replaced those on that widget
uh you can open up that
widget
by coming down here and you can right
click and run editor utility widget
that'll open it up in a window I have
mine docked I'm going to select this guy
right here and then play the
game and you'll
see there we go all right anyway that's
all I have for you today guys and I'll
see you in the next video

================================================================================
ARQUIVO: Unreal Engine_5 GASP-DAO (1.35 Early DEMO Update) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

Just updating you guys on the progress of the Coming Update.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

=== TRANSCRIÇÃO ===

all right guys so
uh I
may not get this out today I don't know
we'll see uh I want to make sure that
that I have this so polished that nobody
has any reason to complain because I've
been getting a lot of complaints here
lately and I want to make sure this is
documented I am changing a lot so be
aware if you if you update it uh there's
going to be a lot of changes that were
made uh a lot of changes so I'm going to
run this as a dedicated server I'm just
going to uh run this as one for now um
that's a bug I don't know what causes
it um
so yeah you'll see that yes I'm on a
dedicated server and yes the line traces
are happening accurately now so I did
fix that problem for you guys I knew I I
had at least one person bring that
up and so now I have the
pistols and uh one of
the the problems I was having actually
I'll show you here in a
minute so one of the problems I was
having is if I is if I pull if I pulled
out a left-handed weapon
and I dropped it on the ground and then
I uh picked it back up he would pick it
back up with his right hand uh so now
what happens is is if you pick up if you
pick up a weapon that can be held in
either hand and holstered in either hand
then it's going to check your slots and
if there's already an item uh holstered
in one of the right hand slots then it
will not pick it up with the right hand
it'll pick it up with the left hand that
way he can holster it uh in the left on
the left
side so uh yeah I'm covering all bases
here guys I'm I've been testing the the
crap out of
this uh so now the actual physics isn't
actually replicated properly right now
guys I just have movement replicated on
it that's why it's jittery uh because
physics happens fast and it's normally
smooth I'm not actually replicating
physics uh uh I'll probably do that
later uh I'm not going to uh worry too
much about that right
now uh but you'll see I have my uh
flashlight
here I may I may uh change that I it I
think it kind of looks weird the way
he's holding it right there but I can
holster that you'll see it's it's on his
uh uh little belt thing back there
I decided to put it like that because
later on I'm going to have an equip
animation and I want him to be able to
reach behind there and and grab it out
uh and when he grabs it out I want him
to be able to uh grab it like that and
bring it back around that's the reason
why he holding it like that and the
reason why I'm holstering it like that
as well is so that I'll be able to grab
it
uh better easier uh end without like it
looking
weird yeah so you can drop items uh you
can uh you can drop Whatever item pick
it back up you can holster it uh you
have all that functionality now um
actually I have not tested
this uh yeah I just I completely forgot
about that actually um
so let's see nope okay I'll have to fix
that so that uh the auto
unequip for the traversal it's still
based uh Loosely on the old Logic for
single-handed weapons that only uh are
only in the right hand so I'll have to
uh fix
that um I'll have that fixed before I
release this update though though so
I'll just go ahead and uh show you
because if it works on dedicated server
you already know it works when as a
listen server
so you'll see I'm holding
[Music]
it okay there's seems to there seems to
be a problem with that one for some
reason but I was able to pick up the
other one
easily and you'll
see the
uh there is like a a fraction of a uh
delay there with the spawn uh on a
dedicated server but it's not it's not
like that on the other one yeah so I
probably wasn't close enough to that
earlier to pick it up uh there's
actually just a box around it and when
you walk inside that box it sends you a
reference to itself and then when you
try to interact it just tries to
interact with that reference if that
reference is valid so I it's a little
weird uh the way I did it but um it
works and it also allows the uh the
server to handle pickups and it prevents
the client from
spoofing uh pickup data because if you
try to interact it'll say hey server
interact and then the server will check
its reference and if it doesn't have a
reference that means you're not actually
Inside the Box on the server so it it'll
prevent spoofing uh during
multiplayer uh of like it where it items
are and stuff like
that oh what is that oh it looks like
the cameras react the projector
I may have to
uh uh yeah so I may have to uh fix that
too I I just noticed that all right well
guys I mean it's coming
along um now I still have to uh get this
working for the ik retargeted characters
before I release this and I also need
to so I need to do that I need to fix
the traversal uh Auto unequip and then I
need
to uh I need to set up all the ik
retargeted characters for this and then
I can release it so um there's a lot of
ik retargeted characters to set up on
this and I have
introduced uh
the the flashlight animation set but I'm
not really worried if they're accurately
aiming with the flashlight or not
um so I may just release it without
that but I do need
the I do need to
fix the Dual welding
for and I need to add some Logic for the
held object offsets and what I'm
probably going to
do is if they're if they're holding the
same item then
I might just
invert uh for if they're holding the
item in the left hand I'm just going to
invert
the
offset of the item in the
hand so that you get the same offset in
the left hand as you would in the right
hand um if that makes sense because it
would be inverted it would and instead
of being 5 cm to the left in his hand it
would be 5 cm to the right because he's
holding it in his left hand so I should
just be able to uh invert that offset
and as long as
you're uh characters bones are mirrored
then I I believe that'll work we'll see
anyway uh but I'll see you guys in the
next video

================================================================================
ARQUIVO: Unreal Engine 5_  GASP Dynamic Additive Overlay (Overview v1.22) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

Update on fixes and changes in 1.22 on the GitHub

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

00:00 Intro
02:41 Live Retargeting Static Hand Offsets
05:05 Layering Data Override Refactor
08:52 Set IK Retargeter
11:03 Held Object & Live Retargeting Data

=== TRANSCRIÇÃO ===

all right guys
so this is going to be the overview
video for the things that I've
changed so one of the things that I did
is in case you don't uh see that just
how high def these textures are these
are really high def textures and so they
take up a lot of space uh they take up
about 1.2 1.3 GB just these
textures and then the texture for this
guy took up about another
gigabyte and so the project is only like
3 something 3.6 gigabytes so close to
about 60% of that was just being taken
up by these textures so I did exclude
those and I left a note here do read the
read me uh because it includes important
details uh due to bandwidth you know
expenses blah blah blah and I'll show
you that because just in 2 days I ran up
nearly 80 gab and so I had to start
reducing this because every clone was
taking like 3.6 gab 3.7 gabes now
they're only taking about 1 point
something gigabytes uh so close to about
a gigabyte each now which is a lot
better than what it was um
so I'm not too concerned about uh
bandwidth usage I know that the first
month it's going to be a bit high and
it'll level out after every most of the
people have downloaded it uh the in
after the initial Rush is over it'll be
fine I just have to get through the
first month some people have already
committed to uh uh sponsoring me uh some
of these uh 50 gigabyte data packs
they're $5 a piece
so as you can see right here 50 another
50 gigabytes is about $5 they are pro
rated so that's good
um so
anyway that's the rundown on that so
whenever you download this these
textures will not be included you can
copy them back over from the game
animation sample
project but that's not what this is
mostly about so what this is mostly
about is the changes that I've made over
the past week and I've listed them all
here so some liary targeted uh character
hand offsets were coming off the weapon
during
aiming because I was setting the static
offset not the static local offset yeah
so I went back through here and and I
redid these so that I wasn't uh
offsetting the hands using the static
offset I was offsetting them I'm
offsetting them now using only the
static local offset if you use the
static offset then it'll cause problems
I'll just show you
so if I go to the
u5 uh man held man held objective 9
folder here and let's say I open up this
one right here where he's
aiming and let's just say that
I create
uh a 15 an offset of 15
here and so you'll see
that you'll see that his uh hand is
actually right back here
and let's just let's just do it
something precise so that you can see so
his finger is right on the trigger now
or right on the
uh uh Cocker or whatever you want to
call it so if I
aim with this static
offset you'll see that the hand did not
stay
there and the same goes for when I aim
down
the hand did not uh stay there and
that's because I'm using a static
offset so if so don't use a static
offset because it messes up the aim
offset uh whenever you're aiming up or
down only use the static local offset
it'll maintain its relative offset to it
so I just wanted to point that
out that was something that I fixed
bug fix I fixed the layering data
interpolation issue where recoil from
the gun was blocking Chooser layering
data
interpolation yeah so let me go over
that if we go into the
animation
blueprint and we go over to Overlay
additive you'll notice that I uh redid
this a little bit I renamed this one so
that it wasn't confused
because some of these were named so
similar it was hard to tell which was
which so this is the actual thing that
interpolates the values this is the
thing that actually updates the value
and this no longer is even associated
with layering data uh as you can see
here and so right here off of this I was
choosing this based off of whether a
montage was playing on on a slot I'm no
longer doing that this approach is much
better and I'll go ahead and uh go over
that with
you so if we go to the update
Dao I think it's in no never mind just
over here on the event graph when we set
our layering uh settings now you'll see
it sets the lay it applies the layering
settings right
here and then it says should update l
layering data and overlay layering data
override layering settings now I don't
see a problem with that but I might move
that one right before this uh simply to
try to help prevent like the thing is
that something that you have to know is
that because we're doing stuff off of
here uh this event graph runs on the
game thread everything inside of here
everything that's that's linked to
anything on the actual anim graph itself
is going to run on a worker thread
worker threads and game thread will
never be in sync they will always be out
of sync and so there's always a chance
that something that you do
here will just be timed poorly I haven't
seen a
case
where this was that was an issue with
this but you'll see that I buy on
Montage blending out when the Montage
starts to blend out it'll just reset
that override laying
setting
so that allows us to ensure that
whenever the montage is done it just
gets
reset when it gets
reset it'll start using the Chooser
right
here if before I was always skipping the
Chooser selection if a montage was
playing that's why when we were
reloading it would actually bypass the
uh
Chooser which chooses our overlay
layering settings right
here so now you don't have to worry
about that all you have to worry about
is calling this on the anim instance
from a blueprint
and passing in your layering settings
that you want to
override the Chooser table layering
settings and when you do that this will
just automatically handle the rest of it
for
you Jesus I keep pressing the wrong
buttons okay you no longer have to set
the ik retargeter variable before
calling set ik retargeter so I don't
know I don't even know why did that in
the first place to be honest with you
but uh if you remember in an earlier
version we were uh setting we were
actually setting the live retargeted
mesh reference on the base uh from here
and then we were calling the set ik
retargeter so I just joined it into one
when you call this set ik retargeter
you're going to set the live retargeted
mesh reference on the base and then
you're just going
to uh pass that on to it enim
instance you're going to pass on the ik
retargeter settings onto the enim
instance and that's referring to the to
this right here this generic
retargeter
uh this is what's getting called and the
ik
retargeter is this right here
[Music]
replaces replaces this old logic that
was there before so I'm no
longer uh finding them by tags the
function is still here if you want to
use it for whatever reason but I like to
have it inside of the class default
settings so if you go to the class
default and by default everything is
expanded right here just go to this gear
icon collaps all category and go
straight to Dao under the live
retargeting settings you'll see an ik
retargeter that's where you assign your
ik retargeter for this character now I
think that makes a lot more sense than
having it selected from a table or an
array or a map or whatever via a
tag to me that just makes more sense
so I I added a hel object offset
data so you'll notice that under the
live retargeting uh settings we have
this live retargeting chain settings and
this actually ass sets
the offset of the hand
itself now I thought about adding the
held object off to this but I I felt
like it didn't make any sense being
right here inside of here and so I
didn't do that instead what I did is I
set it right here so the held
object uh offset is under the held
object data uh for that pistol and so
right now currently this is where all
the pistol stuff is held
you can overwrite this on the children
which is what I'm doing here that's why
you see this uh Arrow icon this
represents something that I've
overwritten uh from the default so
that's talking about like it's a
variable and here I changed the data of
that variable on the child and that's
the reason why we have that
icon if you res if you press that reset
button it'll reset it to back to what it
was on on the
parent if I stop the game I can press
the browse button and you'll see it
takes me to the u5 mannequins
folder uh under here the Manny held
objects folder for the M9 uh this is the
offset settings for him I I didn't
actually need one after I fixed his
hands I showed that in the last video
oh yeah let me go over uh what I had to
change inside of the actual base uh
character blueprint uh to accommodate
that so because I set up that held
object stuff and this will also cover
the replication changes that I did as
well I'm just going to close all other
tabs and I'm going to go back to the
event
graph now on the
event tick right here you'll notice that
on the end I'm calling this the reason
why is because if we want any changes on
our data asset to reflect inside the
viewport during runtime uh from the
editor then we need uh we need this to
be run ran on
tick um that way it's updating it with
the new settings that we set every
single uh time that we change
it I'm also uh you'll see that I say
remove this from tick before compiling
what I
mean is when you actually build this
package for shipping or whatever
uh this will be an unnecessary
performance cost the thing is a lot of
people don't realize data assets can the
values can be changed from the editor
during runtime but that's not a feature
after you compile the game after you
package your game uh your
project uh that no longer
works
so this is pointless after you comp
package the game so after you package
the game this is
pointless uh so we am I actually
updating this from for the packaged game
that's inside of here
so I'll have to test uh package builds
to make sure that some of this data
assets stuff doesn't have any bugs
related to packaged builds uh it there
shouldn't be any but whenever the
overlay state gets replicated uh and
that's just a variable that's set to uh
replicate it's it's it replicates with a
rep notify so whenever the server
Updates this variable value right here
it'll fire this uh on wrap overlay State
function and that's actually what's
going to set the skeletal mesh for it
and then it's going to update the ik
retargeter settings and inside of here
at the end of this it's also going to
update the held object offset and in
actuality I think that I need to move I
should I think I should probably move
that over here the reason why is because
I want the held object offset to be
updated
regardless and the reason why is because
I I'm actually offsetting
uh this for the so if I go into held
objects you'll see under this oh my bad
I'll go over this here in a
minute under here you'll see that I
actually have this assigned for him and
if we browse to it that's under the Dao
held objects and nine data these are
actually for the sandbox character these
are the his offsets now he didn't really
need one on the pistol but I do believe
I'm I have one set on the
rifle okay I don't have one set on the
rifle I thought I
did but anyway they're there
they're empty but they're there
so
anyway so as you'll see here the live R
targeted uh characters are the only ones
affected by this stuff right here the
hell the sandbox character himself he
doesn't use live retargeting obviously
he's the one that the live retargeting
guys are copying uh but their stuff is
being updated from inside of here
uh this is a blueprint interface that
gets called on the live R targeted
skeletons animation uh
instance and that's being fired inside
of the ABP generic retarget so if we go
back to the event graph you'll see
that's where this is being updated the
same thing applies to the chain settings
on here this is only relevant uh from
the editor uh after you've packaged your
game this is pointless
um
yeah so that's why I'm calling it here
whenever this live retargeting setting
gets
updated if that live retargeting setting
is not valid then we get the chain
settings directly from the ik retargeter
that was assigned for this
character on the anom graph you'll see
that the customary Target profile
is bound to a get retarget profile it
looks like a variable but it's not it's
actually a thread safe function a thread
safe pure
function so thread safe pure functions
can be bound to nodes on your animation
graph a lot of people probably don't
know that but you can and inside of here
you'll see that he's interpolating the
static local offset not the static
rotation offset that's actually
something that I
think I should probably do so I could
actually
uh do
that
probably yeah I think that's fine
if there's any problems with it
then we'll address
them so for the most part the ik static
local offset and ik static rotation
offset are the only two things that
you're actually going to be uh using
take note of these curve values because
you might need those for some reason in
some case I don't know why but maybe you
do but anyway
so going back over
here that's where the held object stuff
is getting
updated I'm going to go ahead and go
over the replication changes that I made
which aren't there's nothing special
about it so if I go back to the event
graph and I go to the KD weapon
add-on you'll notice inside of here that
I'm doing a switch has Authority so if
this is the server we're just going to
set uh this variable and then because
it's it has a notify attached to it uh
this is also going to get
fired uh if it's not if that means it's
a client and if it's a client it's going
to call this uh server
RPC and that's going to have the server
fire this so the reason why I did that
is because from what I've been told uh
through some courses that I've taken
server
rpcs don't get called from the server so
if you're the server it's pointless to
call a server
RPC I'm assuming
it uh creates unnecessary traffic on the
server if you do that or something I
don't know anyway I'm just going to take
their word for it they said it's
pointless so I'm not going to do
it uh I may have made some changes over
here but you'll notice that this whole
graph is a lot cleaner
now and so that basically reflects the
unarmed custom one that I have set up
over here as well
so the live R targeted character add no
input yeah so that's an easy one
basically on the uh child blueprints I
wasn't calling the parent begin play uh
add call to parent function uh you need
this
or else the begin play on the uh
character right here will never fire
also that brings me back to this I
forgot to cover this so for the held
object offset to work properly I need a
reference to
the offset where it was where it began
from and so on begin play I'm just save
I'm just storing the offset that it had
when it first spawned
in and that allows me
to properly
offset the held
object somewhere in
here I don't know why I have this under
live targeting I'm actually going
to put this under held
object so under the update held
object offset I'm getting that reference
and I'm just adding whatever offset it
is that that was uh created for the
location and
rotation and then I'm just setting that
relative transform on that held object
that's all I'm
doing and so as I told you
before whenever you go to comp compile
this for a build remove this and on the
generic retargeter event graph remove
this I'll test this later to make sure
there isn't any problems uh with doing
it this way like any bugs or whatever um
there shouldn't be
but who
knows oops I got quit doing that live
retargeted hand offsets were not being
replicated because they were only being
updated on the server right so that was
fixed and I kind of went over that
already even if you didn't realize it
but on
the let me just go back to let me just
close all other tabs and I'll just open
this back
up and so basic basically I was off of
this I was calling
the I was calling this right here off of
that and so it was only executing on the
server uh these notifi these rep notify
functions get executed on on all clients
including uh the
server and the dedicated server if
there's a dedicated server uh then it'll
also get called on the dedicated server
so in most cases you don't do stuff like
uh like this on the dedicated server I
think as far as cosmetic if it's just
cosmetic you w do it but in this case
this isn't just cosmetic it doesn't need
to be on the dedicated server uh and the
reason why is because of sockets we
we're attaching things to sockets and so
uh I I believe that this dedicated
server needs to keep track of that
I could be wrong about that I I'll
rethink that at a later date I'm not
going to put too much thought into it
right now but uh maybe we could still
get away with that without needing that
but if we ever needed the location of a
socket from that skeletal mesh then the
dedicated server would have no access to
it you would not want to trust a client
with the location of something uh which
is why you would need this to be ran on
the dedicated server if that were the
case
so yeah live retargeting not being right
so that basically uh sums it up guys
um you should be familiar enough with
this other stuff by now what I'm going
to end up doing is after this is uh
stabilized a bit more I'll end up doing
a full-blown video where I walk you
through the entire process of bringing
your own character in here and setting
it
up and I'll probably be doing that here
pretty soon actually I'll see you the
next video

================================================================================
ARQUIVO: Unreal Engine 5_ GASP DAO - Precise AimOffsets (Coming Soon) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

A breakdown on what this entails, as well as what can offset it, and some approaches to mitigating that which will be coming in future updates.

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

=== TRANSCRIÇÃO ===

all right uh so ignore the arm issue
there I've butchered stuff in order to
reduce all the different things that
would cause uh this to be offset and
I've messed some other stuff
up so the blue is where the air barrel
is pointing straight down the barrel and
uh from the end of the barrel and the
green is pointing from the end of the
barrel to the center of the
screen and the number on the top left is
the degree and radians uh that
the that those two are off those two
[Applause]
vectors and obviously whenever we're
whenever we're turning like this it's
going to be off a lot because uh of the
fact that the center of the the
character is still aiming and the or
still facing the opposite direction
um but even when turning and uh turning
and
shooting it's still pretty
accurate it's less uh than like uh it
can go up to about 4° but
and because the arm is moving a lot and
we're overlaying this one to Locomotion
it is a bit more off when pointing up
and
shooting and it's about the same one
pointing down and shooting now the
lean their lean actually makes this a
lot worse I'll show you
so the lane causes the uh whenever
you're turning in pointing it causes the
aim offset to point
down uh into the
right
um yeah so there's that
what else uh affects this well The
Recoil for one affects
this so if I hook up
the if I hook the The Recoil back
up then The
Recoil will have an effect on it
it may not be super
obvious but if you shoot again while
you're still recovering from The Recoil
obviously you're going to uh have more
of a an of an
offset now there's something else that
also adds to this so if we want to add a
breathing over the top of
this if we add breathing over the top of
this this will make it more inaccurate
so you'll see
it if if that was a Target in the
distance though uh the bullets would be
and you aiming dead center uh the entire
time the bullets would be sprayed out
around it uh in a
circle all up and down probably more or
less so
how did I achieve this
well there's something you need to know
um so the blend space method that I was
using
before it doesn't really work that great
even though that I was applying it uh in
mesh
space I'm not 100% sure why actually but
the aim
offset uh seems to actually be where
it's at
so I didn't want to use the aim offset
before because I I thought that it was
uh well the blend space had more
features uh for preventing snapping when
uh turn uh cycling back around from one
side to the to the other that's the
reason why I went with a blend space
because with a blend space it's a little
bit more uh it's a little bit easier to
control that uh in my opinion but maybe
it was just the settings I had at the
time I don't know
now something else that's also going to
affect accuracy is smoothing and weight
speed uh you do want that though to be
honest if you don't have that then it
will snap instantly from one side to the
other whenever uh it wraps back
around and so you'll see
now with all that combined I'm on
average
that decreased to the accuracy on
average by probably
about
150% or more 150 to maybe
300% but it's still I mean it it brought
it from about3 right here
um to
if you're firing quickly in
succession I guess it didn't make it
that inaccurate but it depends on the
timing of things too so if you're just
[Applause]
spraying then you could be far off which
actually that's probably what you want
anyway adds realism to it because you
are running
so you could be up to 5 degre off here
so how did I achieve this other than the
fact that I used an name
offset well I made I redid
these uh all of these right here and I
did them in a very specific way now why
didn't I use an name suep well um
I'll be honest uh so an ALS his aim
sweep is just absolutely perfect I don't
know how he got it so perfect but it's
just absolutely perfect uh from pointing
up to pointing down it's just absolutely
perfect but when I've tried to make it
with few Keys I've tried to make it
where I just make the center one I make
the looking down one and I try to make
the looking up one and then I try to let
it interpolate between them uh but it
doesn't interpolate uh well whenever
you're
moving uh whenever you're going from
like aiming up or down it's like
swerving all over the place it's like
swerving all over the place um and it's
offsetting and it's not pointing in the
right direction when you do it this way
uh it seems to interpolate properly I
don't know why uh it interpolates
properly here but not on an anim graph
um but for whatever reason that seems to
be the
case so doing an using an aim offset
like this where you just make this this
this and you make all of
these that seems to be the best approach
and I'll go ahead and
I'll show you
exactly what I mean by this so when
you're making these you don't just wing
it and Eyeball it
um in a lot of programs uh like for
example
iclone um an
iclone actually I shouldn't say a lot of
programs in some programs like iclone uh
you don't have an orthographic camera so
you can't like you can't flatten things
so that you can straighten them out
perfectly and unreal and in cascader and
in blender and in Maya and those
programs you can
uh and I think I made these in
iclone
so no I made them in here but I made
them with the FK control rig I didn't
have an
uh I didn't have a custom control rig at
the
time so I'm going to show you if I go
into the front
view and you look at this it's almost
pin Point accurate actually it's a
little off I'm just going to fix
that and I like to line it up against
that
line so that
it's
perfect and then I go into the next View
and what I do in this case is I select
the
mesh and I uncheck visible and then I
type in ik and scroll down until I see
the hand R
ik and now I can uh rotate it and such
if I need to but this looks pretty dead
on you can always uh line something up
against one of these lines on the grid
in order to confirm
that
and then I go into the top view and
actually I don't know how this got
offset it wasn't offset
before and I try to make sure that this
is
is pretty accurate running down there
and so again I line it up with one of
these grid lines uh just to make
sure and that's pretty much it that's
what I did with all of
them so if we go into one of these other
ones for example the see up and I open
that level
sequence and I zoom
in again something caused this to offset
I don't know how
but what I do is I line it up just like
that so that it's riding right up
against that grid line so I know it's
straight and this is 90°
up and that's the reason why I needed
that there's no like 45 degree thing in
here or you know like there's no like um
Gizmo that you can put on the screen
that gives you your degrees from so such
and such if that were the case it would
it would probably be a bit easier to do
degrees between 0 and 90 but since there
isn't 90 is kind of like the goto uh
since it's easy to to line it up against
these grids and these different
views and actually it looks like this is
uh offset rotated a little bit I'm
pretty sure that I centered all of these
like I I made sure all these were
centered so I don't know why this might
be the baker I've told y'all guys
there's problems with their Baker in
here uh it does offset things that's why
I don't like uh doing stuff in
here I'm wondering if that might have
been what happened either that or I just
simply overlooked some things on some of
these that's also possible
but
yeah it's I think that's pretty pretty
straight
oops yeah
so anyway and then after that you drop
them in your aim offset and you plug
your aim offset
in so yeah not bad I think that made it
a little bit more
accurate uh the the ones pointing down
might actually be off um it looks
like no maybe not it's just the running
the act of running uh tends to throw
things off is what it
is anyway I just thought I'd share that
with you guys uh I will be uh working on
redoing all these and setting them up as
AIM offsets now that I know that it
works with Aim offsets so the problem is
basically is on the ANM graph we have
this
Locomotion
and The Locomotion is we're layering
over the top of it and so for example
when we're running aiming we might be uh
blending some mesh space on the pelvis
and Spine and that mesh space on on the
pelvis and spine it does offset uh have
an offset effect on the
uh on the
aim so let me see here if I
can
uh show you
this so if I just set the spine to
Overlay it's going to look funny but it
might actually be more accurate
let's
see I can't tell if that's more accurate
or not I think it is a little bit more
accurate
but it makes it look funny obviously but
yeah so now obviously looks really
funny that actually somehow made it
worse no I don't think
so so
anyway when we're
overlaying on
this it will offset the
spine and that can have an effect on uh
the
aim yeah so it does have a small effect
on
it uh mostly when looking up it seems
not when looking
down so that kind of makes sense though
uh if
you so on this this is fine because I
want the left arm to swing uh that's why
I have it set to base
um right here if I set this
to 25 for example this will add
secondary motion to the hand but it'll
also make it more
inaccurate you
see that just made it really
inaccurate so um you are getting a lot
of that motion back on the arm but
you're sacrificing accuracy when you do
that even if it's only
0.1 it will have an
impact on
accuracy now you could overcome some of
this
by creating an
offset by offsetting the aim
offset and that would happen in
well you would do it under the function
get
AO and you could just add a static
offset right here
now because of anatomy and the nature of
anatomy let me find this real quick and
take this off because of the nature of
anatomy even when we have ACD on this
guy you see um
if we say we just go over here to this
uh widget thing and we switch characters
uh because
of
anatomy uh it must already be up yeah
it's hiding behind this because of the
nature of anatomy these are gu these
guys are not going to be aiming in the
correct
direction and so you'll see how far off
they are
so there is one way to do this and I
will do this for all the characters um
so that I can try to get them as
accurate as
possible but let me show
you
so let's just say I want to do it for
this guy right here
specifically let me just open up the
widget
so I'm going to do it for this
guy just to show you so I can go to the
mesh and go to oh go to the Manny mesh
and go to the generic retarget it's also
under your blueprints uh retarget
characters folder it's this thing right
here and if you select this it holds all
of their
information and you can see which ones
they're using uh this is going to be the
ufn to uf5 one right here here uh which
is under the u5 mannequin
Rigs and you can open this up and I made
a separate one for the female because
the female has a different Anatomy she's
going to have different
offsets so uh these offsets will be
Anatomy
specific and you'll see that his hands
already look off uh and the reason why
is because I have offset them already uh
for hand
placement uh so this may be something
that you want to do on
a
uh I might set up a data asset style
thing for modifying uh both uh yeah for
modifying these offsets right here
and that should allow us to do that
without having to
actually add offsets to this you
see so the offsets will be actually off
setting things on the ik
retargeter so if I go to the asset
browser and let's see if I let me find
this for the pistol so I can try to get
the pistol one so I want the uh I want
this animation right here so I'm going
to copy its
name and I'm going to load this up
and I don't think you can I don't know
you might be able to let me
see uh so if you have sockets on here uh
you can't see it and so you can't
visualize the weapons in their hand I
wish you could um unfortunately it
doesn't seem like that's something you
can do which is going to make this
really
difficult because what we we need to
do is we need to go into this side view
here and I'm going to turn off the
postprocessing that's how you do that by
the way in case uh any of you guys uh
don't like that me being one of
them so you could blend it to source but
I really don't advise that guys it
causes other problems if you do that
because the anatomy of these characters
are
different I'm wondering
though if I could blend a source and
then
like do uh my rotational offset on this
yeah so this doesn't have an
actual grid thing like that other one
that this is going to make it difficult
I'm not sure how realistic is this is
going to be guys um I was thinking maybe
we could modify in here like this and
try to get it pinpoint but it doesn't
look like that's going to be the
case even if you wanted to eyeball it
inside of here I don't think you're
going to be able to so what I would
probably suggest
instead is do it like this I paused I
unpaused and then I eject
and you can clearly see in here that
he's aiming up if I go to the let's see
if I can find him where you
at if I go to the right View and he
disappeared again you can also select
them and press F uh and it should Center
on them but it's hit or miss with
that so now that we're that we can
actually see him holding the gun we can
actually try to line it of course
obviously he's moving around a lot which
makes it even more
difficult
so let's just
say I want him to hold it
sideways like a
gangsta right no uh
so it's it's really going to be a bit
difficult doing it this
way and
it's hard actually for me to tell
uh which way this should be facing
because it it might not be the case that
you want it to face
forward like you don't you probably
don't want it to be facing uh
straightforward but let's go ahead and
shoot and you'll see that's already uh
much more accurate so it needs to come
to the uh let's
see oops one second let
me and now I'll pause it and let me go
back into perspective
View and
see okay so it looks like actually it
needs to come to the right I
let me just uh take these degree offsets
off of here and just leave four degrees
right here and see where we need to go
from
there and so yeah that's quite a bit off
and you can
look for there let me show you something
else
though this will be in the actual
project uh next
update but what we can do is we can hook
up this
one uh about
three and three
actually I think it's closer to
four and
four so let's just try
three3 to angle it
inwards and it needs to be angled down
[Music]
more yeah so we're not going to be able
to get it
perfect but you can try to get it
perfect from a standing idle
position and that should probably be
enough
[Music]
so let
me hook this other one back
up and test it now and see
actually it looks like it still needs to
come
over to the left more interesting
because I thought it was pretty accurate
but apparently
not let me try4
yeah and so if I made it anym it'
probably be
-4.2 and you actually have to delay
between
recoils let it settle
otherwise you're going to get an
inacurate an inaccurate
result we could try 4.5 I guess I think
that's going to be too
much I do have breathing on here too so
I wouldn't go too overboard with trying
to get that perfect
but yeah that's basically going to be
the workflow of how this operates and
I'll have all these guys uh pre offset
in here
um like I said I will more than likely
create a data asset that stores this
data and this all will be in the the
next update hopefully if I have time to
work on all of this I may not have time
uh to work on all this so if I don't get
time to work on to on this until next
weekend then it may be that I might just
patch some of the bugs in the current
release and then maybe the next weekend
after that I'll release this one but as
soon as I get this uh accuracy down
then I will probably work on setting up
a first person
camera so all right I'll see you guys
later

================================================================================
ARQUIVO: Unreal Engine 5 - GASP Dynamic Additive Overlay (Overview v1.17) (English_ASR)
================================================================================

=== DESCRIÇÃO ===

I tested the Replication using SmoothSync, It is not included but was needed to properly test that things were replicating.
SmoothSync: https://youtu.be/a2EQLA7sa9w?si=11RMeZDTQ9ejoFyZ

BuyMeACoffee: https://buymeacoffee.com/j0hnc0nn0r

Release Video: https://youtu.be/upWIKxX9KsE

Project Files: https://ko-fi.com/unrealdevop

Join our Discord To Stay Up To Date on the Project and Future Videos: https://discord.gg/38ceaJ67Eu

GASP_DynamicAdditiveOverlay(1.17):

Replication:
Projectile 
Overlay State
Aim Offset
Montage Example
Replicated Traversal
Replicated Other States and Variables

Fixes:
Improper Replication of Overlay 

Additions: 
Added Simple Reload Example
Redid the approach to attaching Weapons on Live Retargeted Characters
Displaced All Live Retargeted Character Hands to properly hold weapons
Weapon Key Changes (1-3 now switched between weapons and Unarmed)

00:00 Intro
01:48 Replication
02:39 Known Rep Problem
03:50 Multiple Slot Solution
14:20 More Replication Notes
16:58 Layering Montages
18:15 Live Retargeting Changes and Refactoring

=== TRANSCRIÇÃO ===

all right guys uh so I'm back with
another video I'm just going to give you
a real quick update on this I did change
the way that this
fires um I'm going to go ahead and show
you
uh so the pistol is going to be off
because the pivot is is different than
the
rifle so I can only get one of these
right um and the
so I still need to do some work on those
too but yeah I'm probably going it
you're probably going to have to
reorient
the uh origin of that in order of the
pistol to align it with the rifle
otherwise they'll both be off and I'll
have to try to find a median between the
two you know so I may fix that at a
later date but I would have to redo all
my other animations uh the pistol
animations in order to fix that and I
just don't have time this
[Music]
[Applause]
weekend so I may fix that uh in the next
[Music]
update yeah that was a bug uh I may have
to look into fixing that as well I'm not
sure exactly what just caused to that
where where the arm swung
around yeah okay that's a
bug sorry guys I'll have to fix that
next update um there's a few other bugs
too that I'll have to fix
later so right now I do have the smooth
SN uh plugin it's $20 on the marketplace
I had to use that in order to
uh test my replication the plugin will
not be included in the project because
it's a Marketplace asset that costs
money
but but yeah so you'll see the uh
projectiles are in fact replic
uh
so dedicated server there are there is
some problem with it if somebody knows
what causes this let me
know and so you'll see that the uh
projectile is spawning in the wrong
place I don't know what's causing it
so
yeah oh that's interesting that doesn't
seem to
be replicated uh I might have to uh try
to replicate that I
guess so I'm going to go over some
things oh yeah I didn't show you this
but let me go ahead and show you
this so
[Music]
that's the rifle reload and the pistol
reload I did not modify these for these
weapons these are Lyra reload animations
guys I have not modified them I might
modify them and fix them to make them
look more appropriate later but right
now I'm not going to worry about
that so I'm going to go over what I did
here and
here uh so this prevents the feet from
actually being Chang to buy anything
that's played on this and all it's
doing uh this stuff is not necessary
actually I don't know why I had that
there I think I might have been testing
something and forgot it was there uh but
yeah anyway I'm just uh the virtual
bones these three bones right here are
being taken from this right here
yeah so actually ignore that I am going
to remove that that would I did have
this over here hooked up right here and
in that case it would
work yeah we could still make use of
that but we' have
to we would have
[Music]
to paste this right
here
yeah
so that
[Music]
will get the feet from this
before the Montage was played and it'll
make sure that the feet stay where it is
in The Locomotion animation which he may
be in the idle pose for example um and
it'll make sure his feet stay there that
way when you're playing this his feet
won't be offset from where they are uh
if you don't want this to uh be affected
to affect the Montage that's playing you
can either
just uh bypass this from the post
slot and just don't layer the pre-s
slaught onto the virtual bones or you
can disable ik on the
animation I'll try to think of a better
approach to
this but this is a slight kind of
bottleneck and I'll explain to you
why so when we play when we need to play
something on the upper
body we we need to be able to blend out
of
this but we can only blend in and out of
the source which is the overlay State
and so the motion matching on the lower
body it never Blends
out and so whenever this starts blending
out
it this right here causes a
conflict with this when it's blending
out and it causes Oddities
now the approach that I'm using here is
actually used in Lyra uh that's actually
where I got the ideal
from and this is how they overcame that
problem as
well
so if you open up the reload animations
you'll see I'm playing on the pre-
layering upper body slot and the upper
body slot and that's because if I don't
it'll only blend out in and out of uh
this right here and and this will cause
problems with that when it's blending
out it'll jerk and look real Snappy and
that's the reason why we're having to
play those on uh two slots
um
so yeah just to show you
again so it looks smooth there
but if I just just bypass
this you'll get to see what it looks
like you see how jerky that
is it didn't really
look bad on that one but on this one it
the the way it Blended out it was really
bad
[Music]
yeah so it doesn't look bad on the rifle
but it looks bad on the
pistol you could also
adjust
the end of the animation where it ends
and you
could and you could stop the animation
right
here and that is
1.65 and if you do
that and you don't play it on that slot
you only play it on the upper body slot
that might fix
it so that it looks smoother
no it doesn't fix it so yeah I don't
know what to tell you about that guys uh
this is going to be the only fix for
that that I know will work for
now I'm just going
to oh I modified the wrong one didn't I
[Music]
yeah there we
go yeah that's where I stopped that one
at so sorry I'm kind of like zoned out
today
let me
see so we would want
to
probably at
1.6 so it was at
2.0 and now we can test and see if that
will
actually fix the
problem it'll probably make it look
smoother regardless especially whenever
running and uh
reloading
no yeah so we're going to need two slots
guys I figured as much
that's going to be the only way to get
around that problem so basically and
you're not playing these additively if
you do need want it to be an additive
then on this slot it can't be an
additive uh you need to apply this
normally and then if you want you can
play on the upper body additively but in
actuality since we're layering you don't
need to play those as additives
so that's why I did that like I said uh
right here I am uh layering the pre-s
slot this right here before we play
these montages I'm getting the virtual
bone positions and putting them where
they are on The Locomotion animation
what that does is whenever we apply leg
ik later
on uh
the leg
ik will place the legs in relation to
where they are on on the lower body uh
the motion matching
Locomotion and not on where they are in
the
Montage and so what that does is it
prevents the feet from moving where they
are if you're playing a montage if you
want to bypass that you can either just
connect post slot into base pose or you
can just disable ik uh from your Montage
so you can add a
metadata
disable ik right here and if you want to
disable only hand ik you can just add a
disable hand ik metadata on it and I'll
show you that now so I did modify that
portion of it if you go to the aim
offset you'll see that I added this
right here
so if this or
this is greater than zero then that will
be the alpha whichever one of these is
greater than zero will be the
alpha uh disable ik takes precedence
over disable hand ik so if you say
disable ik you're disabling all ik hand
in leg uh otherwise you can just disable
hand K without having to disable leg ik
I might add a leg ik one specifically
for leg ik kind of like that later on
but
um it's not a bad ideal actually but I
didn't really need it for
now
so I replicated a lot of stuff here you
can go through and look at how I did it
uh it I may have to revive
some of this later on to make it a
little bit better maybe a little bit
more
responsive so I know in a lot of cases
what people do is on the client if it's
the client and this is locally owned
then they'll just go ahead and have the
client set his value to whatever and
then they'll have the server replicated
to everybody else uh right now all I'm
doing actually is I'm just having if the
client if it's a client whoever calls
this uh has to tell the server and then
the server will replicate it back to
them and everybody else that's how I
have it set right now but in some
situations you don't actually want it to
be like that because then there's
latency on the client uh so I may revise
some of this later on in fact I'll most
definitely revise some of this later on
so that it takes stuff like that into
consideration I am aware that that's a
common technique and a common approach
to that and that and some of this that I
have set up the way that I do is
probably going to cause some kind of
latency problems but I'll fix that later
on um now the guy that made the smooth
sync plugin I told you about on the
marketplace it's $20 if you want it uh
he replicated the uh base aim
rotation and inside of here actually I
replaced that with the base aim rotation
uh so I was actually using this the get
base aim rotation I don't know he says
it's not replicated um it doesn't say
it's replicated uh maybe it's not
replicated but I didn't have any
problems using just this uh he
replicated it and used this one so maybe
there was a reason why so that's what I
did I just kind of copied how he had it
set up
um that's the only thing I really copied
from from him so some of the stuff in
his may actually be done more
appropriately than mine or maybe it
isn't I don't know uh I guess I would be
up to you to
decide like I said I will revise this
later on this whole replication thing
but everything is replicated in here uh
the strafing the aiming blah blah blah
uh so on and so
forth now in
the uh on the event graph let me go to
the event graph
I have this set up this is kind of like
a generalized uh play layered
montage and if you check uh disable
movement it'll disable movement after it
starts um so I'm using that for the
dance one and for the reload right
[Music]
here I am replicating the projectile
inside of here so I'm replicating the
movement and uh yeah it's set to
replicates now whenever you're firing it
from a dedicated server uh there are
problems with its location I think I may
have shown you that I don't know but
I'll go ahead and show you
again so you'll see it's
offset
down um but when that's the dedicated
server if you play it from a client as
you can see client one if you play it
from a
client on this one you'll
see it's in the right location that is a
known issue I will look into that later
I don't know what's causing that if
somebody else does let me
know I REM removed all that other stuff
that I had on here so if we go over to
the widgets and we open this up and we
just select one of these and just double
will click it you'll see somebody else I
can't remember who um I'd give you
credit if uh if I remembered but they
asked me why don't I just attach this uh
rather than doing it the way I was and
it actually makes more sense this way
because it prevents me from having to go
into each and every single one of these
and change the logic and it makes it
easier for you guys as well so that's
what I did so whenever you switch over
to one of these guys uh it'll just re
Target it and because now I am actually
actually
improved the weapon stuff on here and I
made sure that all this was replicated
properly some of it was not replicated
properly so I replicated it properly um
to the best of my knowledge I'll have to
go back and I'll look over it and
refactor it at a later
date but you'll see I'm using that
replicated base aim rotation right here
uh for the sake of where we fire it or
the rotation at which we fire it from
the actual held
object uh socket location muzzle and
forward Vector is what dictates the
location I don't know why that doesn't
work for a dedicated server but it does
not um it passes that on to the clients
and says hey this is the location you
need to spawn this at
this may be a bad
uh a bad approach I'm just assuming that
it's passing in
a
location but I'm probably wrong uh if
it's passing through passing the anim
montages and sound around on the server
then this is not the right way to do it
that would be really heavy if that was
the case I didn't even think of that at
the time so that might be something I re
refactor just simply because it's going
to cause a lot of traffic on the server
uh just letting you know
um so yeah I think that pretty much
covers it guys I'll give this uh out and
maybe in the next one I will add that
Idol uh a new Idol to this with some
Transitions and and I'll see you in the
next video